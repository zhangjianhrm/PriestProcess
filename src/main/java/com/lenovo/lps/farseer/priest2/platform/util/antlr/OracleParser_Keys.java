// $ANTLR 3.1.3 Mar 17, 2009 19:23:44 Keys.g 2013-11-19 14:17:25
package com.lenovo.lps.farseer.priest2.platform.util.antlr;

import org.antlr.runtime.BitSet;
import org.antlr.runtime.FailedPredicateException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.runtime.tree.RewriteRuleSubtreeStream;
import org.antlr.runtime.tree.RewriteRuleTokenStream;
import org.antlr.runtime.tree.TreeAdaptor;

@SuppressWarnings("unused")
public class OracleParser_Keys extends Parser {
    public static final int SQL92_RESERVED_DECLARE=107;
    public static final int D_=12;
    public static final int BIT_VK=357;
    public static final int PARAMETERS_VK=261;
    public static final int SIGNTYPE_VK=337;
    public static final int DOUBLE_ASTERISK=57;
    public static final int DEBUG_VK=188;
    public static final int COMMENT_VK=238;
    public static final int NESTED_VK=229;
    public static final int PRECISION=626;
    public static final int JAVA_VK=254;
    public static final int CURRENT_USER_VK=198;
    public static final int SEARCH_VK=503;
    public static final int COMPATIBILITY_VK=445;
    public static final int SERVERERROR_VK=226;
    public static final int XMLQUERY_VK=477;
    public static final int SELECT_STATEMENT=663;
    public static final int E_=13;
    public static final int TABLE_EXPRESSION=683;
    public static final int PERCENT_ROWCOUNT_VK=280;
    public static final int PARALLEL_ENABLE_VK=202;
    public static final int VERTICAL_BAR=78;
    public static final int DIMENSION_VK=400;
    public static final int EXECUTE_VK=295;
    public static final int QUESTION_MARK=66;
    public static final int ELEMENT=745;
    public static final int SAVEPOINT_NAME=594;
    public static final int BLOB_VK=338;
    public static final int LINK_NAME=616;
    public static final int SQL92_RESERVED_EXISTS=117;
    public static final int IS_NOT_A_SET=724;
    public static final int CHAR_CS_VK=451;
    public static final int AT_VK=433;
    public static final int PLSQL_RESERVED_VIEWS=169;
    public static final int F_=14;
    public static final int POSITIVEN_VK=321;
    public static final int EXIT_VK=287;
    public static final int PARAMETER_NAME=592;
    public static final int CARRET_OPERATOR_PART=73;
    public static final int LOGIC_EXPR=681;
    public static final int SQL92_RESERVED_HAVING=125;
    public static final int UNDERSCORE=8;
    public static final int SUBMULTISET_VK=418;
    public static final int PLSQL_NON_RESERVED_MODEL=174;
    public static final int IS_OF_TYPE=729;
    public static final int SEED_VK=396;
    public static final int CALL_VK=207;
    public static final int VALIDATE_VK=240;
    public static final int C_VK=256;
    public static final int NUMERIC_VK=364;
    public static final int REJECT_VK=381;
    public static final int ATTRIBUTE_NAME=593;
    public static final int BOOLEAN_VK=348;
    public static final int RULES_VK=408;
    public static final int HOSTED_VARIABLE=629;
    public static final int HASH_VK=205;
    public static final int ROUTINE_CALL=630;
    public static final int SQL92_RESERVED_DELETE=109;
    public static final int QS_ANGLE=44;
    public static final int G_=15;
    public static final int XMLFOREST_VK=469;
    public static final int SUBPARTITION_VK=317;
    public static final int SQL92_RESERVED_UNIQUE=165;
    public static final int SIMPLE_INTEGER_VK=328;
    public static final int LIKE2_VK=420;
    public static final int SELECT_LIST=672;
    public static final int DETERMINISTIC_VK=191;
    public static final int UPDATE_STATEMENT=664;
    public static final int ALIAS=588;
    public static final int SEQUENCE_NAME=607;
    public static final int EVALNAME_VK=465;
    public static final int SQL92_RESERVED_ORDER=147;
    public static final int NATURALN_VK=327;
    public static final int MONTH_VK=376;
    public static final int FUNC_NAME=506;
    public static final int ORDINALITY_VK=485;
    public static final int SQL92_RESERVED_THEN=161;
    public static final int SELECT_OPTIONS=671;
    public static final int SUSPEND_VK=221;
    public static final int ORADATA_VK=266;
    public static final int XML_VK=387;
    public static final int COMMIT_VK=297;
    public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=319;
    public static final int MEASURES_VK=404;
    public static final int REAL_VK=359;
    public static final int SQLDATA_VK=268;
    public static final int LEFT_BRACKET=80;
    public static final int NOSCHEMACHECK_VK=475;
    public static final int ROW_VK=422;
    public static final int WORK_VK=298;
    public static final int TREAT_VK=453;
    public static final int PREDICTION_FUNCTION=744;
    public static final int LAST_VK=413;
    public static final int EXCLUDE_VK=393;
    public static final int AUTHID_VK=196;
    public static final int SUBQUERY=670;
    public static final int WHERE_CLAUSE=634;
    public static final int RIGHT_PAREN=56;
    public static final int SESSIONTIMEZONE_VK=344;
    public static final int HAVING_CLAUSE=695;
    public static final int COMPILE_VK=242;
    public static final int SPECIFICATION_VK=203;
    public static final int LEFT=179;
    public static final int DOT_ASTERISK=675;
    public static final int A_=9;
    public static final int ARGUMENT=591;
    public static final int SQL92_RESERVED_WITH=172;
    public static final int SQL92_RESERVED_DESC=110;
    public static final int BEFORE_VK=212;
    public static final int OPEN_VK=310;
    public static final int PLSQL_RESERVED_IF=127;
    public static final int CASCATED_ELEMENT=627;
    public static final int FIRST_VK=384;
    public static final int CUSTOMDATUM_VK=265;
    public static final int AUTOMATIC_VK=412;
    public static final int NOORDER_VK=497;
    public static final int PLSQL_NON_RESERVED_PIVOT=176;
    public static final int TIMEZONE_MINUTE_VK=373;
    public static final int DAY_VK=377;
    public static final int OBJECT_VK=271;
    public static final int FLOAT_VK=358;
    public static final int OUTER=182;
    public static final int SQL92_RESERVED_VIEW=168;
    public static final int FOLLOWS_VK=228;
    public static final int NAV_VK=411;
    public static final int SQL92_RESERVED_ALL=86;
    public static final int B_=10;
    public static final int SQL92_RESERVED_GOTO=122;
    public static final int SKIP_VK=391;
    public static final int STARTUP_VK=218;
    public static final int AMPERSAND=54;
    public static final int BIT_STRING_LIT=39;
    public static final int CYCLE_VK=498;
    public static final int SQL92_RESERVED_TRUE=163;
    public static final int XMLCAST_VK=462;
    public static final int BINDVAR=67;
    public static final int RIGHT=180;
    public static final int SQL92_RESERVED_PROCEDURE=150;
    public static final int DISABLE_VK=211;
    public static final int INDEX_NAME=612;
    public static final int CLOSE_VK=312;
    public static final int SOLIDUS=61;
    public static final int PLSQL_RESERVED_START=157;
    public static final int DB_ROLE_CHANGE_VK=231;
    public static final int FACTORING=669;
    public static final int COLON=64;
    public static final int COLUMNS=710;
    public static final int SELECT_MODE=685;
    public static final int SQL92_RESERVED_GROUP=124;
    public static final int PLSQL_RESERVED_MODE=138;
    public static final int UNPIVOT_VK=402;
    public static final int MERGE_VK=380;
    public static final int C_=11;
    public static final int TABLE_ELEMENT=708;
    public static final int QS_OTHER_CH=51;
    public static final int PERCENT_ROWTYPE_VK=281;
    public static final int NATURAL=184;
    public static final int IGNORE_VK=416;
    public static final int UNARY_OPERATOR=733;
    public static final int UNBOUNDED_VK=449;
    public static final int INT_VK=368;
    public static final int OVER_VK=446;
    public static final int LAST_VALUE_VK=447;
    public static final int HIERARCHICAL=692;
    public static final int LEFT_VK=427;
    public static final int VERSION_VK=461;
    public static final int SAMPLE_VK=405;
    public static final int XMLCOLATTVAL_VK=467;
    public static final int OUT_VK=259;
    public static final int FULL_VK=425;
    public static final int PLSQL_NON_RESERVED_ELSIF=175;
    public static final int SQL92_RESERVED_LIKE=135;
    public static final int LIMIT_VK=244;
    public static final int CLUSTER_VK=199;
    public static final int FORCE_VK=239;
    public static final int SQL92_RESERVED_DISTINCT=111;
    public static final int RESPECT_VK=417;
    public static final int L_=20;
    public static final int CHAR_SET_NAME=619;
    public static final int PLSQL_RESERVED_EXCLUSIVE=116;
    public static final int QUOTE=50;
    public static final int LABEL_NAME=605;
    public static final int SQL92_RESERVED_OVERLAPS=148;
    public static final int PLSQL_RESERVED_RESOURCE=152;
    public static final int CONCATENATION_OP=77;
    public static final int MULTI_TABLE_MODE=707;
    public static final int LESS_THAN_OR_EQUALS_OP=69;
    public static final int WRITE_VK=303;
    public static final int LANGUAGE_VK=253;
    public static final int AUTONOMOUS_TRANSACTION_VK=284;
    public static final int COMMENT=83;
    public static final int SPECIAL_FUNC=751;
    public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=326;
    public static final int M_=21;
    public static final int REGULAR_ID=186;
    public static final int UNPIVOT_IN_ELEMENT=691;
    public static final int TIMEZONE_HOUR_VK=372;
    public static final int SQL92_RESERVED_PRIOR=149;
    public static final int EXCLAMATION_OPERATOR_PART=75;
    public static final int TILDE_OPERATOR_PART=74;
    public static final int PERIOD=41;
    public static final int MODIFY_VK=248;
    public static final int NATIONAL_CHAR_STRING_LIT=37;
    public static final int SQL92_RESERVED_VALUES=167;
    public static final int STANDARD_FUNCTION=734;
    public static final int SEQUENCE_VK=496;
    public static final int PRECEDING_VK=442;
    public static final int N_=22;
    public static final int BLOCK_VK=386;
    public static final int SQL92_RESERVED_DATE=106;
    public static final int SQL92_RESERVED_CREATE=103;
    public static final int SCHEMA_VK=216;
    public static final int ELEMENTS_MODE=689;
    public static final int WITHIN_VK=443;
    public static final int RESULT_CACHE_VK=192;
    public static final int XML_ALIAS=747;
    public static final int PERCENT_TYPE_VK=282;
    public static final int SQL92_RESERVED_INSERT=131;
    public static final int NOMAXVALUE_VK=501;
    public static final int XMLNAMESPACES_VK=474;
    public static final int INVALIDATE_VK=251;
    public static final int XML_COLUMN=746;
    public static final int SQL92_RESERVED_FROM=121;
    public static final int REFERENCE_MODEL_NAME=601;
    public static final int O_=23;
    public static final int CONTENT_VK=454;
    public static final int MAP_VK=274;
    public static final int SQL92_RESERVED_CURSOR=105;
    public static final int CURRENT_VK=448;
    public static final int CONDITIONAL_INSERT=709;
    public static final int HOSTED_VARIABLE_ROUTINE_CALL=628;
    public static final int PASSING_VK=470;
    public static final int UNTIL_VK=395;
    public static final int DIRECT_MODE=686;
    public static final int JOIN_ON_PART=680;
    public static final int SIBLINGS_VK=397;
    public static final int SQL92_RESERVED_THE=160;
    public static final int H_=16;
    public static final int INTRODUCER=82;
    public static final int ENABLE_VK=209;
    public static final int CURSOR_NAME=613;
    public static final int PROCEDURE_NAME=610;
    public static final int ID=620;
    public static final int SPACE=84;
    public static final int FROM_CLAUSE=674;
    public static final int CROSS=183;
    public static final int CROSS_VK=426;
    public static final int SQL92_RESERVED_TABLE=159;
    public static final int INCLUDING_VK=249;
    public static final int FOR_SINGLE_COLUMN=736;
    public static final int EXCEPTIONS_VK=243;
    public static final int EXPR_LIST=715;
    public static final int EXTRACT_VK=495;
    public static final int NOENTITYESCAPING_VK=476;
    public static final int EXPR=589;
    public static final int AFTER_VK=215;
    public static final int DISASSOCIATE_VK=223;
    public static final int TABLE_VAR_NAME=596;
    public static final int TIMESTAMP_UNCONSTRAINED_VK=336;
    public static final int ENCODING_VK=482;
    public static final int COMMA=60;
    public static final int SOME_VK=424;
    public static final int SEQUENTIAL_VK=389;
    public static final int FIRST_VALUE_VK=441;
    public static final int SIMPLE_CASE=738;
    public static final int HOSTED_VARIABLE_NAME=622;
    public static final int TYPE_NAME=606;
    public static final int SQL92_RESERVED_UPDATE=166;
    public static final int GROUPING_VK=414;
    public static final int IS_INFINITE=723;
    public static final int SQL92_RESERVED_BY=94;
    public static final int SECOND_VK=371;
    public static final int QUERY_NAME=603;
    public static final int I_=17;
    public static final int NOCOPY_VK=263;
    public static final int NOCACHE_VK=500;
    public static final int CORRUPT_XID_ALL_VK=305;
    public static final int HEX_STRING_LIT=40;
    public static final int AGGREGATE_VK=194;
    public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=743;
    public static final int CUBE_VK=398;
    public static final int PLSQL_RESERVED_IDENTIFIED=126;
    public static final int MODEL_EXPRESSION=735;
    public static final int DOUBLE_PERIOD=7;
    public static final int PLUS_SIGN=59;
    public static final int INCREMENT_VK=431;
    public static final int SCN_VK=401;
    public static final int COUNT_VK=488;
    public static final int PLSQL_RESERVED_SHARE=155;
    public static final int NOT_BETWEEN=731;
    public static final int J_=18;
    public static final int CHARACTER_VK=353;
    public static final int PLSQL_RESERVED_INDEXES=130;
    public static final int SQL92_RESERVED_AS=90;
    public static final int LOGOFF_VK=232;
    public static final int RANGE_VK=204;
    public static final int DELIMITED_ID=52;
    public static final int PLSQL_NON_RESERVED_UNPIVOT=177;
    public static final int OFF_VK=294;
    public static final int PACKAGE_NAME=599;
    public static final int MAXVALUE_VK=341;
    public static final int VERSIONS_VK=407;
    public static final int TRIM_VK=491;
    public static final int BINARY_FLOAT_VK=330;
    public static final int TIMEZONE_ABBR_VK=322;
    public static final int ASSIGN=702;
    public static final int TABLEVIEW_NAME=618;
    public static final int TIMESTAMP_VK=363;
    public static final int SQL92_RESERVED_OPTION=145;
    public static final int K_=19;
    public static final int TRUNCATE_VK=217;
    public static final int WELLFORMED_VK=459;
    public static final int GREATER_THAN_OP=76;
    public static final int PERCENT_NOTFOUND_VK=277;
    public static final int ROWID_VK=335;
    public static final int SQL92_RESERVED_REVOKE=153;
    public static final int ONLY_VK=314;
    public static final int MEMBER_VK=269;
    public static final int STRING_VK=340;
    public static final int XMLATTRIBUTES_VK=481;
    public static final int PIPELINED_VK=193;
    public static final int XMLTABLE_VK=478;
    public static final int QS_OTHER=48;
    public static final int PLSQL_RESERVED_CRASH=102;
    public static final int PARTITION_VK=318;
    public static final int GROUP_BY_ELEMENT=694;
    public static final int MINUTE_VK=379;
    public static final int IS_NOT_PRESENT=720;
    public static final int XMLSERIALIZE_VK=484;
    public static final int PERCENT_FOUND_VK=278;
    public static final int U_=29;
    public static final int SEPARATOR=38;
    public static final int JOIN_DEF=678;
    public static final int ROWS_VK=437;
    public static final int EOF=-1;
    public static final int DEFINER_VK=197;
    public static final int IS_PRESENT=721;
    public static final int EXCEPTION_INIT_VK=276;
    public static final int SQL92_RESERVED_SIZE=156;
    public static final int INTEGER_VK=367;
    public static final int TIMEZONE_REGION_VK=325;
    public static final int ASSIGN_OP=63;
    public static final int DEFAULTS_VK=486;
    public static final int SIMPLE_LETTER=65;
    public static final int IS_NULL=717;
    public static final int SHOW_VK=483;
    public static final int FUNCTION_ENABLING_USING=742;
    public static final int SQL92_RESERVED_PUBLIC=151;
    public static final int PLSQL_RESERVED_NOWAIT=141;
    public static final int CONVERT_VK=252;
    public static final int SET_VK=423;
    public static final int NOAUDIT_VK=220;
    public static final int CONTEXT_VK=258;
    public static final int PLSQL_RESERVED_NOCOMPRESS=139;
    public static final int INTERVAL_DATATYPE=625;
    public static final int RIGHT_BRACKET=81;
    public static final int LIBRARY_VK=257;
    public static final int STANDALONE_VK=458;
    public static final int MAIN_MODEL=697;
    public static final int EXPLAIN_STATEMENT=662;
    public static final int T_=28;
    public static final int ADD_VK=247;
    public static final int ANALYZE_VK=233;
    public static final int UPSERT_VK=406;
    public static final int SINGLE_VK=390;
    public static final int DECIMAL_VK=365;
    public static final int SMALLINT_VK=369;
    public static final int COMPOUND_VK=225;
    public static final int ROLLBACK_VK=309;
    public static final int AT_SIGN=62;
    public static final int W_=31;
    public static final int SEMICOLON=68;
    public static final int CONTINUE_VK=292;
    public static final int SQL92_RESERVED_ELSE=113;
    public static final int SQL92_RESERVED_GRANT=123;
    public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=101;
    public static final int SQL92_RESERVED_FETCH=119;
    public static final int REVERSE_VK=293;
    public static final int PIVOT_IN_ELEMENT=690;
    public static final int LEADING_VK=492;
    public static final int EXTERNAL_VK=206;
    public static final int ROLLBACK_SEGMENT_NAME=595;
    public static final int RIGHT_VK=428;
    public static final int IS_NOT_INFINITE=722;
    public static final int TABLE_REF=676;
    public static final int PERCENT_ISOPEN_VK=279;
    public static final int ORDER_BY_CLAUSE=703;
    public static final int PIVOT_ELEMENT=687;
    public static final int MINVALUE_VK=342;
    public static final int V_=30;
    public static final int LIKEC_VK=419;
    public static final int LEFT_PAREN=55;
    public static final int SQL92_RESERVED_ALTER=87;
    public static final int ROLLUP_VK=410;
    public static final int COLUMN_NAME=617;
    public static final int XMLPI_VK=466;
    public static final int PLSQL_RESERVED_COLAUTH=98;
    public static final int LOCK_TABLE_ELEMENT=713;
    public static final int INSTANTIABLE_VK=245;
    public static final int FOR_MULTI_COLUMN=737;
    public static final int CLOB_VK=332;
    public static final int PLS_INTEGER_VK=316;
    public static final int SAVEPOINT_VK=311;
    public static final int MAIN_MODEL_NAME=602;
    public static final int COLLECT_VK=436;
    public static final int DENSE_RANK_VK=434;
    public static final int XMLEXISTS_VK=460;
    public static final int Q_=25;
    public static final int BYTE_VK=329;
    public static final int ORDER_BY_ELEMENT=705;
    public static final int SQL92_RESERVED_INTERSECT=132;
    public static final int ASTERISK=58;
    public static final int PLSQL_RESERVED_LOCK=136;
    public static final int UNSIGNED_INTEGER=4;
    public static final int RECORD_NAME=614;
    public static final int AUDIT_VK=222;
    public static final int DEC_VK=366;
    public static final int CHAR_STRING_PERL=49;
    public static final int IS_NOT_NAN=718;
    public static final int MINUS_SIGN=6;
    public static final int OLD_VK=230;
    public static final int GREATER_THAN_OR_EQUALS_OP=71;
    public static final int SQL92_RESERVED_WHEN=170;
    public static final int NEW_VK=236;
    public static final int BULK_VK=299;
    public static final int P_=24;
    public static final int CACHE_VK=499;
    public static final int INNER_VK=429;
    public static final int REFERENCING_VK=213;
    public static final int ROUTINE_NAME=598;
    public static final int RESTRICT_REFERENCES_VK=286;
    public static final int MERGE_UPDATE=711;
    public static final int LOOP_VK=290;
    public static final int UNDER_VK=273;
    public static final int SCHEMA_NAME=597;
    public static final int TRAILING_VK=493;
    public static final int JOIN_QUALIFIER=679;
    public static final int MERGE_INSERT=712;
    public static final int IS_NOT_NULL=716;
    public static final int NCLOB_VK=331;
    public static final int NCHAR_CS_VK=438;
    public static final int S_=27;
    public static final int MLSLABEL_VK=350;
    public static final int UPDATED_VK=392;
    public static final int VARCHAR_VK=355;
    public static final int BODY_VK=201;
    public static final int YES_VK=463;
    public static final int LOCAL_VK=374;
    public static final int LIKE4_VK=421;
    public static final int SQL92_RESERVED_FALSE=118;
    public static final int REPLACE_VK=190;
    public static final int FUNCTION_NAME=609;
    public static final int SQL92_RESERVED_IN=128;
    public static final int NATIVE_DATATYPE=624;
    public static final int SQL92_RESERVED_IS=134;
    public static final int SQL92_RESERVED_WHERE=171;
    public static final int R_=26;
    public static final int IS_NAN=719;
    public static final int CHAR_STRING=43;
    public static final int QS_PAREN=47;
    public static final int NVARCHAR2_VK=339;
    public static final int BOTH_VK=494;
    public static final int CONSTRUCTOR_VK=267;
    public static final int XML_COLUMN_NAME=633;
    public static final int CONSTRAINT_NAME=604;
    public static final int SQL92_RESERVED_CONNECT=100;
    public static final int TRANSLATE_VK=490;
    public static final int DELETE_STATEMENT=665;
    public static final int CAST_VK=489;
    public static final int NOCYCLE_VK=385;
    public static final int SQL92_RESERVED_ON=144;
    public static final int GROUPIN_SET=696;
    public static final int WAIT_VK=304;
    public static final int OVERRIDING_VK=255;
    public static final int BFILE_VK=324;
    public static final int XMLROOT_VK=479;
    public static final int CHR_VK=487;
    public static final int SQL92_RESERVED_OF=143;
    public static final int SHUTDOWN_VK=224;
    public static final int IS_EMPTY=727;
    public static final int RAW_VK=345;
    public static final int NOT_EQUAL_OP=72;
    public static final int SELECT_ITEM=673;
    public static final int IS_NOT_OF_TYPE=728;
    public static final int SQL92_RESERVED_DROP=112;
    public static final int TABLE_REF_ELEMENT=677;
    public static final int FULL=181;
    public static final int PLSQL_NON_RESERVED_USING=173;
    public static final int CONSTANT_VK=275;
    public static final int SQL92_RESERVED_CHECK=96;
    public static final int SINGLE_TABLE_MODE=706;
    public static final int SQL92_RESERVED_NULL=142;
    public static final int PARENT_VK=227;
    public static final int PROMPT=85;
    public static final int BINARY_DOUBLE_VK=323;
    public static final int AGENT_VK=262;
    public static final int YEAR_VK=375;
    public static final int SQL92_RESERVED_OR=146;
    public static final int DSINTERVAL_UNCONSTRAINED_VK=333;
    public static final int UROWID_VK=320;
    public static final int BREADTH_VK=505;
    public static final int APPROXIMATE_NUM_LIT=5;
    public static final int DECREMENT_VK=432;
    public static final int IS_NOT_EMPTY=726;
    public static final int KEEP_VK=403;
    public static final int COLLECTION_NAME=615;
    public static final int XMLPARSE_VK=455;
    public static final int SERIALIZABLE_VK=302;
    public static final int SQL92_RESERVED_BETWEEN=93;
    public static final int ISOLATION_VK=301;
    public static final int PLSQL_RESERVED_INDEX=129;
    public static final int QS_BRACE=45;
    public static final int POSITIVE_VK=349;
    public static final int PRECISION_VK=361;
    public static final int XML_ELEMENT=750;
    public static final int ARGUMENTS=590;
    public static final int CUSTOM_TYPE=623;
    public static final int PIVOT_VK=388;
    public static final int PLSQL_RESERVED_TABAUTH=158;
    public static final int DATABASE_VK=210;
    public static final int VARCHAR2_VK=347;
    public static final int PLSQL_RESERVED_COMPRESS=99;
    public static final int SQL92_RESERVED_AND=88;
    public static final int QS_BRACK=46;
    public static final int SELF_VK=270;
    public static final int EQUALS_OP=79;
    public static final int SQL92_RESERVED_CASE=95;
    public static final int INLINE_VK=285;
    public static final int ANY_ELEMENT=631;
    public static final int NO_VK=464;
    public static final int TIME_VK=362;
    public static final int UNLIMITED_VK=383;
    public static final int GROUP_BY_CLAUSE=693;
    public static final int RAISE_VK=289;
    public static final int CHAR_VK=354;
    public static final int VECTOR_EXPR=740;
    public static final int NOT_IN=730;
    public static final int MERGE_STATEMENT=668;
    public static final int DDL_VK=208;
    public static final int FUNCTION_ENABLING_OVER=741;
    public static final int MODEL_RULE=701;
    public static final int SERIALLY_REUSABLE_VK=283;
    public static final int IMMEDIATE_VK=296;
    public static final int EXACT_NUM_LIT=42;
    public static final int DBTIMEZONE_VK=343;
    public static final int CANONICAL_VK=444;
    public static final int SQL92_RESERVED_ANY=89;
    public static final int INCLUDE_VK=415;
    public static final int DATETIME_OP=749;
    public static final int SELECTED_TABLEVIEW=682;
    public static final int NCHAR_VK=356;
    public static final int Y_=33;
    public static final int NULLS_VK=399;
    public static final int INNER=185;
    public static final int COLLECTION_MODE=684;
    public static final int RETURN_VK=288;
    public static final int TRIGGER_NAME=611;
    public static final int RELIES_ON_VK=195;
    public static final int PLSQL_RESERVED_MINUS=137;
    public static final int SQL92_RESERVED_DEFAULT=108;
    public static final int DEPTH_VK=504;
    public static final int SQL92_RESERVED_FOR=120;
    public static final int LOGON_VK=214;
    public static final int INDENT_VK=471;
    public static final int INSTEAD_VK=234;
    public static final int ITERATE_VK=409;
    public static final int PRAGMA_VK=264;
    public static final int ZV=187;
    public static final int DECOMPOSE_VK=439;
    public static final int HOUR_VK=378;
    public static final int X_=32;
    public static final int MODEL_COLUMN=698;
    public static final int VARIABLE_NAME=621;
    public static final int IS_A_SET=725;
    public static final int XMLAGG_VK=473;
    public static final int MODEL_COLUMNS=699;
    public static final int COST_VK=450;
    public static final int REFERENCE_VK=394;
    public static final int NOMINVALUE_VK=502;
    public static final int SQL92_RESERVED_INTO=133;
    public static final int CORRUPT_XID_VK=306;
    public static final int REUSE_VK=189;
    public static final int COMMITTED_VK=300;
    public static final int NATURAL_VK=370;
    public static final int NUMBER_VK=346;
    public static final int LOCK_TABLE_STATEMENT=667;
    public static final int REF_VK=315;
    public static final int LESS_THAN_OP=70;
    public static final int FOR_NOTATION=35;
    public static final int SEARCHED_CASE=739;
    public static final int XMLELEMENT_VK=456;
    public static final int SQL92_RESERVED_TO=162;
    public static final int LONG_VK=352;
    public static final int FOLLOWING_VK=440;
    public static final int ORDER_BY_ELEMENTS=704;
    public static final int CASCADE_VK=250;
    public static final int NAME_VK=435;
    public static final int PERCENT=53;
    public static final int PACKAGE_VK=200;
    public static final int VALUE_VK=430;
    public static final int SQL92_RESERVED_UNION=164;
    public static final int INSERT_STATEMENT=666;
    public static final int MODEL_RULES=700;
    public static final int LOG_VK=382;
    public static final int ENTITYESCAPING_VK=457;
    public static final int YMINTERVAL_UNCONSTRAINED_VK=334;
    public static final int NOT_LIKE=732;
    public static final int SQL92_RESERVED_END=114;
    public static final int COST_CLASS_NAME=632;
    public static final int AUTO_VK=452;
    public static final int DEFERRED_VK=308;
    public static final int EXCEPTION_NAME=608;
    public static final int DOUBLE_VK=360;
    public static final int PLSQL_RESERVED_CLUSTERS=97;
    public static final int IMPLEMENTATION_TYPE_NAME=600;
    public static final int SQL92_RESERVED_CURRENT=104;
    public static final int JOIN=178;
    public static final int SQL92_RESERVED_EXCEPTION=115;
    public static final int STATIC_VK=272;
    public static final int READ_VK=313;
    public static final int FORALL_VK=291;
    public static final int ANY_MODE=688;
    public static final int NEWLINE=36;
    public static final int Z_=34;
    public static final int RENAME_VK=237;
    public static final int SQL92_RESERVED_SELECT=154;
    public static final int INOUT_VK=260;
    public static final int SQL92_RESERVED_ASC=91;
    public static final int ASSOCIATE_VK=235;
    public static final int BINARY_INTEGER_VK=351;
    public static final int PIVOT_ALIAS=748;
    public static final int DOCUMENT_VK=468;
    public static final int HIDE_VK=472;
    public static final int BATCH_VK=307;
    public static final int SQL92_RESERVED_NOT=140;
    public static final int TYPE_VK=241;
    public static final int STATIC_RETURNING=714;
    public static final int FINAL_VK=246;
    public static final int SQL92_RESERVED_BEGIN=92;
    public static final int SCHEMACHECK_VK=480;
    public static final int STATISTICS_VK=219;

    // delegates
    // delegators
    public OracleParser gOracleParser;
    public OracleParser gParent;


        public OracleParser_Keys(TokenStream input, OracleParser gOracleParser) {
            this(input, new RecognizerSharedState(), gOracleParser);
        }
        public OracleParser_Keys(TokenStream input, RecognizerSharedState state, OracleParser gOracleParser) {
            super(input, state);
            this.gOracleParser = gOracleParser;
             
            gParent = gOracleParser;
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return OracleParser.tokenNames; }
    public String getGrammarFileName() { return "Keys.g"; }


    public static class create_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_key"
    // Keys.g:329:1: create_key : SQL92_RESERVED_CREATE ;
    public final OracleParser_Keys.create_key_return create_key() throws RecognitionException {
        OracleParser_Keys.create_key_return retval = new OracleParser_Keys.create_key_return();
        retval.start = input.LT(1);
        int create_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_CREATE1=null;

        Object SQL92_RESERVED_CREATE1_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // Keys.g:330:5: ( SQL92_RESERVED_CREATE )
            // Keys.g:330:10: SQL92_RESERVED_CREATE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_CREATE1=(Token)match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_key2268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CREATE1_tree = (Object)adaptor.create(SQL92_RESERVED_CREATE1);
            adaptor.addChild(root_0, SQL92_RESERVED_CREATE1_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, create_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_key"

    public static class replace_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "replace_key"
    // Keys.g:333:1: replace_key : {...}? => REGULAR_ID -> REPLACE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.replace_key_return replace_key() throws RecognitionException {
        OracleParser_Keys.replace_key_return retval = new OracleParser_Keys.replace_key_return();
        retval.start = input.LT(1);
        int replace_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID2=null;

        Object REGULAR_ID2_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // Keys.g:334:5: ({...}? => REGULAR_ID -> REPLACE_VK[$REGULAR_ID] )
            // Keys.g:334:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("replace"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "replace_key", "input.LT(1).getText().equalsIgnoreCase(\"replace\")");
            }
            REGULAR_ID2=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_replace_key2295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID2);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:76: -> REPLACE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(REPLACE_VK, REGULAR_ID2));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, replace_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "replace_key"

    public static class package_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_key"
    // Keys.g:337:1: package_key : {...}? => REGULAR_ID -> PACKAGE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.package_key_return package_key() throws RecognitionException {
        OracleParser_Keys.package_key_return retval = new OracleParser_Keys.package_key_return();
        retval.start = input.LT(1);
        int package_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID3=null;

        Object REGULAR_ID3_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // Keys.g:338:5: ({...}? => REGULAR_ID -> PACKAGE_VK[$REGULAR_ID] )
            // Keys.g:338:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("package"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "package_key", "input.LT(1).getText().equalsIgnoreCase(\"package\")");
            }
            REGULAR_ID3=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_package_key2323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID3);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:76: -> PACKAGE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PACKAGE_VK, REGULAR_ID3));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, package_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_key"

    public static class body_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "body_key"
    // Keys.g:341:1: body_key : {...}? REGULAR_ID -> BODY_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.body_key_return body_key() throws RecognitionException {
        OracleParser_Keys.body_key_return retval = new OracleParser_Keys.body_key_return();
        retval.start = input.LT(1);
        int body_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID4=null;

        Object REGULAR_ID4_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // Keys.g:342:5: ({...}? REGULAR_ID -> BODY_VK[$REGULAR_ID] )
            // Keys.g:342:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("body"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "body_key", "input.LT(1).getText().equalsIgnoreCase(\"body\")");
            }
            REGULAR_ID4=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_body_key2350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID4);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:71: -> BODY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BODY_VK, REGULAR_ID4));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, body_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "body_key"

    public static class begin_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "begin_key"
    // Keys.g:345:1: begin_key : SQL92_RESERVED_BEGIN ;
    public final OracleParser_Keys.begin_key_return begin_key() throws RecognitionException {
        OracleParser_Keys.begin_key_return retval = new OracleParser_Keys.begin_key_return();
        retval.start = input.LT(1);
        int begin_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_BEGIN5=null;

        Object SQL92_RESERVED_BEGIN5_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // Keys.g:346:5: ( SQL92_RESERVED_BEGIN )
            // Keys.g:346:10: SQL92_RESERVED_BEGIN
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_BEGIN5=(Token)match(input,SQL92_RESERVED_BEGIN,FOLLOW_SQL92_RESERVED_BEGIN_in_begin_key2375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_BEGIN5_tree = (Object)adaptor.create(SQL92_RESERVED_BEGIN5);
            adaptor.addChild(root_0, SQL92_RESERVED_BEGIN5_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, begin_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "begin_key"

    public static class exit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exit_key"
    // Keys.g:349:1: exit_key : {...}? REGULAR_ID -> EXIT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.exit_key_return exit_key() throws RecognitionException {
        OracleParser_Keys.exit_key_return retval = new OracleParser_Keys.exit_key_return();
        retval.start = input.LT(1);
        int exit_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID6=null;

        Object REGULAR_ID6_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // Keys.g:349:9: ({...}? REGULAR_ID -> EXIT_VK[$REGULAR_ID] )
            // Keys.g:349:14: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("exit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exit_key", "input.LT(1).getText().equalsIgnoreCase(\"exit\")");
            }
            REGULAR_ID6=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_exit_key2392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID6);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:75: -> EXIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(EXIT_VK, REGULAR_ID6));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, exit_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exit_key"

    public static class declare_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declare_key"
    // Keys.g:352:1: declare_key : SQL92_RESERVED_DECLARE ;
    public final OracleParser_Keys.declare_key_return declare_key() throws RecognitionException {
        OracleParser_Keys.declare_key_return retval = new OracleParser_Keys.declare_key_return();
        retval.start = input.LT(1);
        int declare_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_DECLARE7=null;

        Object SQL92_RESERVED_DECLARE7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // Keys.g:353:5: ( SQL92_RESERVED_DECLARE )
            // Keys.g:353:10: SQL92_RESERVED_DECLARE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_DECLARE7=(Token)match(input,SQL92_RESERVED_DECLARE,FOLLOW_SQL92_RESERVED_DECLARE_in_declare_key2417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DECLARE7_tree = (Object)adaptor.create(SQL92_RESERVED_DECLARE7);
            adaptor.addChild(root_0, SQL92_RESERVED_DECLARE7_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, declare_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declare_key"

    public static class exception_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_key"
    // Keys.g:356:1: exception_key : SQL92_RESERVED_EXCEPTION ;
    public final OracleParser_Keys.exception_key_return exception_key() throws RecognitionException {
        OracleParser_Keys.exception_key_return retval = new OracleParser_Keys.exception_key_return();
        retval.start = input.LT(1);
        int exception_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_EXCEPTION8=null;

        Object SQL92_RESERVED_EXCEPTION8_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // Keys.g:357:5: ( SQL92_RESERVED_EXCEPTION )
            // Keys.g:357:10: SQL92_RESERVED_EXCEPTION
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_EXCEPTION8=(Token)match(input,SQL92_RESERVED_EXCEPTION,FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_key2437); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_EXCEPTION8_tree = (Object)adaptor.create(SQL92_RESERVED_EXCEPTION8);
            adaptor.addChild(root_0, SQL92_RESERVED_EXCEPTION8_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, exception_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_key"

    public static class serveroutput_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "serveroutput_key"
    // Keys.g:360:1: serveroutput_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.serveroutput_key_return serveroutput_key() throws RecognitionException {
        OracleParser_Keys.serveroutput_key_return retval = new OracleParser_Keys.serveroutput_key_return();
        retval.start = input.LT(1);
        int serveroutput_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID9=null;

        Object REGULAR_ID9_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // Keys.g:361:5: ({...}? REGULAR_ID )
            // Keys.g:361:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("serveroutput"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "serveroutput_key", "input.LT(1).getText().equalsIgnoreCase(\"serveroutput\")");
            }
            REGULAR_ID9=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_serveroutput_key2459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID9_tree = (Object)adaptor.create(REGULAR_ID9);
            adaptor.addChild(root_0, REGULAR_ID9_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, serveroutput_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "serveroutput_key"

    public static class off_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "off_key"
    // Keys.g:364:1: off_key : {...}? REGULAR_ID -> OFF_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.off_key_return off_key() throws RecognitionException {
        OracleParser_Keys.off_key_return retval = new OracleParser_Keys.off_key_return();
        retval.start = input.LT(1);
        int off_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID10=null;

        Object REGULAR_ID10_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // Keys.g:365:5: ({...}? REGULAR_ID -> OFF_VK[$REGULAR_ID] )
            // Keys.g:365:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("off"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "off_key", "input.LT(1).getText().equalsIgnoreCase(\"off\")");
            }
            REGULAR_ID10=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_off_key2481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID10);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:70: -> OFF_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(OFF_VK, REGULAR_ID10));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, off_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "off_key"

    public static class constant_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_key"
    // Keys.g:368:1: constant_key : {...}? REGULAR_ID -> CONSTANT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.constant_key_return constant_key() throws RecognitionException {
        OracleParser_Keys.constant_key_return retval = new OracleParser_Keys.constant_key_return();
        retval.start = input.LT(1);
        int constant_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID11=null;

        Object REGULAR_ID11_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // Keys.g:369:5: ({...}? REGULAR_ID -> CONSTANT_VK[$REGULAR_ID] )
            // Keys.g:369:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("constant"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "constant_key", "input.LT(1).getText().equalsIgnoreCase(\"constant\")");
            }
            REGULAR_ID11=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_constant_key2508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID11);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:75: -> CONSTANT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CONSTANT_VK, REGULAR_ID11));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, constant_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_key"

    public static class subtype_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_key"
    // Keys.g:372:1: subtype_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.subtype_key_return subtype_key() throws RecognitionException {
        OracleParser_Keys.subtype_key_return retval = new OracleParser_Keys.subtype_key_return();
        retval.start = input.LT(1);
        int subtype_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID12=null;

        Object REGULAR_ID12_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // Keys.g:373:5: ({...}? REGULAR_ID )
            // Keys.g:373:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("subtype"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "subtype_key", "input.LT(1).getText().equalsIgnoreCase(\"subtype\")");
            }
            REGULAR_ID12=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_subtype_key2535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID12_tree = (Object)adaptor.create(REGULAR_ID12);
            adaptor.addChild(root_0, REGULAR_ID12_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, subtype_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_key"

    public static class cursor_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_key"
    // Keys.g:376:1: cursor_key : SQL92_RESERVED_CURSOR ;
    public final OracleParser_Keys.cursor_key_return cursor_key() throws RecognitionException {
        OracleParser_Keys.cursor_key_return retval = new OracleParser_Keys.cursor_key_return();
        retval.start = input.LT(1);
        int cursor_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_CURSOR13=null;

        Object SQL92_RESERVED_CURSOR13_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // Keys.g:377:5: ( SQL92_RESERVED_CURSOR )
            // Keys.g:377:10: SQL92_RESERVED_CURSOR
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_CURSOR13=(Token)match(input,SQL92_RESERVED_CURSOR,FOLLOW_SQL92_RESERVED_CURSOR_in_cursor_key2555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CURSOR13_tree = (Object)adaptor.create(SQL92_RESERVED_CURSOR13);
            adaptor.addChild(root_0, SQL92_RESERVED_CURSOR13_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, cursor_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_key"

    public static class nextval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nextval_key"
    // Keys.g:380:1: nextval_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.nextval_key_return nextval_key() throws RecognitionException {
        OracleParser_Keys.nextval_key_return retval = new OracleParser_Keys.nextval_key_return();
        retval.start = input.LT(1);
        int nextval_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID14=null;

        Object REGULAR_ID14_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // Keys.g:381:5: ({...}? => REGULAR_ID )
            // Keys.g:381:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("nextval"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nextval_key", "input.LT(1).getText().equalsIgnoreCase(\"nextval\")");
            }
            REGULAR_ID14=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nextval_key2578); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID14_tree = (Object)adaptor.create(REGULAR_ID14);
            adaptor.addChild(root_0, REGULAR_ID14_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, nextval_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nextval_key"

    public static class goto_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goto_key"
    // Keys.g:384:1: goto_key : SQL92_RESERVED_GOTO ;
    public final OracleParser_Keys.goto_key_return goto_key() throws RecognitionException {
        OracleParser_Keys.goto_key_return retval = new OracleParser_Keys.goto_key_return();
        retval.start = input.LT(1);
        int goto_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_GOTO15=null;

        Object SQL92_RESERVED_GOTO15_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // Keys.g:385:5: ( SQL92_RESERVED_GOTO )
            // Keys.g:385:10: SQL92_RESERVED_GOTO
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_GOTO15=(Token)match(input,SQL92_RESERVED_GOTO,FOLLOW_SQL92_RESERVED_GOTO_in_goto_key2598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_GOTO15_tree = (Object)adaptor.create(SQL92_RESERVED_GOTO15);
            adaptor.addChild(root_0, SQL92_RESERVED_GOTO15_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, goto_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "goto_key"

    public static class execute_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "execute_key"
    // Keys.g:388:1: execute_key : {...}? REGULAR_ID -> EXECUTE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.execute_key_return execute_key() throws RecognitionException {
        OracleParser_Keys.execute_key_return retval = new OracleParser_Keys.execute_key_return();
        retval.start = input.LT(1);
        int execute_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID16=null;

        Object REGULAR_ID16_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // Keys.g:389:5: ({...}? REGULAR_ID -> EXECUTE_VK[$REGULAR_ID] )
            // Keys.g:389:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("execute"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "execute_key", "input.LT(1).getText().equalsIgnoreCase(\"execute\")");
            }
            REGULAR_ID16=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_execute_key2620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID16);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:74: -> EXECUTE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(EXECUTE_VK, REGULAR_ID16));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, execute_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "execute_key"

    public static class immediate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "immediate_key"
    // Keys.g:392:1: immediate_key : {...}? => REGULAR_ID -> IMMEDIATE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.immediate_key_return immediate_key() throws RecognitionException {
        OracleParser_Keys.immediate_key_return retval = new OracleParser_Keys.immediate_key_return();
        retval.start = input.LT(1);
        int immediate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID17=null;

        Object REGULAR_ID17_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // Keys.g:393:5: ({...}? => REGULAR_ID -> IMMEDIATE_VK[$REGULAR_ID] )
            // Keys.g:393:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("immediate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "immediate_key", "input.LT(1).getText().equalsIgnoreCase(\"immediate\")");
            }
            REGULAR_ID17=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_immediate_key2648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID17);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 393:78: -> IMMEDIATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(IMMEDIATE_VK, REGULAR_ID17));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, immediate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "immediate_key"

    public static class return_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_key"
    // Keys.g:396:1: return_key : {...}? REGULAR_ID -> RETURN_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.return_key_return return_key() throws RecognitionException {
        OracleParser_Keys.return_key_return retval = new OracleParser_Keys.return_key_return();
        retval.start = input.LT(1);
        int return_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID18=null;

        Object REGULAR_ID18_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // Keys.g:397:5: ({...}? REGULAR_ID -> RETURN_VK[$REGULAR_ID] )
            // Keys.g:397:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("return"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "return_key", "input.LT(1).getText().equalsIgnoreCase(\"return\")");
            }
            REGULAR_ID18=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_return_key2675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID18);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:73: -> RETURN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(RETURN_VK, REGULAR_ID18));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, return_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_key"

    public static class procedure_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_key"
    // Keys.g:400:1: procedure_key : SQL92_RESERVED_PROCEDURE ;
    public final OracleParser_Keys.procedure_key_return procedure_key() throws RecognitionException {
        OracleParser_Keys.procedure_key_return retval = new OracleParser_Keys.procedure_key_return();
        retval.start = input.LT(1);
        int procedure_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_PROCEDURE19=null;

        Object SQL92_RESERVED_PROCEDURE19_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // Keys.g:401:5: ( SQL92_RESERVED_PROCEDURE )
            // Keys.g:401:10: SQL92_RESERVED_PROCEDURE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_PROCEDURE19=(Token)match(input,SQL92_RESERVED_PROCEDURE,FOLLOW_SQL92_RESERVED_PROCEDURE_in_procedure_key2700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_PROCEDURE19_tree = (Object)adaptor.create(SQL92_RESERVED_PROCEDURE19);
            adaptor.addChild(root_0, SQL92_RESERVED_PROCEDURE19_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, procedure_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_key"

    public static class function_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_key"
    // Keys.g:404:1: function_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.function_key_return function_key() throws RecognitionException {
        OracleParser_Keys.function_key_return retval = new OracleParser_Keys.function_key_return();
        retval.start = input.LT(1);
        int function_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID20=null;

        Object REGULAR_ID20_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // Keys.g:405:5: ({...}? => REGULAR_ID )
            // Keys.g:405:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_key", "input.LT(1).getText().equalsIgnoreCase(\"function\")");
            }
            REGULAR_ID20=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_function_key2723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID20_tree = (Object)adaptor.create(REGULAR_ID20);
            adaptor.addChild(root_0, REGULAR_ID20_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, function_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_key"

    public static class pragma_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_key"
    // Keys.g:408:1: pragma_key : {...}? REGULAR_ID -> PRAGMA_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.pragma_key_return pragma_key() throws RecognitionException {
        OracleParser_Keys.pragma_key_return retval = new OracleParser_Keys.pragma_key_return();
        retval.start = input.LT(1);
        int pragma_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID21=null;

        Object REGULAR_ID21_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // Keys.g:409:5: ({...}? REGULAR_ID -> PRAGMA_VK[$REGULAR_ID] )
            // Keys.g:409:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("pragma"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "pragma_key", "input.LT(1).getText().equalsIgnoreCase(\"pragma\")");
            }
            REGULAR_ID21=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_pragma_key2745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID21);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 409:73: -> PRAGMA_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PRAGMA_VK, REGULAR_ID21));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, pragma_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_key"

    public static class exception_init_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_init_key"
    // Keys.g:412:1: exception_init_key : {...}? REGULAR_ID -> EXCEPTION_INIT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.exception_init_key_return exception_init_key() throws RecognitionException {
        OracleParser_Keys.exception_init_key_return retval = new OracleParser_Keys.exception_init_key_return();
        retval.start = input.LT(1);
        int exception_init_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID22=null;

        Object REGULAR_ID22_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // Keys.g:413:5: ({...}? REGULAR_ID -> EXCEPTION_INIT_VK[$REGULAR_ID] )
            // Keys.g:413:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("exception_init"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exception_init_key", "input.LT(1).getText().equalsIgnoreCase(\"exception_init\")");
            }
            REGULAR_ID22=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_exception_init_key2772); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID22);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:81: -> EXCEPTION_INIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(EXCEPTION_INIT_VK, REGULAR_ID22));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, exception_init_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_init_key"

    public static class type_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_key"
    // Keys.g:416:1: type_key : {...}? => REGULAR_ID -> TYPE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.type_key_return type_key() throws RecognitionException {
        OracleParser_Keys.type_key_return retval = new OracleParser_Keys.type_key_return();
        retval.start = input.LT(1);
        int type_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID23=null;

        Object REGULAR_ID23_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // Keys.g:417:5: ({...}? => REGULAR_ID -> TYPE_VK[$REGULAR_ID] )
            // Keys.g:417:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("type"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "type_key", "input.LT(1).getText().equalsIgnoreCase(\"type\")");
            }
            REGULAR_ID23=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_type_key2800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID23);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 417:73: -> TYPE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TYPE_VK, REGULAR_ID23));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, type_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_key"

    public static class record_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_key"
    // Keys.g:420:1: record_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.record_key_return record_key() throws RecognitionException {
        OracleParser_Keys.record_key_return retval = new OracleParser_Keys.record_key_return();
        retval.start = input.LT(1);
        int record_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID24=null;

        Object REGULAR_ID24_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // Keys.g:421:5: ({...}? => REGULAR_ID )
            // Keys.g:421:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("record"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "record_key", "input.LT(1).getText().equalsIgnoreCase(\"record\")");
            }
            REGULAR_ID24=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_record_key2828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID24_tree = (Object)adaptor.create(REGULAR_ID24);
            adaptor.addChild(root_0, REGULAR_ID24_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, record_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_key"

    public static class indexed_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indexed_key"
    // Keys.g:424:1: indexed_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.indexed_key_return indexed_key() throws RecognitionException {
        OracleParser_Keys.indexed_key_return retval = new OracleParser_Keys.indexed_key_return();
        retval.start = input.LT(1);
        int indexed_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID25=null;

        Object REGULAR_ID25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // Keys.g:425:5: ({...}? REGULAR_ID )
            // Keys.g:425:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("indexed"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "indexed_key", "input.LT(1).getText().equalsIgnoreCase(\"indexed\")");
            }
            REGULAR_ID25=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_indexed_key2850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID25_tree = (Object)adaptor.create(REGULAR_ID25);
            adaptor.addChild(root_0, REGULAR_ID25_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, indexed_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "indexed_key"

    public static class index_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index_key"
    // Keys.g:428:1: index_key : PLSQL_RESERVED_INDEX ;
    public final OracleParser_Keys.index_key_return index_key() throws RecognitionException {
        OracleParser_Keys.index_key_return retval = new OracleParser_Keys.index_key_return();
        retval.start = input.LT(1);
        int index_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_RESERVED_INDEX26=null;

        Object PLSQL_RESERVED_INDEX26_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // Keys.g:429:5: ( PLSQL_RESERVED_INDEX )
            // Keys.g:429:10: PLSQL_RESERVED_INDEX
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_RESERVED_INDEX26=(Token)match(input,PLSQL_RESERVED_INDEX,FOLLOW_PLSQL_RESERVED_INDEX_in_index_key2870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_INDEX26_tree = (Object)adaptor.create(PLSQL_RESERVED_INDEX26);
            adaptor.addChild(root_0, PLSQL_RESERVED_INDEX26_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, index_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index_key"

    public static class percent_notfound_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent_notfound_key"
    // Keys.g:432:1: percent_notfound_key : {...}? => PERCENT REGULAR_ID -> PERCENT_NOTFOUND_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final OracleParser_Keys.percent_notfound_key_return percent_notfound_key() throws RecognitionException {
        OracleParser_Keys.percent_notfound_key_return retval = new OracleParser_Keys.percent_notfound_key_return();
        retval.start = input.LT(1);
        int percent_notfound_key_StartIndex = input.index();
        Object root_0 = null;

        Token PERCENT27=null;
        Token REGULAR_ID28=null;

        Object PERCENT27_tree=null;
        Object REGULAR_ID28_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // Keys.g:433:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_NOTFOUND_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // Keys.g:433:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("notfound"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_notfound_key", "input.LT(2).getText().equalsIgnoreCase(\"notfound\")");
            }
            PERCENT27=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_notfound_key2893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT27);

            REGULAR_ID28=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_notfound_key2895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID28);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:85: -> PERCENT_NOTFOUND_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PERCENT_NOTFOUND_VK, REGULAR_ID28, (REGULAR_ID28!=null?REGULAR_ID28.getText():null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, percent_notfound_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent_notfound_key"

    public static class percent_found_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent_found_key"
    // Keys.g:436:1: percent_found_key : {...}? => PERCENT REGULAR_ID -> PERCENT_FOUND_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final OracleParser_Keys.percent_found_key_return percent_found_key() throws RecognitionException {
        OracleParser_Keys.percent_found_key_return retval = new OracleParser_Keys.percent_found_key_return();
        retval.start = input.LT(1);
        int percent_found_key_StartIndex = input.index();
        Object root_0 = null;

        Token PERCENT29=null;
        Token REGULAR_ID30=null;

        Object PERCENT29_tree=null;
        Object REGULAR_ID30_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // Keys.g:437:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_FOUND_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // Keys.g:437:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("found"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_found_key", "input.LT(2).getText().equalsIgnoreCase(\"found\")");
            }
            PERCENT29=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_found_key2923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT29);

            REGULAR_ID30=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_found_key2925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID30);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:82: -> PERCENT_FOUND_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PERCENT_FOUND_VK, REGULAR_ID30, (REGULAR_ID30!=null?REGULAR_ID30.getText():null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, percent_found_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent_found_key"

    public static class percent_isopen_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent_isopen_key"
    // Keys.g:440:1: percent_isopen_key : {...}? => PERCENT REGULAR_ID -> PERCENT_ISOPEN_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final OracleParser_Keys.percent_isopen_key_return percent_isopen_key() throws RecognitionException {
        OracleParser_Keys.percent_isopen_key_return retval = new OracleParser_Keys.percent_isopen_key_return();
        retval.start = input.LT(1);
        int percent_isopen_key_StartIndex = input.index();
        Object root_0 = null;

        Token PERCENT31=null;
        Token REGULAR_ID32=null;

        Object PERCENT31_tree=null;
        Object REGULAR_ID32_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // Keys.g:441:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_ISOPEN_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // Keys.g:441:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("isopen"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_isopen_key", "input.LT(2).getText().equalsIgnoreCase(\"isopen\")");
            }
            PERCENT31=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_isopen_key2953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT31);

            REGULAR_ID32=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_isopen_key2955); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID32);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 441:83: -> PERCENT_ISOPEN_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PERCENT_ISOPEN_VK, REGULAR_ID32, (REGULAR_ID32!=null?REGULAR_ID32.getText():null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, percent_isopen_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent_isopen_key"

    public static class percent_rowcount_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent_rowcount_key"
    // Keys.g:444:1: percent_rowcount_key : {...}? => PERCENT REGULAR_ID -> PERCENT_ROWCOUNT_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final OracleParser_Keys.percent_rowcount_key_return percent_rowcount_key() throws RecognitionException {
        OracleParser_Keys.percent_rowcount_key_return retval = new OracleParser_Keys.percent_rowcount_key_return();
        retval.start = input.LT(1);
        int percent_rowcount_key_StartIndex = input.index();
        Object root_0 = null;

        Token PERCENT33=null;
        Token REGULAR_ID34=null;

        Object PERCENT33_tree=null;
        Object REGULAR_ID34_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // Keys.g:445:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_ROWCOUNT_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // Keys.g:445:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("rowcount"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_rowcount_key", "input.LT(2).getText().equalsIgnoreCase(\"rowcount\")");
            }
            PERCENT33=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_rowcount_key2983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT33);

            REGULAR_ID34=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_rowcount_key2985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID34);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:85: -> PERCENT_ROWCOUNT_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PERCENT_ROWCOUNT_VK, REGULAR_ID34, (REGULAR_ID34!=null?REGULAR_ID34.getText():null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, percent_rowcount_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent_rowcount_key"

    public static class percent_rowtype_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent_rowtype_key"
    // Keys.g:448:1: percent_rowtype_key : {...}? => PERCENT REGULAR_ID -> PERCENT_ROWTYPE_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final OracleParser_Keys.percent_rowtype_key_return percent_rowtype_key() throws RecognitionException {
        OracleParser_Keys.percent_rowtype_key_return retval = new OracleParser_Keys.percent_rowtype_key_return();
        retval.start = input.LT(1);
        int percent_rowtype_key_StartIndex = input.index();
        Object root_0 = null;

        Token PERCENT35=null;
        Token REGULAR_ID36=null;

        Object PERCENT35_tree=null;
        Object REGULAR_ID36_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // Keys.g:449:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_ROWTYPE_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // Keys.g:449:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("rowtype"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_rowtype_key", "input.LT(2).getText().equalsIgnoreCase(\"rowtype\")");
            }
            PERCENT35=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_rowtype_key3013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT35);

            REGULAR_ID36=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_rowtype_key3015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID36);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:84: -> PERCENT_ROWTYPE_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PERCENT_ROWTYPE_VK, REGULAR_ID36, (REGULAR_ID36!=null?REGULAR_ID36.getText():null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, percent_rowtype_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent_rowtype_key"

    public static class percent_type_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent_type_key"
    // Keys.g:452:1: percent_type_key : {...}? => PERCENT REGULAR_ID -> PERCENT_TYPE_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final OracleParser_Keys.percent_type_key_return percent_type_key() throws RecognitionException {
        OracleParser_Keys.percent_type_key_return retval = new OracleParser_Keys.percent_type_key_return();
        retval.start = input.LT(1);
        int percent_type_key_StartIndex = input.index();
        Object root_0 = null;

        Token PERCENT37=null;
        Token REGULAR_ID38=null;

        Object PERCENT37_tree=null;
        Object REGULAR_ID38_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // Keys.g:453:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_TYPE_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // Keys.g:453:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("type"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_type_key", "input.LT(2).getText().equalsIgnoreCase(\"type\")");
            }
            PERCENT37=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_type_key3044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT37);

            REGULAR_ID38=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_type_key3046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID38);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:81: -> PERCENT_TYPE_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PERCENT_TYPE_VK, REGULAR_ID38, (REGULAR_ID38!=null?REGULAR_ID38.getText():null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, percent_type_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent_type_key"

    public static class out_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "out_key"
    // Keys.g:456:1: out_key : {...}? => REGULAR_ID -> OUT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.out_key_return out_key() throws RecognitionException {
        OracleParser_Keys.out_key_return retval = new OracleParser_Keys.out_key_return();
        retval.start = input.LT(1);
        int out_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID39=null;

        Object REGULAR_ID39_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // Keys.g:457:5: ({...}? => REGULAR_ID -> OUT_VK[$REGULAR_ID] )
            // Keys.g:457:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("out"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "out_key", "input.LT(1).getText().equalsIgnoreCase(\"out\")");
            }
            REGULAR_ID39=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_out_key3074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID39);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:72: -> OUT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(OUT_VK, REGULAR_ID39));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, out_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "out_key"

    public static class inout_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inout_key"
    // Keys.g:460:1: inout_key : {...}? REGULAR_ID -> INOUT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.inout_key_return inout_key() throws RecognitionException {
        OracleParser_Keys.inout_key_return retval = new OracleParser_Keys.inout_key_return();
        retval.start = input.LT(1);
        int inout_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID40=null;

        Object REGULAR_ID40_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // Keys.g:461:5: ({...}? REGULAR_ID -> INOUT_VK[$REGULAR_ID] )
            // Keys.g:461:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("inout"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "inout_key", "input.LT(1).getText().equalsIgnoreCase(\"inout\")");
            }
            REGULAR_ID40=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_inout_key3101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID40);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 461:72: -> INOUT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INOUT_VK, REGULAR_ID40));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, inout_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inout_key"

    public static class extend_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extend_key"
    // Keys.g:464:1: extend_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.extend_key_return extend_key() throws RecognitionException {
        OracleParser_Keys.extend_key_return retval = new OracleParser_Keys.extend_key_return();
        retval.start = input.LT(1);
        int extend_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID41=null;

        Object REGULAR_ID41_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // Keys.g:465:5: ({...}? => REGULAR_ID )
            // Keys.g:465:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("extend"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extend_key", "input.LT(1).getText().equalsIgnoreCase(\"extend\")");
            }
            REGULAR_ID41=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_extend_key3129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID41_tree = (Object)adaptor.create(REGULAR_ID41);
            adaptor.addChild(root_0, REGULAR_ID41_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, extend_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "extend_key"

    public static class raise_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raise_key"
    // Keys.g:468:1: raise_key : {...}? REGULAR_ID -> RAISE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.raise_key_return raise_key() throws RecognitionException {
        OracleParser_Keys.raise_key_return retval = new OracleParser_Keys.raise_key_return();
        retval.start = input.LT(1);
        int raise_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID42=null;

        Object REGULAR_ID42_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // Keys.g:469:5: ({...}? REGULAR_ID -> RAISE_VK[$REGULAR_ID] )
            // Keys.g:469:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("raise"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "raise_key", "input.LT(1).getText().equalsIgnoreCase(\"raise\")");
            }
            REGULAR_ID42=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_raise_key3151); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID42);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:72: -> RAISE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(RAISE_VK, REGULAR_ID42));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, raise_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raise_key"

    public static class while_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_key"
    // Keys.g:472:1: while_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.while_key_return while_key() throws RecognitionException {
        OracleParser_Keys.while_key_return retval = new OracleParser_Keys.while_key_return();
        retval.start = input.LT(1);
        int while_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID43=null;

        Object REGULAR_ID43_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // Keys.g:473:5: ({...}? REGULAR_ID )
            // Keys.g:473:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("while"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "while_key", "input.LT(1).getText().equalsIgnoreCase(\"while\")");
            }
            REGULAR_ID43=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_while_key3178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID43_tree = (Object)adaptor.create(REGULAR_ID43);
            adaptor.addChild(root_0, REGULAR_ID43_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, while_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "while_key"

    public static class loop_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "loop_key"
    // Keys.g:476:1: loop_key : {...}? REGULAR_ID -> LOOP_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.loop_key_return loop_key() throws RecognitionException {
        OracleParser_Keys.loop_key_return retval = new OracleParser_Keys.loop_key_return();
        retval.start = input.LT(1);
        int loop_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID44=null;

        Object REGULAR_ID44_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // Keys.g:477:5: ({...}? REGULAR_ID -> LOOP_VK[$REGULAR_ID] )
            // Keys.g:477:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("loop"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "loop_key", "input.LT(1).getText().equalsIgnoreCase(\"loop\")");
            }
            REGULAR_ID44=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_loop_key3200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID44);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:71: -> LOOP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LOOP_VK, REGULAR_ID44));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, loop_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "loop_key"

    public static class commit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commit_key"
    // Keys.g:480:1: commit_key : {...}? => REGULAR_ID -> COMMIT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.commit_key_return commit_key() throws RecognitionException {
        OracleParser_Keys.commit_key_return retval = new OracleParser_Keys.commit_key_return();
        retval.start = input.LT(1);
        int commit_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID45=null;

        Object REGULAR_ID45_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // Keys.g:481:5: ({...}? => REGULAR_ID -> COMMIT_VK[$REGULAR_ID] )
            // Keys.g:481:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("commit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "commit_key", "input.LT(1).getText().equalsIgnoreCase(\"commit\")");
            }
            REGULAR_ID45=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_commit_key3228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID45);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 481:75: -> COMMIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(COMMIT_VK, REGULAR_ID45));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, commit_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commit_key"

    public static class work_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "work_key"
    // Keys.g:484:1: work_key : {...}? REGULAR_ID -> WORK_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.work_key_return work_key() throws RecognitionException {
        OracleParser_Keys.work_key_return retval = new OracleParser_Keys.work_key_return();
        retval.start = input.LT(1);
        int work_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID46=null;

        Object REGULAR_ID46_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // Keys.g:484:9: ({...}? REGULAR_ID -> WORK_VK[$REGULAR_ID] )
            // Keys.g:484:14: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("work"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "work_key", "input.LT(1).getText().equalsIgnoreCase(\"work\")");
            }
            REGULAR_ID46=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_work_key3250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID46);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:75: -> WORK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(WORK_VK, REGULAR_ID46));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, work_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "work_key"

    public static class if_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_key"
    // Keys.g:487:1: if_key : PLSQL_RESERVED_IF ;
    public final OracleParser_Keys.if_key_return if_key() throws RecognitionException {
        OracleParser_Keys.if_key_return retval = new OracleParser_Keys.if_key_return();
        retval.start = input.LT(1);
        int if_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_RESERVED_IF47=null;

        Object PLSQL_RESERVED_IF47_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // Keys.g:488:5: ( PLSQL_RESERVED_IF )
            // Keys.g:488:10: PLSQL_RESERVED_IF
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_RESERVED_IF47=(Token)match(input,PLSQL_RESERVED_IF,FOLLOW_PLSQL_RESERVED_IF_in_if_key3275); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_IF47_tree = (Object)adaptor.create(PLSQL_RESERVED_IF47);
            adaptor.addChild(root_0, PLSQL_RESERVED_IF47_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, if_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "if_key"

    public static class elsif_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elsif_key"
    // Keys.g:491:1: elsif_key : PLSQL_NON_RESERVED_ELSIF ;
    public final OracleParser_Keys.elsif_key_return elsif_key() throws RecognitionException {
        OracleParser_Keys.elsif_key_return retval = new OracleParser_Keys.elsif_key_return();
        retval.start = input.LT(1);
        int elsif_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_NON_RESERVED_ELSIF48=null;

        Object PLSQL_NON_RESERVED_ELSIF48_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // Keys.g:492:5: ( PLSQL_NON_RESERVED_ELSIF )
            // Keys.g:492:10: PLSQL_NON_RESERVED_ELSIF
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_NON_RESERVED_ELSIF48=(Token)match(input,PLSQL_NON_RESERVED_ELSIF,FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_key3295); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_NON_RESERVED_ELSIF48_tree = (Object)adaptor.create(PLSQL_NON_RESERVED_ELSIF48);
            adaptor.addChild(root_0, PLSQL_NON_RESERVED_ELSIF48_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, elsif_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elsif_key"

    public static class authid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "authid_key"
    // Keys.g:495:1: authid_key : {...}? => REGULAR_ID -> AUTHID_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.authid_key_return authid_key() throws RecognitionException {
        OracleParser_Keys.authid_key_return retval = new OracleParser_Keys.authid_key_return();
        retval.start = input.LT(1);
        int authid_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID49=null;

        Object REGULAR_ID49_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // Keys.g:496:5: ({...}? => REGULAR_ID -> AUTHID_VK[$REGULAR_ID] )
            // Keys.g:496:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("authid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "authid_key", "input.LT(1).getText().equalsIgnoreCase(\"authid\")");
            }
            REGULAR_ID49=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_authid_key3318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID49);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:75: -> AUTHID_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(AUTHID_VK, REGULAR_ID49));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, authid_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "authid_key"

    public static class definer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definer_key"
    // Keys.g:499:1: definer_key : {...}? REGULAR_ID -> DEFINER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.definer_key_return definer_key() throws RecognitionException {
        OracleParser_Keys.definer_key_return retval = new OracleParser_Keys.definer_key_return();
        retval.start = input.LT(1);
        int definer_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID50=null;

        Object REGULAR_ID50_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // Keys.g:500:5: ({...}? REGULAR_ID -> DEFINER_VK[$REGULAR_ID] )
            // Keys.g:500:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("definer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "definer_key", "input.LT(1).getText().equalsIgnoreCase(\"definer\")");
            }
            REGULAR_ID50=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_definer_key3345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID50);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:74: -> DEFINER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DEFINER_VK, REGULAR_ID50));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, definer_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definer_key"

    public static class external_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "external_key"
    // Keys.g:503:1: external_key : {...}? REGULAR_ID -> EXTERNAL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.external_key_return external_key() throws RecognitionException {
        OracleParser_Keys.external_key_return retval = new OracleParser_Keys.external_key_return();
        retval.start = input.LT(1);
        int external_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID51=null;

        Object REGULAR_ID51_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // Keys.g:504:5: ({...}? REGULAR_ID -> EXTERNAL_VK[$REGULAR_ID] )
            // Keys.g:504:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "external_key", "input.LT(1).getText().equalsIgnoreCase(\"external\")");
            }
            REGULAR_ID51=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_external_key3372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID51);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:75: -> EXTERNAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(EXTERNAL_VK, REGULAR_ID51));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, external_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "external_key"

    public static class language_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "language_key"
    // Keys.g:507:1: language_key : {...}? REGULAR_ID -> LANGUAGE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.language_key_return language_key() throws RecognitionException {
        OracleParser_Keys.language_key_return retval = new OracleParser_Keys.language_key_return();
        retval.start = input.LT(1);
        int language_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID52=null;

        Object REGULAR_ID52_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // Keys.g:508:5: ({...}? REGULAR_ID -> LANGUAGE_VK[$REGULAR_ID] )
            // Keys.g:508:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "language_key", "input.LT(1).getText().equalsIgnoreCase(\"language\")");
            }
            REGULAR_ID52=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_language_key3399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID52);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:75: -> LANGUAGE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LANGUAGE_VK, REGULAR_ID52));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, language_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "language_key"

    public static class java_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "java_key"
    // Keys.g:511:1: java_key : {...}? REGULAR_ID -> JAVA_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.java_key_return java_key() throws RecognitionException {
        OracleParser_Keys.java_key_return retval = new OracleParser_Keys.java_key_return();
        retval.start = input.LT(1);
        int java_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID53=null;

        Object REGULAR_ID53_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // Keys.g:512:5: ({...}? REGULAR_ID -> JAVA_VK[$REGULAR_ID] )
            // Keys.g:512:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("java"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "java_key", "input.LT(1).getText().equalsIgnoreCase(\"java\")");
            }
            REGULAR_ID53=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_java_key3426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID53);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 512:71: -> JAVA_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(JAVA_VK, REGULAR_ID53));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, java_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "java_key"

    public static class name_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "name_key"
    // Keys.g:515:1: name_key : {...}? => REGULAR_ID -> NAME_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.name_key_return name_key() throws RecognitionException {
        OracleParser_Keys.name_key_return retval = new OracleParser_Keys.name_key_return();
        retval.start = input.LT(1);
        int name_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID54=null;

        Object REGULAR_ID54_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // Keys.g:516:5: ({...}? => REGULAR_ID -> NAME_VK[$REGULAR_ID] )
            // Keys.g:516:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("name"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "name_key", "input.LT(1).getText().equalsIgnoreCase(\"name\")");
            }
            REGULAR_ID54=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_name_key3454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID54);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 516:73: -> NAME_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NAME_VK, REGULAR_ID54));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, name_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "name_key"

    public static class deterministic_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deterministic_key"
    // Keys.g:519:1: deterministic_key : {...}? => REGULAR_ID -> DETERMINISTIC_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.deterministic_key_return deterministic_key() throws RecognitionException {
        OracleParser_Keys.deterministic_key_return retval = new OracleParser_Keys.deterministic_key_return();
        retval.start = input.LT(1);
        int deterministic_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID55=null;

        Object REGULAR_ID55_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // Keys.g:520:5: ({...}? => REGULAR_ID -> DETERMINISTIC_VK[$REGULAR_ID] )
            // Keys.g:520:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("deterministic"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "deterministic_key", "input.LT(1).getText().equalsIgnoreCase(\"deterministic\")");
            }
            REGULAR_ID55=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_deterministic_key3482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID55);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:82: -> DETERMINISTIC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DETERMINISTIC_VK, REGULAR_ID55));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, deterministic_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "deterministic_key"

    public static class parallel_enable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parallel_enable_key"
    // Keys.g:523:1: parallel_enable_key : {...}? => REGULAR_ID -> PARALLEL_ENABLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.parallel_enable_key_return parallel_enable_key() throws RecognitionException {
        OracleParser_Keys.parallel_enable_key_return retval = new OracleParser_Keys.parallel_enable_key_return();
        retval.start = input.LT(1);
        int parallel_enable_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID56=null;

        Object REGULAR_ID56_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // Keys.g:524:5: ({...}? => REGULAR_ID -> PARALLEL_ENABLE_VK[$REGULAR_ID] )
            // Keys.g:524:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("parallel_enable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "parallel_enable_key", "input.LT(1).getText().equalsIgnoreCase(\"parallel_enable\")");
            }
            REGULAR_ID56=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_parallel_enable_key3510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID56);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:84: -> PARALLEL_ENABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PARALLEL_ENABLE_VK, REGULAR_ID56));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, parallel_enable_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parallel_enable_key"

    public static class result_cache_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "result_cache_key"
    // Keys.g:527:1: result_cache_key : {...}? => REGULAR_ID -> RESULT_CACHE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.result_cache_key_return result_cache_key() throws RecognitionException {
        OracleParser_Keys.result_cache_key_return retval = new OracleParser_Keys.result_cache_key_return();
        retval.start = input.LT(1);
        int result_cache_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID57=null;

        Object REGULAR_ID57_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // Keys.g:528:5: ({...}? => REGULAR_ID -> RESULT_CACHE_VK[$REGULAR_ID] )
            // Keys.g:528:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("result_cache"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "result_cache_key", "input.LT(1).getText().equalsIgnoreCase(\"result_cache\")");
            }
            REGULAR_ID57=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_result_cache_key3538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID57);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:81: -> RESULT_CACHE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(RESULT_CACHE_VK, REGULAR_ID57));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, result_cache_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "result_cache_key"

    public static class pipelined_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pipelined_key"
    // Keys.g:531:1: pipelined_key : {...}? => REGULAR_ID -> PIPELINED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.pipelined_key_return pipelined_key() throws RecognitionException {
        OracleParser_Keys.pipelined_key_return retval = new OracleParser_Keys.pipelined_key_return();
        retval.start = input.LT(1);
        int pipelined_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID58=null;

        Object REGULAR_ID58_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // Keys.g:532:5: ({...}? => REGULAR_ID -> PIPELINED_VK[$REGULAR_ID] )
            // Keys.g:532:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("pipelined"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "pipelined_key", "input.LT(1).getText().equalsIgnoreCase(\"pipelined\")");
            }
            REGULAR_ID58=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_pipelined_key3566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID58);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 532:78: -> PIPELINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PIPELINED_VK, REGULAR_ID58));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, pipelined_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pipelined_key"

    public static class aggregate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aggregate_key"
    // Keys.g:535:1: aggregate_key : {...}? REGULAR_ID -> AGGREGATE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.aggregate_key_return aggregate_key() throws RecognitionException {
        OracleParser_Keys.aggregate_key_return retval = new OracleParser_Keys.aggregate_key_return();
        retval.start = input.LT(1);
        int aggregate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID59=null;

        Object REGULAR_ID59_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // Keys.g:536:5: ({...}? REGULAR_ID -> AGGREGATE_VK[$REGULAR_ID] )
            // Keys.g:536:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("aggregate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "aggregate_key", "input.LT(1).getText().equalsIgnoreCase(\"aggregate\")");
            }
            REGULAR_ID59=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_aggregate_key3593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID59);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:76: -> AGGREGATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(AGGREGATE_VK, REGULAR_ID59));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, aggregate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "aggregate_key"

    public static class alter_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alter_key"
    // Keys.g:539:1: alter_key : SQL92_RESERVED_ALTER ;
    public final OracleParser_Keys.alter_key_return alter_key() throws RecognitionException {
        OracleParser_Keys.alter_key_return retval = new OracleParser_Keys.alter_key_return();
        retval.start = input.LT(1);
        int alter_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_ALTER60=null;

        Object SQL92_RESERVED_ALTER60_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // Keys.g:540:5: ( SQL92_RESERVED_ALTER )
            // Keys.g:540:10: SQL92_RESERVED_ALTER
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_ALTER60=(Token)match(input,SQL92_RESERVED_ALTER,FOLLOW_SQL92_RESERVED_ALTER_in_alter_key3618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ALTER60_tree = (Object)adaptor.create(SQL92_RESERVED_ALTER60);
            adaptor.addChild(root_0, SQL92_RESERVED_ALTER60_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, alter_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alter_key"

    public static class compile_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compile_key"
    // Keys.g:543:1: compile_key : {...}? REGULAR_ID -> COMPILE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.compile_key_return compile_key() throws RecognitionException {
        OracleParser_Keys.compile_key_return retval = new OracleParser_Keys.compile_key_return();
        retval.start = input.LT(1);
        int compile_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID61=null;

        Object REGULAR_ID61_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // Keys.g:544:5: ({...}? REGULAR_ID -> COMPILE_VK[$REGULAR_ID] )
            // Keys.g:544:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("compile"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "compile_key", "input.LT(1).getText().equalsIgnoreCase(\"compile\")");
            }
            REGULAR_ID61=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_compile_key3640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID61);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:74: -> COMPILE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(COMPILE_VK, REGULAR_ID61));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, compile_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compile_key"

    public static class debug_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "debug_key"
    // Keys.g:547:1: debug_key : {...}? REGULAR_ID -> DEBUG_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.debug_key_return debug_key() throws RecognitionException {
        OracleParser_Keys.debug_key_return retval = new OracleParser_Keys.debug_key_return();
        retval.start = input.LT(1);
        int debug_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID62=null;

        Object REGULAR_ID62_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // Keys.g:548:5: ({...}? REGULAR_ID -> DEBUG_VK[$REGULAR_ID] )
            // Keys.g:548:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("debug"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "debug_key", "input.LT(1).getText().equalsIgnoreCase(\"debug\")");
            }
            REGULAR_ID62=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_debug_key3668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID62);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 548:72: -> DEBUG_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DEBUG_VK, REGULAR_ID62));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, debug_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "debug_key"

    public static class reuse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reuse_key"
    // Keys.g:551:1: reuse_key : {...}? REGULAR_ID -> REUSE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.reuse_key_return reuse_key() throws RecognitionException {
        OracleParser_Keys.reuse_key_return retval = new OracleParser_Keys.reuse_key_return();
        retval.start = input.LT(1);
        int reuse_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID63=null;

        Object REGULAR_ID63_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // Keys.g:552:5: ({...}? REGULAR_ID -> REUSE_VK[$REGULAR_ID] )
            // Keys.g:552:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("reuse"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reuse_key", "input.LT(1).getText().equalsIgnoreCase(\"reuse\")");
            }
            REGULAR_ID63=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_reuse_key3695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID63);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:72: -> REUSE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(REUSE_VK, REGULAR_ID63));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, reuse_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reuse_key"

    public static class settings_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "settings_key"
    // Keys.g:555:1: settings_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.settings_key_return settings_key() throws RecognitionException {
        OracleParser_Keys.settings_key_return retval = new OracleParser_Keys.settings_key_return();
        retval.start = input.LT(1);
        int settings_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID64=null;

        Object REGULAR_ID64_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // Keys.g:556:5: ({...}? REGULAR_ID )
            // Keys.g:556:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("settings"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "settings_key", "input.LT(1).getText().equalsIgnoreCase(\"settings\")");
            }
            REGULAR_ID64=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_settings_key3722); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID64_tree = (Object)adaptor.create(REGULAR_ID64);
            adaptor.addChild(root_0, REGULAR_ID64_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, settings_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "settings_key"

    public static class specification_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "specification_key"
    // Keys.g:559:1: specification_key : {...}? REGULAR_ID -> SPECIFICATION_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.specification_key_return specification_key() throws RecognitionException {
        OracleParser_Keys.specification_key_return retval = new OracleParser_Keys.specification_key_return();
        retval.start = input.LT(1);
        int specification_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID65=null;

        Object REGULAR_ID65_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // Keys.g:560:5: ({...}? REGULAR_ID -> SPECIFICATION_VK[$REGULAR_ID] )
            // Keys.g:560:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("specification"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "specification_key", "input.LT(1).getText().equalsIgnoreCase(\"specification\")");
            }
            REGULAR_ID65=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_specification_key3744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID65);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:80: -> SPECIFICATION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SPECIFICATION_VK, REGULAR_ID65));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, specification_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "specification_key"

    public static class drop_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "drop_key"
    // Keys.g:563:1: drop_key : SQL92_RESERVED_DROP ;
    public final OracleParser_Keys.drop_key_return drop_key() throws RecognitionException {
        OracleParser_Keys.drop_key_return retval = new OracleParser_Keys.drop_key_return();
        retval.start = input.LT(1);
        int drop_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_DROP66=null;

        Object SQL92_RESERVED_DROP66_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // Keys.g:564:5: ( SQL92_RESERVED_DROP )
            // Keys.g:564:10: SQL92_RESERVED_DROP
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_DROP66=(Token)match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_drop_key3769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DROP66_tree = (Object)adaptor.create(SQL92_RESERVED_DROP66);
            adaptor.addChild(root_0, SQL92_RESERVED_DROP66_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, drop_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "drop_key"

    public static class trigger_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_key"
    // Keys.g:567:1: trigger_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.trigger_key_return trigger_key() throws RecognitionException {
        OracleParser_Keys.trigger_key_return retval = new OracleParser_Keys.trigger_key_return();
        retval.start = input.LT(1);
        int trigger_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID67=null;

        Object REGULAR_ID67_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // Keys.g:568:5: ({...}? => REGULAR_ID )
            // Keys.g:568:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("trigger"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "trigger_key", "input.LT(1).getText().equalsIgnoreCase(\"trigger\")");
            }
            REGULAR_ID67=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_trigger_key3792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID67_tree = (Object)adaptor.create(REGULAR_ID67);
            adaptor.addChild(root_0, REGULAR_ID67_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, trigger_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_key"

    public static class force_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "force_key"
    // Keys.g:571:1: force_key : {...}? => REGULAR_ID -> FORCE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.force_key_return force_key() throws RecognitionException {
        OracleParser_Keys.force_key_return retval = new OracleParser_Keys.force_key_return();
        retval.start = input.LT(1);
        int force_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID68=null;

        Object REGULAR_ID68_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // Keys.g:572:5: ({...}? => REGULAR_ID -> FORCE_VK[$REGULAR_ID] )
            // Keys.g:572:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("force"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "force_key", "input.LT(1).getText().equalsIgnoreCase(\"force\")");
            }
            REGULAR_ID68=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_force_key3815); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID68);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 572:74: -> FORCE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FORCE_VK, REGULAR_ID68));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, force_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "force_key"

    public static class validate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "validate_key"
    // Keys.g:575:1: validate_key : {...}? REGULAR_ID -> VALIDATE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.validate_key_return validate_key() throws RecognitionException {
        OracleParser_Keys.validate_key_return retval = new OracleParser_Keys.validate_key_return();
        retval.start = input.LT(1);
        int validate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID69=null;

        Object REGULAR_ID69_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // Keys.g:576:5: ({...}? REGULAR_ID -> VALIDATE_VK[$REGULAR_ID] )
            // Keys.g:576:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("validate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "validate_key", "input.LT(1).getText().equalsIgnoreCase(\"validate\")");
            }
            REGULAR_ID69=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_validate_key3842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID69);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:75: -> VALIDATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VALIDATE_VK, REGULAR_ID69));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, validate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "validate_key"

    public static class ref_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ref_key"
    // Keys.g:579:1: ref_key : {...}? => REGULAR_ID -> REF_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.ref_key_return ref_key() throws RecognitionException {
        OracleParser_Keys.ref_key_return retval = new OracleParser_Keys.ref_key_return();
        retval.start = input.LT(1);
        int ref_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID70=null;

        Object REGULAR_ID70_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // Keys.g:580:5: ({...}? => REGULAR_ID -> REF_VK[$REGULAR_ID] )
            // Keys.g:580:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("ref"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ref_key", "input.LT(1).getText().equalsIgnoreCase(\"ref\")");
            }
            REGULAR_ID70=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ref_key3870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID70);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 580:72: -> REF_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(REF_VK, REGULAR_ID70));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, ref_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ref_key"

    public static class array_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array_key"
    // Keys.g:583:1: array_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.array_key_return array_key() throws RecognitionException {
        OracleParser_Keys.array_key_return retval = new OracleParser_Keys.array_key_return();
        retval.start = input.LT(1);
        int array_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID71=null;

        Object REGULAR_ID71_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // Keys.g:584:5: ({...}? => REGULAR_ID )
            // Keys.g:584:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("array"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "array_key", "input.LT(1).getText().equalsIgnoreCase(\"array\")");
            }
            REGULAR_ID71=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_array_key3898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID71_tree = (Object)adaptor.create(REGULAR_ID71);
            adaptor.addChild(root_0, REGULAR_ID71_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, array_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "array_key"

    public static class varray_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varray_key"
    // Keys.g:587:1: varray_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.varray_key_return varray_key() throws RecognitionException {
        OracleParser_Keys.varray_key_return retval = new OracleParser_Keys.varray_key_return();
        retval.start = input.LT(1);
        int varray_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID72=null;

        Object REGULAR_ID72_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // Keys.g:588:5: ({...}? => REGULAR_ID )
            // Keys.g:588:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("varray"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "varray_key", "input.LT(1).getText().equalsIgnoreCase(\"varray\")");
            }
            REGULAR_ID72=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_varray_key3921); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID72_tree = (Object)adaptor.create(REGULAR_ID72);
            adaptor.addChild(root_0, REGULAR_ID72_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, varray_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varray_key"

    public static class pls_integer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pls_integer_key"
    // Keys.g:591:1: pls_integer_key : {...}? => REGULAR_ID -> PLS_INTEGER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.pls_integer_key_return pls_integer_key() throws RecognitionException {
        OracleParser_Keys.pls_integer_key_return retval = new OracleParser_Keys.pls_integer_key_return();
        retval.start = input.LT(1);
        int pls_integer_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID73=null;

        Object REGULAR_ID73_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // Keys.g:592:5: ({...}? => REGULAR_ID -> PLS_INTEGER_VK[$REGULAR_ID] )
            // Keys.g:592:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("pls_integer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "pls_integer_key", "input.LT(1).getText().equalsIgnoreCase(\"pls_integer\")");
            }
            REGULAR_ID73=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_pls_integer_key3944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID73);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 592:80: -> PLS_INTEGER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PLS_INTEGER_VK, REGULAR_ID73));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, pls_integer_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pls_integer_key"

    public static class serially_reusable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "serially_reusable_key"
    // Keys.g:595:1: serially_reusable_key : {...}? => REGULAR_ID -> SERIALLY_REUSABLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.serially_reusable_key_return serially_reusable_key() throws RecognitionException {
        OracleParser_Keys.serially_reusable_key_return retval = new OracleParser_Keys.serially_reusable_key_return();
        retval.start = input.LT(1);
        int serially_reusable_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID74=null;

        Object REGULAR_ID74_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // Keys.g:596:5: ({...}? => REGULAR_ID -> SERIALLY_REUSABLE_VK[$REGULAR_ID] )
            // Keys.g:596:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("serially_reusable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "serially_reusable_key", "input.LT(1).getText().equalsIgnoreCase(\"serially_reusable\")");
            }
            REGULAR_ID74=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_serially_reusable_key3972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID74);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 596:86: -> SERIALLY_REUSABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SERIALLY_REUSABLE_VK, REGULAR_ID74));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, serially_reusable_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "serially_reusable_key"

    public static class autonomous_transaction_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "autonomous_transaction_key"
    // Keys.g:599:1: autonomous_transaction_key : {...}? => REGULAR_ID -> AUTONOMOUS_TRANSACTION_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.autonomous_transaction_key_return autonomous_transaction_key() throws RecognitionException {
        OracleParser_Keys.autonomous_transaction_key_return retval = new OracleParser_Keys.autonomous_transaction_key_return();
        retval.start = input.LT(1);
        int autonomous_transaction_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID75=null;

        Object REGULAR_ID75_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // Keys.g:600:5: ({...}? => REGULAR_ID -> AUTONOMOUS_TRANSACTION_VK[$REGULAR_ID] )
            // Keys.g:600:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("autonomous_transaction"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "autonomous_transaction_key", "input.LT(1).getText().equalsIgnoreCase(\"autonomous_transaction\")");
            }
            REGULAR_ID75=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_autonomous_transaction_key4000); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID75);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 600:91: -> AUTONOMOUS_TRANSACTION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(AUTONOMOUS_TRANSACTION_VK, REGULAR_ID75));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, autonomous_transaction_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "autonomous_transaction_key"

    public static class inline_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inline_key"
    // Keys.g:603:1: inline_key : {...}? => REGULAR_ID -> INLINE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.inline_key_return inline_key() throws RecognitionException {
        OracleParser_Keys.inline_key_return retval = new OracleParser_Keys.inline_key_return();
        retval.start = input.LT(1);
        int inline_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID76=null;

        Object REGULAR_ID76_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // Keys.g:604:5: ({...}? => REGULAR_ID -> INLINE_VK[$REGULAR_ID] )
            // Keys.g:604:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("inline"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "inline_key", "input.LT(1).getText().equalsIgnoreCase(\"inline\")");
            }
            REGULAR_ID76=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_inline_key4028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID76);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 604:75: -> INLINE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INLINE_VK, REGULAR_ID76));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, inline_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inline_key"

    public static class restrict_references_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "restrict_references_key"
    // Keys.g:607:1: restrict_references_key : {...}? => REGULAR_ID -> RESTRICT_REFERENCES_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.restrict_references_key_return restrict_references_key() throws RecognitionException {
        OracleParser_Keys.restrict_references_key_return retval = new OracleParser_Keys.restrict_references_key_return();
        retval.start = input.LT(1);
        int restrict_references_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID77=null;

        Object REGULAR_ID77_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // Keys.g:608:5: ({...}? => REGULAR_ID -> RESTRICT_REFERENCES_VK[$REGULAR_ID] )
            // Keys.g:608:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("restrict_references"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "restrict_references_key", "input.LT(1).getText().equalsIgnoreCase(\"restrict_references\")");
            }
            REGULAR_ID77=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_restrict_references_key4056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID77);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:88: -> RESTRICT_REFERENCES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(RESTRICT_REFERENCES_VK, REGULAR_ID77));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, restrict_references_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "restrict_references_key"

    public static class exceptions_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exceptions_key"
    // Keys.g:611:1: exceptions_key : {...}? => REGULAR_ID -> EXCEPTIONS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.exceptions_key_return exceptions_key() throws RecognitionException {
        OracleParser_Keys.exceptions_key_return retval = new OracleParser_Keys.exceptions_key_return();
        retval.start = input.LT(1);
        int exceptions_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID78=null;

        Object REGULAR_ID78_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // Keys.g:612:5: ({...}? => REGULAR_ID -> EXCEPTIONS_VK[$REGULAR_ID] )
            // Keys.g:612:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("exceptions"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exceptions_key", "input.LT(1).getText().equalsIgnoreCase(\"exceptions\")");
            }
            REGULAR_ID78=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_exceptions_key4084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID78);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 612:79: -> EXCEPTIONS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(EXCEPTIONS_VK, REGULAR_ID78));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, exceptions_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exceptions_key"

    public static class save_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "save_key"
    // Keys.g:615:1: save_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.save_key_return save_key() throws RecognitionException {
        OracleParser_Keys.save_key_return retval = new OracleParser_Keys.save_key_return();
        retval.start = input.LT(1);
        int save_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID79=null;

        Object REGULAR_ID79_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // Keys.g:616:5: ({...}? => REGULAR_ID )
            // Keys.g:616:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("save"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "save_key", "input.LT(1).getText().equalsIgnoreCase(\"save\")");
            }
            REGULAR_ID79=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_save_key4113); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID79_tree = (Object)adaptor.create(REGULAR_ID79);
            adaptor.addChild(root_0, REGULAR_ID79_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, save_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "save_key"

    public static class forall_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_key"
    // Keys.g:619:1: forall_key : {...}? => REGULAR_ID -> FORALL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.forall_key_return forall_key() throws RecognitionException {
        OracleParser_Keys.forall_key_return retval = new OracleParser_Keys.forall_key_return();
        retval.start = input.LT(1);
        int forall_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID80=null;

        Object REGULAR_ID80_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // Keys.g:620:5: ({...}? => REGULAR_ID -> FORALL_VK[$REGULAR_ID] )
            // Keys.g:620:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("forall"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "forall_key", "input.LT(1).getText().equalsIgnoreCase(\"forall\")");
            }
            REGULAR_ID80=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_forall_key4136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID80);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 620:75: -> FORALL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FORALL_VK, REGULAR_ID80));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, forall_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forall_key"

    public static class continue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_key"
    // Keys.g:623:1: continue_key : {...}? => REGULAR_ID -> CONTINUE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.continue_key_return continue_key() throws RecognitionException {
        OracleParser_Keys.continue_key_return retval = new OracleParser_Keys.continue_key_return();
        retval.start = input.LT(1);
        int continue_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID81=null;

        Object REGULAR_ID81_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // Keys.g:624:5: ({...}? => REGULAR_ID -> CONTINUE_VK[$REGULAR_ID] )
            // Keys.g:624:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("continue"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "continue_key", "input.LT(1).getText().equalsIgnoreCase(\"continue\")");
            }
            REGULAR_ID81=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_continue_key4164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID81);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 624:77: -> CONTINUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CONTINUE_VK, REGULAR_ID81));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, continue_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "continue_key"

    public static class indices_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indices_key"
    // Keys.g:627:1: indices_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.indices_key_return indices_key() throws RecognitionException {
        OracleParser_Keys.indices_key_return retval = new OracleParser_Keys.indices_key_return();
        retval.start = input.LT(1);
        int indices_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID82=null;

        Object REGULAR_ID82_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // Keys.g:628:5: ({...}? => REGULAR_ID )
            // Keys.g:628:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("indices"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "indices_key", "input.LT(1).getText().equalsIgnoreCase(\"indices\")");
            }
            REGULAR_ID82=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_indices_key4192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID82_tree = (Object)adaptor.create(REGULAR_ID82);
            adaptor.addChild(root_0, REGULAR_ID82_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, indices_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "indices_key"

    public static class values_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "values_key"
    // Keys.g:631:1: values_key : SQL92_RESERVED_VALUES ;
    public final OracleParser_Keys.values_key_return values_key() throws RecognitionException {
        OracleParser_Keys.values_key_return retval = new OracleParser_Keys.values_key_return();
        retval.start = input.LT(1);
        int values_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_VALUES83=null;

        Object SQL92_RESERVED_VALUES83_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // Keys.g:632:5: ( SQL92_RESERVED_VALUES )
            // Keys.g:632:10: SQL92_RESERVED_VALUES
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_VALUES83=(Token)match(input,SQL92_RESERVED_VALUES,FOLLOW_SQL92_RESERVED_VALUES_in_values_key4212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_VALUES83_tree = (Object)adaptor.create(SQL92_RESERVED_VALUES83);
            adaptor.addChild(root_0, SQL92_RESERVED_VALUES83_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, values_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "values_key"

    public static class case_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_key"
    // Keys.g:635:1: case_key : SQL92_RESERVED_CASE ;
    public final OracleParser_Keys.case_key_return case_key() throws RecognitionException {
        OracleParser_Keys.case_key_return retval = new OracleParser_Keys.case_key_return();
        retval.start = input.LT(1);
        int case_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_CASE84=null;

        Object SQL92_RESERVED_CASE84_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // Keys.g:636:5: ( SQL92_RESERVED_CASE )
            // Keys.g:636:10: SQL92_RESERVED_CASE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_CASE84=(Token)match(input,SQL92_RESERVED_CASE,FOLLOW_SQL92_RESERVED_CASE_in_case_key4232); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CASE84_tree = (Object)adaptor.create(SQL92_RESERVED_CASE84);
            adaptor.addChild(root_0, SQL92_RESERVED_CASE84_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, case_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_key"

    public static class bulk_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bulk_key"
    // Keys.g:639:1: bulk_key : {...}? => REGULAR_ID -> BULK_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.bulk_key_return bulk_key() throws RecognitionException {
        OracleParser_Keys.bulk_key_return retval = new OracleParser_Keys.bulk_key_return();
        retval.start = input.LT(1);
        int bulk_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID85=null;

        Object REGULAR_ID85_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // Keys.g:640:5: ({...}? => REGULAR_ID -> BULK_VK[$REGULAR_ID] )
            // Keys.g:640:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("bulk"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "bulk_key", "input.LT(1).getText().equalsIgnoreCase(\"bulk\")");
            }
            REGULAR_ID85=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_bulk_key4255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID85);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 640:73: -> BULK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BULK_VK, REGULAR_ID85));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, bulk_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bulk_key"

    public static class collect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collect_key"
    // Keys.g:643:1: collect_key : {...}? => REGULAR_ID -> COLLECT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.collect_key_return collect_key() throws RecognitionException {
        OracleParser_Keys.collect_key_return retval = new OracleParser_Keys.collect_key_return();
        retval.start = input.LT(1);
        int collect_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID86=null;

        Object REGULAR_ID86_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // Keys.g:644:5: ({...}? => REGULAR_ID -> COLLECT_VK[$REGULAR_ID] )
            // Keys.g:644:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("collect"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "collect_key", "input.LT(1).getText().equalsIgnoreCase(\"collect\")");
            }
            REGULAR_ID86=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_collect_key4283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID86);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 644:76: -> COLLECT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(COLLECT_VK, REGULAR_ID86));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, collect_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collect_key"

    public static class committed_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "committed_key"
    // Keys.g:647:1: committed_key : {...}? REGULAR_ID -> COMMITTED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.committed_key_return committed_key() throws RecognitionException {
        OracleParser_Keys.committed_key_return retval = new OracleParser_Keys.committed_key_return();
        retval.start = input.LT(1);
        int committed_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID87=null;

        Object REGULAR_ID87_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // Keys.g:648:5: ({...}? REGULAR_ID -> COMMITTED_VK[$REGULAR_ID] )
            // Keys.g:648:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("committed"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "committed_key", "input.LT(1).getText().equalsIgnoreCase(\"committed\")");
            }
            REGULAR_ID87=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_committed_key4310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID87);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 648:76: -> COMMITTED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(COMMITTED_VK, REGULAR_ID87));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, committed_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "committed_key"

    public static class use_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "use_key"
    // Keys.g:651:1: use_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.use_key_return use_key() throws RecognitionException {
        OracleParser_Keys.use_key_return retval = new OracleParser_Keys.use_key_return();
        retval.start = input.LT(1);
        int use_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID88=null;

        Object REGULAR_ID88_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // Keys.g:652:5: ({...}? => REGULAR_ID )
            // Keys.g:652:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("use"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "use_key", "input.LT(1).getText().equalsIgnoreCase(\"use\")");
            }
            REGULAR_ID88=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_use_key4338); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID88_tree = (Object)adaptor.create(REGULAR_ID88);
            adaptor.addChild(root_0, REGULAR_ID88_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, use_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "use_key"

    public static class level_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "level_key"
    // Keys.g:655:1: level_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.level_key_return level_key() throws RecognitionException {
        OracleParser_Keys.level_key_return retval = new OracleParser_Keys.level_key_return();
        retval.start = input.LT(1);
        int level_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID89=null;

        Object REGULAR_ID89_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // Keys.g:656:5: ({...}? REGULAR_ID )
            // Keys.g:656:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("level"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "level_key", "input.LT(1).getText().equalsIgnoreCase(\"level\")");
            }
            REGULAR_ID89=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_level_key4360); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID89_tree = (Object)adaptor.create(REGULAR_ID89);
            adaptor.addChild(root_0, REGULAR_ID89_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, level_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "level_key"

    public static class isolation_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "isolation_key"
    // Keys.g:659:1: isolation_key : {...}? => REGULAR_ID -> ISOLATION_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.isolation_key_return isolation_key() throws RecognitionException {
        OracleParser_Keys.isolation_key_return retval = new OracleParser_Keys.isolation_key_return();
        retval.start = input.LT(1);
        int isolation_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID90=null;

        Object REGULAR_ID90_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // Keys.g:660:5: ({...}? => REGULAR_ID -> ISOLATION_VK[$REGULAR_ID] )
            // Keys.g:660:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("isolation"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "isolation_key", "input.LT(1).getText().equalsIgnoreCase(\"isolation\")");
            }
            REGULAR_ID90=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_isolation_key4383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID90);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 660:78: -> ISOLATION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ISOLATION_VK, REGULAR_ID90));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, isolation_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "isolation_key"

    public static class serializable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "serializable_key"
    // Keys.g:663:1: serializable_key : {...}? REGULAR_ID -> SERIALIZABLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.serializable_key_return serializable_key() throws RecognitionException {
        OracleParser_Keys.serializable_key_return retval = new OracleParser_Keys.serializable_key_return();
        retval.start = input.LT(1);
        int serializable_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID91=null;

        Object REGULAR_ID91_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // Keys.g:664:5: ({...}? REGULAR_ID -> SERIALIZABLE_VK[$REGULAR_ID] )
            // Keys.g:664:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("serializable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "serializable_key", "input.LT(1).getText().equalsIgnoreCase(\"serializable\")");
            }
            REGULAR_ID91=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_serializable_key4410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID91);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 664:79: -> SERIALIZABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SERIALIZABLE_VK, REGULAR_ID91));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, serializable_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "serializable_key"

    public static class segment_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "segment_key"
    // Keys.g:667:1: segment_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.segment_key_return segment_key() throws RecognitionException {
        OracleParser_Keys.segment_key_return retval = new OracleParser_Keys.segment_key_return();
        retval.start = input.LT(1);
        int segment_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID92=null;

        Object REGULAR_ID92_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // Keys.g:668:5: ({...}? REGULAR_ID )
            // Keys.g:668:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("segment"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "segment_key", "input.LT(1).getText().equalsIgnoreCase(\"segment\")");
            }
            REGULAR_ID92=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_segment_key4437); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID92_tree = (Object)adaptor.create(REGULAR_ID92);
            adaptor.addChild(root_0, REGULAR_ID92_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, segment_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "segment_key"

    public static class write_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "write_key"
    // Keys.g:671:1: write_key : {...}? => REGULAR_ID -> WRITE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.write_key_return write_key() throws RecognitionException {
        OracleParser_Keys.write_key_return retval = new OracleParser_Keys.write_key_return();
        retval.start = input.LT(1);
        int write_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID93=null;

        Object REGULAR_ID93_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // Keys.g:672:5: ({...}? => REGULAR_ID -> WRITE_VK[$REGULAR_ID] )
            // Keys.g:672:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("write"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "write_key", "input.LT(1).getText().equalsIgnoreCase(\"write\")");
            }
            REGULAR_ID93=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_write_key4460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID93);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 672:74: -> WRITE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(WRITE_VK, REGULAR_ID93));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, write_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "write_key"

    public static class wait_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wait_key"
    // Keys.g:675:1: wait_key : {...}? => REGULAR_ID -> WAIT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.wait_key_return wait_key() throws RecognitionException {
        OracleParser_Keys.wait_key_return retval = new OracleParser_Keys.wait_key_return();
        retval.start = input.LT(1);
        int wait_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID94=null;

        Object REGULAR_ID94_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // Keys.g:676:5: ({...}? => REGULAR_ID -> WAIT_VK[$REGULAR_ID] )
            // Keys.g:676:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("wait"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "wait_key", "input.LT(1).getText().equalsIgnoreCase(\"wait\")");
            }
            REGULAR_ID94=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_wait_key4488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID94);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 676:73: -> WAIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(WAIT_VK, REGULAR_ID94));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, wait_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wait_key"

    public static class corrupt_xid_all_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "corrupt_xid_all_key"
    // Keys.g:679:1: corrupt_xid_all_key : {...}? => REGULAR_ID -> CORRUPT_XID_ALL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.corrupt_xid_all_key_return corrupt_xid_all_key() throws RecognitionException {
        OracleParser_Keys.corrupt_xid_all_key_return retval = new OracleParser_Keys.corrupt_xid_all_key_return();
        retval.start = input.LT(1);
        int corrupt_xid_all_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID95=null;

        Object REGULAR_ID95_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // Keys.g:680:5: ({...}? => REGULAR_ID -> CORRUPT_XID_ALL_VK[$REGULAR_ID] )
            // Keys.g:680:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("corrupt_xid_all"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "corrupt_xid_all_key", "input.LT(1).getText().equalsIgnoreCase(\"corrupt_xid_all\")");
            }
            REGULAR_ID95=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_corrupt_xid_all_key4516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID95);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 680:84: -> CORRUPT_XID_ALL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CORRUPT_XID_ALL_VK, REGULAR_ID95));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, corrupt_xid_all_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "corrupt_xid_all_key"

    public static class corrupt_xid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "corrupt_xid_key"
    // Keys.g:683:1: corrupt_xid_key : {...}? => REGULAR_ID -> CORRUPT_XID_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.corrupt_xid_key_return corrupt_xid_key() throws RecognitionException {
        OracleParser_Keys.corrupt_xid_key_return retval = new OracleParser_Keys.corrupt_xid_key_return();
        retval.start = input.LT(1);
        int corrupt_xid_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID96=null;

        Object REGULAR_ID96_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // Keys.g:684:5: ({...}? => REGULAR_ID -> CORRUPT_XID_VK[$REGULAR_ID] )
            // Keys.g:684:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("corrupt_xid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "corrupt_xid_key", "input.LT(1).getText().equalsIgnoreCase(\"corrupt_xid\")");
            }
            REGULAR_ID96=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_corrupt_xid_key4544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID96);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 684:80: -> CORRUPT_XID_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CORRUPT_XID_VK, REGULAR_ID96));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, corrupt_xid_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "corrupt_xid_key"

    public static class batch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "batch_key"
    // Keys.g:687:1: batch_key : {...}? => REGULAR_ID -> BATCH_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.batch_key_return batch_key() throws RecognitionException {
        OracleParser_Keys.batch_key_return retval = new OracleParser_Keys.batch_key_return();
        retval.start = input.LT(1);
        int batch_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID97=null;

        Object REGULAR_ID97_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // Keys.g:688:5: ({...}? => REGULAR_ID -> BATCH_VK[$REGULAR_ID] )
            // Keys.g:688:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("batch"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "batch_key", "input.LT(1).getText().equalsIgnoreCase(\"batch\")");
            }
            REGULAR_ID97=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_batch_key4572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID97);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 688:74: -> BATCH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BATCH_VK, REGULAR_ID97));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, batch_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "batch_key"

    public static class session_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "session_key"
    // Keys.g:691:1: session_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.session_key_return session_key() throws RecognitionException {
        OracleParser_Keys.session_key_return retval = new OracleParser_Keys.session_key_return();
        retval.start = input.LT(1);
        int session_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID98=null;

        Object REGULAR_ID98_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // Keys.g:692:5: ({...}? => REGULAR_ID )
            // Keys.g:692:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("session"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "session_key", "input.LT(1).getText().equalsIgnoreCase(\"session\")");
            }
            REGULAR_ID98=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_session_key4600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID98_tree = (Object)adaptor.create(REGULAR_ID98);
            adaptor.addChild(root_0, REGULAR_ID98_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, session_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "session_key"

    public static class role_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "role_key"
    // Keys.g:695:1: role_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.role_key_return role_key() throws RecognitionException {
        OracleParser_Keys.role_key_return retval = new OracleParser_Keys.role_key_return();
        retval.start = input.LT(1);
        int role_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID99=null;

        Object REGULAR_ID99_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // Keys.g:696:5: ({...}? => REGULAR_ID )
            // Keys.g:696:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("role"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "role_key", "input.LT(1).getText().equalsIgnoreCase(\"role\")");
            }
            REGULAR_ID99=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_role_key4623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID99_tree = (Object)adaptor.create(REGULAR_ID99);
            adaptor.addChild(root_0, REGULAR_ID99_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, role_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "role_key"

    public static class constraint_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint_key"
    // Keys.g:699:1: constraint_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.constraint_key_return constraint_key() throws RecognitionException {
        OracleParser_Keys.constraint_key_return retval = new OracleParser_Keys.constraint_key_return();
        retval.start = input.LT(1);
        int constraint_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID100=null;

        Object REGULAR_ID100_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // Keys.g:700:5: ({...}? => REGULAR_ID )
            // Keys.g:700:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("constraint"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "constraint_key", "input.LT(1).getText().equalsIgnoreCase(\"constraint\")");
            }
            REGULAR_ID100=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_constraint_key4646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID100_tree = (Object)adaptor.create(REGULAR_ID100);
            adaptor.addChild(root_0, REGULAR_ID100_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, constraint_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constraint_key"

    public static class constraints_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraints_key"
    // Keys.g:703:1: constraints_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.constraints_key_return constraints_key() throws RecognitionException {
        OracleParser_Keys.constraints_key_return retval = new OracleParser_Keys.constraints_key_return();
        retval.start = input.LT(1);
        int constraints_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID101=null;

        Object REGULAR_ID101_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // Keys.g:704:5: ({...}? => REGULAR_ID )
            // Keys.g:704:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("constraints"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "constraints_key", "input.LT(1).getText().equalsIgnoreCase(\"constraints\")");
            }
            REGULAR_ID101=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_constraints_key4669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID101_tree = (Object)adaptor.create(REGULAR_ID101);
            adaptor.addChild(root_0, REGULAR_ID101_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, constraints_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constraints_key"

    public static class call_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "call_key"
    // Keys.g:707:1: call_key : {...}? => REGULAR_ID -> CALL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.call_key_return call_key() throws RecognitionException {
        OracleParser_Keys.call_key_return retval = new OracleParser_Keys.call_key_return();
        retval.start = input.LT(1);
        int call_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID102=null;

        Object REGULAR_ID102_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // Keys.g:708:5: ({...}? => REGULAR_ID -> CALL_VK[$REGULAR_ID] )
            // Keys.g:708:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("call"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "call_key", "input.LT(1).getText().equalsIgnoreCase(\"call\")");
            }
            REGULAR_ID102=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_call_key4692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID102);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 708:73: -> CALL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CALL_VK, REGULAR_ID102));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, call_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "call_key"

    public static class explain_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explain_key"
    // Keys.g:711:1: explain_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.explain_key_return explain_key() throws RecognitionException {
        OracleParser_Keys.explain_key_return retval = new OracleParser_Keys.explain_key_return();
        retval.start = input.LT(1);
        int explain_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID103=null;

        Object REGULAR_ID103_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // Keys.g:712:5: ({...}? => REGULAR_ID )
            // Keys.g:712:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("explain"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "explain_key", "input.LT(1).getText().equalsIgnoreCase(\"explain\")");
            }
            REGULAR_ID103=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_explain_key4720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID103_tree = (Object)adaptor.create(REGULAR_ID103);
            adaptor.addChild(root_0, REGULAR_ID103_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, explain_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explain_key"

    public static class merge_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_key"
    // Keys.g:715:1: merge_key : {...}? => REGULAR_ID -> MERGE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.merge_key_return merge_key() throws RecognitionException {
        OracleParser_Keys.merge_key_return retval = new OracleParser_Keys.merge_key_return();
        retval.start = input.LT(1);
        int merge_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID104=null;

        Object REGULAR_ID104_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // Keys.g:716:5: ({...}? => REGULAR_ID -> MERGE_VK[$REGULAR_ID] )
            // Keys.g:716:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("merge"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "merge_key", "input.LT(1).getText().equalsIgnoreCase(\"merge\")");
            }
            REGULAR_ID104=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_merge_key4743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID104);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 716:74: -> MERGE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(MERGE_VK, REGULAR_ID104));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, merge_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "merge_key"

    public static class plan_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plan_key"
    // Keys.g:719:1: plan_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.plan_key_return plan_key() throws RecognitionException {
        OracleParser_Keys.plan_key_return retval = new OracleParser_Keys.plan_key_return();
        retval.start = input.LT(1);
        int plan_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID105=null;

        Object REGULAR_ID105_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // Keys.g:720:5: ({...}? => REGULAR_ID )
            // Keys.g:720:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("plan"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "plan_key", "input.LT(1).getText().equalsIgnoreCase(\"plan\")");
            }
            REGULAR_ID105=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_plan_key4771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID105_tree = (Object)adaptor.create(REGULAR_ID105);
            adaptor.addChild(root_0, REGULAR_ID105_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, plan_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plan_key"

    public static class system_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "system_key"
    // Keys.g:723:1: system_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.system_key_return system_key() throws RecognitionException {
        OracleParser_Keys.system_key_return retval = new OracleParser_Keys.system_key_return();
        retval.start = input.LT(1);
        int system_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID106=null;

        Object REGULAR_ID106_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // Keys.g:724:5: ({...}? => REGULAR_ID )
            // Keys.g:724:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("system"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "system_key", "input.LT(1).getText().equalsIgnoreCase(\"system\")");
            }
            REGULAR_ID106=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_system_key4794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID106_tree = (Object)adaptor.create(REGULAR_ID106);
            adaptor.addChild(root_0, REGULAR_ID106_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, system_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "system_key"

    public static class subpartition_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subpartition_key"
    // Keys.g:727:1: subpartition_key : {...}? => REGULAR_ID -> SUBPARTITION_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.subpartition_key_return subpartition_key() throws RecognitionException {
        OracleParser_Keys.subpartition_key_return retval = new OracleParser_Keys.subpartition_key_return();
        retval.start = input.LT(1);
        int subpartition_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID107=null;

        Object REGULAR_ID107_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // Keys.g:728:5: ({...}? => REGULAR_ID -> SUBPARTITION_VK[$REGULAR_ID] )
            // Keys.g:728:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("subpartition"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "subpartition_key", "input.LT(1).getText().equalsIgnoreCase(\"subpartition\")");
            }
            REGULAR_ID107=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_subpartition_key4817); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID107);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 728:81: -> SUBPARTITION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SUBPARTITION_VK, REGULAR_ID107));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, subpartition_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subpartition_key"

    public static class partition_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "partition_key"
    // Keys.g:731:1: partition_key : {...}? => REGULAR_ID -> PARTITION_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.partition_key_return partition_key() throws RecognitionException {
        OracleParser_Keys.partition_key_return retval = new OracleParser_Keys.partition_key_return();
        retval.start = input.LT(1);
        int partition_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID108=null;

        Object REGULAR_ID108_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // Keys.g:732:5: ({...}? => REGULAR_ID -> PARTITION_VK[$REGULAR_ID] )
            // Keys.g:732:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("partition"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "partition_key", "input.LT(1).getText().equalsIgnoreCase(\"partition\")");
            }
            REGULAR_ID108=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_partition_key4845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID108);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 732:78: -> PARTITION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PARTITION_VK, REGULAR_ID108));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, partition_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "partition_key"

    public static class matched_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matched_key"
    // Keys.g:735:1: matched_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.matched_key_return matched_key() throws RecognitionException {
        OracleParser_Keys.matched_key_return retval = new OracleParser_Keys.matched_key_return();
        retval.start = input.LT(1);
        int matched_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID109=null;

        Object REGULAR_ID109_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // Keys.g:736:5: ({...}? => REGULAR_ID )
            // Keys.g:736:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("matched"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "matched_key", "input.LT(1).getText().equalsIgnoreCase(\"matched\")");
            }
            REGULAR_ID109=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_matched_key4873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID109_tree = (Object)adaptor.create(REGULAR_ID109);
            adaptor.addChild(root_0, REGULAR_ID109_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, matched_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "matched_key"

    public static class reject_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reject_key"
    // Keys.g:739:1: reject_key : {...}? => REGULAR_ID -> REJECT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.reject_key_return reject_key() throws RecognitionException {
        OracleParser_Keys.reject_key_return retval = new OracleParser_Keys.reject_key_return();
        retval.start = input.LT(1);
        int reject_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID110=null;

        Object REGULAR_ID110_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // Keys.g:740:5: ({...}? => REGULAR_ID -> REJECT_VK[$REGULAR_ID] )
            // Keys.g:740:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("reject"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reject_key", "input.LT(1).getText().equalsIgnoreCase(\"reject\")");
            }
            REGULAR_ID110=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_reject_key4896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID110);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 740:75: -> REJECT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(REJECT_VK, REGULAR_ID110));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, reject_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reject_key"

    public static class log_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "log_key"
    // Keys.g:743:1: log_key : {...}? => REGULAR_ID -> LOG_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.log_key_return log_key() throws RecognitionException {
        OracleParser_Keys.log_key_return retval = new OracleParser_Keys.log_key_return();
        retval.start = input.LT(1);
        int log_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID111=null;

        Object REGULAR_ID111_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // Keys.g:744:5: ({...}? => REGULAR_ID -> LOG_VK[$REGULAR_ID] )
            // Keys.g:744:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("log"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "log_key", "input.LT(1).getText().equalsIgnoreCase(\"log\")");
            }
            REGULAR_ID111=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_log_key4924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID111);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 744:72: -> LOG_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LOG_VK, REGULAR_ID111));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, log_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "log_key"

    public static class unlimited_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unlimited_key"
    // Keys.g:747:1: unlimited_key : {...}? => REGULAR_ID -> UNLIMITED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.unlimited_key_return unlimited_key() throws RecognitionException {
        OracleParser_Keys.unlimited_key_return retval = new OracleParser_Keys.unlimited_key_return();
        retval.start = input.LT(1);
        int unlimited_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID112=null;

        Object REGULAR_ID112_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // Keys.g:748:5: ({...}? => REGULAR_ID -> UNLIMITED_VK[$REGULAR_ID] )
            // Keys.g:748:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("unlimited"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "unlimited_key", "input.LT(1).getText().equalsIgnoreCase(\"unlimited\")");
            }
            REGULAR_ID112=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_unlimited_key4952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID112);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 748:78: -> UNLIMITED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(UNLIMITED_VK, REGULAR_ID112));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, unlimited_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unlimited_key"

    public static class limit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "limit_key"
    // Keys.g:751:1: limit_key : {...}? => REGULAR_ID -> LIMIT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.limit_key_return limit_key() throws RecognitionException {
        OracleParser_Keys.limit_key_return retval = new OracleParser_Keys.limit_key_return();
        retval.start = input.LT(1);
        int limit_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID113=null;

        Object REGULAR_ID113_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // Keys.g:752:5: ({...}? => REGULAR_ID -> LIMIT_VK[$REGULAR_ID] )
            // Keys.g:752:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("limit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "limit_key", "input.LT(1).getText().equalsIgnoreCase(\"limit\")");
            }
            REGULAR_ID113=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_limit_key4980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID113);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 752:74: -> LIMIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LIMIT_VK, REGULAR_ID113));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, limit_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "limit_key"

    public static class errors_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "errors_key"
    // Keys.g:755:1: errors_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.errors_key_return errors_key() throws RecognitionException {
        OracleParser_Keys.errors_key_return retval = new OracleParser_Keys.errors_key_return();
        retval.start = input.LT(1);
        int errors_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID114=null;

        Object REGULAR_ID114_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // Keys.g:756:5: ({...}? => REGULAR_ID )
            // Keys.g:756:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("errors"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "errors_key", "input.LT(1).getText().equalsIgnoreCase(\"errors\")");
            }
            REGULAR_ID114=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_errors_key5008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID114_tree = (Object)adaptor.create(REGULAR_ID114);
            adaptor.addChild(root_0, REGULAR_ID114_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, errors_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "errors_key"

    public static class timestamp_tz_unconstrained_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_tz_unconstrained_key"
    // Keys.g:759:1: timestamp_tz_unconstrained_key : {...}? => REGULAR_ID -> TIMESTAMP_TZ_UNCONSTRAINED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.timestamp_tz_unconstrained_key_return timestamp_tz_unconstrained_key() throws RecognitionException {
        OracleParser_Keys.timestamp_tz_unconstrained_key_return retval = new OracleParser_Keys.timestamp_tz_unconstrained_key_return();
        retval.start = input.LT(1);
        int timestamp_tz_unconstrained_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID115=null;

        Object REGULAR_ID115_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // Keys.g:760:5: ({...}? => REGULAR_ID -> TIMESTAMP_TZ_UNCONSTRAINED_VK[$REGULAR_ID] )
            // Keys.g:760:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timestamp_tz_unconstrained"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timestamp_tz_unconstrained_key", "input.LT(1).getText().equalsIgnoreCase(\"timestamp_tz_unconstrained\")");
            }
            REGULAR_ID115=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timestamp_tz_unconstrained_key5031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID115);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 760:95: -> TIMESTAMP_TZ_UNCONSTRAINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TIMESTAMP_TZ_UNCONSTRAINED_VK, REGULAR_ID115));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, timestamp_tz_unconstrained_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_tz_unconstrained_key"

    public static class urowid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urowid_key"
    // Keys.g:763:1: urowid_key : {...}? => REGULAR_ID -> UROWID_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.urowid_key_return urowid_key() throws RecognitionException {
        OracleParser_Keys.urowid_key_return retval = new OracleParser_Keys.urowid_key_return();
        retval.start = input.LT(1);
        int urowid_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID116=null;

        Object REGULAR_ID116_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // Keys.g:764:5: ({...}? => REGULAR_ID -> UROWID_VK[$REGULAR_ID] )
            // Keys.g:764:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("urowid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "urowid_key", "input.LT(1).getText().equalsIgnoreCase(\"urowid\")");
            }
            REGULAR_ID116=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_urowid_key5059); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID116);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 764:75: -> UROWID_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(UROWID_VK, REGULAR_ID116));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, urowid_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "urowid_key"

    public static class binary_float_min_subnormal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_float_min_subnormal_key"
    // Keys.g:767:1: binary_float_min_subnormal_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_float_min_subnormal_key_return binary_float_min_subnormal_key() throws RecognitionException {
        OracleParser_Keys.binary_float_min_subnormal_key_return retval = new OracleParser_Keys.binary_float_min_subnormal_key_return();
        retval.start = input.LT(1);
        int binary_float_min_subnormal_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID117=null;

        Object REGULAR_ID117_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // Keys.g:768:5: ({...}? => REGULAR_ID )
            // Keys.g:768:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_min_subnormal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_min_subnormal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_min_subnormal\")");
            }
            REGULAR_ID117=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_min_subnormal_key5087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID117_tree = (Object)adaptor.create(REGULAR_ID117);
            adaptor.addChild(root_0, REGULAR_ID117_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, binary_float_min_subnormal_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_float_min_subnormal_key"

    public static class binary_double_min_normal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_double_min_normal_key"
    // Keys.g:771:1: binary_double_min_normal_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_double_min_normal_key_return binary_double_min_normal_key() throws RecognitionException {
        OracleParser_Keys.binary_double_min_normal_key_return retval = new OracleParser_Keys.binary_double_min_normal_key_return();
        retval.start = input.LT(1);
        int binary_double_min_normal_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID118=null;

        Object REGULAR_ID118_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // Keys.g:772:5: ({...}? => REGULAR_ID )
            // Keys.g:772:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_min_normal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_min_normal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_min_normal\")");
            }
            REGULAR_ID118=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_min_normal_key5110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID118_tree = (Object)adaptor.create(REGULAR_ID118);
            adaptor.addChild(root_0, REGULAR_ID118_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, binary_double_min_normal_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_double_min_normal_key"

    public static class binary_float_max_normal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_float_max_normal_key"
    // Keys.g:775:1: binary_float_max_normal_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_float_max_normal_key_return binary_float_max_normal_key() throws RecognitionException {
        OracleParser_Keys.binary_float_max_normal_key_return retval = new OracleParser_Keys.binary_float_max_normal_key_return();
        retval.start = input.LT(1);
        int binary_float_max_normal_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID119=null;

        Object REGULAR_ID119_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // Keys.g:776:5: ({...}? => REGULAR_ID )
            // Keys.g:776:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_max_normal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_max_normal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_max_normal\")");
            }
            REGULAR_ID119=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_max_normal_key5133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID119_tree = (Object)adaptor.create(REGULAR_ID119);
            adaptor.addChild(root_0, REGULAR_ID119_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, binary_float_max_normal_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_float_max_normal_key"

    public static class positiven_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "positiven_key"
    // Keys.g:779:1: positiven_key : {...}? => REGULAR_ID -> POSITIVEN_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.positiven_key_return positiven_key() throws RecognitionException {
        OracleParser_Keys.positiven_key_return retval = new OracleParser_Keys.positiven_key_return();
        retval.start = input.LT(1);
        int positiven_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID120=null;

        Object REGULAR_ID120_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // Keys.g:780:5: ({...}? => REGULAR_ID -> POSITIVEN_VK[$REGULAR_ID] )
            // Keys.g:780:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("positiven"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "positiven_key", "input.LT(1).getText().equalsIgnoreCase(\"positiven\")");
            }
            REGULAR_ID120=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_positiven_key5156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID120);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 780:78: -> POSITIVEN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(POSITIVEN_VK, REGULAR_ID120));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, positiven_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "positiven_key"

    public static class timezone_abbr_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timezone_abbr_key"
    // Keys.g:783:1: timezone_abbr_key : {...}? => REGULAR_ID -> TIMEZONE_ABBR_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.timezone_abbr_key_return timezone_abbr_key() throws RecognitionException {
        OracleParser_Keys.timezone_abbr_key_return retval = new OracleParser_Keys.timezone_abbr_key_return();
        retval.start = input.LT(1);
        int timezone_abbr_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID121=null;

        Object REGULAR_ID121_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // Keys.g:784:5: ({...}? => REGULAR_ID -> TIMEZONE_ABBR_VK[$REGULAR_ID] )
            // Keys.g:784:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timezone_abbr"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timezone_abbr_key", "input.LT(1).getText().equalsIgnoreCase(\"timezone_abbr\")");
            }
            REGULAR_ID121=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timezone_abbr_key5184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID121);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 784:82: -> TIMEZONE_ABBR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TIMEZONE_ABBR_VK, REGULAR_ID121));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, timezone_abbr_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timezone_abbr_key"

    public static class binary_double_min_subnormal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_double_min_subnormal_key"
    // Keys.g:787:1: binary_double_min_subnormal_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_double_min_subnormal_key_return binary_double_min_subnormal_key() throws RecognitionException {
        OracleParser_Keys.binary_double_min_subnormal_key_return retval = new OracleParser_Keys.binary_double_min_subnormal_key_return();
        retval.start = input.LT(1);
        int binary_double_min_subnormal_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID122=null;

        Object REGULAR_ID122_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // Keys.g:788:5: ({...}? => REGULAR_ID )
            // Keys.g:788:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_min_subnormal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_min_subnormal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_min_subnormal\")");
            }
            REGULAR_ID122=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_min_subnormal_key5212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID122_tree = (Object)adaptor.create(REGULAR_ID122);
            adaptor.addChild(root_0, REGULAR_ID122_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, binary_double_min_subnormal_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_double_min_subnormal_key"

    public static class binary_float_max_subnormal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_float_max_subnormal_key"
    // Keys.g:791:1: binary_float_max_subnormal_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_float_max_subnormal_key_return binary_float_max_subnormal_key() throws RecognitionException {
        OracleParser_Keys.binary_float_max_subnormal_key_return retval = new OracleParser_Keys.binary_float_max_subnormal_key_return();
        retval.start = input.LT(1);
        int binary_float_max_subnormal_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID123=null;

        Object REGULAR_ID123_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // Keys.g:792:5: ({...}? => REGULAR_ID )
            // Keys.g:792:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_max_subnormal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_max_subnormal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_max_subnormal\")");
            }
            REGULAR_ID123=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_max_subnormal_key5235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID123_tree = (Object)adaptor.create(REGULAR_ID123);
            adaptor.addChild(root_0, REGULAR_ID123_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, binary_float_max_subnormal_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_float_max_subnormal_key"

    public static class binary_double_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_double_key"
    // Keys.g:795:1: binary_double_key : {...}? => REGULAR_ID -> BINARY_DOUBLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.binary_double_key_return binary_double_key() throws RecognitionException {
        OracleParser_Keys.binary_double_key_return retval = new OracleParser_Keys.binary_double_key_return();
        retval.start = input.LT(1);
        int binary_double_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID124=null;

        Object REGULAR_ID124_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // Keys.g:796:5: ({...}? => REGULAR_ID -> BINARY_DOUBLE_VK[$REGULAR_ID] )
            // Keys.g:796:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double\")");
            }
            REGULAR_ID124=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_key5258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID124);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 796:82: -> BINARY_DOUBLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BINARY_DOUBLE_VK, REGULAR_ID124));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, binary_double_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_double_key"

    public static class bfile_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bfile_key"
    // Keys.g:799:1: bfile_key : {...}? => REGULAR_ID -> BFILE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.bfile_key_return bfile_key() throws RecognitionException {
        OracleParser_Keys.bfile_key_return retval = new OracleParser_Keys.bfile_key_return();
        retval.start = input.LT(1);
        int bfile_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID125=null;

        Object REGULAR_ID125_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // Keys.g:800:5: ({...}? => REGULAR_ID -> BFILE_VK[$REGULAR_ID] )
            // Keys.g:800:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("bfile"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "bfile_key", "input.LT(1).getText().equalsIgnoreCase(\"bfile\")");
            }
            REGULAR_ID125=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_bfile_key5286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID125);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 800:74: -> BFILE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BFILE_VK, REGULAR_ID125));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, bfile_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bfile_key"

    public static class binary_double_infinity_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_double_infinity_key"
    // Keys.g:803:1: binary_double_infinity_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_double_infinity_key_return binary_double_infinity_key() throws RecognitionException {
        OracleParser_Keys.binary_double_infinity_key_return retval = new OracleParser_Keys.binary_double_infinity_key_return();
        retval.start = input.LT(1);
        int binary_double_infinity_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID126=null;

        Object REGULAR_ID126_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // Keys.g:804:5: ({...}? => REGULAR_ID )
            // Keys.g:804:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_infinity"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_infinity_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_infinity\")");
            }
            REGULAR_ID126=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_infinity_key5314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID126_tree = (Object)adaptor.create(REGULAR_ID126);
            adaptor.addChild(root_0, REGULAR_ID126_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, binary_double_infinity_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_double_infinity_key"

    public static class timezone_region_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timezone_region_key"
    // Keys.g:807:1: timezone_region_key : {...}? => REGULAR_ID -> TIMEZONE_REGION_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.timezone_region_key_return timezone_region_key() throws RecognitionException {
        OracleParser_Keys.timezone_region_key_return retval = new OracleParser_Keys.timezone_region_key_return();
        retval.start = input.LT(1);
        int timezone_region_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID127=null;

        Object REGULAR_ID127_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // Keys.g:808:5: ({...}? => REGULAR_ID -> TIMEZONE_REGION_VK[$REGULAR_ID] )
            // Keys.g:808:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timezone_region"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timezone_region_key", "input.LT(1).getText().equalsIgnoreCase(\"timezone_region\")");
            }
            REGULAR_ID127=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timezone_region_key5337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID127);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 808:84: -> TIMEZONE_REGION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TIMEZONE_REGION_VK, REGULAR_ID127));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, timezone_region_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timezone_region_key"

    public static class timestamp_ltz_unconstrained_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_ltz_unconstrained_key"
    // Keys.g:811:1: timestamp_ltz_unconstrained_key : {...}? => REGULAR_ID -> TIMESTAMP_LTZ_UNCONSTRAINED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.timestamp_ltz_unconstrained_key_return timestamp_ltz_unconstrained_key() throws RecognitionException {
        OracleParser_Keys.timestamp_ltz_unconstrained_key_return retval = new OracleParser_Keys.timestamp_ltz_unconstrained_key_return();
        retval.start = input.LT(1);
        int timestamp_ltz_unconstrained_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID128=null;

        Object REGULAR_ID128_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // Keys.g:812:5: ({...}? => REGULAR_ID -> TIMESTAMP_LTZ_UNCONSTRAINED_VK[$REGULAR_ID] )
            // Keys.g:812:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timestamp_ltz_unconstrained"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timestamp_ltz_unconstrained_key", "input.LT(1).getText().equalsIgnoreCase(\"timestamp_ltz_unconstrained\")");
            }
            REGULAR_ID128=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timestamp_ltz_unconstrained_key5365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID128);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 812:96: -> TIMESTAMP_LTZ_UNCONSTRAINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TIMESTAMP_LTZ_UNCONSTRAINED_VK, REGULAR_ID128));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, timestamp_ltz_unconstrained_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_ltz_unconstrained_key"

    public static class naturaln_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "naturaln_key"
    // Keys.g:815:1: naturaln_key : {...}? => REGULAR_ID -> NATURALN_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.naturaln_key_return naturaln_key() throws RecognitionException {
        OracleParser_Keys.naturaln_key_return retval = new OracleParser_Keys.naturaln_key_return();
        retval.start = input.LT(1);
        int naturaln_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID129=null;

        Object REGULAR_ID129_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // Keys.g:816:5: ({...}? => REGULAR_ID -> NATURALN_VK[$REGULAR_ID] )
            // Keys.g:816:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("naturaln"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "naturaln_key", "input.LT(1).getText().equalsIgnoreCase(\"naturaln\")");
            }
            REGULAR_ID129=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_naturaln_key5393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID129);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 816:77: -> NATURALN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NATURALN_VK, REGULAR_ID129));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, naturaln_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "naturaln_key"

    public static class simple_integer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_integer_key"
    // Keys.g:819:1: simple_integer_key : {...}? => REGULAR_ID -> SIMPLE_INTEGER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.simple_integer_key_return simple_integer_key() throws RecognitionException {
        OracleParser_Keys.simple_integer_key_return retval = new OracleParser_Keys.simple_integer_key_return();
        retval.start = input.LT(1);
        int simple_integer_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID130=null;

        Object REGULAR_ID130_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // Keys.g:820:5: ({...}? => REGULAR_ID -> SIMPLE_INTEGER_VK[$REGULAR_ID] )
            // Keys.g:820:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("simple_integer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "simple_integer_key", "input.LT(1).getText().equalsIgnoreCase(\"simple_integer\")");
            }
            REGULAR_ID130=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_simple_integer_key5421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID130);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 820:83: -> SIMPLE_INTEGER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIMPLE_INTEGER_VK, REGULAR_ID130));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, simple_integer_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_integer_key"

    public static class binary_double_max_subnormal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_double_max_subnormal_key"
    // Keys.g:823:1: binary_double_max_subnormal_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_double_max_subnormal_key_return binary_double_max_subnormal_key() throws RecognitionException {
        OracleParser_Keys.binary_double_max_subnormal_key_return retval = new OracleParser_Keys.binary_double_max_subnormal_key_return();
        retval.start = input.LT(1);
        int binary_double_max_subnormal_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID131=null;

        Object REGULAR_ID131_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // Keys.g:824:5: ({...}? => REGULAR_ID )
            // Keys.g:824:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_max_subnormal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_max_subnormal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_max_subnormal\")");
            }
            REGULAR_ID131=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_max_subnormal_key5449); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID131_tree = (Object)adaptor.create(REGULAR_ID131);
            adaptor.addChild(root_0, REGULAR_ID131_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, binary_double_max_subnormal_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_double_max_subnormal_key"

    public static class byte_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "byte_key"
    // Keys.g:827:1: byte_key : {...}? => REGULAR_ID -> BYTE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.byte_key_return byte_key() throws RecognitionException {
        OracleParser_Keys.byte_key_return retval = new OracleParser_Keys.byte_key_return();
        retval.start = input.LT(1);
        int byte_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID132=null;

        Object REGULAR_ID132_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // Keys.g:828:5: ({...}? => REGULAR_ID -> BYTE_VK[$REGULAR_ID] )
            // Keys.g:828:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("byte"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "byte_key", "input.LT(1).getText().equalsIgnoreCase(\"byte\")");
            }
            REGULAR_ID132=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_byte_key5472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID132);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 828:73: -> BYTE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BYTE_VK, REGULAR_ID132));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, byte_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "byte_key"

    public static class binary_float_infinity_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_float_infinity_key"
    // Keys.g:831:1: binary_float_infinity_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_float_infinity_key_return binary_float_infinity_key() throws RecognitionException {
        OracleParser_Keys.binary_float_infinity_key_return retval = new OracleParser_Keys.binary_float_infinity_key_return();
        retval.start = input.LT(1);
        int binary_float_infinity_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID133=null;

        Object REGULAR_ID133_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // Keys.g:832:5: ({...}? => REGULAR_ID )
            // Keys.g:832:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_infinity"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_infinity_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_infinity\")");
            }
            REGULAR_ID133=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_infinity_key5500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID133_tree = (Object)adaptor.create(REGULAR_ID133);
            adaptor.addChild(root_0, REGULAR_ID133_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, binary_float_infinity_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_float_infinity_key"

    public static class binary_float_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_float_key"
    // Keys.g:835:1: binary_float_key : {...}? => REGULAR_ID -> BINARY_FLOAT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.binary_float_key_return binary_float_key() throws RecognitionException {
        OracleParser_Keys.binary_float_key_return retval = new OracleParser_Keys.binary_float_key_return();
        retval.start = input.LT(1);
        int binary_float_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID134=null;

        Object REGULAR_ID134_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // Keys.g:836:5: ({...}? => REGULAR_ID -> BINARY_FLOAT_VK[$REGULAR_ID] )
            // Keys.g:836:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float\")");
            }
            REGULAR_ID134=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_key5523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID134);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 836:81: -> BINARY_FLOAT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BINARY_FLOAT_VK, REGULAR_ID134));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, binary_float_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_float_key"

    public static class range_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range_key"
    // Keys.g:839:1: range_key : {...}? => REGULAR_ID -> RANGE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.range_key_return range_key() throws RecognitionException {
        OracleParser_Keys.range_key_return retval = new OracleParser_Keys.range_key_return();
        retval.start = input.LT(1);
        int range_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID135=null;

        Object REGULAR_ID135_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // Keys.g:840:5: ({...}? => REGULAR_ID -> RANGE_VK[$REGULAR_ID] )
            // Keys.g:840:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("range"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "range_key", "input.LT(1).getText().equalsIgnoreCase(\"range\")");
            }
            REGULAR_ID135=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_range_key5551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID135);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 840:74: -> RANGE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(RANGE_VK, REGULAR_ID135));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, range_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range_key"

    public static class nclob_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nclob_key"
    // Keys.g:843:1: nclob_key : {...}? => REGULAR_ID -> NCLOB_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nclob_key_return nclob_key() throws RecognitionException {
        OracleParser_Keys.nclob_key_return retval = new OracleParser_Keys.nclob_key_return();
        retval.start = input.LT(1);
        int nclob_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID136=null;

        Object REGULAR_ID136_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // Keys.g:844:5: ({...}? => REGULAR_ID -> NCLOB_VK[$REGULAR_ID] )
            // Keys.g:844:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nclob"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nclob_key", "input.LT(1).getText().equalsIgnoreCase(\"nclob\")");
            }
            REGULAR_ID136=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nclob_key5579); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID136);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 844:74: -> NCLOB_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NCLOB_VK, REGULAR_ID136));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, nclob_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nclob_key"

    public static class clob_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clob_key"
    // Keys.g:847:1: clob_key : {...}? => REGULAR_ID -> CLOB_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.clob_key_return clob_key() throws RecognitionException {
        OracleParser_Keys.clob_key_return retval = new OracleParser_Keys.clob_key_return();
        retval.start = input.LT(1);
        int clob_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID137=null;

        Object REGULAR_ID137_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // Keys.g:848:5: ({...}? => REGULAR_ID -> CLOB_VK[$REGULAR_ID] )
            // Keys.g:848:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("clob"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "clob_key", "input.LT(1).getText().equalsIgnoreCase(\"clob\")");
            }
            REGULAR_ID137=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_clob_key5607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID137);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 848:73: -> CLOB_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CLOB_VK, REGULAR_ID137));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, clob_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clob_key"

    public static class dsinterval_unconstrained_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dsinterval_unconstrained_key"
    // Keys.g:851:1: dsinterval_unconstrained_key : {...}? => REGULAR_ID -> DSINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.dsinterval_unconstrained_key_return dsinterval_unconstrained_key() throws RecognitionException {
        OracleParser_Keys.dsinterval_unconstrained_key_return retval = new OracleParser_Keys.dsinterval_unconstrained_key_return();
        retval.start = input.LT(1);
        int dsinterval_unconstrained_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID138=null;

        Object REGULAR_ID138_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // Keys.g:852:5: ({...}? => REGULAR_ID -> DSINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID] )
            // Keys.g:852:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("dsinterval_unconstrained"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dsinterval_unconstrained_key", "input.LT(1).getText().equalsIgnoreCase(\"dsinterval_unconstrained\")");
            }
            REGULAR_ID138=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dsinterval_unconstrained_key5635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID138);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 852:93: -> DSINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DSINTERVAL_UNCONSTRAINED_VK, REGULAR_ID138));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, dsinterval_unconstrained_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dsinterval_unconstrained_key"

    public static class yminterval_unconstrained_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yminterval_unconstrained_key"
    // Keys.g:855:1: yminterval_unconstrained_key : {...}? => REGULAR_ID -> YMINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.yminterval_unconstrained_key_return yminterval_unconstrained_key() throws RecognitionException {
        OracleParser_Keys.yminterval_unconstrained_key_return retval = new OracleParser_Keys.yminterval_unconstrained_key_return();
        retval.start = input.LT(1);
        int yminterval_unconstrained_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID139=null;

        Object REGULAR_ID139_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // Keys.g:856:5: ({...}? => REGULAR_ID -> YMINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID] )
            // Keys.g:856:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("yminterval_unconstrained"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "yminterval_unconstrained_key", "input.LT(1).getText().equalsIgnoreCase(\"yminterval_unconstrained\")");
            }
            REGULAR_ID139=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_yminterval_unconstrained_key5663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID139);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 856:93: -> YMINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(YMINTERVAL_UNCONSTRAINED_VK, REGULAR_ID139));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, yminterval_unconstrained_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yminterval_unconstrained_key"

    public static class rowid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowid_key"
    // Keys.g:859:1: rowid_key : {...}? => REGULAR_ID -> ROWID_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.rowid_key_return rowid_key() throws RecognitionException {
        OracleParser_Keys.rowid_key_return retval = new OracleParser_Keys.rowid_key_return();
        retval.start = input.LT(1);
        int rowid_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID140=null;

        Object REGULAR_ID140_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // Keys.g:860:5: ({...}? => REGULAR_ID -> ROWID_VK[$REGULAR_ID] )
            // Keys.g:860:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rowid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rowid_key", "input.LT(1).getText().equalsIgnoreCase(\"rowid\")");
            }
            REGULAR_ID140=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rowid_key5691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID140);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 860:74: -> ROWID_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ROWID_VK, REGULAR_ID140));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, rowid_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rowid_key"

    public static class binary_double_nan_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_double_nan_key"
    // Keys.g:863:1: binary_double_nan_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_double_nan_key_return binary_double_nan_key() throws RecognitionException {
        OracleParser_Keys.binary_double_nan_key_return retval = new OracleParser_Keys.binary_double_nan_key_return();
        retval.start = input.LT(1);
        int binary_double_nan_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID141=null;

        Object REGULAR_ID141_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // Keys.g:864:5: ({...}? => REGULAR_ID )
            // Keys.g:864:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_nan"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_nan_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_nan\")");
            }
            REGULAR_ID141=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_nan_key5719); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID141_tree = (Object)adaptor.create(REGULAR_ID141);
            adaptor.addChild(root_0, REGULAR_ID141_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, binary_double_nan_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_double_nan_key"

    public static class timestamp_unconstrained_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_unconstrained_key"
    // Keys.g:867:1: timestamp_unconstrained_key : {...}? => REGULAR_ID -> TIMESTAMP_UNCONSTRAINED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.timestamp_unconstrained_key_return timestamp_unconstrained_key() throws RecognitionException {
        OracleParser_Keys.timestamp_unconstrained_key_return retval = new OracleParser_Keys.timestamp_unconstrained_key_return();
        retval.start = input.LT(1);
        int timestamp_unconstrained_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID142=null;

        Object REGULAR_ID142_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // Keys.g:868:5: ({...}? => REGULAR_ID -> TIMESTAMP_UNCONSTRAINED_VK[$REGULAR_ID] )
            // Keys.g:868:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timestamp_unconstrained"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timestamp_unconstrained_key", "input.LT(1).getText().equalsIgnoreCase(\"timestamp_unconstrained\")");
            }
            REGULAR_ID142=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timestamp_unconstrained_key5742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID142);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 868:92: -> TIMESTAMP_UNCONSTRAINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TIMESTAMP_UNCONSTRAINED_VK, REGULAR_ID142));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, timestamp_unconstrained_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_unconstrained_key"

    public static class binary_float_min_normal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_float_min_normal_key"
    // Keys.g:871:1: binary_float_min_normal_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_float_min_normal_key_return binary_float_min_normal_key() throws RecognitionException {
        OracleParser_Keys.binary_float_min_normal_key_return retval = new OracleParser_Keys.binary_float_min_normal_key_return();
        retval.start = input.LT(1);
        int binary_float_min_normal_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID143=null;

        Object REGULAR_ID143_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // Keys.g:872:5: ({...}? => REGULAR_ID )
            // Keys.g:872:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_min_normal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_min_normal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_min_normal\")");
            }
            REGULAR_ID143=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_min_normal_key5770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID143_tree = (Object)adaptor.create(REGULAR_ID143);
            adaptor.addChild(root_0, REGULAR_ID143_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, binary_float_min_normal_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_float_min_normal_key"

    public static class signtype_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signtype_key"
    // Keys.g:875:1: signtype_key : {...}? => REGULAR_ID -> SIGNTYPE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.signtype_key_return signtype_key() throws RecognitionException {
        OracleParser_Keys.signtype_key_return retval = new OracleParser_Keys.signtype_key_return();
        retval.start = input.LT(1);
        int signtype_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID144=null;

        Object REGULAR_ID144_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // Keys.g:876:5: ({...}? => REGULAR_ID -> SIGNTYPE_VK[$REGULAR_ID] )
            // Keys.g:876:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("signtype"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "signtype_key", "input.LT(1).getText().equalsIgnoreCase(\"signtype\")");
            }
            REGULAR_ID144=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_signtype_key5793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID144);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 876:77: -> SIGNTYPE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNTYPE_VK, REGULAR_ID144));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, signtype_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "signtype_key"

    public static class blob_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blob_key"
    // Keys.g:879:1: blob_key : {...}? => REGULAR_ID -> BLOB_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.blob_key_return blob_key() throws RecognitionException {
        OracleParser_Keys.blob_key_return retval = new OracleParser_Keys.blob_key_return();
        retval.start = input.LT(1);
        int blob_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID145=null;

        Object REGULAR_ID145_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // Keys.g:880:5: ({...}? => REGULAR_ID -> BLOB_VK[$REGULAR_ID] )
            // Keys.g:880:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("blob"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "blob_key", "input.LT(1).getText().equalsIgnoreCase(\"blob\")");
            }
            REGULAR_ID145=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_blob_key5821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID145);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 880:73: -> BLOB_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BLOB_VK, REGULAR_ID145));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, blob_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blob_key"

    public static class nvarchar2_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nvarchar2_key"
    // Keys.g:883:1: nvarchar2_key : {...}? => REGULAR_ID -> NVARCHAR2_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nvarchar2_key_return nvarchar2_key() throws RecognitionException {
        OracleParser_Keys.nvarchar2_key_return retval = new OracleParser_Keys.nvarchar2_key_return();
        retval.start = input.LT(1);
        int nvarchar2_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID146=null;

        Object REGULAR_ID146_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // Keys.g:884:5: ({...}? => REGULAR_ID -> NVARCHAR2_VK[$REGULAR_ID] )
            // Keys.g:884:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nvarchar2"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nvarchar2_key", "input.LT(1).getText().equalsIgnoreCase(\"nvarchar2\")");
            }
            REGULAR_ID146=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nvarchar2_key5849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID146);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 884:78: -> NVARCHAR2_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NVARCHAR2_VK, REGULAR_ID146));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, nvarchar2_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nvarchar2_key"

    public static class binary_double_max_normal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_double_max_normal_key"
    // Keys.g:887:1: binary_double_max_normal_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_double_max_normal_key_return binary_double_max_normal_key() throws RecognitionException {
        OracleParser_Keys.binary_double_max_normal_key_return retval = new OracleParser_Keys.binary_double_max_normal_key_return();
        retval.start = input.LT(1);
        int binary_double_max_normal_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID147=null;

        Object REGULAR_ID147_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // Keys.g:888:5: ({...}? => REGULAR_ID )
            // Keys.g:888:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_max_normal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_max_normal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_max_normal\")");
            }
            REGULAR_ID147=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_max_normal_key5877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID147_tree = (Object)adaptor.create(REGULAR_ID147);
            adaptor.addChild(root_0, REGULAR_ID147_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, binary_double_max_normal_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_double_max_normal_key"

    public static class binary_float_nan_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_float_nan_key"
    // Keys.g:891:1: binary_float_nan_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.binary_float_nan_key_return binary_float_nan_key() throws RecognitionException {
        OracleParser_Keys.binary_float_nan_key_return retval = new OracleParser_Keys.binary_float_nan_key_return();
        retval.start = input.LT(1);
        int binary_float_nan_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID148=null;

        Object REGULAR_ID148_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // Keys.g:892:5: ({...}? => REGULAR_ID )
            // Keys.g:892:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_nan"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_nan_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_nan\")");
            }
            REGULAR_ID148=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_nan_key5900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID148_tree = (Object)adaptor.create(REGULAR_ID148);
            adaptor.addChild(root_0, REGULAR_ID148_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, binary_float_nan_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_float_nan_key"

    public static class string_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_key"
    // Keys.g:895:1: string_key : {...}? => REGULAR_ID -> STRING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.string_key_return string_key() throws RecognitionException {
        OracleParser_Keys.string_key_return retval = new OracleParser_Keys.string_key_return();
        retval.start = input.LT(1);
        int string_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID149=null;

        Object REGULAR_ID149_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // Keys.g:896:5: ({...}? => REGULAR_ID -> STRING_VK[$REGULAR_ID] )
            // Keys.g:896:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("string"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "string_key", "input.LT(1).getText().equalsIgnoreCase(\"string\")");
            }
            REGULAR_ID149=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_string_key5923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID149);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 896:75: -> STRING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(STRING_VK, REGULAR_ID149));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, string_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "string_key"

    public static class c_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "c_key"
    // Keys.g:899:1: c_key : {...}? => REGULAR_ID -> C_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.c_key_return c_key() throws RecognitionException {
        OracleParser_Keys.c_key_return retval = new OracleParser_Keys.c_key_return();
        retval.start = input.LT(1);
        int c_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID150=null;

        Object REGULAR_ID150_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // Keys.g:900:5: ({...}? => REGULAR_ID -> C_VK[$REGULAR_ID] )
            // Keys.g:900:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("c"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "c_key", "input.LT(1).getText().equalsIgnoreCase(\"c\")");
            }
            REGULAR_ID150=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_c_key5951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID150);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 900:70: -> C_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(C_VK, REGULAR_ID150));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, c_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "c_key"

    public static class library_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "library_key"
    // Keys.g:903:1: library_key : {...}? => REGULAR_ID -> LIBRARY_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.library_key_return library_key() throws RecognitionException {
        OracleParser_Keys.library_key_return retval = new OracleParser_Keys.library_key_return();
        retval.start = input.LT(1);
        int library_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID151=null;

        Object REGULAR_ID151_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // Keys.g:904:5: ({...}? => REGULAR_ID -> LIBRARY_VK[$REGULAR_ID] )
            // Keys.g:904:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("library"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "library_key", "input.LT(1).getText().equalsIgnoreCase(\"library\")");
            }
            REGULAR_ID151=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_library_key5979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID151);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 904:76: -> LIBRARY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LIBRARY_VK, REGULAR_ID151));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, library_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "library_key"

    public static class context_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "context_key"
    // Keys.g:907:1: context_key : {...}? => REGULAR_ID -> CONTEXT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.context_key_return context_key() throws RecognitionException {
        OracleParser_Keys.context_key_return retval = new OracleParser_Keys.context_key_return();
        retval.start = input.LT(1);
        int context_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID152=null;

        Object REGULAR_ID152_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // Keys.g:908:5: ({...}? => REGULAR_ID -> CONTEXT_VK[$REGULAR_ID] )
            // Keys.g:908:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("context"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "context_key", "input.LT(1).getText().equalsIgnoreCase(\"context\")");
            }
            REGULAR_ID152=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_context_key6007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID152);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 908:76: -> CONTEXT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CONTEXT_VK, REGULAR_ID152));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, context_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "context_key"

    public static class parameters_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameters_key"
    // Keys.g:911:1: parameters_key : {...}? => REGULAR_ID -> PARAMETERS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.parameters_key_return parameters_key() throws RecognitionException {
        OracleParser_Keys.parameters_key_return retval = new OracleParser_Keys.parameters_key_return();
        retval.start = input.LT(1);
        int parameters_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID153=null;

        Object REGULAR_ID153_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // Keys.g:912:5: ({...}? => REGULAR_ID -> PARAMETERS_VK[$REGULAR_ID] )
            // Keys.g:912:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("parameters"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "parameters_key", "input.LT(1).getText().equalsIgnoreCase(\"parameters\")");
            }
            REGULAR_ID153=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_parameters_key6035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID153);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 912:79: -> PARAMETERS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PARAMETERS_VK, REGULAR_ID153));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, parameters_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameters_key"

    public static class agent_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agent_key"
    // Keys.g:915:1: agent_key : {...}? => REGULAR_ID -> AGENT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.agent_key_return agent_key() throws RecognitionException {
        OracleParser_Keys.agent_key_return retval = new OracleParser_Keys.agent_key_return();
        retval.start = input.LT(1);
        int agent_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID154=null;

        Object REGULAR_ID154_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // Keys.g:916:5: ({...}? => REGULAR_ID -> AGENT_VK[$REGULAR_ID] )
            // Keys.g:916:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("agent"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "agent_key", "input.LT(1).getText().equalsIgnoreCase(\"agent\")");
            }
            REGULAR_ID154=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_agent_key6063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID154);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 916:74: -> AGENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(AGENT_VK, REGULAR_ID154));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, agent_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "agent_key"

    public static class cluster_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cluster_key"
    // Keys.g:919:1: cluster_key : {...}? => REGULAR_ID -> CLUSTER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.cluster_key_return cluster_key() throws RecognitionException {
        OracleParser_Keys.cluster_key_return retval = new OracleParser_Keys.cluster_key_return();
        retval.start = input.LT(1);
        int cluster_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID155=null;

        Object REGULAR_ID155_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // Keys.g:920:5: ({...}? => REGULAR_ID -> CLUSTER_VK[$REGULAR_ID] )
            // Keys.g:920:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cluster"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cluster_key", "input.LT(1).getText().equalsIgnoreCase(\"cluster\")");
            }
            REGULAR_ID155=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cluster_key6091); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID155);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 920:76: -> CLUSTER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CLUSTER_VK, REGULAR_ID155));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, cluster_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cluster_key"

    public static class hash_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hash_key"
    // Keys.g:923:1: hash_key : {...}? => REGULAR_ID -> HASH_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.hash_key_return hash_key() throws RecognitionException {
        OracleParser_Keys.hash_key_return retval = new OracleParser_Keys.hash_key_return();
        retval.start = input.LT(1);
        int hash_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID156=null;

        Object REGULAR_ID156_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // Keys.g:924:5: ({...}? => REGULAR_ID -> HASH_VK[$REGULAR_ID] )
            // Keys.g:924:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("hash"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "hash_key", "input.LT(1).getText().equalsIgnoreCase(\"hash\")");
            }
            REGULAR_ID156=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_hash_key6119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID156);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 924:73: -> HASH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(HASH_VK, REGULAR_ID156));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, hash_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hash_key"

    public static class relies_on_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relies_on_key"
    // Keys.g:927:1: relies_on_key : {...}? => REGULAR_ID -> RELIES_ON_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.relies_on_key_return relies_on_key() throws RecognitionException {
        OracleParser_Keys.relies_on_key_return retval = new OracleParser_Keys.relies_on_key_return();
        retval.start = input.LT(1);
        int relies_on_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID157=null;

        Object REGULAR_ID157_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // Keys.g:928:5: ({...}? => REGULAR_ID -> RELIES_ON_VK[$REGULAR_ID] )
            // Keys.g:928:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("relies_on"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "relies_on_key", "input.LT(1).getText().equalsIgnoreCase(\"relies_on\")");
            }
            REGULAR_ID157=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_relies_on_key6147); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID157);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 928:78: -> RELIES_ON_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(RELIES_ON_VK, REGULAR_ID157));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, relies_on_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relies_on_key"

    public static class returning_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "returning_key"
    // Keys.g:931:1: returning_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.returning_key_return returning_key() throws RecognitionException {
        OracleParser_Keys.returning_key_return retval = new OracleParser_Keys.returning_key_return();
        retval.start = input.LT(1);
        int returning_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID158=null;

        Object REGULAR_ID158_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // Keys.g:932:5: ({...}? => REGULAR_ID )
            // Keys.g:932:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("returning"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "returning_key", "input.LT(1).getText().equalsIgnoreCase(\"returning\")");
            }
            REGULAR_ID158=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_returning_key6175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID158_tree = (Object)adaptor.create(REGULAR_ID158);
            adaptor.addChild(root_0, REGULAR_ID158_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, returning_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "returning_key"

    public static class statement_id_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement_id_key"
    // Keys.g:935:1: statement_id_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.statement_id_key_return statement_id_key() throws RecognitionException {
        OracleParser_Keys.statement_id_key_return retval = new OracleParser_Keys.statement_id_key_return();
        retval.start = input.LT(1);
        int statement_id_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID159=null;

        Object REGULAR_ID159_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // Keys.g:936:5: ({...}? => REGULAR_ID )
            // Keys.g:936:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("statement_id"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "statement_id_key", "input.LT(1).getText().equalsIgnoreCase(\"statement_id\")");
            }
            REGULAR_ID159=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_statement_id_key6202); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID159_tree = (Object)adaptor.create(REGULAR_ID159);
            adaptor.addChild(root_0, REGULAR_ID159_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, statement_id_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement_id_key"

    public static class deferred_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deferred_key"
    // Keys.g:939:1: deferred_key : {...}? => REGULAR_ID -> DEFERRED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.deferred_key_return deferred_key() throws RecognitionException {
        OracleParser_Keys.deferred_key_return retval = new OracleParser_Keys.deferred_key_return();
        retval.start = input.LT(1);
        int deferred_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID160=null;

        Object REGULAR_ID160_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // Keys.g:940:5: ({...}? => REGULAR_ID -> DEFERRED_VK[$REGULAR_ID] )
            // Keys.g:940:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("deferred"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "deferred_key", "input.LT(1).getText().equalsIgnoreCase(\"deferred\")");
            }
            REGULAR_ID160=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_deferred_key6225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID160);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 940:77: -> DEFERRED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DEFERRED_VK, REGULAR_ID160));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, deferred_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "deferred_key"

    public static class advise_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advise_key"
    // Keys.g:943:1: advise_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.advise_key_return advise_key() throws RecognitionException {
        OracleParser_Keys.advise_key_return retval = new OracleParser_Keys.advise_key_return();
        retval.start = input.LT(1);
        int advise_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID161=null;

        Object REGULAR_ID161_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // Keys.g:944:5: ({...}? => REGULAR_ID )
            // Keys.g:944:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("advise"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "advise_key", "input.LT(1).getText().equalsIgnoreCase(\"advise\")");
            }
            REGULAR_ID161=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_advise_key6253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID161_tree = (Object)adaptor.create(REGULAR_ID161);
            adaptor.addChild(root_0, REGULAR_ID161_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, advise_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advise_key"

    public static class resumable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resumable_key"
    // Keys.g:947:1: resumable_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.resumable_key_return resumable_key() throws RecognitionException {
        OracleParser_Keys.resumable_key_return retval = new OracleParser_Keys.resumable_key_return();
        retval.start = input.LT(1);
        int resumable_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID162=null;

        Object REGULAR_ID162_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // Keys.g:948:5: ({...}? => REGULAR_ID )
            // Keys.g:948:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("resumable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "resumable_key", "input.LT(1).getText().equalsIgnoreCase(\"resumable\")");
            }
            REGULAR_ID162=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_resumable_key6276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID162_tree = (Object)adaptor.create(REGULAR_ID162);
            adaptor.addChild(root_0, REGULAR_ID162_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, resumable_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "resumable_key"

    public static class timeout_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timeout_key"
    // Keys.g:951:1: timeout_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.timeout_key_return timeout_key() throws RecognitionException {
        OracleParser_Keys.timeout_key_return retval = new OracleParser_Keys.timeout_key_return();
        retval.start = input.LT(1);
        int timeout_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID163=null;

        Object REGULAR_ID163_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // Keys.g:952:5: ({...}? => REGULAR_ID )
            // Keys.g:952:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("timeout"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timeout_key", "input.LT(1).getText().equalsIgnoreCase(\"timeout\")");
            }
            REGULAR_ID163=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timeout_key6299); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID163_tree = (Object)adaptor.create(REGULAR_ID163);
            adaptor.addChild(root_0, REGULAR_ID163_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, timeout_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timeout_key"

    public static class parallel_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parallel_key"
    // Keys.g:955:1: parallel_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.parallel_key_return parallel_key() throws RecognitionException {
        OracleParser_Keys.parallel_key_return retval = new OracleParser_Keys.parallel_key_return();
        retval.start = input.LT(1);
        int parallel_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID164=null;

        Object REGULAR_ID164_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // Keys.g:956:5: ({...}? => REGULAR_ID )
            // Keys.g:956:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("parallel"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "parallel_key", "input.LT(1).getText().equalsIgnoreCase(\"parallel\")");
            }
            REGULAR_ID164=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_parallel_key6322); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID164_tree = (Object)adaptor.create(REGULAR_ID164);
            adaptor.addChild(root_0, REGULAR_ID164_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, parallel_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parallel_key"

    public static class ddl_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ddl_key"
    // Keys.g:959:1: ddl_key : {...}? => REGULAR_ID -> DDL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.ddl_key_return ddl_key() throws RecognitionException {
        OracleParser_Keys.ddl_key_return retval = new OracleParser_Keys.ddl_key_return();
        retval.start = input.LT(1);
        int ddl_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID165=null;

        Object REGULAR_ID165_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // Keys.g:960:5: ({...}? => REGULAR_ID -> DDL_VK[$REGULAR_ID] )
            // Keys.g:960:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("ddl"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ddl_key", "input.LT(1).getText().equalsIgnoreCase(\"ddl\")");
            }
            REGULAR_ID165=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ddl_key6345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID165);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 960:72: -> DDL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DDL_VK, REGULAR_ID165));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, ddl_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ddl_key"

    public static class query_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_key"
    // Keys.g:963:1: query_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.query_key_return query_key() throws RecognitionException {
        OracleParser_Keys.query_key_return retval = new OracleParser_Keys.query_key_return();
        retval.start = input.LT(1);
        int query_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID166=null;

        Object REGULAR_ID166_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // Keys.g:964:5: ({...}? => REGULAR_ID )
            // Keys.g:964:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("query"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "query_key", "input.LT(1).getText().equalsIgnoreCase(\"query\")");
            }
            REGULAR_ID166=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_query_key6373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID166_tree = (Object)adaptor.create(REGULAR_ID166);
            adaptor.addChild(root_0, REGULAR_ID166_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, query_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_key"

    public static class dml_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_key"
    // Keys.g:967:1: dml_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.dml_key_return dml_key() throws RecognitionException {
        OracleParser_Keys.dml_key_return retval = new OracleParser_Keys.dml_key_return();
        retval.start = input.LT(1);
        int dml_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID167=null;

        Object REGULAR_ID167_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // Keys.g:968:5: ({...}? => REGULAR_ID )
            // Keys.g:968:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("dml"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dml_key", "input.LT(1).getText().equalsIgnoreCase(\"dml\")");
            }
            REGULAR_ID167=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dml_key6396); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID167_tree = (Object)adaptor.create(REGULAR_ID167);
            adaptor.addChild(root_0, REGULAR_ID167_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, dml_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_key"

    public static class guard_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guard_key"
    // Keys.g:971:1: guard_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.guard_key_return guard_key() throws RecognitionException {
        OracleParser_Keys.guard_key_return retval = new OracleParser_Keys.guard_key_return();
        retval.start = input.LT(1);
        int guard_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID168=null;

        Object REGULAR_ID168_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // Keys.g:972:5: ({...}? => REGULAR_ID )
            // Keys.g:972:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("guard"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "guard_key", "input.LT(1).getText().equalsIgnoreCase(\"guard\")");
            }
            REGULAR_ID168=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_guard_key6419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID168_tree = (Object)adaptor.create(REGULAR_ID168);
            adaptor.addChild(root_0, REGULAR_ID168_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, guard_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "guard_key"

    public static class nothing_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nothing_key"
    // Keys.g:975:1: nothing_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.nothing_key_return nothing_key() throws RecognitionException {
        OracleParser_Keys.nothing_key_return retval = new OracleParser_Keys.nothing_key_return();
        retval.start = input.LT(1);
        int nothing_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID169=null;

        Object REGULAR_ID169_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // Keys.g:976:5: ({...}? => REGULAR_ID )
            // Keys.g:976:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("nothing"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nothing_key", "input.LT(1).getText().equalsIgnoreCase(\"nothing\")");
            }
            REGULAR_ID169=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nothing_key6442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID169_tree = (Object)adaptor.create(REGULAR_ID169);
            adaptor.addChild(root_0, REGULAR_ID169_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, nothing_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nothing_key"

    public static class enable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enable_key"
    // Keys.g:979:1: enable_key : {...}? => REGULAR_ID -> ENABLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.enable_key_return enable_key() throws RecognitionException {
        OracleParser_Keys.enable_key_return retval = new OracleParser_Keys.enable_key_return();
        retval.start = input.LT(1);
        int enable_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID170=null;

        Object REGULAR_ID170_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // Keys.g:980:5: ({...}? => REGULAR_ID -> ENABLE_VK[$REGULAR_ID] )
            // Keys.g:980:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("enable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enable_key", "input.LT(1).getText().equalsIgnoreCase(\"enable\")");
            }
            REGULAR_ID170=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_enable_key6465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID170);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 980:75: -> ENABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ENABLE_VK, REGULAR_ID170));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, enable_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enable_key"

    public static class database_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "database_key"
    // Keys.g:983:1: database_key : {...}? => REGULAR_ID -> DATABASE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.database_key_return database_key() throws RecognitionException {
        OracleParser_Keys.database_key_return retval = new OracleParser_Keys.database_key_return();
        retval.start = input.LT(1);
        int database_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID171=null;

        Object REGULAR_ID171_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // Keys.g:984:5: ({...}? => REGULAR_ID -> DATABASE_VK[$REGULAR_ID] )
            // Keys.g:984:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("database"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "database_key", "input.LT(1).getText().equalsIgnoreCase(\"database\")");
            }
            REGULAR_ID171=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_database_key6493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID171);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 984:77: -> DATABASE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DATABASE_VK, REGULAR_ID171));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, database_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "database_key"

    public static class disable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "disable_key"
    // Keys.g:987:1: disable_key : {...}? => REGULAR_ID -> DISABLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.disable_key_return disable_key() throws RecognitionException {
        OracleParser_Keys.disable_key_return retval = new OracleParser_Keys.disable_key_return();
        retval.start = input.LT(1);
        int disable_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID172=null;

        Object REGULAR_ID172_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // Keys.g:988:5: ({...}? => REGULAR_ID -> DISABLE_VK[$REGULAR_ID] )
            // Keys.g:988:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("disable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "disable_key", "input.LT(1).getText().equalsIgnoreCase(\"disable\")");
            }
            REGULAR_ID172=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_disable_key6521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID172);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 988:76: -> DISABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DISABLE_VK, REGULAR_ID172));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, disable_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "disable_key"

    public static class link_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "link_key"
    // Keys.g:991:1: link_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.link_key_return link_key() throws RecognitionException {
        OracleParser_Keys.link_key_return retval = new OracleParser_Keys.link_key_return();
        retval.start = input.LT(1);
        int link_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID173=null;

        Object REGULAR_ID173_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // Keys.g:992:5: ({...}? => REGULAR_ID )
            // Keys.g:992:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("link"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "link_key", "input.LT(1).getText().equalsIgnoreCase(\"link\")");
            }
            REGULAR_ID173=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_link_key6549); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID173_tree = (Object)adaptor.create(REGULAR_ID173);
            adaptor.addChild(root_0, REGULAR_ID173_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, link_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "link_key"

    public static class identified_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identified_key"
    // Keys.g:995:1: identified_key : PLSQL_RESERVED_IDENTIFIED ;
    public final OracleParser_Keys.identified_key_return identified_key() throws RecognitionException {
        OracleParser_Keys.identified_key_return retval = new OracleParser_Keys.identified_key_return();
        retval.start = input.LT(1);
        int identified_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_RESERVED_IDENTIFIED174=null;

        Object PLSQL_RESERVED_IDENTIFIED174_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // Keys.g:996:5: ( PLSQL_RESERVED_IDENTIFIED )
            // Keys.g:996:10: PLSQL_RESERVED_IDENTIFIED
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_RESERVED_IDENTIFIED174=(Token)match(input,PLSQL_RESERVED_IDENTIFIED,FOLLOW_PLSQL_RESERVED_IDENTIFIED_in_identified_key6569); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_IDENTIFIED174_tree = (Object)adaptor.create(PLSQL_RESERVED_IDENTIFIED174);
            adaptor.addChild(root_0, PLSQL_RESERVED_IDENTIFIED174_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, identified_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identified_key"

    public static class none_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "none_key"
    // Keys.g:999:1: none_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.none_key_return none_key() throws RecognitionException {
        OracleParser_Keys.none_key_return retval = new OracleParser_Keys.none_key_return();
        retval.start = input.LT(1);
        int none_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID175=null;

        Object REGULAR_ID175_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // Keys.g:1000:5: ({...}? => REGULAR_ID )
            // Keys.g:1000:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("none"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "none_key", "input.LT(1).getText().equalsIgnoreCase(\"none\")");
            }
            REGULAR_ID175=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_none_key6592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID175_tree = (Object)adaptor.create(REGULAR_ID175);
            adaptor.addChild(root_0, REGULAR_ID175_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, none_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "none_key"

    public static class before_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "before_key"
    // Keys.g:1003:1: before_key : {...}? => REGULAR_ID -> BEFORE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.before_key_return before_key() throws RecognitionException {
        OracleParser_Keys.before_key_return retval = new OracleParser_Keys.before_key_return();
        retval.start = input.LT(1);
        int before_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID176=null;

        Object REGULAR_ID176_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // Keys.g:1004:5: ({...}? => REGULAR_ID -> BEFORE_VK[$REGULAR_ID] )
            // Keys.g:1004:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("before"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "before_key", "input.LT(1).getText().equalsIgnoreCase(\"before\")");
            }
            REGULAR_ID176=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_before_key6615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID176);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1004:75: -> BEFORE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BEFORE_VK, REGULAR_ID176));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, before_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "before_key"

    public static class referencing_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referencing_key"
    // Keys.g:1007:1: referencing_key : {...}? => REGULAR_ID -> REFERENCING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.referencing_key_return referencing_key() throws RecognitionException {
        OracleParser_Keys.referencing_key_return retval = new OracleParser_Keys.referencing_key_return();
        retval.start = input.LT(1);
        int referencing_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID177=null;

        Object REGULAR_ID177_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // Keys.g:1008:5: ({...}? => REGULAR_ID -> REFERENCING_VK[$REGULAR_ID] )
            // Keys.g:1008:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "referencing_key", "input.LT(1).getText().equalsIgnoreCase(\"referencing\")");
            }
            REGULAR_ID177=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_referencing_key6644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID177);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1008:80: -> REFERENCING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(REFERENCING_VK, REGULAR_ID177));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, referencing_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referencing_key"

    public static class logon_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logon_key"
    // Keys.g:1011:1: logon_key : {...}? => REGULAR_ID -> LOGON_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.logon_key_return logon_key() throws RecognitionException {
        OracleParser_Keys.logon_key_return retval = new OracleParser_Keys.logon_key_return();
        retval.start = input.LT(1);
        int logon_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID178=null;

        Object REGULAR_ID178_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // Keys.g:1012:5: ({...}? => REGULAR_ID -> LOGON_VK[$REGULAR_ID] )
            // Keys.g:1012:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("logon"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "logon_key", "input.LT(1).getText().equalsIgnoreCase(\"logon\")");
            }
            REGULAR_ID178=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_logon_key6672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID178);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1012:74: -> LOGON_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LOGON_VK, REGULAR_ID178));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, logon_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logon_key"

    public static class after_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "after_key"
    // Keys.g:1015:1: after_key : {...}? => REGULAR_ID -> AFTER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.after_key_return after_key() throws RecognitionException {
        OracleParser_Keys.after_key_return retval = new OracleParser_Keys.after_key_return();
        retval.start = input.LT(1);
        int after_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID179=null;

        Object REGULAR_ID179_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // Keys.g:1016:5: ({...}? => REGULAR_ID -> AFTER_VK[$REGULAR_ID] )
            // Keys.g:1016:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("after"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "after_key", "input.LT(1).getText().equalsIgnoreCase(\"after\")");
            }
            REGULAR_ID179=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_after_key6700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID179);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1016:74: -> AFTER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(AFTER_VK, REGULAR_ID179));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, after_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "after_key"

    public static class schema_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schema_key"
    // Keys.g:1019:1: schema_key : {...}? => REGULAR_ID -> SCHEMA_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.schema_key_return schema_key() throws RecognitionException {
        OracleParser_Keys.schema_key_return retval = new OracleParser_Keys.schema_key_return();
        retval.start = input.LT(1);
        int schema_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID180=null;

        Object REGULAR_ID180_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // Keys.g:1020:5: ({...}? => REGULAR_ID -> SCHEMA_VK[$REGULAR_ID] )
            // Keys.g:1020:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("schema"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "schema_key", "input.LT(1).getText().equalsIgnoreCase(\"schema\")");
            }
            REGULAR_ID180=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_schema_key6728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID180);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1020:75: -> SCHEMA_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SCHEMA_VK, REGULAR_ID180));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, schema_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "schema_key"

    public static class grant_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grant_key"
    // Keys.g:1023:1: grant_key : SQL92_RESERVED_GRANT ;
    public final OracleParser_Keys.grant_key_return grant_key() throws RecognitionException {
        OracleParser_Keys.grant_key_return retval = new OracleParser_Keys.grant_key_return();
        retval.start = input.LT(1);
        int grant_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_GRANT181=null;

        Object SQL92_RESERVED_GRANT181_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // Keys.g:1024:5: ( SQL92_RESERVED_GRANT )
            // Keys.g:1024:10: SQL92_RESERVED_GRANT
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_GRANT181=(Token)match(input,SQL92_RESERVED_GRANT,FOLLOW_SQL92_RESERVED_GRANT_in_grant_key6753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_GRANT181_tree = (Object)adaptor.create(SQL92_RESERVED_GRANT181);
            adaptor.addChild(root_0, SQL92_RESERVED_GRANT181_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, grant_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grant_key"

    public static class truncate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "truncate_key"
    // Keys.g:1027:1: truncate_key : {...}? => REGULAR_ID -> TRUNCATE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.truncate_key_return truncate_key() throws RecognitionException {
        OracleParser_Keys.truncate_key_return retval = new OracleParser_Keys.truncate_key_return();
        retval.start = input.LT(1);
        int truncate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID182=null;

        Object REGULAR_ID182_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // Keys.g:1028:5: ({...}? => REGULAR_ID -> TRUNCATE_VK[$REGULAR_ID] )
            // Keys.g:1028:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("truncate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "truncate_key", "input.LT(1).getText().equalsIgnoreCase(\"truncate\")");
            }
            REGULAR_ID182=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_truncate_key6776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID182);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1028:77: -> TRUNCATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TRUNCATE_VK, REGULAR_ID182));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, truncate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "truncate_key"

    public static class startup_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startup_key"
    // Keys.g:1031:1: startup_key : {...}? => REGULAR_ID -> STARTUP_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.startup_key_return startup_key() throws RecognitionException {
        OracleParser_Keys.startup_key_return retval = new OracleParser_Keys.startup_key_return();
        retval.start = input.LT(1);
        int startup_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID183=null;

        Object REGULAR_ID183_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // Keys.g:1032:5: ({...}? => REGULAR_ID -> STARTUP_VK[$REGULAR_ID] )
            // Keys.g:1032:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("startup"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "startup_key", "input.LT(1).getText().equalsIgnoreCase(\"startup\")");
            }
            REGULAR_ID183=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_startup_key6804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID183);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1032:76: -> STARTUP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(STARTUP_VK, REGULAR_ID183));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, startup_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "startup_key"

    public static class statistics_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statistics_key"
    // Keys.g:1035:1: statistics_key : {...}? => REGULAR_ID -> STATISTICS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.statistics_key_return statistics_key() throws RecognitionException {
        OracleParser_Keys.statistics_key_return retval = new OracleParser_Keys.statistics_key_return();
        retval.start = input.LT(1);
        int statistics_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID184=null;

        Object REGULAR_ID184_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // Keys.g:1036:5: ({...}? => REGULAR_ID -> STATISTICS_VK[$REGULAR_ID] )
            // Keys.g:1036:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("statistics"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "statistics_key", "input.LT(1).getText().equalsIgnoreCase(\"statistics\")");
            }
            REGULAR_ID184=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_statistics_key6832); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID184);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1036:79: -> STATISTICS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(STATISTICS_VK, REGULAR_ID184));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, statistics_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statistics_key"

    public static class noaudit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noaudit_key"
    // Keys.g:1039:1: noaudit_key : {...}? => REGULAR_ID -> NOAUDIT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.noaudit_key_return noaudit_key() throws RecognitionException {
        OracleParser_Keys.noaudit_key_return retval = new OracleParser_Keys.noaudit_key_return();
        retval.start = input.LT(1);
        int noaudit_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID185=null;

        Object REGULAR_ID185_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // Keys.g:1040:5: ({...}? => REGULAR_ID -> NOAUDIT_VK[$REGULAR_ID] )
            // Keys.g:1040:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("noaudit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "noaudit_key", "input.LT(1).getText().equalsIgnoreCase(\"noaudit\")");
            }
            REGULAR_ID185=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_noaudit_key6860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID185);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1040:76: -> NOAUDIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NOAUDIT_VK, REGULAR_ID185));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, noaudit_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noaudit_key"

    public static class suspend_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "suspend_key"
    // Keys.g:1043:1: suspend_key : {...}? => REGULAR_ID -> SUSPEND_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.suspend_key_return suspend_key() throws RecognitionException {
        OracleParser_Keys.suspend_key_return retval = new OracleParser_Keys.suspend_key_return();
        retval.start = input.LT(1);
        int suspend_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID186=null;

        Object REGULAR_ID186_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // Keys.g:1044:5: ({...}? => REGULAR_ID -> SUSPEND_VK[$REGULAR_ID] )
            // Keys.g:1044:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("suspend"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "suspend_key", "input.LT(1).getText().equalsIgnoreCase(\"suspend\")");
            }
            REGULAR_ID186=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_suspend_key6888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID186);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1044:76: -> SUSPEND_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SUSPEND_VK, REGULAR_ID186));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, suspend_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "suspend_key"

    public static class audit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "audit_key"
    // Keys.g:1047:1: audit_key : {...}? => REGULAR_ID -> AUDIT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.audit_key_return audit_key() throws RecognitionException {
        OracleParser_Keys.audit_key_return retval = new OracleParser_Keys.audit_key_return();
        retval.start = input.LT(1);
        int audit_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID187=null;

        Object REGULAR_ID187_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // Keys.g:1048:5: ({...}? => REGULAR_ID -> AUDIT_VK[$REGULAR_ID] )
            // Keys.g:1048:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("audit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "audit_key", "input.LT(1).getText().equalsIgnoreCase(\"audit\")");
            }
            REGULAR_ID187=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_audit_key6916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID187);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1048:74: -> AUDIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(AUDIT_VK, REGULAR_ID187));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, audit_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "audit_key"

    public static class disassociate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "disassociate_key"
    // Keys.g:1051:1: disassociate_key : {...}? => REGULAR_ID -> DISASSOCIATE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.disassociate_key_return disassociate_key() throws RecognitionException {
        OracleParser_Keys.disassociate_key_return retval = new OracleParser_Keys.disassociate_key_return();
        retval.start = input.LT(1);
        int disassociate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID188=null;

        Object REGULAR_ID188_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // Keys.g:1052:5: ({...}? => REGULAR_ID -> DISASSOCIATE_VK[$REGULAR_ID] )
            // Keys.g:1052:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("disassociate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "disassociate_key", "input.LT(1).getText().equalsIgnoreCase(\"disassociate\")");
            }
            REGULAR_ID188=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_disassociate_key6944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID188);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1052:81: -> DISASSOCIATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DISASSOCIATE_VK, REGULAR_ID188));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, disassociate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "disassociate_key"

    public static class shutdown_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shutdown_key"
    // Keys.g:1055:1: shutdown_key : {...}? => REGULAR_ID -> SHUTDOWN_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.shutdown_key_return shutdown_key() throws RecognitionException {
        OracleParser_Keys.shutdown_key_return retval = new OracleParser_Keys.shutdown_key_return();
        retval.start = input.LT(1);
        int shutdown_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID189=null;

        Object REGULAR_ID189_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // Keys.g:1056:5: ({...}? => REGULAR_ID -> SHUTDOWN_VK[$REGULAR_ID] )
            // Keys.g:1056:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("shutdown"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "shutdown_key", "input.LT(1).getText().equalsIgnoreCase(\"shutdown\")");
            }
            REGULAR_ID189=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_shutdown_key6973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID189);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1056:77: -> SHUTDOWN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SHUTDOWN_VK, REGULAR_ID189));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, shutdown_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shutdown_key"

    public static class compound_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_key"
    // Keys.g:1059:1: compound_key : {...}? => REGULAR_ID -> COMPOUND_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.compound_key_return compound_key() throws RecognitionException {
        OracleParser_Keys.compound_key_return retval = new OracleParser_Keys.compound_key_return();
        retval.start = input.LT(1);
        int compound_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID190=null;

        Object REGULAR_ID190_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // Keys.g:1060:5: ({...}? => REGULAR_ID -> COMPOUND_VK[$REGULAR_ID] )
            // Keys.g:1060:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("compound"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "compound_key", "input.LT(1).getText().equalsIgnoreCase(\"compound\")");
            }
            REGULAR_ID190=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_compound_key7001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID190);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1060:77: -> COMPOUND_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(COMPOUND_VK, REGULAR_ID190));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, compound_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compound_key"

    public static class servererror_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "servererror_key"
    // Keys.g:1063:1: servererror_key : {...}? => REGULAR_ID -> SERVERERROR_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.servererror_key_return servererror_key() throws RecognitionException {
        OracleParser_Keys.servererror_key_return retval = new OracleParser_Keys.servererror_key_return();
        retval.start = input.LT(1);
        int servererror_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID191=null;

        Object REGULAR_ID191_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // Keys.g:1064:5: ({...}? => REGULAR_ID -> SERVERERROR_VK[$REGULAR_ID] )
            // Keys.g:1064:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("servererror"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "servererror_key", "input.LT(1).getText().equalsIgnoreCase(\"servererror\")");
            }
            REGULAR_ID191=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_servererror_key7029); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID191);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1064:80: -> SERVERERROR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SERVERERROR_VK, REGULAR_ID191));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, servererror_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "servererror_key"

    public static class parent_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parent_key"
    // Keys.g:1067:1: parent_key : {...}? => REGULAR_ID -> PARENT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.parent_key_return parent_key() throws RecognitionException {
        OracleParser_Keys.parent_key_return retval = new OracleParser_Keys.parent_key_return();
        retval.start = input.LT(1);
        int parent_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID192=null;

        Object REGULAR_ID192_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // Keys.g:1068:5: ({...}? => REGULAR_ID -> PARENT_VK[$REGULAR_ID] )
            // Keys.g:1068:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("parent"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "parent_key", "input.LT(1).getText().equalsIgnoreCase(\"parent\")");
            }
            REGULAR_ID192=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_parent_key7057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID192);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1068:75: -> PARENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PARENT_VK, REGULAR_ID192));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, parent_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parent_key"

    public static class follows_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "follows_key"
    // Keys.g:1071:1: follows_key : {...}? => REGULAR_ID -> FOLLOWS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.follows_key_return follows_key() throws RecognitionException {
        OracleParser_Keys.follows_key_return retval = new OracleParser_Keys.follows_key_return();
        retval.start = input.LT(1);
        int follows_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID193=null;

        Object REGULAR_ID193_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // Keys.g:1072:5: ({...}? => REGULAR_ID -> FOLLOWS_VK[$REGULAR_ID] )
            // Keys.g:1072:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("follows"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "follows_key", "input.LT(1).getText().equalsIgnoreCase(\"follows\")");
            }
            REGULAR_ID193=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_follows_key7085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID193);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1072:76: -> FOLLOWS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FOLLOWS_VK, REGULAR_ID193));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, follows_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "follows_key"

    public static class nested_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_key"
    // Keys.g:1075:1: nested_key : {...}? => REGULAR_ID -> NESTED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nested_key_return nested_key() throws RecognitionException {
        OracleParser_Keys.nested_key_return retval = new OracleParser_Keys.nested_key_return();
        retval.start = input.LT(1);
        int nested_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID194=null;

        Object REGULAR_ID194_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // Keys.g:1076:5: ({...}? => REGULAR_ID -> NESTED_VK[$REGULAR_ID] )
            // Keys.g:1076:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nested"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nested_key", "input.LT(1).getText().equalsIgnoreCase(\"nested\")");
            }
            REGULAR_ID194=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nested_key7113); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID194);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1076:75: -> NESTED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NESTED_VK, REGULAR_ID194));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, nested_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_key"

    public static class old_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "old_key"
    // Keys.g:1079:1: old_key : {...}? => REGULAR_ID -> OLD_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.old_key_return old_key() throws RecognitionException {
        OracleParser_Keys.old_key_return retval = new OracleParser_Keys.old_key_return();
        retval.start = input.LT(1);
        int old_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID195=null;

        Object REGULAR_ID195_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // Keys.g:1080:5: ({...}? => REGULAR_ID -> OLD_VK[$REGULAR_ID] )
            // Keys.g:1080:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("old"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "old_key", "input.LT(1).getText().equalsIgnoreCase(\"old\")");
            }
            REGULAR_ID195=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_old_key7141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID195);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1080:72: -> OLD_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(OLD_VK, REGULAR_ID195));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, old_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "old_key"

    public static class statement_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement_key"
    // Keys.g:1083:1: statement_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.statement_key_return statement_key() throws RecognitionException {
        OracleParser_Keys.statement_key_return retval = new OracleParser_Keys.statement_key_return();
        retval.start = input.LT(1);
        int statement_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID196=null;

        Object REGULAR_ID196_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // Keys.g:1084:5: ({...}? => REGULAR_ID )
            // Keys.g:1084:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("statement"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "statement_key", "input.LT(1).getText().equalsIgnoreCase(\"statement\")");
            }
            REGULAR_ID196=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_statement_key7169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID196_tree = (Object)adaptor.create(REGULAR_ID196);
            adaptor.addChild(root_0, REGULAR_ID196_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, statement_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement_key"

    public static class db_role_change_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "db_role_change_key"
    // Keys.g:1087:1: db_role_change_key : {...}? => REGULAR_ID -> DB_ROLE_CHANGE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.db_role_change_key_return db_role_change_key() throws RecognitionException {
        OracleParser_Keys.db_role_change_key_return retval = new OracleParser_Keys.db_role_change_key_return();
        retval.start = input.LT(1);
        int db_role_change_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID197=null;

        Object REGULAR_ID197_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // Keys.g:1088:5: ({...}? => REGULAR_ID -> DB_ROLE_CHANGE_VK[$REGULAR_ID] )
            // Keys.g:1088:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("db_role_change"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "db_role_change_key", "input.LT(1).getText().equalsIgnoreCase(\"db_role_change\")");
            }
            REGULAR_ID197=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_db_role_change_key7192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID197);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1088:83: -> DB_ROLE_CHANGE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DB_ROLE_CHANGE_VK, REGULAR_ID197));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, db_role_change_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "db_role_change_key"

    public static class each_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "each_key"
    // Keys.g:1091:1: each_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.each_key_return each_key() throws RecognitionException {
        OracleParser_Keys.each_key_return retval = new OracleParser_Keys.each_key_return();
        retval.start = input.LT(1);
        int each_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID198=null;

        Object REGULAR_ID198_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // Keys.g:1092:5: ({...}? => REGULAR_ID )
            // Keys.g:1092:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("each"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "each_key", "input.LT(1).getText().equalsIgnoreCase(\"each\")");
            }
            REGULAR_ID198=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_each_key7220); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID198_tree = (Object)adaptor.create(REGULAR_ID198);
            adaptor.addChild(root_0, REGULAR_ID198_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, each_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "each_key"

    public static class logoff_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logoff_key"
    // Keys.g:1095:1: logoff_key : {...}? => REGULAR_ID -> LOGOFF_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.logoff_key_return logoff_key() throws RecognitionException {
        OracleParser_Keys.logoff_key_return retval = new OracleParser_Keys.logoff_key_return();
        retval.start = input.LT(1);
        int logoff_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID199=null;

        Object REGULAR_ID199_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // Keys.g:1096:5: ({...}? => REGULAR_ID -> LOGOFF_VK[$REGULAR_ID] )
            // Keys.g:1096:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("logoff"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "logoff_key", "input.LT(1).getText().equalsIgnoreCase(\"logoff\")");
            }
            REGULAR_ID199=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_logoff_key7243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID199);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1096:75: -> LOGOFF_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LOGOFF_VK, REGULAR_ID199));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, logoff_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logoff_key"

    public static class analyze_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "analyze_key"
    // Keys.g:1099:1: analyze_key : {...}? => REGULAR_ID -> ANALYZE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.analyze_key_return analyze_key() throws RecognitionException {
        OracleParser_Keys.analyze_key_return retval = new OracleParser_Keys.analyze_key_return();
        retval.start = input.LT(1);
        int analyze_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID200=null;

        Object REGULAR_ID200_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // Keys.g:1100:5: ({...}? => REGULAR_ID -> ANALYZE_VK[$REGULAR_ID] )
            // Keys.g:1100:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("analyze"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "analyze_key", "input.LT(1).getText().equalsIgnoreCase(\"analyze\")");
            }
            REGULAR_ID200=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_analyze_key7271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID200);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1100:76: -> ANALYZE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ANALYZE_VK, REGULAR_ID200));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, analyze_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "analyze_key"

    public static class instead_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instead_key"
    // Keys.g:1103:1: instead_key : {...}? => REGULAR_ID -> INSTEAD_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.instead_key_return instead_key() throws RecognitionException {
        OracleParser_Keys.instead_key_return retval = new OracleParser_Keys.instead_key_return();
        retval.start = input.LT(1);
        int instead_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID201=null;

        Object REGULAR_ID201_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // Keys.g:1104:5: ({...}? => REGULAR_ID -> INSTEAD_VK[$REGULAR_ID] )
            // Keys.g:1104:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("instead"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instead_key", "input.LT(1).getText().equalsIgnoreCase(\"instead\")");
            }
            REGULAR_ID201=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_instead_key7299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID201);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1104:76: -> INSTEAD_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INSTEAD_VK, REGULAR_ID201));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, instead_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instead_key"

    public static class associate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "associate_key"
    // Keys.g:1107:1: associate_key : {...}? => REGULAR_ID -> ASSOCIATE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.associate_key_return associate_key() throws RecognitionException {
        OracleParser_Keys.associate_key_return retval = new OracleParser_Keys.associate_key_return();
        retval.start = input.LT(1);
        int associate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID202=null;

        Object REGULAR_ID202_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // Keys.g:1108:5: ({...}? => REGULAR_ID -> ASSOCIATE_VK[$REGULAR_ID] )
            // Keys.g:1108:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("associate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "associate_key", "input.LT(1).getText().equalsIgnoreCase(\"associate\")");
            }
            REGULAR_ID202=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_associate_key7327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID202);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1108:78: -> ASSOCIATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ASSOCIATE_VK, REGULAR_ID202));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, associate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "associate_key"

    public static class new_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "new_key"
    // Keys.g:1111:1: new_key : {...}? => REGULAR_ID -> NEW_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.new_key_return new_key() throws RecognitionException {
        OracleParser_Keys.new_key_return retval = new OracleParser_Keys.new_key_return();
        retval.start = input.LT(1);
        int new_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID203=null;

        Object REGULAR_ID203_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // Keys.g:1112:5: ({...}? => REGULAR_ID -> NEW_VK[$REGULAR_ID] )
            // Keys.g:1112:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("new"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "new_key", "input.LT(1).getText().equalsIgnoreCase(\"new\")");
            }
            REGULAR_ID203=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_new_key7355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID203);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1112:72: -> NEW_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NEW_VK, REGULAR_ID203));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, new_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "new_key"

    public static class revoke_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "revoke_key"
    // Keys.g:1115:1: revoke_key : SQL92_RESERVED_REVOKE ;
    public final OracleParser_Keys.revoke_key_return revoke_key() throws RecognitionException {
        OracleParser_Keys.revoke_key_return retval = new OracleParser_Keys.revoke_key_return();
        retval.start = input.LT(1);
        int revoke_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_REVOKE204=null;

        Object SQL92_RESERVED_REVOKE204_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // Keys.g:1116:5: ( SQL92_RESERVED_REVOKE )
            // Keys.g:1116:10: SQL92_RESERVED_REVOKE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_REVOKE204=(Token)match(input,SQL92_RESERVED_REVOKE,FOLLOW_SQL92_RESERVED_REVOKE_in_revoke_key7380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_REVOKE204_tree = (Object)adaptor.create(SQL92_RESERVED_REVOKE204);
            adaptor.addChild(root_0, SQL92_RESERVED_REVOKE204_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, revoke_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "revoke_key"

    public static class rename_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rename_key"
    // Keys.g:1119:1: rename_key : {...}? => REGULAR_ID -> RENAME_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.rename_key_return rename_key() throws RecognitionException {
        OracleParser_Keys.rename_key_return retval = new OracleParser_Keys.rename_key_return();
        retval.start = input.LT(1);
        int rename_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID205=null;

        Object REGULAR_ID205_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // Keys.g:1120:5: ({...}? => REGULAR_ID -> RENAME_VK[$REGULAR_ID] )
            // Keys.g:1120:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rename"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rename_key", "input.LT(1).getText().equalsIgnoreCase(\"rename\")");
            }
            REGULAR_ID205=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rename_key7403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID205);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1120:75: -> RENAME_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(RENAME_VK, REGULAR_ID205));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, rename_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rename_key"

    public static class customdatum_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "customdatum_key"
    // Keys.g:1123:1: customdatum_key : {...}? => REGULAR_ID -> CUSTOMDATUM_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.customdatum_key_return customdatum_key() throws RecognitionException {
        OracleParser_Keys.customdatum_key_return retval = new OracleParser_Keys.customdatum_key_return();
        retval.start = input.LT(1);
        int customdatum_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID206=null;

        Object REGULAR_ID206_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // Keys.g:1124:5: ({...}? => REGULAR_ID -> CUSTOMDATUM_VK[$REGULAR_ID] )
            // Keys.g:1124:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("customdatum"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "customdatum_key", "input.LT(1).getText().equalsIgnoreCase(\"customdatum\")");
            }
            REGULAR_ID206=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_customdatum_key7432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID206);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1124:80: -> CUSTOMDATUM_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CUSTOMDATUM_VK, REGULAR_ID206));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, customdatum_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "customdatum_key"

    public static class oradata_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oradata_key"
    // Keys.g:1127:1: oradata_key : {...}? => REGULAR_ID -> ORADATA_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.oradata_key_return oradata_key() throws RecognitionException {
        OracleParser_Keys.oradata_key_return retval = new OracleParser_Keys.oradata_key_return();
        retval.start = input.LT(1);
        int oradata_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID207=null;

        Object REGULAR_ID207_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // Keys.g:1128:5: ({...}? => REGULAR_ID -> ORADATA_VK[$REGULAR_ID] )
            // Keys.g:1128:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("oradata"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "oradata_key", "input.LT(1).getText().equalsIgnoreCase(\"oradata\")");
            }
            REGULAR_ID207=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_oradata_key7460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID207);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1128:76: -> ORADATA_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ORADATA_VK, REGULAR_ID207));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, oradata_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oradata_key"

    public static class constructor_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_key"
    // Keys.g:1131:1: constructor_key : {...}? => REGULAR_ID -> CONSTRUCTOR_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.constructor_key_return constructor_key() throws RecognitionException {
        OracleParser_Keys.constructor_key_return retval = new OracleParser_Keys.constructor_key_return();
        retval.start = input.LT(1);
        int constructor_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID208=null;

        Object REGULAR_ID208_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // Keys.g:1132:5: ({...}? => REGULAR_ID -> CONSTRUCTOR_VK[$REGULAR_ID] )
            // Keys.g:1132:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("constructor"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "constructor_key", "input.LT(1).getText().equalsIgnoreCase(\"constructor\")");
            }
            REGULAR_ID208=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_constructor_key7488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID208);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1132:80: -> CONSTRUCTOR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CONSTRUCTOR_VK, REGULAR_ID208));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, constructor_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_key"

    public static class sqldata_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqldata_key"
    // Keys.g:1135:1: sqldata_key : {...}? => REGULAR_ID -> SQLDATA_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.sqldata_key_return sqldata_key() throws RecognitionException {
        OracleParser_Keys.sqldata_key_return retval = new OracleParser_Keys.sqldata_key_return();
        retval.start = input.LT(1);
        int sqldata_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID209=null;

        Object REGULAR_ID209_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // Keys.g:1136:5: ({...}? => REGULAR_ID -> SQLDATA_VK[$REGULAR_ID] )
            // Keys.g:1136:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("sqldata"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sqldata_key", "input.LT(1).getText().equalsIgnoreCase(\"sqldata\")");
            }
            REGULAR_ID209=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sqldata_key7516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID209);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1136:76: -> SQLDATA_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SQLDATA_VK, REGULAR_ID209));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, sqldata_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqldata_key"

    public static class member_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "member_key"
    // Keys.g:1139:1: member_key : {...}? => REGULAR_ID -> MEMBER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.member_key_return member_key() throws RecognitionException {
        OracleParser_Keys.member_key_return retval = new OracleParser_Keys.member_key_return();
        retval.start = input.LT(1);
        int member_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID210=null;

        Object REGULAR_ID210_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // Keys.g:1140:5: ({...}? => REGULAR_ID -> MEMBER_VK[$REGULAR_ID] )
            // Keys.g:1140:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("member"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "member_key", "input.LT(1).getText().equalsIgnoreCase(\"member\")");
            }
            REGULAR_ID210=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_member_key7544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID210);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1140:75: -> MEMBER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(MEMBER_VK, REGULAR_ID210));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, member_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "member_key"

    public static class self_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "self_key"
    // Keys.g:1143:1: self_key : {...}? => REGULAR_ID -> SELF_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.self_key_return self_key() throws RecognitionException {
        OracleParser_Keys.self_key_return retval = new OracleParser_Keys.self_key_return();
        retval.start = input.LT(1);
        int self_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID211=null;

        Object REGULAR_ID211_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // Keys.g:1144:5: ({...}? => REGULAR_ID -> SELF_VK[$REGULAR_ID] )
            // Keys.g:1144:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("self"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "self_key", "input.LT(1).getText().equalsIgnoreCase(\"self\")");
            }
            REGULAR_ID211=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_self_key7572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID211);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1144:73: -> SELF_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SELF_VK, REGULAR_ID211));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, self_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "self_key"

    public static class object_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_key"
    // Keys.g:1147:1: object_key : {...}? => REGULAR_ID -> OBJECT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.object_key_return object_key() throws RecognitionException {
        OracleParser_Keys.object_key_return retval = new OracleParser_Keys.object_key_return();
        retval.start = input.LT(1);
        int object_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID212=null;

        Object REGULAR_ID212_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // Keys.g:1148:5: ({...}? => REGULAR_ID -> OBJECT_VK[$REGULAR_ID] )
            // Keys.g:1148:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("object"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "object_key", "input.LT(1).getText().equalsIgnoreCase(\"object\")");
            }
            REGULAR_ID212=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_object_key7600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID212);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1148:75: -> OBJECT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(OBJECT_VK, REGULAR_ID212));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, object_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_key"

    public static class variable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_key"
    // Keys.g:1151:1: variable_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.variable_key_return variable_key() throws RecognitionException {
        OracleParser_Keys.variable_key_return retval = new OracleParser_Keys.variable_key_return();
        retval.start = input.LT(1);
        int variable_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID213=null;

        Object REGULAR_ID213_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // Keys.g:1152:5: ({...}? => REGULAR_ID )
            // Keys.g:1152:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("variable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "variable_key", "input.LT(1).getText().equalsIgnoreCase(\"variable\")");
            }
            REGULAR_ID213=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_variable_key7628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID213_tree = (Object)adaptor.create(REGULAR_ID213);
            adaptor.addChild(root_0, REGULAR_ID213_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, variable_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_key"

    public static class instantiable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instantiable_key"
    // Keys.g:1155:1: instantiable_key : {...}? => REGULAR_ID -> INSTANTIABLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.instantiable_key_return instantiable_key() throws RecognitionException {
        OracleParser_Keys.instantiable_key_return retval = new OracleParser_Keys.instantiable_key_return();
        retval.start = input.LT(1);
        int instantiable_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID214=null;

        Object REGULAR_ID214_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // Keys.g:1156:5: ({...}? => REGULAR_ID -> INSTANTIABLE_VK[$REGULAR_ID] )
            // Keys.g:1156:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("instantiable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instantiable_key", "input.LT(1).getText().equalsIgnoreCase(\"instantiable\")");
            }
            REGULAR_ID214=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_instantiable_key7651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID214);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1156:81: -> INSTANTIABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INSTANTIABLE_VK, REGULAR_ID214));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, instantiable_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instantiable_key"

    public static class final_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "final_key"
    // Keys.g:1159:1: final_key : {...}? => REGULAR_ID -> FINAL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.final_key_return final_key() throws RecognitionException {
        OracleParser_Keys.final_key_return retval = new OracleParser_Keys.final_key_return();
        retval.start = input.LT(1);
        int final_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID215=null;

        Object REGULAR_ID215_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // Keys.g:1160:5: ({...}? => REGULAR_ID -> FINAL_VK[$REGULAR_ID] )
            // Keys.g:1160:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("final"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "final_key", "input.LT(1).getText().equalsIgnoreCase(\"final\")");
            }
            REGULAR_ID215=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_final_key7679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID215);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1160:74: -> FINAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FINAL_VK, REGULAR_ID215));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, final_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "final_key"

    public static class static_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "static_key"
    // Keys.g:1163:1: static_key : {...}? => REGULAR_ID -> STATIC_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.static_key_return static_key() throws RecognitionException {
        OracleParser_Keys.static_key_return retval = new OracleParser_Keys.static_key_return();
        retval.start = input.LT(1);
        int static_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID216=null;

        Object REGULAR_ID216_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // Keys.g:1164:5: ({...}? => REGULAR_ID -> STATIC_VK[$REGULAR_ID] )
            // Keys.g:1164:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("static"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "static_key", "input.LT(1).getText().equalsIgnoreCase(\"static\")");
            }
            REGULAR_ID216=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_static_key7707); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID216);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1164:75: -> STATIC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(STATIC_VK, REGULAR_ID216));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, static_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "static_key"

    public static class oid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oid_key"
    // Keys.g:1167:1: oid_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.oid_key_return oid_key() throws RecognitionException {
        OracleParser_Keys.oid_key_return retval = new OracleParser_Keys.oid_key_return();
        retval.start = input.LT(1);
        int oid_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID217=null;

        Object REGULAR_ID217_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // Keys.g:1168:5: ({...}? => REGULAR_ID )
            // Keys.g:1168:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("oid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "oid_key", "input.LT(1).getText().equalsIgnoreCase(\"oid\")");
            }
            REGULAR_ID217=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_oid_key7735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID217_tree = (Object)adaptor.create(REGULAR_ID217);
            adaptor.addChild(root_0, REGULAR_ID217_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, oid_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oid_key"

    public static class result_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "result_key"
    // Keys.g:1171:1: result_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.result_key_return result_key() throws RecognitionException {
        OracleParser_Keys.result_key_return retval = new OracleParser_Keys.result_key_return();
        retval.start = input.LT(1);
        int result_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID218=null;

        Object REGULAR_ID218_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // Keys.g:1172:5: ({...}? => REGULAR_ID )
            // Keys.g:1172:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("result"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "result_key", "input.LT(1).getText().equalsIgnoreCase(\"result\")");
            }
            REGULAR_ID218=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_result_key7758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID218_tree = (Object)adaptor.create(REGULAR_ID218);
            adaptor.addChild(root_0, REGULAR_ID218_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, result_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "result_key"

    public static class under_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "under_key"
    // Keys.g:1175:1: under_key : {...}? => REGULAR_ID -> UNDER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.under_key_return under_key() throws RecognitionException {
        OracleParser_Keys.under_key_return retval = new OracleParser_Keys.under_key_return();
        retval.start = input.LT(1);
        int under_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID219=null;

        Object REGULAR_ID219_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // Keys.g:1176:5: ({...}? => REGULAR_ID -> UNDER_VK[$REGULAR_ID] )
            // Keys.g:1176:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("under"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "under_key", "input.LT(1).getText().equalsIgnoreCase(\"under\")");
            }
            REGULAR_ID219=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_under_key7781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID219);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1176:74: -> UNDER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(UNDER_VK, REGULAR_ID219));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, under_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "under_key"

    public static class map_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_key"
    // Keys.g:1179:1: map_key : {...}? => REGULAR_ID -> MAP_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.map_key_return map_key() throws RecognitionException {
        OracleParser_Keys.map_key_return retval = new OracleParser_Keys.map_key_return();
        retval.start = input.LT(1);
        int map_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID220=null;

        Object REGULAR_ID220_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // Keys.g:1180:5: ({...}? => REGULAR_ID -> MAP_VK[$REGULAR_ID] )
            // Keys.g:1180:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("map"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "map_key", "input.LT(1).getText().equalsIgnoreCase(\"map\")");
            }
            REGULAR_ID220=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_map_key7809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID220);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1180:72: -> MAP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(MAP_VK, REGULAR_ID220));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, map_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "map_key"

    public static class overriding_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "overriding_key"
    // Keys.g:1183:1: overriding_key : {...}? => REGULAR_ID -> OVERRIDING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.overriding_key_return overriding_key() throws RecognitionException {
        OracleParser_Keys.overriding_key_return retval = new OracleParser_Keys.overriding_key_return();
        retval.start = input.LT(1);
        int overriding_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID221=null;

        Object REGULAR_ID221_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // Keys.g:1184:5: ({...}? => REGULAR_ID -> OVERRIDING_VK[$REGULAR_ID] )
            // Keys.g:1184:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("overriding"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "overriding_key", "input.LT(1).getText().equalsIgnoreCase(\"overriding\")");
            }
            REGULAR_ID221=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_overriding_key7837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID221);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1184:79: -> OVERRIDING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(OVERRIDING_VK, REGULAR_ID221));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, overriding_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "overriding_key"

    public static class add_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "add_key"
    // Keys.g:1187:1: add_key : {...}? => REGULAR_ID -> ADD_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.add_key_return add_key() throws RecognitionException {
        OracleParser_Keys.add_key_return retval = new OracleParser_Keys.add_key_return();
        retval.start = input.LT(1);
        int add_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID222=null;

        Object REGULAR_ID222_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // Keys.g:1188:5: ({...}? => REGULAR_ID -> ADD_VK[$REGULAR_ID] )
            // Keys.g:1188:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("add"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "add_key", "input.LT(1).getText().equalsIgnoreCase(\"add\")");
            }
            REGULAR_ID222=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_add_key7865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID222);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1188:72: -> ADD_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ADD_VK, REGULAR_ID222));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, add_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "add_key"

    public static class modify_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modify_key"
    // Keys.g:1191:1: modify_key : {...}? => REGULAR_ID -> MODIFY_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.modify_key_return modify_key() throws RecognitionException {
        OracleParser_Keys.modify_key_return retval = new OracleParser_Keys.modify_key_return();
        retval.start = input.LT(1);
        int modify_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID223=null;

        Object REGULAR_ID223_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // Keys.g:1192:5: ({...}? => REGULAR_ID -> MODIFY_VK[$REGULAR_ID] )
            // Keys.g:1192:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("modify"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "modify_key", "input.LT(1).getText().equalsIgnoreCase(\"modify\")");
            }
            REGULAR_ID223=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_modify_key7893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID223);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1192:75: -> MODIFY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(MODIFY_VK, REGULAR_ID223));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, modify_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modify_key"

    public static class including_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "including_key"
    // Keys.g:1195:1: including_key : {...}? => REGULAR_ID -> INCLUDING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.including_key_return including_key() throws RecognitionException {
        OracleParser_Keys.including_key_return retval = new OracleParser_Keys.including_key_return();
        retval.start = input.LT(1);
        int including_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID224=null;

        Object REGULAR_ID224_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // Keys.g:1196:5: ({...}? => REGULAR_ID -> INCLUDING_VK[$REGULAR_ID] )
            // Keys.g:1196:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("including"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "including_key", "input.LT(1).getText().equalsIgnoreCase(\"including\")");
            }
            REGULAR_ID224=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_including_key7921); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID224);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1196:78: -> INCLUDING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INCLUDING_VK, REGULAR_ID224));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, including_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "including_key"

    public static class substitutable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitutable_key"
    // Keys.g:1199:1: substitutable_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.substitutable_key_return substitutable_key() throws RecognitionException {
        OracleParser_Keys.substitutable_key_return retval = new OracleParser_Keys.substitutable_key_return();
        retval.start = input.LT(1);
        int substitutable_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID225=null;

        Object REGULAR_ID225_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // Keys.g:1200:5: ({...}? => REGULAR_ID )
            // Keys.g:1200:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("substitutable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "substitutable_key", "input.LT(1).getText().equalsIgnoreCase(\"substitutable\")");
            }
            REGULAR_ID225=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_substitutable_key7949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID225_tree = (Object)adaptor.create(REGULAR_ID225);
            adaptor.addChild(root_0, REGULAR_ID225_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, substitutable_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "substitutable_key"

    public static class attribute_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_key"
    // Keys.g:1203:1: attribute_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.attribute_key_return attribute_key() throws RecognitionException {
        OracleParser_Keys.attribute_key_return retval = new OracleParser_Keys.attribute_key_return();
        retval.start = input.LT(1);
        int attribute_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID226=null;

        Object REGULAR_ID226_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // Keys.g:1204:5: ({...}? => REGULAR_ID )
            // Keys.g:1204:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("attribute"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "attribute_key", "input.LT(1).getText().equalsIgnoreCase(\"attribute\")");
            }
            REGULAR_ID226=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_attribute_key7972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID226_tree = (Object)adaptor.create(REGULAR_ID226);
            adaptor.addChild(root_0, REGULAR_ID226_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, attribute_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_key"

    public static class cascade_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cascade_key"
    // Keys.g:1207:1: cascade_key : {...}? => REGULAR_ID -> CASCADE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.cascade_key_return cascade_key() throws RecognitionException {
        OracleParser_Keys.cascade_key_return retval = new OracleParser_Keys.cascade_key_return();
        retval.start = input.LT(1);
        int cascade_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID227=null;

        Object REGULAR_ID227_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // Keys.g:1208:5: ({...}? => REGULAR_ID -> CASCADE_VK[$REGULAR_ID] )
            // Keys.g:1208:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cascade"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cascade_key", "input.LT(1).getText().equalsIgnoreCase(\"cascade\")");
            }
            REGULAR_ID227=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cascade_key7995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID227);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1208:76: -> CASCADE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CASCADE_VK, REGULAR_ID227));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, cascade_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cascade_key"

    public static class data_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_key"
    // Keys.g:1211:1: data_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.data_key_return data_key() throws RecognitionException {
        OracleParser_Keys.data_key_return retval = new OracleParser_Keys.data_key_return();
        retval.start = input.LT(1);
        int data_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID228=null;

        Object REGULAR_ID228_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // Keys.g:1212:5: ({...}? => REGULAR_ID )
            // Keys.g:1212:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("data"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "data_key", "input.LT(1).getText().equalsIgnoreCase(\"data\")");
            }
            REGULAR_ID228=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_data_key8024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID228_tree = (Object)adaptor.create(REGULAR_ID228);
            adaptor.addChild(root_0, REGULAR_ID228_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, data_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "data_key"

    public static class invalidate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invalidate_key"
    // Keys.g:1215:1: invalidate_key : {...}? => REGULAR_ID -> INVALIDATE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.invalidate_key_return invalidate_key() throws RecognitionException {
        OracleParser_Keys.invalidate_key_return retval = new OracleParser_Keys.invalidate_key_return();
        retval.start = input.LT(1);
        int invalidate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID229=null;

        Object REGULAR_ID229_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // Keys.g:1216:5: ({...}? => REGULAR_ID -> INVALIDATE_VK[$REGULAR_ID] )
            // Keys.g:1216:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("invalidate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "invalidate_key", "input.LT(1).getText().equalsIgnoreCase(\"invalidate\")");
            }
            REGULAR_ID229=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_invalidate_key8047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID229);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1216:79: -> INVALIDATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INVALIDATE_VK, REGULAR_ID229));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, invalidate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invalidate_key"

    public static class element_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "element_key"
    // Keys.g:1219:1: element_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.element_key_return element_key() throws RecognitionException {
        OracleParser_Keys.element_key_return retval = new OracleParser_Keys.element_key_return();
        retval.start = input.LT(1);
        int element_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID230=null;

        Object REGULAR_ID230_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // Keys.g:1220:5: ({...}? => REGULAR_ID )
            // Keys.g:1220:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("element"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "element_key", "input.LT(1).getText().equalsIgnoreCase(\"element\")");
            }
            REGULAR_ID230=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_element_key8075); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID230_tree = (Object)adaptor.create(REGULAR_ID230);
            adaptor.addChild(root_0, REGULAR_ID230_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, element_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "element_key"

    public static class first_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "first_key"
    // Keys.g:1223:1: first_key : {...}? => REGULAR_ID -> FIRST_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.first_key_return first_key() throws RecognitionException {
        OracleParser_Keys.first_key_return retval = new OracleParser_Keys.first_key_return();
        retval.start = input.LT(1);
        int first_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID231=null;

        Object REGULAR_ID231_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // Keys.g:1224:5: ({...}? => REGULAR_ID -> FIRST_VK[$REGULAR_ID] )
            // Keys.g:1224:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("first"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "first_key", "input.LT(1).getText().equalsIgnoreCase(\"first\")");
            }
            REGULAR_ID231=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_first_key8098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID231);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1224:74: -> FIRST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FIRST_VK, REGULAR_ID231));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, first_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "first_key"

    public static class check_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "check_key"
    // Keys.g:1227:1: check_key : SQL92_RESERVED_CHECK ;
    public final OracleParser_Keys.check_key_return check_key() throws RecognitionException {
        OracleParser_Keys.check_key_return retval = new OracleParser_Keys.check_key_return();
        retval.start = input.LT(1);
        int check_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_CHECK232=null;

        Object SQL92_RESERVED_CHECK232_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // Keys.g:1228:5: ( SQL92_RESERVED_CHECK )
            // Keys.g:1228:10: SQL92_RESERVED_CHECK
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_CHECK232=(Token)match(input,SQL92_RESERVED_CHECK,FOLLOW_SQL92_RESERVED_CHECK_in_check_key8123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CHECK232_tree = (Object)adaptor.create(SQL92_RESERVED_CHECK232);
            adaptor.addChild(root_0, SQL92_RESERVED_CHECK232_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, check_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "check_key"

    public static class option_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "option_key"
    // Keys.g:1231:1: option_key : SQL92_RESERVED_OPTION ;
    public final OracleParser_Keys.option_key_return option_key() throws RecognitionException {
        OracleParser_Keys.option_key_return retval = new OracleParser_Keys.option_key_return();
        retval.start = input.LT(1);
        int option_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_OPTION233=null;

        Object SQL92_RESERVED_OPTION233_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // Keys.g:1232:5: ( SQL92_RESERVED_OPTION )
            // Keys.g:1232:10: SQL92_RESERVED_OPTION
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_OPTION233=(Token)match(input,SQL92_RESERVED_OPTION,FOLLOW_SQL92_RESERVED_OPTION_in_option_key8143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_OPTION233_tree = (Object)adaptor.create(SQL92_RESERVED_OPTION233);
            adaptor.addChild(root_0, SQL92_RESERVED_OPTION233_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, option_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "option_key"

    public static class nocycle_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nocycle_key"
    // Keys.g:1235:1: nocycle_key : {...}? => REGULAR_ID -> NOCYCLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nocycle_key_return nocycle_key() throws RecognitionException {
        OracleParser_Keys.nocycle_key_return retval = new OracleParser_Keys.nocycle_key_return();
        retval.start = input.LT(1);
        int nocycle_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID234=null;

        Object REGULAR_ID234_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // Keys.g:1236:5: ({...}? => REGULAR_ID -> NOCYCLE_VK[$REGULAR_ID] )
            // Keys.g:1236:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nocycle"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nocycle_key", "input.LT(1).getText().equalsIgnoreCase(\"nocycle\")");
            }
            REGULAR_ID234=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nocycle_key8166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID234);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1236:76: -> NOCYCLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NOCYCLE_VK, REGULAR_ID234));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, nocycle_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nocycle_key"

    public static class locked_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "locked_key"
    // Keys.g:1239:1: locked_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.locked_key_return locked_key() throws RecognitionException {
        OracleParser_Keys.locked_key_return retval = new OracleParser_Keys.locked_key_return();
        retval.start = input.LT(1);
        int locked_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID235=null;

        Object REGULAR_ID235_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // Keys.g:1240:5: ({...}? => REGULAR_ID )
            // Keys.g:1240:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("locked"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "locked_key", "input.LT(1).getText().equalsIgnoreCase(\"locked\")");
            }
            REGULAR_ID235=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_locked_key8194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID235_tree = (Object)adaptor.create(REGULAR_ID235);
            adaptor.addChild(root_0, REGULAR_ID235_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, locked_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "locked_key"

    public static class block_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block_key"
    // Keys.g:1243:1: block_key : {...}? => REGULAR_ID -> BLOCK_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.block_key_return block_key() throws RecognitionException {
        OracleParser_Keys.block_key_return retval = new OracleParser_Keys.block_key_return();
        retval.start = input.LT(1);
        int block_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID236=null;

        Object REGULAR_ID236_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // Keys.g:1244:5: ({...}? => REGULAR_ID -> BLOCK_VK[$REGULAR_ID] )
            // Keys.g:1244:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("block"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "block_key", "input.LT(1).getText().equalsIgnoreCase(\"block\")");
            }
            REGULAR_ID236=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_block_key8217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID236);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1244:74: -> BLOCK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BLOCK_VK, REGULAR_ID236));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, block_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block_key"

    public static class xml_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xml_key"
    // Keys.g:1247:1: xml_key : {...}? => REGULAR_ID -> XML_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xml_key_return xml_key() throws RecognitionException {
        OracleParser_Keys.xml_key_return retval = new OracleParser_Keys.xml_key_return();
        retval.start = input.LT(1);
        int xml_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID237=null;

        Object REGULAR_ID237_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // Keys.g:1248:5: ({...}? => REGULAR_ID -> XML_VK[$REGULAR_ID] )
            // Keys.g:1248:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xml"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xml_key", "input.LT(1).getText().equalsIgnoreCase(\"xml\")");
            }
            REGULAR_ID237=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xml_key8245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID237);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1248:72: -> XML_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XML_VK, REGULAR_ID237));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, xml_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xml_key"

    public static class pivot_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pivot_key"
    // Keys.g:1251:1: pivot_key : {...}? => REGULAR_ID -> PIVOT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.pivot_key_return pivot_key() throws RecognitionException {
        OracleParser_Keys.pivot_key_return retval = new OracleParser_Keys.pivot_key_return();
        retval.start = input.LT(1);
        int pivot_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID238=null;

        Object REGULAR_ID238_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // Keys.g:1252:5: ({...}? => REGULAR_ID -> PIVOT_VK[$REGULAR_ID] )
            // Keys.g:1252:10: {...}? => REGULAR_ID
            {
            if ( !(((input.LT(1).getText().equalsIgnoreCase("pivot")))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "pivot_key", "(input.LT(1).getText().equalsIgnoreCase(\"pivot\"))");
            }
            REGULAR_ID238=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_pivot_key8273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID238);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1252:76: -> PIVOT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PIVOT_VK, REGULAR_ID238));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, pivot_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pivot_key"

    public static class prior_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prior_key"
    // Keys.g:1255:1: prior_key : SQL92_RESERVED_PRIOR ;
    public final OracleParser_Keys.prior_key_return prior_key() throws RecognitionException {
        OracleParser_Keys.prior_key_return retval = new OracleParser_Keys.prior_key_return();
        retval.start = input.LT(1);
        int prior_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_PRIOR239=null;

        Object SQL92_RESERVED_PRIOR239_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // Keys.g:1256:5: ( SQL92_RESERVED_PRIOR )
            // Keys.g:1256:10: SQL92_RESERVED_PRIOR
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_PRIOR239=(Token)match(input,SQL92_RESERVED_PRIOR,FOLLOW_SQL92_RESERVED_PRIOR_in_prior_key8298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_PRIOR239_tree = (Object)adaptor.create(SQL92_RESERVED_PRIOR239);
            adaptor.addChild(root_0, SQL92_RESERVED_PRIOR239_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, prior_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prior_key"

    public static class sequential_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sequential_key"
    // Keys.g:1259:1: sequential_key : {...}? => REGULAR_ID -> SEQUENTIAL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.sequential_key_return sequential_key() throws RecognitionException {
        OracleParser_Keys.sequential_key_return retval = new OracleParser_Keys.sequential_key_return();
        retval.start = input.LT(1);
        int sequential_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID240=null;

        Object REGULAR_ID240_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // Keys.g:1260:5: ({...}? => REGULAR_ID -> SEQUENTIAL_VK[$REGULAR_ID] )
            // Keys.g:1260:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("sequential"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sequential_key", "input.LT(1).getText().equalsIgnoreCase(\"sequential\")");
            }
            REGULAR_ID240=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sequential_key8321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID240);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1260:79: -> SEQUENTIAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SEQUENTIAL_VK, REGULAR_ID240));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, sequential_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sequential_key"

    public static class single_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "single_key"
    // Keys.g:1263:1: single_key : {...}? => REGULAR_ID -> SINGLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.single_key_return single_key() throws RecognitionException {
        OracleParser_Keys.single_key_return retval = new OracleParser_Keys.single_key_return();
        retval.start = input.LT(1);
        int single_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID241=null;

        Object REGULAR_ID241_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // Keys.g:1264:5: ({...}? => REGULAR_ID -> SINGLE_VK[$REGULAR_ID] )
            // Keys.g:1264:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("single"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "single_key", "input.LT(1).getText().equalsIgnoreCase(\"single\")");
            }
            REGULAR_ID241=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_single_key8349); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID241);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1264:75: -> SINGLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SINGLE_VK, REGULAR_ID241));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, single_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "single_key"

    public static class skip_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "skip_key"
    // Keys.g:1267:1: skip_key : {...}? => REGULAR_ID -> SKIP_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.skip_key_return skip_key() throws RecognitionException {
        OracleParser_Keys.skip_key_return retval = new OracleParser_Keys.skip_key_return();
        retval.start = input.LT(1);
        int skip_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID242=null;

        Object REGULAR_ID242_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // Keys.g:1268:5: ({...}? => REGULAR_ID -> SKIP_VK[$REGULAR_ID] )
            // Keys.g:1268:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("skip"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "skip_key", "input.LT(1).getText().equalsIgnoreCase(\"skip\")");
            }
            REGULAR_ID242=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_skip_key8377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID242);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1268:73: -> SKIP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SKIP_VK, REGULAR_ID242));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, skip_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "skip_key"

    public static class model_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_key"
    // Keys.g:1271:1: model_key : PLSQL_NON_RESERVED_MODEL ;
    public final OracleParser_Keys.model_key_return model_key() throws RecognitionException {
        OracleParser_Keys.model_key_return retval = new OracleParser_Keys.model_key_return();
        retval.start = input.LT(1);
        int model_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_NON_RESERVED_MODEL243=null;

        Object PLSQL_NON_RESERVED_MODEL243_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // Keys.g:1272:5: ( PLSQL_NON_RESERVED_MODEL )
            // Keys.g:1273:9: PLSQL_NON_RESERVED_MODEL
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_NON_RESERVED_MODEL243=(Token)match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_key8411); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_NON_RESERVED_MODEL243_tree = (Object)adaptor.create(PLSQL_NON_RESERVED_MODEL243);
            adaptor.addChild(root_0, PLSQL_NON_RESERVED_MODEL243_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, model_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_key"

    public static class updated_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updated_key"
    // Keys.g:1276:1: updated_key : {...}? => REGULAR_ID -> UPDATED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.updated_key_return updated_key() throws RecognitionException {
        OracleParser_Keys.updated_key_return retval = new OracleParser_Keys.updated_key_return();
        retval.start = input.LT(1);
        int updated_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID244=null;

        Object REGULAR_ID244_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // Keys.g:1277:5: ({...}? => REGULAR_ID -> UPDATED_VK[$REGULAR_ID] )
            // Keys.g:1277:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("updated"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "updated_key", "input.LT(1).getText().equalsIgnoreCase(\"updated\")");
            }
            REGULAR_ID244=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_updated_key8434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID244);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1277:76: -> UPDATED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(UPDATED_VK, REGULAR_ID244));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, updated_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "updated_key"

    public static class increment_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "increment_key"
    // Keys.g:1280:1: increment_key : {...}? => REGULAR_ID -> INCREMENT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.increment_key_return increment_key() throws RecognitionException {
        OracleParser_Keys.increment_key_return retval = new OracleParser_Keys.increment_key_return();
        retval.start = input.LT(1);
        int increment_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID245=null;

        Object REGULAR_ID245_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // Keys.g:1281:5: ({...}? => REGULAR_ID -> INCREMENT_VK[$REGULAR_ID] )
            // Keys.g:1281:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("increment"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "increment_key", "input.LT(1).getText().equalsIgnoreCase(\"increment\")");
            }
            REGULAR_ID245=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_increment_key8462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID245);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1281:78: -> INCREMENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INCREMENT_VK, REGULAR_ID245));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, increment_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "increment_key"

    public static class exclude_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclude_key"
    // Keys.g:1284:1: exclude_key : {...}? => REGULAR_ID -> EXCLUDE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.exclude_key_return exclude_key() throws RecognitionException {
        OracleParser_Keys.exclude_key_return retval = new OracleParser_Keys.exclude_key_return();
        retval.start = input.LT(1);
        int exclude_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID246=null;

        Object REGULAR_ID246_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // Keys.g:1285:5: ({...}? => REGULAR_ID -> EXCLUDE_VK[$REGULAR_ID] )
            // Keys.g:1285:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("exclude"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exclude_key", "input.LT(1).getText().equalsIgnoreCase(\"exclude\")");
            }
            REGULAR_ID246=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_exclude_key8490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID246);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1285:76: -> EXCLUDE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(EXCLUDE_VK, REGULAR_ID246));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, exclude_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclude_key"

    public static class reference_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_key"
    // Keys.g:1288:1: reference_key : {...}? => REGULAR_ID -> REFERENCE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.reference_key_return reference_key() throws RecognitionException {
        OracleParser_Keys.reference_key_return retval = new OracleParser_Keys.reference_key_return();
        retval.start = input.LT(1);
        int reference_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID247=null;

        Object REGULAR_ID247_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // Keys.g:1289:5: ({...}? => REGULAR_ID -> REFERENCE_VK[$REGULAR_ID] )
            // Keys.g:1289:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("reference"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reference_key", "input.LT(1).getText().equalsIgnoreCase(\"reference\")");
            }
            REGULAR_ID247=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_reference_key8518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID247);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1289:78: -> REFERENCE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(REFERENCE_VK, REGULAR_ID247));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, reference_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference_key"

    public static class sets_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sets_key"
    // Keys.g:1292:1: sets_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.sets_key_return sets_key() throws RecognitionException {
        OracleParser_Keys.sets_key_return retval = new OracleParser_Keys.sets_key_return();
        retval.start = input.LT(1);
        int sets_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID248=null;

        Object REGULAR_ID248_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // Keys.g:1293:5: ({...}? => REGULAR_ID )
            // Keys.g:1293:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("sets"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sets_key", "input.LT(1).getText().equalsIgnoreCase(\"sets\")");
            }
            REGULAR_ID248=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sets_key8546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID248_tree = (Object)adaptor.create(REGULAR_ID248);
            adaptor.addChild(root_0, REGULAR_ID248_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, sets_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sets_key"

    public static class until_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "until_key"
    // Keys.g:1296:1: until_key : {...}? => REGULAR_ID -> UNTIL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.until_key_return until_key() throws RecognitionException {
        OracleParser_Keys.until_key_return retval = new OracleParser_Keys.until_key_return();
        retval.start = input.LT(1);
        int until_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID249=null;

        Object REGULAR_ID249_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // Keys.g:1297:5: ({...}? => REGULAR_ID -> UNTIL_VK[$REGULAR_ID] )
            // Keys.g:1297:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("until"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "until_key", "input.LT(1).getText().equalsIgnoreCase(\"until\")");
            }
            REGULAR_ID249=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_until_key8569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID249);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1297:74: -> UNTIL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(UNTIL_VK, REGULAR_ID249));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, until_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "until_key"

    public static class seed_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "seed_key"
    // Keys.g:1300:1: seed_key : {...}? => REGULAR_ID -> SEED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.seed_key_return seed_key() throws RecognitionException {
        OracleParser_Keys.seed_key_return retval = new OracleParser_Keys.seed_key_return();
        retval.start = input.LT(1);
        int seed_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID250=null;

        Object REGULAR_ID250_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // Keys.g:1301:5: ({...}? => REGULAR_ID -> SEED_VK[$REGULAR_ID] )
            // Keys.g:1301:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("seed"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "seed_key", "input.LT(1).getText().equalsIgnoreCase(\"seed\")");
            }
            REGULAR_ID250=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_seed_key8597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID250);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1301:73: -> SEED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SEED_VK, REGULAR_ID250));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, seed_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "seed_key"

    public static class maxvalue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxvalue_key"
    // Keys.g:1304:1: maxvalue_key : {...}? => REGULAR_ID -> MAXVALUE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.maxvalue_key_return maxvalue_key() throws RecognitionException {
        OracleParser_Keys.maxvalue_key_return retval = new OracleParser_Keys.maxvalue_key_return();
        retval.start = input.LT(1);
        int maxvalue_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID251=null;

        Object REGULAR_ID251_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // Keys.g:1305:5: ({...}? => REGULAR_ID -> MAXVALUE_VK[$REGULAR_ID] )
            // Keys.g:1305:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("maxvalue"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "maxvalue_key", "input.LT(1).getText().equalsIgnoreCase(\"maxvalue\")");
            }
            REGULAR_ID251=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_maxvalue_key8625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID251);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1305:77: -> MAXVALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(MAXVALUE_VK, REGULAR_ID251));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, maxvalue_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "maxvalue_key"

    public static class siblings_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "siblings_key"
    // Keys.g:1308:1: siblings_key : {...}? => REGULAR_ID -> SIBLINGS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.siblings_key_return siblings_key() throws RecognitionException {
        OracleParser_Keys.siblings_key_return retval = new OracleParser_Keys.siblings_key_return();
        retval.start = input.LT(1);
        int siblings_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID252=null;

        Object REGULAR_ID252_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // Keys.g:1309:5: ({...}? => REGULAR_ID -> SIBLINGS_VK[$REGULAR_ID] )
            // Keys.g:1309:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("siblings"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "siblings_key", "input.LT(1).getText().equalsIgnoreCase(\"siblings\")");
            }
            REGULAR_ID252=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_siblings_key8653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID252);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1309:77: -> SIBLINGS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIBLINGS_VK, REGULAR_ID252));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, siblings_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "siblings_key"

    public static class cube_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cube_key"
    // Keys.g:1312:1: cube_key : {...}? => REGULAR_ID -> CUBE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.cube_key_return cube_key() throws RecognitionException {
        OracleParser_Keys.cube_key_return retval = new OracleParser_Keys.cube_key_return();
        retval.start = input.LT(1);
        int cube_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID253=null;

        Object REGULAR_ID253_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // Keys.g:1313:5: ({...}? => REGULAR_ID -> CUBE_VK[$REGULAR_ID] )
            // Keys.g:1313:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cube"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cube_key", "input.LT(1).getText().equalsIgnoreCase(\"cube\")");
            }
            REGULAR_ID253=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cube_key8681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID253);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1313:73: -> CUBE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CUBE_VK, REGULAR_ID253));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, cube_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cube_key"

    public static class nulls_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nulls_key"
    // Keys.g:1316:1: nulls_key : {...}? => REGULAR_ID -> NULLS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nulls_key_return nulls_key() throws RecognitionException {
        OracleParser_Keys.nulls_key_return retval = new OracleParser_Keys.nulls_key_return();
        retval.start = input.LT(1);
        int nulls_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID254=null;

        Object REGULAR_ID254_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // Keys.g:1317:5: ({...}? => REGULAR_ID -> NULLS_VK[$REGULAR_ID] )
            // Keys.g:1317:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nulls"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nulls_key", "input.LT(1).getText().equalsIgnoreCase(\"nulls\")");
            }
            REGULAR_ID254=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nulls_key8709); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID254);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1317:74: -> NULLS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NULLS_VK, REGULAR_ID254));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, nulls_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nulls_key"

    public static class dimension_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dimension_key"
    // Keys.g:1320:1: dimension_key : {...}? => REGULAR_ID -> DIMENSION_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.dimension_key_return dimension_key() throws RecognitionException {
        OracleParser_Keys.dimension_key_return retval = new OracleParser_Keys.dimension_key_return();
        retval.start = input.LT(1);
        int dimension_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID255=null;

        Object REGULAR_ID255_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // Keys.g:1321:5: ({...}? => REGULAR_ID -> DIMENSION_VK[$REGULAR_ID] )
            // Keys.g:1321:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("dimension"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dimension_key", "input.LT(1).getText().equalsIgnoreCase(\"dimension\")");
            }
            REGULAR_ID255=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dimension_key8737); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID255);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1321:78: -> DIMENSION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DIMENSION_VK, REGULAR_ID255));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, dimension_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dimension_key"

    public static class scn_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "scn_key"
    // Keys.g:1324:1: scn_key : {...}? => REGULAR_ID -> SCN_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.scn_key_return scn_key() throws RecognitionException {
        OracleParser_Keys.scn_key_return retval = new OracleParser_Keys.scn_key_return();
        retval.start = input.LT(1);
        int scn_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID256=null;

        Object REGULAR_ID256_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // Keys.g:1325:5: ({...}? => REGULAR_ID -> SCN_VK[$REGULAR_ID] )
            // Keys.g:1325:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("scn"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "scn_key", "input.LT(1).getText().equalsIgnoreCase(\"scn\")");
            }
            REGULAR_ID256=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_scn_key8765); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID256);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1325:72: -> SCN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SCN_VK, REGULAR_ID256));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, scn_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "scn_key"

    public static class snapshot_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "snapshot_key"
    // Keys.g:1328:1: snapshot_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.snapshot_key_return snapshot_key() throws RecognitionException {
        OracleParser_Keys.snapshot_key_return retval = new OracleParser_Keys.snapshot_key_return();
        retval.start = input.LT(1);
        int snapshot_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID257=null;

        Object REGULAR_ID257_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // Keys.g:1329:5: ({...}? => REGULAR_ID )
            // Keys.g:1329:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("snapshot"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "snapshot_key", "input.LT(1).getText().equalsIgnoreCase(\"snapshot\")");
            }
            REGULAR_ID257=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_snapshot_key8793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID257_tree = (Object)adaptor.create(REGULAR_ID257);
            adaptor.addChild(root_0, REGULAR_ID257_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, snapshot_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "snapshot_key"

    public static class decrement_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decrement_key"
    // Keys.g:1332:1: decrement_key : {...}? => REGULAR_ID -> DECREMENT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.decrement_key_return decrement_key() throws RecognitionException {
        OracleParser_Keys.decrement_key_return retval = new OracleParser_Keys.decrement_key_return();
        retval.start = input.LT(1);
        int decrement_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID258=null;

        Object REGULAR_ID258_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // Keys.g:1333:5: ({...}? => REGULAR_ID -> DECREMENT_VK[$REGULAR_ID] )
            // Keys.g:1333:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("decrement"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "decrement_key", "input.LT(1).getText().equalsIgnoreCase(\"decrement\")");
            }
            REGULAR_ID258=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_decrement_key8816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID258);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1333:78: -> DECREMENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DECREMENT_VK, REGULAR_ID258));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, decrement_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "decrement_key"

    public static class unpivot_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unpivot_key"
    // Keys.g:1336:1: unpivot_key : {...}? => REGULAR_ID -> UNPIVOT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.unpivot_key_return unpivot_key() throws RecognitionException {
        OracleParser_Keys.unpivot_key_return retval = new OracleParser_Keys.unpivot_key_return();
        retval.start = input.LT(1);
        int unpivot_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID259=null;

        Object REGULAR_ID259_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // Keys.g:1337:5: ({...}? => REGULAR_ID -> UNPIVOT_VK[$REGULAR_ID] )
            // Keys.g:1337:10: {...}? => REGULAR_ID
            {
            if ( !(((input.LT(1).getText().equalsIgnoreCase("unpivot")))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "unpivot_key", "(input.LT(1).getText().equalsIgnoreCase(\"unpivot\"))");
            }
            REGULAR_ID259=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_unpivot_key8844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID259);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1337:78: -> UNPIVOT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(UNPIVOT_VK, REGULAR_ID259));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, unpivot_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unpivot_key"

    public static class keep_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keep_key"
    // Keys.g:1340:1: keep_key : {...}? => REGULAR_ID -> KEEP_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.keep_key_return keep_key() throws RecognitionException {
        OracleParser_Keys.keep_key_return retval = new OracleParser_Keys.keep_key_return();
        retval.start = input.LT(1);
        int keep_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID260=null;

        Object REGULAR_ID260_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // Keys.g:1341:5: ({...}? => REGULAR_ID -> KEEP_VK[$REGULAR_ID] )
            // Keys.g:1341:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("keep"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keep_key", "input.LT(1).getText().equalsIgnoreCase(\"keep\")");
            }
            REGULAR_ID260=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_keep_key8872); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID260);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1341:73: -> KEEP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(KEEP_VK, REGULAR_ID260));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, keep_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keep_key"

    public static class measures_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measures_key"
    // Keys.g:1344:1: measures_key : {...}? => REGULAR_ID -> MEASURES_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.measures_key_return measures_key() throws RecognitionException {
        OracleParser_Keys.measures_key_return retval = new OracleParser_Keys.measures_key_return();
        retval.start = input.LT(1);
        int measures_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID261=null;

        Object REGULAR_ID261_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // Keys.g:1345:5: ({...}? => REGULAR_ID -> MEASURES_VK[$REGULAR_ID] )
            // Keys.g:1345:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("measures"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "measures_key", "input.LT(1).getText().equalsIgnoreCase(\"measures\")");
            }
            REGULAR_ID261=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_measures_key8900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID261);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1345:77: -> MEASURES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(MEASURES_VK, REGULAR_ID261));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, measures_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measures_key"

    public static class rows_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rows_key"
    // Keys.g:1348:1: rows_key : {...}? => REGULAR_ID -> ROWS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.rows_key_return rows_key() throws RecognitionException {
        OracleParser_Keys.rows_key_return retval = new OracleParser_Keys.rows_key_return();
        retval.start = input.LT(1);
        int rows_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID262=null;

        Object REGULAR_ID262_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // Keys.g:1349:5: ({...}? => REGULAR_ID -> ROWS_VK[$REGULAR_ID] )
            // Keys.g:1349:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rows"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rows_key", "input.LT(1).getText().equalsIgnoreCase(\"rows\")");
            }
            REGULAR_ID262=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rows_key8928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID262);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1349:73: -> ROWS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ROWS_VK, REGULAR_ID262));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, rows_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rows_key"

    public static class sample_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sample_key"
    // Keys.g:1352:1: sample_key : {...}? => REGULAR_ID -> SAMPLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.sample_key_return sample_key() throws RecognitionException {
        OracleParser_Keys.sample_key_return retval = new OracleParser_Keys.sample_key_return();
        retval.start = input.LT(1);
        int sample_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID263=null;

        Object REGULAR_ID263_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // Keys.g:1353:5: ({...}? => REGULAR_ID -> SAMPLE_VK[$REGULAR_ID] )
            // Keys.g:1353:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("sample"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sample_key", "input.LT(1).getText().equalsIgnoreCase(\"sample\")");
            }
            REGULAR_ID263=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sample_key8956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID263);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1353:75: -> SAMPLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SAMPLE_VK, REGULAR_ID263));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, sample_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sample_key"

    public static class upsert_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "upsert_key"
    // Keys.g:1356:1: upsert_key : {...}? => REGULAR_ID -> UPSERT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.upsert_key_return upsert_key() throws RecognitionException {
        OracleParser_Keys.upsert_key_return retval = new OracleParser_Keys.upsert_key_return();
        retval.start = input.LT(1);
        int upsert_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID264=null;

        Object REGULAR_ID264_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // Keys.g:1357:5: ({...}? => REGULAR_ID -> UPSERT_VK[$REGULAR_ID] )
            // Keys.g:1357:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("upsert"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "upsert_key", "input.LT(1).getText().equalsIgnoreCase(\"upsert\")");
            }
            REGULAR_ID264=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_upsert_key8984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID264);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1357:75: -> UPSERT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(UPSERT_VK, REGULAR_ID264));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, upsert_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "upsert_key"

    public static class versions_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "versions_key"
    // Keys.g:1360:1: versions_key : {...}? => REGULAR_ID -> VERSIONS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.versions_key_return versions_key() throws RecognitionException {
        OracleParser_Keys.versions_key_return retval = new OracleParser_Keys.versions_key_return();
        retval.start = input.LT(1);
        int versions_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID265=null;

        Object REGULAR_ID265_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // Keys.g:1361:5: ({...}? => REGULAR_ID -> VERSIONS_VK[$REGULAR_ID] )
            // Keys.g:1361:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("versions"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "versions_key", "input.LT(1).getText().equalsIgnoreCase(\"versions\")");
            }
            REGULAR_ID265=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_versions_key9012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID265);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1361:77: -> VERSIONS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VERSIONS_VK, REGULAR_ID265));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, versions_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "versions_key"

    public static class rules_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rules_key"
    // Keys.g:1364:1: rules_key : {...}? => REGULAR_ID -> RULES_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.rules_key_return rules_key() throws RecognitionException {
        OracleParser_Keys.rules_key_return retval = new OracleParser_Keys.rules_key_return();
        retval.start = input.LT(1);
        int rules_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID266=null;

        Object REGULAR_ID266_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // Keys.g:1365:5: ({...}? => REGULAR_ID -> RULES_VK[$REGULAR_ID] )
            // Keys.g:1365:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rules"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rules_key", "input.LT(1).getText().equalsIgnoreCase(\"rules\")");
            }
            REGULAR_ID266=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rules_key9040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID266);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1365:74: -> RULES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(RULES_VK, REGULAR_ID266));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, rules_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rules_key"

    public static class iterate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterate_key"
    // Keys.g:1368:1: iterate_key : {...}? => REGULAR_ID -> ITERATE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.iterate_key_return iterate_key() throws RecognitionException {
        OracleParser_Keys.iterate_key_return retval = new OracleParser_Keys.iterate_key_return();
        retval.start = input.LT(1);
        int iterate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID267=null;

        Object REGULAR_ID267_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // Keys.g:1369:5: ({...}? => REGULAR_ID -> ITERATE_VK[$REGULAR_ID] )
            // Keys.g:1369:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("iterate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "iterate_key", "input.LT(1).getText().equalsIgnoreCase(\"iterate\")");
            }
            REGULAR_ID267=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_iterate_key9068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID267);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1369:76: -> ITERATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ITERATE_VK, REGULAR_ID267));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, iterate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "iterate_key"

    public static class minvalue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minvalue_key"
    // Keys.g:1372:1: minvalue_key : {...}? => REGULAR_ID -> MINVALUE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.minvalue_key_return minvalue_key() throws RecognitionException {
        OracleParser_Keys.minvalue_key_return retval = new OracleParser_Keys.minvalue_key_return();
        retval.start = input.LT(1);
        int minvalue_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID268=null;

        Object REGULAR_ID268_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // Keys.g:1373:5: ({...}? => REGULAR_ID -> MINVALUE_VK[$REGULAR_ID] )
            // Keys.g:1373:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("minvalue"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "minvalue_key", "input.LT(1).getText().equalsIgnoreCase(\"minvalue\")");
            }
            REGULAR_ID268=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_minvalue_key9096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID268);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1373:77: -> MINVALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(MINVALUE_VK, REGULAR_ID268));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, minvalue_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minvalue_key"

    public static class rollup_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollup_key"
    // Keys.g:1376:1: rollup_key : {...}? => REGULAR_ID -> ROLLUP_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.rollup_key_return rollup_key() throws RecognitionException {
        OracleParser_Keys.rollup_key_return retval = new OracleParser_Keys.rollup_key_return();
        retval.start = input.LT(1);
        int rollup_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID269=null;

        Object REGULAR_ID269_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }
            // Keys.g:1377:5: ({...}? => REGULAR_ID -> ROLLUP_VK[$REGULAR_ID] )
            // Keys.g:1377:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rollup"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rollup_key", "input.LT(1).getText().equalsIgnoreCase(\"rollup\")");
            }
            REGULAR_ID269=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rollup_key9124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID269);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1377:75: -> ROLLUP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ROLLUP_VK, REGULAR_ID269));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 263, rollup_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollup_key"

    public static class nav_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nav_key"
    // Keys.g:1380:1: nav_key : {...}? => REGULAR_ID -> NAV_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nav_key_return nav_key() throws RecognitionException {
        OracleParser_Keys.nav_key_return retval = new OracleParser_Keys.nav_key_return();
        retval.start = input.LT(1);
        int nav_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID270=null;

        Object REGULAR_ID270_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }
            // Keys.g:1381:5: ({...}? => REGULAR_ID -> NAV_VK[$REGULAR_ID] )
            // Keys.g:1381:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nav"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nav_key", "input.LT(1).getText().equalsIgnoreCase(\"nav\")");
            }
            REGULAR_ID270=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nav_key9152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID270);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1381:72: -> NAV_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NAV_VK, REGULAR_ID270));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 264, nav_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nav_key"

    public static class automatic_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "automatic_key"
    // Keys.g:1384:1: automatic_key : {...}? => REGULAR_ID -> AUTOMATIC_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.automatic_key_return automatic_key() throws RecognitionException {
        OracleParser_Keys.automatic_key_return retval = new OracleParser_Keys.automatic_key_return();
        retval.start = input.LT(1);
        int automatic_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID271=null;

        Object REGULAR_ID271_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }
            // Keys.g:1385:5: ({...}? => REGULAR_ID -> AUTOMATIC_VK[$REGULAR_ID] )
            // Keys.g:1385:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("automatic"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "automatic_key", "input.LT(1).getText().equalsIgnoreCase(\"automatic\")");
            }
            REGULAR_ID271=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_automatic_key9180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID271);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1385:78: -> AUTOMATIC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(AUTOMATIC_VK, REGULAR_ID271));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 265, automatic_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "automatic_key"

    public static class last_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "last_key"
    // Keys.g:1388:1: last_key : {...}? => REGULAR_ID -> LAST_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.last_key_return last_key() throws RecognitionException {
        OracleParser_Keys.last_key_return retval = new OracleParser_Keys.last_key_return();
        retval.start = input.LT(1);
        int last_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID272=null;

        Object REGULAR_ID272_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }
            // Keys.g:1389:5: ({...}? => REGULAR_ID -> LAST_VK[$REGULAR_ID] )
            // Keys.g:1389:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("last"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "last_key", "input.LT(1).getText().equalsIgnoreCase(\"last\")");
            }
            REGULAR_ID272=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_last_key9208); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID272);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1389:73: -> LAST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LAST_VK, REGULAR_ID272));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 266, last_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "last_key"

    public static class main_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "main_key"
    // Keys.g:1392:1: main_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.main_key_return main_key() throws RecognitionException {
        OracleParser_Keys.main_key_return retval = new OracleParser_Keys.main_key_return();
        retval.start = input.LT(1);
        int main_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID273=null;

        Object REGULAR_ID273_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }
            // Keys.g:1393:5: ({...}? => REGULAR_ID )
            // Keys.g:1393:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("main"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "main_key", "input.LT(1).getText().equalsIgnoreCase(\"main\")");
            }
            REGULAR_ID273=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_main_key9236); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID273_tree = (Object)adaptor.create(REGULAR_ID273);
            adaptor.addChild(root_0, REGULAR_ID273_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 267, main_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "main_key"

    public static class grouping_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_key"
    // Keys.g:1396:1: grouping_key : {...}? => REGULAR_ID -> GROUPING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.grouping_key_return grouping_key() throws RecognitionException {
        OracleParser_Keys.grouping_key_return retval = new OracleParser_Keys.grouping_key_return();
        retval.start = input.LT(1);
        int grouping_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID274=null;

        Object REGULAR_ID274_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }
            // Keys.g:1397:5: ({...}? => REGULAR_ID -> GROUPING_VK[$REGULAR_ID] )
            // Keys.g:1397:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("grouping"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "grouping_key", "input.LT(1).getText().equalsIgnoreCase(\"grouping\")");
            }
            REGULAR_ID274=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_grouping_key9259); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID274);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1397:77: -> GROUPING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(GROUPING_VK, REGULAR_ID274));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 268, grouping_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_key"

    public static class include_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "include_key"
    // Keys.g:1400:1: include_key : {...}? => REGULAR_ID -> INCLUDE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.include_key_return include_key() throws RecognitionException {
        OracleParser_Keys.include_key_return retval = new OracleParser_Keys.include_key_return();
        retval.start = input.LT(1);
        int include_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID275=null;

        Object REGULAR_ID275_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }
            // Keys.g:1401:5: ({...}? => REGULAR_ID -> INCLUDE_VK[$REGULAR_ID] )
            // Keys.g:1401:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("include"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "include_key", "input.LT(1).getText().equalsIgnoreCase(\"include\")");
            }
            REGULAR_ID275=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_include_key9287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID275);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1401:76: -> INCLUDE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INCLUDE_VK, REGULAR_ID275));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 269, include_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "include_key"

    public static class ignore_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ignore_key"
    // Keys.g:1404:1: ignore_key : {...}? => REGULAR_ID -> IGNORE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.ignore_key_return ignore_key() throws RecognitionException {
        OracleParser_Keys.ignore_key_return retval = new OracleParser_Keys.ignore_key_return();
        retval.start = input.LT(1);
        int ignore_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID276=null;

        Object REGULAR_ID276_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }
            // Keys.g:1405:5: ({...}? => REGULAR_ID -> IGNORE_VK[$REGULAR_ID] )
            // Keys.g:1405:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("ignore"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ignore_key", "input.LT(1).getText().equalsIgnoreCase(\"ignore\")");
            }
            REGULAR_ID276=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ignore_key9315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID276);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1405:75: -> IGNORE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(IGNORE_VK, REGULAR_ID276));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 270, ignore_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ignore_key"

    public static class respect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "respect_key"
    // Keys.g:1408:1: respect_key : {...}? => REGULAR_ID -> RESPECT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.respect_key_return respect_key() throws RecognitionException {
        OracleParser_Keys.respect_key_return retval = new OracleParser_Keys.respect_key_return();
        retval.start = input.LT(1);
        int respect_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID277=null;

        Object REGULAR_ID277_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }
            // Keys.g:1409:5: ({...}? => REGULAR_ID -> RESPECT_VK[$REGULAR_ID] )
            // Keys.g:1409:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("respect"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "respect_key", "input.LT(1).getText().equalsIgnoreCase(\"respect\")");
            }
            REGULAR_ID277=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_respect_key9343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID277);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1409:76: -> RESPECT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(RESPECT_VK, REGULAR_ID277));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 271, respect_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "respect_key"

    public static class unique_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unique_key"
    // Keys.g:1412:1: unique_key : SQL92_RESERVED_UNIQUE ;
    public final OracleParser_Keys.unique_key_return unique_key() throws RecognitionException {
        OracleParser_Keys.unique_key_return retval = new OracleParser_Keys.unique_key_return();
        retval.start = input.LT(1);
        int unique_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_UNIQUE278=null;

        Object SQL92_RESERVED_UNIQUE278_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }
            // Keys.g:1413:5: ( SQL92_RESERVED_UNIQUE )
            // Keys.g:1413:10: SQL92_RESERVED_UNIQUE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_UNIQUE278=(Token)match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_unique_key9367); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_UNIQUE278_tree = (Object)adaptor.create(SQL92_RESERVED_UNIQUE278);
            adaptor.addChild(root_0, SQL92_RESERVED_UNIQUE278_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 272, unique_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unique_key"

    public static class submultiset_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "submultiset_key"
    // Keys.g:1416:1: submultiset_key : {...}? => REGULAR_ID -> SUBMULTISET_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.submultiset_key_return submultiset_key() throws RecognitionException {
        OracleParser_Keys.submultiset_key_return retval = new OracleParser_Keys.submultiset_key_return();
        retval.start = input.LT(1);
        int submultiset_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID279=null;

        Object REGULAR_ID279_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }
            // Keys.g:1417:5: ({...}? => REGULAR_ID -> SUBMULTISET_VK[$REGULAR_ID] )
            // Keys.g:1417:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("submultiset"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "submultiset_key", "input.LT(1).getText().equalsIgnoreCase(\"submultiset\")");
            }
            REGULAR_ID279=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_submultiset_key9390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID279);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1417:80: -> SUBMULTISET_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SUBMULTISET_VK, REGULAR_ID279));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 273, submultiset_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "submultiset_key"

    public static class at_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at_key"
    // Keys.g:1420:1: at_key : {...}? => REGULAR_ID -> AT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.at_key_return at_key() throws RecognitionException {
        OracleParser_Keys.at_key_return retval = new OracleParser_Keys.at_key_return();
        retval.start = input.LT(1);
        int at_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID280=null;

        Object REGULAR_ID280_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }
            // Keys.g:1421:5: ({...}? => REGULAR_ID -> AT_VK[$REGULAR_ID] )
            // Keys.g:1421:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("at"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "at_key", "input.LT(1).getText().equalsIgnoreCase(\"at\")");
            }
            REGULAR_ID280=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_at_key9418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID280);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1421:71: -> AT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(AT_VK, REGULAR_ID280));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 274, at_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "at_key"

    public static class a_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "a_key"
    // Keys.g:1424:1: a_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.a_key_return a_key() throws RecognitionException {
        OracleParser_Keys.a_key_return retval = new OracleParser_Keys.a_key_return();
        retval.start = input.LT(1);
        int a_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID281=null;

        Object REGULAR_ID281_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }
            // Keys.g:1425:5: ({...}? => REGULAR_ID )
            // Keys.g:1425:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("a"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "a_key", "input.LT(1).getText().equalsIgnoreCase(\"a\")");
            }
            REGULAR_ID281=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_a_key9446); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID281_tree = (Object)adaptor.create(REGULAR_ID281);
            adaptor.addChild(root_0, REGULAR_ID281_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 275, a_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "a_key"

    public static class empty_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "empty_key"
    // Keys.g:1428:1: empty_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.empty_key_return empty_key() throws RecognitionException {
        OracleParser_Keys.empty_key_return retval = new OracleParser_Keys.empty_key_return();
        retval.start = input.LT(1);
        int empty_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID282=null;

        Object REGULAR_ID282_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }
            // Keys.g:1429:5: ({...}? => REGULAR_ID )
            // Keys.g:1429:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("empty"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "empty_key", "input.LT(1).getText().equalsIgnoreCase(\"empty\")");
            }
            REGULAR_ID282=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_empty_key9469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID282_tree = (Object)adaptor.create(REGULAR_ID282);
            adaptor.addChild(root_0, REGULAR_ID282_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 276, empty_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "empty_key"

    public static class likec_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "likec_key"
    // Keys.g:1432:1: likec_key : {...}? => REGULAR_ID -> LIKEC_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.likec_key_return likec_key() throws RecognitionException {
        OracleParser_Keys.likec_key_return retval = new OracleParser_Keys.likec_key_return();
        retval.start = input.LT(1);
        int likec_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID283=null;

        Object REGULAR_ID283_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }
            // Keys.g:1433:5: ({...}? => REGULAR_ID -> LIKEC_VK[$REGULAR_ID] )
            // Keys.g:1433:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("likec"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "likec_key", "input.LT(1).getText().equalsIgnoreCase(\"likec\")");
            }
            REGULAR_ID283=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_likec_key9492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID283);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1433:74: -> LIKEC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LIKEC_VK, REGULAR_ID283));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 277, likec_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "likec_key"

    public static class nan_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nan_key"
    // Keys.g:1436:1: nan_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.nan_key_return nan_key() throws RecognitionException {
        OracleParser_Keys.nan_key_return retval = new OracleParser_Keys.nan_key_return();
        retval.start = input.LT(1);
        int nan_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID284=null;

        Object REGULAR_ID284_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }
            // Keys.g:1437:5: ({...}? => REGULAR_ID )
            // Keys.g:1437:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("nan"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nan_key", "input.LT(1).getText().equalsIgnoreCase(\"nan\")");
            }
            REGULAR_ID284=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nan_key9520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID284_tree = (Object)adaptor.create(REGULAR_ID284);
            adaptor.addChild(root_0, REGULAR_ID284_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 278, nan_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nan_key"

    public static class infinite_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infinite_key"
    // Keys.g:1440:1: infinite_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.infinite_key_return infinite_key() throws RecognitionException {
        OracleParser_Keys.infinite_key_return retval = new OracleParser_Keys.infinite_key_return();
        retval.start = input.LT(1);
        int infinite_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID285=null;

        Object REGULAR_ID285_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }
            // Keys.g:1441:5: ({...}? => REGULAR_ID )
            // Keys.g:1441:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("infinite"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "infinite_key", "input.LT(1).getText().equalsIgnoreCase(\"infinite\")");
            }
            REGULAR_ID285=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_infinite_key9543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID285_tree = (Object)adaptor.create(REGULAR_ID285);
            adaptor.addChild(root_0, REGULAR_ID285_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 279, infinite_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infinite_key"

    public static class like2_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "like2_key"
    // Keys.g:1444:1: like2_key : {...}? => REGULAR_ID -> LIKE2_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.like2_key_return like2_key() throws RecognitionException {
        OracleParser_Keys.like2_key_return retval = new OracleParser_Keys.like2_key_return();
        retval.start = input.LT(1);
        int like2_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID286=null;

        Object REGULAR_ID286_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }
            // Keys.g:1445:5: ({...}? => REGULAR_ID -> LIKE2_VK[$REGULAR_ID] )
            // Keys.g:1445:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("like2"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "like2_key", "input.LT(1).getText().equalsIgnoreCase(\"like2\")");
            }
            REGULAR_ID286=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_like2_key9566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID286);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1445:74: -> LIKE2_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LIKE2_VK, REGULAR_ID286));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 280, like2_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "like2_key"

    public static class like4_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "like4_key"
    // Keys.g:1448:1: like4_key : {...}? => REGULAR_ID -> LIKE4_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.like4_key_return like4_key() throws RecognitionException {
        OracleParser_Keys.like4_key_return retval = new OracleParser_Keys.like4_key_return();
        retval.start = input.LT(1);
        int like4_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID287=null;

        Object REGULAR_ID287_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }
            // Keys.g:1449:5: ({...}? => REGULAR_ID -> LIKE4_VK[$REGULAR_ID] )
            // Keys.g:1449:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("like4"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "like4_key", "input.LT(1).getText().equalsIgnoreCase(\"like4\")");
            }
            REGULAR_ID287=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_like4_key9594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID287);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1449:74: -> LIKE4_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LIKE4_VK, REGULAR_ID287));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 281, like4_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "like4_key"

    public static class present_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "present_key"
    // Keys.g:1452:1: present_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.present_key_return present_key() throws RecognitionException {
        OracleParser_Keys.present_key_return retval = new OracleParser_Keys.present_key_return();
        retval.start = input.LT(1);
        int present_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID288=null;

        Object REGULAR_ID288_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }
            // Keys.g:1453:5: ({...}? => REGULAR_ID )
            // Keys.g:1453:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("present"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "present_key", "input.LT(1).getText().equalsIgnoreCase(\"present\")");
            }
            REGULAR_ID288=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_present_key9622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID288_tree = (Object)adaptor.create(REGULAR_ID288);
            adaptor.addChild(root_0, REGULAR_ID288_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 282, present_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "present_key"

    public static class dbtimezone_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dbtimezone_key"
    // Keys.g:1456:1: dbtimezone_key : {...}? => REGULAR_ID -> DBTIMEZONE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.dbtimezone_key_return dbtimezone_key() throws RecognitionException {
        OracleParser_Keys.dbtimezone_key_return retval = new OracleParser_Keys.dbtimezone_key_return();
        retval.start = input.LT(1);
        int dbtimezone_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID289=null;

        Object REGULAR_ID289_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }
            // Keys.g:1457:5: ({...}? => REGULAR_ID -> DBTIMEZONE_VK[$REGULAR_ID] )
            // Keys.g:1457:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("dbtimezone"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dbtimezone_key", "input.LT(1).getText().equalsIgnoreCase(\"dbtimezone\")");
            }
            REGULAR_ID289=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dbtimezone_key9645); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID289);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1457:79: -> DBTIMEZONE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DBTIMEZONE_VK, REGULAR_ID289));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 283, dbtimezone_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dbtimezone_key"

    public static class sessiontimezone_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sessiontimezone_key"
    // Keys.g:1460:1: sessiontimezone_key : {...}? => REGULAR_ID -> SESSIONTIMEZONE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.sessiontimezone_key_return sessiontimezone_key() throws RecognitionException {
        OracleParser_Keys.sessiontimezone_key_return retval = new OracleParser_Keys.sessiontimezone_key_return();
        retval.start = input.LT(1);
        int sessiontimezone_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID290=null;

        Object REGULAR_ID290_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }
            // Keys.g:1461:5: ({...}? => REGULAR_ID -> SESSIONTIMEZONE_VK[$REGULAR_ID] )
            // Keys.g:1461:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("sessiontimezone"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sessiontimezone_key", "input.LT(1).getText().equalsIgnoreCase(\"sessiontimezone\")");
            }
            REGULAR_ID290=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sessiontimezone_key9673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID290);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1461:84: -> SESSIONTIMEZONE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SESSIONTIMEZONE_VK, REGULAR_ID290));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 284, sessiontimezone_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sessiontimezone_key"

    public static class nchar_cs_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nchar_cs_key"
    // Keys.g:1464:1: nchar_cs_key : {...}? => REGULAR_ID -> NCHAR_CS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nchar_cs_key_return nchar_cs_key() throws RecognitionException {
        OracleParser_Keys.nchar_cs_key_return retval = new OracleParser_Keys.nchar_cs_key_return();
        retval.start = input.LT(1);
        int nchar_cs_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID291=null;

        Object REGULAR_ID291_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 285) ) { return retval; }
            // Keys.g:1465:5: ({...}? => REGULAR_ID -> NCHAR_CS_VK[$REGULAR_ID] )
            // Keys.g:1465:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nchar_cs"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nchar_cs_key", "input.LT(1).getText().equalsIgnoreCase(\"nchar_cs\")");
            }
            REGULAR_ID291=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nchar_cs_key9701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID291);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1465:77: -> NCHAR_CS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NCHAR_CS_VK, REGULAR_ID291));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 285, nchar_cs_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nchar_cs_key"

    public static class decompose_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decompose_key"
    // Keys.g:1468:1: decompose_key : {...}? => REGULAR_ID -> DECOMPOSE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.decompose_key_return decompose_key() throws RecognitionException {
        OracleParser_Keys.decompose_key_return retval = new OracleParser_Keys.decompose_key_return();
        retval.start = input.LT(1);
        int decompose_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID292=null;

        Object REGULAR_ID292_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 286) ) { return retval; }
            // Keys.g:1469:5: ({...}? => REGULAR_ID -> DECOMPOSE_VK[$REGULAR_ID] )
            // Keys.g:1469:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("decompose"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "decompose_key", "input.LT(1).getText().equalsIgnoreCase(\"decompose\")");
            }
            REGULAR_ID292=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_decompose_key9729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID292);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1469:78: -> DECOMPOSE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DECOMPOSE_VK, REGULAR_ID292));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 286, decompose_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "decompose_key"

    public static class following_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "following_key"
    // Keys.g:1472:1: following_key : {...}? => REGULAR_ID -> FOLLOWING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.following_key_return following_key() throws RecognitionException {
        OracleParser_Keys.following_key_return retval = new OracleParser_Keys.following_key_return();
        retval.start = input.LT(1);
        int following_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID293=null;

        Object REGULAR_ID293_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 287) ) { return retval; }
            // Keys.g:1473:5: ({...}? => REGULAR_ID -> FOLLOWING_VK[$REGULAR_ID] )
            // Keys.g:1473:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("following"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "following_key", "input.LT(1).getText().equalsIgnoreCase(\"following\")");
            }
            REGULAR_ID293=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_following_key9757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID293);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1473:78: -> FOLLOWING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FOLLOWING_VK, REGULAR_ID293));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 287, following_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "following_key"

    public static class first_value_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "first_value_key"
    // Keys.g:1476:1: first_value_key : {...}? => REGULAR_ID -> FIRST_VALUE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.first_value_key_return first_value_key() throws RecognitionException {
        OracleParser_Keys.first_value_key_return retval = new OracleParser_Keys.first_value_key_return();
        retval.start = input.LT(1);
        int first_value_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID294=null;

        Object REGULAR_ID294_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 288) ) { return retval; }
            // Keys.g:1477:5: ({...}? => REGULAR_ID -> FIRST_VALUE_VK[$REGULAR_ID] )
            // Keys.g:1477:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("first_value"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "first_value_key", "input.LT(1).getText().equalsIgnoreCase(\"first_value\")");
            }
            REGULAR_ID294=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_first_value_key9785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID294);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1477:80: -> FIRST_VALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FIRST_VALUE_VK, REGULAR_ID294));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 288, first_value_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "first_value_key"

    public static class preceding_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preceding_key"
    // Keys.g:1480:1: preceding_key : {...}? => REGULAR_ID -> PRECEDING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.preceding_key_return preceding_key() throws RecognitionException {
        OracleParser_Keys.preceding_key_return retval = new OracleParser_Keys.preceding_key_return();
        retval.start = input.LT(1);
        int preceding_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID295=null;

        Object REGULAR_ID295_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 289) ) { return retval; }
            // Keys.g:1481:5: ({...}? => REGULAR_ID -> PRECEDING_VK[$REGULAR_ID] )
            // Keys.g:1481:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("preceding"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "preceding_key", "input.LT(1).getText().equalsIgnoreCase(\"preceding\")");
            }
            REGULAR_ID295=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_preceding_key9813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID295);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1481:78: -> PRECEDING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PRECEDING_VK, REGULAR_ID295));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 289, preceding_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preceding_key"

    public static class within_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "within_key"
    // Keys.g:1484:1: within_key : {...}? => REGULAR_ID -> WITHIN_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.within_key_return within_key() throws RecognitionException {
        OracleParser_Keys.within_key_return retval = new OracleParser_Keys.within_key_return();
        retval.start = input.LT(1);
        int within_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID296=null;

        Object REGULAR_ID296_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 290) ) { return retval; }
            // Keys.g:1485:5: ({...}? => REGULAR_ID -> WITHIN_VK[$REGULAR_ID] )
            // Keys.g:1485:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("within"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "within_key", "input.LT(1).getText().equalsIgnoreCase(\"within\")");
            }
            REGULAR_ID296=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_within_key9841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID296);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1485:75: -> WITHIN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(WITHIN_VK, REGULAR_ID296));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 290, within_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "within_key"

    public static class canonical_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "canonical_key"
    // Keys.g:1488:1: canonical_key : {...}? => REGULAR_ID -> CANONICAL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.canonical_key_return canonical_key() throws RecognitionException {
        OracleParser_Keys.canonical_key_return retval = new OracleParser_Keys.canonical_key_return();
        retval.start = input.LT(1);
        int canonical_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID297=null;

        Object REGULAR_ID297_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 291) ) { return retval; }
            // Keys.g:1489:5: ({...}? => REGULAR_ID -> CANONICAL_VK[$REGULAR_ID] )
            // Keys.g:1489:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("canonical"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "canonical_key", "input.LT(1).getText().equalsIgnoreCase(\"canonical\")");
            }
            REGULAR_ID297=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_canonical_key9869); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID297);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1489:78: -> CANONICAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CANONICAL_VK, REGULAR_ID297));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 291, canonical_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "canonical_key"

    public static class compatibility_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compatibility_key"
    // Keys.g:1492:1: compatibility_key : {...}? => REGULAR_ID -> COMPATIBILITY_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.compatibility_key_return compatibility_key() throws RecognitionException {
        OracleParser_Keys.compatibility_key_return retval = new OracleParser_Keys.compatibility_key_return();
        retval.start = input.LT(1);
        int compatibility_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID298=null;

        Object REGULAR_ID298_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 292) ) { return retval; }
            // Keys.g:1493:5: ({...}? => REGULAR_ID -> COMPATIBILITY_VK[$REGULAR_ID] )
            // Keys.g:1493:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("compatibility"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "compatibility_key", "input.LT(1).getText().equalsIgnoreCase(\"compatibility\")");
            }
            REGULAR_ID298=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_compatibility_key9897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID298);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1493:82: -> COMPATIBILITY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(COMPATIBILITY_VK, REGULAR_ID298));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 292, compatibility_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compatibility_key"

    public static class over_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_key"
    // Keys.g:1496:1: over_key : {...}? => REGULAR_ID -> OVER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.over_key_return over_key() throws RecognitionException {
        OracleParser_Keys.over_key_return retval = new OracleParser_Keys.over_key_return();
        retval.start = input.LT(1);
        int over_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID299=null;

        Object REGULAR_ID299_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 293) ) { return retval; }
            // Keys.g:1497:5: ({...}? => REGULAR_ID -> OVER_VK[$REGULAR_ID] )
            // Keys.g:1497:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("over"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "over_key", "input.LT(1).getText().equalsIgnoreCase(\"over\")");
            }
            REGULAR_ID299=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_over_key9925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID299);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1497:73: -> OVER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(OVER_VK, REGULAR_ID299));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 293, over_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "over_key"

    public static class multiset_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiset_key"
    // Keys.g:1500:1: multiset_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.multiset_key_return multiset_key() throws RecognitionException {
        OracleParser_Keys.multiset_key_return retval = new OracleParser_Keys.multiset_key_return();
        retval.start = input.LT(1);
        int multiset_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID300=null;

        Object REGULAR_ID300_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 294) ) { return retval; }
            // Keys.g:1501:5: ({...}? => REGULAR_ID )
            // Keys.g:1501:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("multiset"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "multiset_key", "input.LT(1).getText().equalsIgnoreCase(\"multiset\")");
            }
            REGULAR_ID300=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_multiset_key9953); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID300_tree = (Object)adaptor.create(REGULAR_ID300);
            adaptor.addChild(root_0, REGULAR_ID300_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 294, multiset_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiset_key"

    public static class connect_by_root_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "connect_by_root_key"
    // Keys.g:1504:1: connect_by_root_key : PLSQL_NON_RESERVED_CONNECT_BY_ROOT ;
    public final OracleParser_Keys.connect_by_root_key_return connect_by_root_key() throws RecognitionException {
        OracleParser_Keys.connect_by_root_key_return retval = new OracleParser_Keys.connect_by_root_key_return();
        retval.start = input.LT(1);
        int connect_by_root_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_NON_RESERVED_CONNECT_BY_ROOT301=null;

        Object PLSQL_NON_RESERVED_CONNECT_BY_ROOT301_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 295) ) { return retval; }
            // Keys.g:1505:5: ( PLSQL_NON_RESERVED_CONNECT_BY_ROOT )
            // Keys.g:1505:10: PLSQL_NON_RESERVED_CONNECT_BY_ROOT
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_NON_RESERVED_CONNECT_BY_ROOT301=(Token)match(input,PLSQL_NON_RESERVED_CONNECT_BY_ROOT,FOLLOW_PLSQL_NON_RESERVED_CONNECT_BY_ROOT_in_connect_by_root_key9973); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_NON_RESERVED_CONNECT_BY_ROOT301_tree = (Object)adaptor.create(PLSQL_NON_RESERVED_CONNECT_BY_ROOT301);
            adaptor.addChild(root_0, PLSQL_NON_RESERVED_CONNECT_BY_ROOT301_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 295, connect_by_root_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "connect_by_root_key"

    public static class last_value_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "last_value_key"
    // Keys.g:1508:1: last_value_key : {...}? => REGULAR_ID -> LAST_VALUE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.last_value_key_return last_value_key() throws RecognitionException {
        OracleParser_Keys.last_value_key_return retval = new OracleParser_Keys.last_value_key_return();
        retval.start = input.LT(1);
        int last_value_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID302=null;

        Object REGULAR_ID302_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 296) ) { return retval; }
            // Keys.g:1509:5: ({...}? => REGULAR_ID -> LAST_VALUE_VK[$REGULAR_ID] )
            // Keys.g:1509:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("last_value"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "last_value_key", "input.LT(1).getText().equalsIgnoreCase(\"last_value\")");
            }
            REGULAR_ID302=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_last_value_key9996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID302);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1509:79: -> LAST_VALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LAST_VALUE_VK, REGULAR_ID302));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 296, last_value_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "last_value_key"

    public static class current_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "current_key"
    // Keys.g:1512:1: current_key : SQL92_RESERVED_CURRENT ;
    public final OracleParser_Keys.current_key_return current_key() throws RecognitionException {
        OracleParser_Keys.current_key_return retval = new OracleParser_Keys.current_key_return();
        retval.start = input.LT(1);
        int current_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_CURRENT303=null;

        Object SQL92_RESERVED_CURRENT303_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 297) ) { return retval; }
            // Keys.g:1513:5: ( SQL92_RESERVED_CURRENT )
            // Keys.g:1513:10: SQL92_RESERVED_CURRENT
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_CURRENT303=(Token)match(input,SQL92_RESERVED_CURRENT,FOLLOW_SQL92_RESERVED_CURRENT_in_current_key10021); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CURRENT303_tree = (Object)adaptor.create(SQL92_RESERVED_CURRENT303);
            adaptor.addChild(root_0, SQL92_RESERVED_CURRENT303_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 297, current_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "current_key"

    public static class unbounded_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unbounded_key"
    // Keys.g:1516:1: unbounded_key : {...}? => REGULAR_ID -> UNBOUNDED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.unbounded_key_return unbounded_key() throws RecognitionException {
        OracleParser_Keys.unbounded_key_return retval = new OracleParser_Keys.unbounded_key_return();
        retval.start = input.LT(1);
        int unbounded_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID304=null;

        Object REGULAR_ID304_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 298) ) { return retval; }
            // Keys.g:1517:5: ({...}? => REGULAR_ID -> UNBOUNDED_VK[$REGULAR_ID] )
            // Keys.g:1517:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("unbounded"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "unbounded_key", "input.LT(1).getText().equalsIgnoreCase(\"unbounded\")");
            }
            REGULAR_ID304=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_unbounded_key10044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID304);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1517:78: -> UNBOUNDED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(UNBOUNDED_VK, REGULAR_ID304));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 298, unbounded_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unbounded_key"

    public static class dense_rank_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dense_rank_key"
    // Keys.g:1520:1: dense_rank_key : {...}? => REGULAR_ID -> DENSE_RANK_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.dense_rank_key_return dense_rank_key() throws RecognitionException {
        OracleParser_Keys.dense_rank_key_return retval = new OracleParser_Keys.dense_rank_key_return();
        retval.start = input.LT(1);
        int dense_rank_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID305=null;

        Object REGULAR_ID305_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 299) ) { return retval; }
            // Keys.g:1521:5: ({...}? => REGULAR_ID -> DENSE_RANK_VK[$REGULAR_ID] )
            // Keys.g:1521:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("dense_rank"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dense_rank_key", "input.LT(1).getText().equalsIgnoreCase(\"dense_rank\")");
            }
            REGULAR_ID305=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dense_rank_key10072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID305);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1521:79: -> DENSE_RANK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DENSE_RANK_VK, REGULAR_ID305));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 299, dense_rank_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dense_rank_key"

    public static class cost_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cost_key"
    // Keys.g:1524:1: cost_key : {...}? => REGULAR_ID -> COST_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.cost_key_return cost_key() throws RecognitionException {
        OracleParser_Keys.cost_key_return retval = new OracleParser_Keys.cost_key_return();
        retval.start = input.LT(1);
        int cost_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID306=null;

        Object REGULAR_ID306_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 300) ) { return retval; }
            // Keys.g:1525:5: ({...}? => REGULAR_ID -> COST_VK[$REGULAR_ID] )
            // Keys.g:1525:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cost"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cost_key", "input.LT(1).getText().equalsIgnoreCase(\"cost\")");
            }
            REGULAR_ID306=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cost_key10100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID306);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1525:73: -> COST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(COST_VK, REGULAR_ID306));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 300, cost_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cost_key"

    public static class char_cs_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_cs_key"
    // Keys.g:1528:1: char_cs_key : {...}? => REGULAR_ID -> CHAR_CS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.char_cs_key_return char_cs_key() throws RecognitionException {
        OracleParser_Keys.char_cs_key_return retval = new OracleParser_Keys.char_cs_key_return();
        retval.start = input.LT(1);
        int char_cs_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID307=null;

        Object REGULAR_ID307_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 301) ) { return retval; }
            // Keys.g:1529:5: ({...}? => REGULAR_ID -> CHAR_CS_VK[$REGULAR_ID] )
            // Keys.g:1529:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("char_cs"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_cs_key", "input.LT(1).getText().equalsIgnoreCase(\"char_cs\")");
            }
            REGULAR_ID307=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_char_cs_key10128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID307);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1529:76: -> CHAR_CS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CHAR_CS_VK, REGULAR_ID307));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 301, char_cs_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "char_cs_key"

    public static class auto_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_key"
    // Keys.g:1532:1: auto_key : {...}? => REGULAR_ID -> AUTO_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.auto_key_return auto_key() throws RecognitionException {
        OracleParser_Keys.auto_key_return retval = new OracleParser_Keys.auto_key_return();
        retval.start = input.LT(1);
        int auto_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID308=null;

        Object REGULAR_ID308_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 302) ) { return retval; }
            // Keys.g:1533:5: ({...}? => REGULAR_ID -> AUTO_VK[$REGULAR_ID] )
            // Keys.g:1533:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("auto"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "auto_key", "input.LT(1).getText().equalsIgnoreCase(\"auto\")");
            }
            REGULAR_ID308=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_auto_key10156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID308);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1533:73: -> AUTO_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(AUTO_VK, REGULAR_ID308));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 302, auto_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "auto_key"

    public static class treat_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "treat_key"
    // Keys.g:1536:1: treat_key : {...}? => REGULAR_ID -> TREAT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.treat_key_return treat_key() throws RecognitionException {
        OracleParser_Keys.treat_key_return retval = new OracleParser_Keys.treat_key_return();
        retval.start = input.LT(1);
        int treat_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID309=null;

        Object REGULAR_ID309_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 303) ) { return retval; }
            // Keys.g:1537:5: ({...}? => REGULAR_ID -> TREAT_VK[$REGULAR_ID] )
            // Keys.g:1537:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("treat"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "treat_key", "input.LT(1).getText().equalsIgnoreCase(\"treat\")");
            }
            REGULAR_ID309=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_treat_key10184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID309);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1537:74: -> TREAT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TREAT_VK, REGULAR_ID309));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 303, treat_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "treat_key"

    public static class content_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "content_key"
    // Keys.g:1540:1: content_key : {...}? => REGULAR_ID -> CONTENT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.content_key_return content_key() throws RecognitionException {
        OracleParser_Keys.content_key_return retval = new OracleParser_Keys.content_key_return();
        retval.start = input.LT(1);
        int content_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID310=null;

        Object REGULAR_ID310_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 304) ) { return retval; }
            // Keys.g:1541:5: ({...}? => REGULAR_ID -> CONTENT_VK[$REGULAR_ID] )
            // Keys.g:1541:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("content"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "content_key", "input.LT(1).getText().equalsIgnoreCase(\"content\")");
            }
            REGULAR_ID310=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_content_key10212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID310);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1541:76: -> CONTENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CONTENT_VK, REGULAR_ID310));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 304, content_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "content_key"

    public static class xmlparse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlparse_key"
    // Keys.g:1544:1: xmlparse_key : {...}? => REGULAR_ID -> XMLPARSE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlparse_key_return xmlparse_key() throws RecognitionException {
        OracleParser_Keys.xmlparse_key_return retval = new OracleParser_Keys.xmlparse_key_return();
        retval.start = input.LT(1);
        int xmlparse_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID311=null;

        Object REGULAR_ID311_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 305) ) { return retval; }
            // Keys.g:1545:5: ({...}? => REGULAR_ID -> XMLPARSE_VK[$REGULAR_ID] )
            // Keys.g:1545:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlparse"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlparse_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlparse\")");
            }
            REGULAR_ID311=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlparse_key10240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID311);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1545:77: -> XMLPARSE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLPARSE_VK, REGULAR_ID311));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 305, xmlparse_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlparse_key"

    public static class xmlelement_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlelement_key"
    // Keys.g:1548:1: xmlelement_key : {...}? => REGULAR_ID -> XMLELEMENT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlelement_key_return xmlelement_key() throws RecognitionException {
        OracleParser_Keys.xmlelement_key_return retval = new OracleParser_Keys.xmlelement_key_return();
        retval.start = input.LT(1);
        int xmlelement_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID312=null;

        Object REGULAR_ID312_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 306) ) { return retval; }
            // Keys.g:1549:5: ({...}? => REGULAR_ID -> XMLELEMENT_VK[$REGULAR_ID] )
            // Keys.g:1549:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlelement"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlelement_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlelement\")");
            }
            REGULAR_ID312=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlelement_key10268); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID312);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1549:79: -> XMLELEMENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLELEMENT_VK, REGULAR_ID312));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 306, xmlelement_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlelement_key"

    public static class entityescaping_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entityescaping_key"
    // Keys.g:1552:1: entityescaping_key : {...}? => REGULAR_ID -> ENTITYESCAPING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.entityescaping_key_return entityescaping_key() throws RecognitionException {
        OracleParser_Keys.entityescaping_key_return retval = new OracleParser_Keys.entityescaping_key_return();
        retval.start = input.LT(1);
        int entityescaping_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID313=null;

        Object REGULAR_ID313_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 307) ) { return retval; }
            // Keys.g:1553:5: ({...}? => REGULAR_ID -> ENTITYESCAPING_VK[$REGULAR_ID] )
            // Keys.g:1553:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("entityescaping"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "entityescaping_key", "input.LT(1).getText().equalsIgnoreCase(\"entityescaping\")");
            }
            REGULAR_ID313=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_entityescaping_key10296); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID313);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1553:83: -> ENTITYESCAPING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ENTITYESCAPING_VK, REGULAR_ID313));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 307, entityescaping_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "entityescaping_key"

    public static class standalone_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "standalone_key"
    // Keys.g:1556:1: standalone_key : {...}? => REGULAR_ID -> STANDALONE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.standalone_key_return standalone_key() throws RecognitionException {
        OracleParser_Keys.standalone_key_return retval = new OracleParser_Keys.standalone_key_return();
        retval.start = input.LT(1);
        int standalone_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID314=null;

        Object REGULAR_ID314_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 308) ) { return retval; }
            // Keys.g:1557:5: ({...}? => REGULAR_ID -> STANDALONE_VK[$REGULAR_ID] )
            // Keys.g:1557:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("standalone"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "standalone_key", "input.LT(1).getText().equalsIgnoreCase(\"standalone\")");
            }
            REGULAR_ID314=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_standalone_key10324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID314);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1557:79: -> STANDALONE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(STANDALONE_VK, REGULAR_ID314));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 308, standalone_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "standalone_key"

    public static class wellformed_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wellformed_key"
    // Keys.g:1560:1: wellformed_key : {...}? => REGULAR_ID -> WELLFORMED_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.wellformed_key_return wellformed_key() throws RecognitionException {
        OracleParser_Keys.wellformed_key_return retval = new OracleParser_Keys.wellformed_key_return();
        retval.start = input.LT(1);
        int wellformed_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID315=null;

        Object REGULAR_ID315_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 309) ) { return retval; }
            // Keys.g:1561:5: ({...}? => REGULAR_ID -> WELLFORMED_VK[$REGULAR_ID] )
            // Keys.g:1561:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("wellformed"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "wellformed_key", "input.LT(1).getText().equalsIgnoreCase(\"wellformed\")");
            }
            REGULAR_ID315=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_wellformed_key10352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID315);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1561:79: -> WELLFORMED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(WELLFORMED_VK, REGULAR_ID315));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 309, wellformed_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wellformed_key"

    public static class xmlexists_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlexists_key"
    // Keys.g:1564:1: xmlexists_key : {...}? => REGULAR_ID -> XMLEXISTS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlexists_key_return xmlexists_key() throws RecognitionException {
        OracleParser_Keys.xmlexists_key_return retval = new OracleParser_Keys.xmlexists_key_return();
        retval.start = input.LT(1);
        int xmlexists_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID316=null;

        Object REGULAR_ID316_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 310) ) { return retval; }
            // Keys.g:1565:5: ({...}? => REGULAR_ID -> XMLEXISTS_VK[$REGULAR_ID] )
            // Keys.g:1565:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlexists"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlexists_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlexists\")");
            }
            REGULAR_ID316=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlexists_key10380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID316);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1565:78: -> XMLEXISTS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLEXISTS_VK, REGULAR_ID316));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 310, xmlexists_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlexists_key"

    public static class version_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "version_key"
    // Keys.g:1568:1: version_key : {...}? => REGULAR_ID -> VERSION_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.version_key_return version_key() throws RecognitionException {
        OracleParser_Keys.version_key_return retval = new OracleParser_Keys.version_key_return();
        retval.start = input.LT(1);
        int version_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID317=null;

        Object REGULAR_ID317_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 311) ) { return retval; }
            // Keys.g:1569:5: ({...}? => REGULAR_ID -> VERSION_VK[$REGULAR_ID] )
            // Keys.g:1569:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("version"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "version_key", "input.LT(1).getText().equalsIgnoreCase(\"version\")");
            }
            REGULAR_ID317=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_version_key10408); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID317);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1569:76: -> VERSION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VERSION_VK, REGULAR_ID317));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 311, version_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "version_key"

    public static class xmlcast_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlcast_key"
    // Keys.g:1572:1: xmlcast_key : {...}? => REGULAR_ID -> XMLCAST_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlcast_key_return xmlcast_key() throws RecognitionException {
        OracleParser_Keys.xmlcast_key_return retval = new OracleParser_Keys.xmlcast_key_return();
        retval.start = input.LT(1);
        int xmlcast_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID318=null;

        Object REGULAR_ID318_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 312) ) { return retval; }
            // Keys.g:1573:5: ({...}? => REGULAR_ID -> XMLCAST_VK[$REGULAR_ID] )
            // Keys.g:1573:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlcast"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlcast_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlcast\")");
            }
            REGULAR_ID318=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlcast_key10436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID318);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1573:76: -> XMLCAST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLCAST_VK, REGULAR_ID318));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 312, xmlcast_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlcast_key"

    public static class yes_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yes_key"
    // Keys.g:1576:1: yes_key : {...}? => REGULAR_ID -> YES_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.yes_key_return yes_key() throws RecognitionException {
        OracleParser_Keys.yes_key_return retval = new OracleParser_Keys.yes_key_return();
        retval.start = input.LT(1);
        int yes_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID319=null;

        Object REGULAR_ID319_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 313) ) { return retval; }
            // Keys.g:1577:5: ({...}? => REGULAR_ID -> YES_VK[$REGULAR_ID] )
            // Keys.g:1577:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("yes"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "yes_key", "input.LT(1).getText().equalsIgnoreCase(\"yes\")");
            }
            REGULAR_ID319=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_yes_key10464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID319);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1577:72: -> YES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(YES_VK, REGULAR_ID319));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 313, yes_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yes_key"

    public static class no_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_key"
    // Keys.g:1580:1: no_key : {...}? => REGULAR_ID -> NO_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.no_key_return no_key() throws RecognitionException {
        OracleParser_Keys.no_key_return retval = new OracleParser_Keys.no_key_return();
        retval.start = input.LT(1);
        int no_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID320=null;

        Object REGULAR_ID320_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 314) ) { return retval; }
            // Keys.g:1581:5: ({...}? => REGULAR_ID -> NO_VK[$REGULAR_ID] )
            // Keys.g:1581:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("no"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "no_key", "input.LT(1).getText().equalsIgnoreCase(\"no\")");
            }
            REGULAR_ID320=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_no_key10492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID320);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1581:71: -> NO_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NO_VK, REGULAR_ID320));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 314, no_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "no_key"

    public static class evalname_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalname_key"
    // Keys.g:1584:1: evalname_key : {...}? => REGULAR_ID -> EVALNAME_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.evalname_key_return evalname_key() throws RecognitionException {
        OracleParser_Keys.evalname_key_return retval = new OracleParser_Keys.evalname_key_return();
        retval.start = input.LT(1);
        int evalname_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID321=null;

        Object REGULAR_ID321_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 315) ) { return retval; }
            // Keys.g:1585:5: ({...}? => REGULAR_ID -> EVALNAME_VK[$REGULAR_ID] )
            // Keys.g:1585:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "evalname_key", "input.LT(1).getText().equalsIgnoreCase(\"evalname\")");
            }
            REGULAR_ID321=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_evalname_key10520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID321);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1585:77: -> EVALNAME_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(EVALNAME_VK, REGULAR_ID321));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 315, evalname_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "evalname_key"

    public static class xmlpi_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlpi_key"
    // Keys.g:1588:1: xmlpi_key : {...}? => REGULAR_ID -> XMLPI_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlpi_key_return xmlpi_key() throws RecognitionException {
        OracleParser_Keys.xmlpi_key_return retval = new OracleParser_Keys.xmlpi_key_return();
        retval.start = input.LT(1);
        int xmlpi_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID322=null;

        Object REGULAR_ID322_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 316) ) { return retval; }
            // Keys.g:1589:5: ({...}? => REGULAR_ID -> XMLPI_VK[$REGULAR_ID] )
            // Keys.g:1589:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlpi"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlpi_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlpi\")");
            }
            REGULAR_ID322=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlpi_key10548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID322);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1589:74: -> XMLPI_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLPI_VK, REGULAR_ID322));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 316, xmlpi_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlpi_key"

    public static class xmlcolattval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlcolattval_key"
    // Keys.g:1592:1: xmlcolattval_key : {...}? => REGULAR_ID -> XMLCOLATTVAL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlcolattval_key_return xmlcolattval_key() throws RecognitionException {
        OracleParser_Keys.xmlcolattval_key_return retval = new OracleParser_Keys.xmlcolattval_key_return();
        retval.start = input.LT(1);
        int xmlcolattval_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID323=null;

        Object REGULAR_ID323_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 317) ) { return retval; }
            // Keys.g:1593:5: ({...}? => REGULAR_ID -> XMLCOLATTVAL_VK[$REGULAR_ID] )
            // Keys.g:1593:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlcolattval"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlcolattval_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlcolattval\")");
            }
            REGULAR_ID323=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlcolattval_key10576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID323);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1593:81: -> XMLCOLATTVAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLCOLATTVAL_VK, REGULAR_ID323));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 317, xmlcolattval_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlcolattval_key"

    public static class document_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document_key"
    // Keys.g:1596:1: document_key : {...}? => REGULAR_ID -> DOCUMENT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.document_key_return document_key() throws RecognitionException {
        OracleParser_Keys.document_key_return retval = new OracleParser_Keys.document_key_return();
        retval.start = input.LT(1);
        int document_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID324=null;

        Object REGULAR_ID324_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 318) ) { return retval; }
            // Keys.g:1597:5: ({...}? => REGULAR_ID -> DOCUMENT_VK[$REGULAR_ID] )
            // Keys.g:1597:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("document"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "document_key", "input.LT(1).getText().equalsIgnoreCase(\"document\")");
            }
            REGULAR_ID324=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_document_key10604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID324);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1597:77: -> DOCUMENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DOCUMENT_VK, REGULAR_ID324));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 318, document_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document_key"

    public static class xmlforest_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlforest_key"
    // Keys.g:1600:1: xmlforest_key : {...}? => REGULAR_ID -> XMLFOREST_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlforest_key_return xmlforest_key() throws RecognitionException {
        OracleParser_Keys.xmlforest_key_return retval = new OracleParser_Keys.xmlforest_key_return();
        retval.start = input.LT(1);
        int xmlforest_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID325=null;

        Object REGULAR_ID325_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 319) ) { return retval; }
            // Keys.g:1601:5: ({...}? => REGULAR_ID -> XMLFOREST_VK[$REGULAR_ID] )
            // Keys.g:1601:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlforest"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlforest_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlforest\")");
            }
            REGULAR_ID325=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlforest_key10632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID325);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1601:78: -> XMLFOREST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLFOREST_VK, REGULAR_ID325));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 319, xmlforest_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlforest_key"

    public static class passing_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "passing_key"
    // Keys.g:1604:1: passing_key : {...}? => REGULAR_ID -> PASSING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.passing_key_return passing_key() throws RecognitionException {
        OracleParser_Keys.passing_key_return retval = new OracleParser_Keys.passing_key_return();
        retval.start = input.LT(1);
        int passing_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID326=null;

        Object REGULAR_ID326_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 320) ) { return retval; }
            // Keys.g:1605:5: ({...}? => REGULAR_ID -> PASSING_VK[$REGULAR_ID] )
            // Keys.g:1605:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("passing"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "passing_key", "input.LT(1).getText().equalsIgnoreCase(\"passing\")");
            }
            REGULAR_ID326=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_passing_key10660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID326);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1605:76: -> PASSING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PASSING_VK, REGULAR_ID326));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 320, passing_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "passing_key"

    public static class columns_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "columns_key"
    // Keys.g:1608:1: columns_key : {...}? => REGULAR_ID -> PASSING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.columns_key_return columns_key() throws RecognitionException {
        OracleParser_Keys.columns_key_return retval = new OracleParser_Keys.columns_key_return();
        retval.start = input.LT(1);
        int columns_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID327=null;

        Object REGULAR_ID327_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 321) ) { return retval; }
            // Keys.g:1609:5: ({...}? => REGULAR_ID -> PASSING_VK[$REGULAR_ID] )
            // Keys.g:1609:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("columns"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "columns_key", "input.LT(1).getText().equalsIgnoreCase(\"columns\")");
            }
            REGULAR_ID327=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_columns_key10688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID327);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1609:76: -> PASSING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PASSING_VK, REGULAR_ID327));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 321, columns_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "columns_key"

    public static class indent_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indent_key"
    // Keys.g:1612:1: indent_key : {...}? => REGULAR_ID -> INDENT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.indent_key_return indent_key() throws RecognitionException {
        OracleParser_Keys.indent_key_return retval = new OracleParser_Keys.indent_key_return();
        retval.start = input.LT(1);
        int indent_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID328=null;

        Object REGULAR_ID328_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 322) ) { return retval; }
            // Keys.g:1613:5: ({...}? => REGULAR_ID -> INDENT_VK[$REGULAR_ID] )
            // Keys.g:1613:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("indent"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "indent_key", "input.LT(1).getText().equalsIgnoreCase(\"indent\")");
            }
            REGULAR_ID328=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_indent_key10717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID328);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1613:75: -> INDENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INDENT_VK, REGULAR_ID328));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 322, indent_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "indent_key"

    public static class hide_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hide_key"
    // Keys.g:1616:1: hide_key : {...}? => REGULAR_ID -> HIDE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.hide_key_return hide_key() throws RecognitionException {
        OracleParser_Keys.hide_key_return retval = new OracleParser_Keys.hide_key_return();
        retval.start = input.LT(1);
        int hide_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID329=null;

        Object REGULAR_ID329_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 323) ) { return retval; }
            // Keys.g:1617:5: ({...}? => REGULAR_ID -> HIDE_VK[$REGULAR_ID] )
            // Keys.g:1617:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("hide"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "hide_key", "input.LT(1).getText().equalsIgnoreCase(\"hide\")");
            }
            REGULAR_ID329=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_hide_key10745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID329);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1617:73: -> HIDE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(HIDE_VK, REGULAR_ID329));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 323, hide_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hide_key"

    public static class xmlagg_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlagg_key"
    // Keys.g:1620:1: xmlagg_key : {...}? => REGULAR_ID -> XMLAGG_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlagg_key_return xmlagg_key() throws RecognitionException {
        OracleParser_Keys.xmlagg_key_return retval = new OracleParser_Keys.xmlagg_key_return();
        retval.start = input.LT(1);
        int xmlagg_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID330=null;

        Object REGULAR_ID330_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 324) ) { return retval; }
            // Keys.g:1621:5: ({...}? => REGULAR_ID -> XMLAGG_VK[$REGULAR_ID] )
            // Keys.g:1621:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlagg"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlagg_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlagg\")");
            }
            REGULAR_ID330=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlagg_key10773); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID330);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1621:75: -> XMLAGG_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLAGG_VK, REGULAR_ID330));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 324, xmlagg_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlagg_key"

    public static class path_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "path_key"
    // Keys.g:1624:1: path_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.path_key_return path_key() throws RecognitionException {
        OracleParser_Keys.path_key_return retval = new OracleParser_Keys.path_key_return();
        retval.start = input.LT(1);
        int path_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID331=null;

        Object REGULAR_ID331_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 325) ) { return retval; }
            // Keys.g:1625:5: ({...}? => REGULAR_ID )
            // Keys.g:1625:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("path"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "path_key", "input.LT(1).getText().equalsIgnoreCase(\"path\")");
            }
            REGULAR_ID331=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_path_key10801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID331_tree = (Object)adaptor.create(REGULAR_ID331);
            adaptor.addChild(root_0, REGULAR_ID331_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 325, path_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "path_key"

    public static class xmlnamespaces_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlnamespaces_key"
    // Keys.g:1628:1: xmlnamespaces_key : {...}? => REGULAR_ID -> XMLNAMESPACES_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlnamespaces_key_return xmlnamespaces_key() throws RecognitionException {
        OracleParser_Keys.xmlnamespaces_key_return retval = new OracleParser_Keys.xmlnamespaces_key_return();
        retval.start = input.LT(1);
        int xmlnamespaces_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID332=null;

        Object REGULAR_ID332_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 326) ) { return retval; }
            // Keys.g:1629:5: ({...}? => REGULAR_ID -> XMLNAMESPACES_VK[$REGULAR_ID] )
            // Keys.g:1629:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlnamespaces"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlnamespaces_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlnamespaces\")");
            }
            REGULAR_ID332=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlnamespaces_key10824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID332);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1629:82: -> XMLNAMESPACES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLNAMESPACES_VK, REGULAR_ID332));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 326, xmlnamespaces_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlnamespaces_key"

    public static class size_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "size_key"
    // Keys.g:1632:1: size_key : SQL92_RESERVED_SIZE ;
    public final OracleParser_Keys.size_key_return size_key() throws RecognitionException {
        OracleParser_Keys.size_key_return retval = new OracleParser_Keys.size_key_return();
        retval.start = input.LT(1);
        int size_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_SIZE333=null;

        Object SQL92_RESERVED_SIZE333_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 327) ) { return retval; }
            // Keys.g:1633:5: ( SQL92_RESERVED_SIZE )
            // Keys.g:1633:10: SQL92_RESERVED_SIZE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_SIZE333=(Token)match(input,SQL92_RESERVED_SIZE,FOLLOW_SQL92_RESERVED_SIZE_in_size_key10849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_SIZE333_tree = (Object)adaptor.create(SQL92_RESERVED_SIZE333);
            adaptor.addChild(root_0, SQL92_RESERVED_SIZE333_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 327, size_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "size_key"

    public static class noschemacheck_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noschemacheck_key"
    // Keys.g:1636:1: noschemacheck_key : {...}? => REGULAR_ID -> NOSCHEMACHECK_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.noschemacheck_key_return noschemacheck_key() throws RecognitionException {
        OracleParser_Keys.noschemacheck_key_return retval = new OracleParser_Keys.noschemacheck_key_return();
        retval.start = input.LT(1);
        int noschemacheck_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID334=null;

        Object REGULAR_ID334_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 328) ) { return retval; }
            // Keys.g:1637:5: ({...}? => REGULAR_ID -> NOSCHEMACHECK_VK[$REGULAR_ID] )
            // Keys.g:1637:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("noschemacheck"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "noschemacheck_key", "input.LT(1).getText().equalsIgnoreCase(\"noschemacheck\")");
            }
            REGULAR_ID334=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_noschemacheck_key10872); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID334);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1637:82: -> NOSCHEMACHECK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NOSCHEMACHECK_VK, REGULAR_ID334));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 328, noschemacheck_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noschemacheck_key"

    public static class noentityescaping_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noentityescaping_key"
    // Keys.g:1640:1: noentityescaping_key : {...}? => REGULAR_ID -> NOENTITYESCAPING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.noentityescaping_key_return noentityescaping_key() throws RecognitionException {
        OracleParser_Keys.noentityescaping_key_return retval = new OracleParser_Keys.noentityescaping_key_return();
        retval.start = input.LT(1);
        int noentityescaping_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID335=null;

        Object REGULAR_ID335_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 329) ) { return retval; }
            // Keys.g:1641:5: ({...}? => REGULAR_ID -> NOENTITYESCAPING_VK[$REGULAR_ID] )
            // Keys.g:1641:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("noentityescaping"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "noentityescaping_key", "input.LT(1).getText().equalsIgnoreCase(\"noentityescaping\")");
            }
            REGULAR_ID335=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_noentityescaping_key10900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID335);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1641:85: -> NOENTITYESCAPING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NOENTITYESCAPING_VK, REGULAR_ID335));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 329, noentityescaping_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noentityescaping_key"

    public static class xmlquery_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlquery_key"
    // Keys.g:1644:1: xmlquery_key : {...}? => REGULAR_ID -> XMLQUERY_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlquery_key_return xmlquery_key() throws RecognitionException {
        OracleParser_Keys.xmlquery_key_return retval = new OracleParser_Keys.xmlquery_key_return();
        retval.start = input.LT(1);
        int xmlquery_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID336=null;

        Object REGULAR_ID336_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 330) ) { return retval; }
            // Keys.g:1645:5: ({...}? => REGULAR_ID -> XMLQUERY_VK[$REGULAR_ID] )
            // Keys.g:1645:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlquery"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlquery_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlquery\")");
            }
            REGULAR_ID336=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlquery_key10928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID336);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1645:77: -> XMLQUERY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLQUERY_VK, REGULAR_ID336));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 330, xmlquery_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlquery_key"

    public static class xmltable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmltable_key"
    // Keys.g:1648:1: xmltable_key : {...}? => REGULAR_ID -> XMLTABLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmltable_key_return xmltable_key() throws RecognitionException {
        OracleParser_Keys.xmltable_key_return retval = new OracleParser_Keys.xmltable_key_return();
        retval.start = input.LT(1);
        int xmltable_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID337=null;

        Object REGULAR_ID337_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 331) ) { return retval; }
            // Keys.g:1649:5: ({...}? => REGULAR_ID -> XMLTABLE_VK[$REGULAR_ID] )
            // Keys.g:1649:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmltable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmltable_key", "input.LT(1).getText().equalsIgnoreCase(\"xmltable\")");
            }
            REGULAR_ID337=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmltable_key10956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID337);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1649:77: -> XMLTABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLTABLE_VK, REGULAR_ID337));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 331, xmltable_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmltable_key"

    public static class xmlroot_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlroot_key"
    // Keys.g:1652:1: xmlroot_key : {...}? => REGULAR_ID -> XMLROOT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlroot_key_return xmlroot_key() throws RecognitionException {
        OracleParser_Keys.xmlroot_key_return retval = new OracleParser_Keys.xmlroot_key_return();
        retval.start = input.LT(1);
        int xmlroot_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID338=null;

        Object REGULAR_ID338_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 332) ) { return retval; }
            // Keys.g:1653:5: ({...}? => REGULAR_ID -> XMLROOT_VK[$REGULAR_ID] )
            // Keys.g:1653:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlroot"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlroot_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlroot\")");
            }
            REGULAR_ID338=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlroot_key10984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID338);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1653:76: -> XMLROOT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLROOT_VK, REGULAR_ID338));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 332, xmlroot_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlroot_key"

    public static class schemacheck_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schemacheck_key"
    // Keys.g:1656:1: schemacheck_key : {...}? => REGULAR_ID -> SCHEMACHECK_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.schemacheck_key_return schemacheck_key() throws RecognitionException {
        OracleParser_Keys.schemacheck_key_return retval = new OracleParser_Keys.schemacheck_key_return();
        retval.start = input.LT(1);
        int schemacheck_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID339=null;

        Object REGULAR_ID339_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 333) ) { return retval; }
            // Keys.g:1657:5: ({...}? => REGULAR_ID -> SCHEMACHECK_VK[$REGULAR_ID] )
            // Keys.g:1657:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("schemacheck"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "schemacheck_key", "input.LT(1).getText().equalsIgnoreCase(\"schemacheck\")");
            }
            REGULAR_ID339=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_schemacheck_key11012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID339);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1657:80: -> SCHEMACHECK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SCHEMACHECK_VK, REGULAR_ID339));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 333, schemacheck_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "schemacheck_key"

    public static class xmlattributes_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlattributes_key"
    // Keys.g:1660:1: xmlattributes_key : {...}? => REGULAR_ID -> XMLATTRIBUTES_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlattributes_key_return xmlattributes_key() throws RecognitionException {
        OracleParser_Keys.xmlattributes_key_return retval = new OracleParser_Keys.xmlattributes_key_return();
        retval.start = input.LT(1);
        int xmlattributes_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID340=null;

        Object REGULAR_ID340_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 334) ) { return retval; }
            // Keys.g:1661:5: ({...}? => REGULAR_ID -> XMLATTRIBUTES_VK[$REGULAR_ID] )
            // Keys.g:1661:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlattributes"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlattributes_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlattributes\")");
            }
            REGULAR_ID340=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlattributes_key11040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID340);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1661:82: -> XMLATTRIBUTES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLATTRIBUTES_VK, REGULAR_ID340));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 334, xmlattributes_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlattributes_key"

    public static class encoding_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "encoding_key"
    // Keys.g:1664:1: encoding_key : {...}? => REGULAR_ID -> ENCODING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.encoding_key_return encoding_key() throws RecognitionException {
        OracleParser_Keys.encoding_key_return retval = new OracleParser_Keys.encoding_key_return();
        retval.start = input.LT(1);
        int encoding_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID341=null;

        Object REGULAR_ID341_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 335) ) { return retval; }
            // Keys.g:1665:5: ({...}? => REGULAR_ID -> ENCODING_VK[$REGULAR_ID] )
            // Keys.g:1665:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("encoding"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "encoding_key", "input.LT(1).getText().equalsIgnoreCase(\"encoding\")");
            }
            REGULAR_ID341=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_encoding_key11068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID341);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1665:77: -> ENCODING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ENCODING_VK, REGULAR_ID341));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 335, encoding_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "encoding_key"

    public static class show_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "show_key"
    // Keys.g:1668:1: show_key : {...}? => REGULAR_ID -> SHOW_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.show_key_return show_key() throws RecognitionException {
        OracleParser_Keys.show_key_return retval = new OracleParser_Keys.show_key_return();
        retval.start = input.LT(1);
        int show_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID342=null;

        Object REGULAR_ID342_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 336) ) { return retval; }
            // Keys.g:1669:5: ({...}? => REGULAR_ID -> SHOW_VK[$REGULAR_ID] )
            // Keys.g:1669:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("show"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "show_key", "input.LT(1).getText().equalsIgnoreCase(\"show\")");
            }
            REGULAR_ID342=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_show_key11096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID342);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1669:73: -> SHOW_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SHOW_VK, REGULAR_ID342));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 336, show_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "show_key"

    public static class xmlserialize_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlserialize_key"
    // Keys.g:1672:1: xmlserialize_key : {...}? => REGULAR_ID -> XMLSERIALIZE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.xmlserialize_key_return xmlserialize_key() throws RecognitionException {
        OracleParser_Keys.xmlserialize_key_return retval = new OracleParser_Keys.xmlserialize_key_return();
        retval.start = input.LT(1);
        int xmlserialize_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID343=null;

        Object REGULAR_ID343_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 337) ) { return retval; }
            // Keys.g:1673:5: ({...}? => REGULAR_ID -> XMLSERIALIZE_VK[$REGULAR_ID] )
            // Keys.g:1673:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlserialize"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlserialize_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlserialize\")");
            }
            REGULAR_ID343=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlserialize_key11124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID343);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1673:81: -> XMLSERIALIZE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(XMLSERIALIZE_VK, REGULAR_ID343));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 337, xmlserialize_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlserialize_key"

    public static class ordinality_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ordinality_key"
    // Keys.g:1676:1: ordinality_key : {...}? => REGULAR_ID -> ORDINALITY_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.ordinality_key_return ordinality_key() throws RecognitionException {
        OracleParser_Keys.ordinality_key_return retval = new OracleParser_Keys.ordinality_key_return();
        retval.start = input.LT(1);
        int ordinality_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID344=null;

        Object REGULAR_ID344_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 338) ) { return retval; }
            // Keys.g:1677:5: ({...}? => REGULAR_ID -> ORDINALITY_VK[$REGULAR_ID] )
            // Keys.g:1677:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("ordinality"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ordinality_key", "input.LT(1).getText().equalsIgnoreCase(\"ordinality\")");
            }
            REGULAR_ID344=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ordinality_key11152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID344);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1677:79: -> ORDINALITY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ORDINALITY_VK, REGULAR_ID344));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 338, ordinality_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ordinality_key"

    public static class defaults_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaults_key"
    // Keys.g:1680:1: defaults_key : {...}? => REGULAR_ID -> DEFAULTS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.defaults_key_return defaults_key() throws RecognitionException {
        OracleParser_Keys.defaults_key_return retval = new OracleParser_Keys.defaults_key_return();
        retval.start = input.LT(1);
        int defaults_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID345=null;

        Object REGULAR_ID345_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 339) ) { return retval; }
            // Keys.g:1681:5: ({...}? => REGULAR_ID -> DEFAULTS_VK[$REGULAR_ID] )
            // Keys.g:1681:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("defaults"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "defaults_key", "input.LT(1).getText().equalsIgnoreCase(\"defaults\")");
            }
            REGULAR_ID345=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_defaults_key11180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID345);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1681:77: -> DEFAULTS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DEFAULTS_VK, REGULAR_ID345));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 339, defaults_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaults_key"

    public static class sqlerror_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlerror_key"
    // Keys.g:1684:1: sqlerror_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.sqlerror_key_return sqlerror_key() throws RecognitionException {
        OracleParser_Keys.sqlerror_key_return retval = new OracleParser_Keys.sqlerror_key_return();
        retval.start = input.LT(1);
        int sqlerror_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID346=null;

        Object REGULAR_ID346_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 340) ) { return retval; }
            // Keys.g:1685:5: ({...}? REGULAR_ID )
            // Keys.g:1685:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("sqlerror"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sqlerror_key", "input.LT(1).getText().equalsIgnoreCase(\"sqlerror\")");
            }
            REGULAR_ID346=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sqlerror_key11207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID346_tree = (Object)adaptor.create(REGULAR_ID346);
            adaptor.addChild(root_0, REGULAR_ID346_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 340, sqlerror_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqlerror_key"

    public static class oserror_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oserror_key"
    // Keys.g:1688:1: oserror_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.oserror_key_return oserror_key() throws RecognitionException {
        OracleParser_Keys.oserror_key_return retval = new OracleParser_Keys.oserror_key_return();
        retval.start = input.LT(1);
        int oserror_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID347=null;

        Object REGULAR_ID347_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 341) ) { return retval; }
            // Keys.g:1689:5: ({...}? REGULAR_ID )
            // Keys.g:1689:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("oserror"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "oserror_key", "input.LT(1).getText().equalsIgnoreCase(\"oserror\")");
            }
            REGULAR_ID347=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_oserror_key11231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID347_tree = (Object)adaptor.create(REGULAR_ID347);
            adaptor.addChild(root_0, REGULAR_ID347_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 341, oserror_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oserror_key"

    public static class success_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "success_key"
    // Keys.g:1692:1: success_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.success_key_return success_key() throws RecognitionException {
        OracleParser_Keys.success_key_return retval = new OracleParser_Keys.success_key_return();
        retval.start = input.LT(1);
        int success_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID348=null;

        Object REGULAR_ID348_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 342) ) { return retval; }
            // Keys.g:1693:5: ({...}? REGULAR_ID )
            // Keys.g:1693:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("success"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "success_key", "input.LT(1).getText().equalsIgnoreCase(\"success\")");
            }
            REGULAR_ID348=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_success_key11254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID348_tree = (Object)adaptor.create(REGULAR_ID348);
            adaptor.addChild(root_0, REGULAR_ID348_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 342, success_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "success_key"

    public static class warning_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "warning_key"
    // Keys.g:1696:1: warning_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.warning_key_return warning_key() throws RecognitionException {
        OracleParser_Keys.warning_key_return retval = new OracleParser_Keys.warning_key_return();
        retval.start = input.LT(1);
        int warning_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID349=null;

        Object REGULAR_ID349_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 343) ) { return retval; }
            // Keys.g:1697:5: ({...}? REGULAR_ID )
            // Keys.g:1697:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("warning"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "warning_key", "input.LT(1).getText().equalsIgnoreCase(\"warning\")");
            }
            REGULAR_ID349=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_warning_key11277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID349_tree = (Object)adaptor.create(REGULAR_ID349);
            adaptor.addChild(root_0, REGULAR_ID349_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 343, warning_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "warning_key"

    public static class failure_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "failure_key"
    // Keys.g:1700:1: failure_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.failure_key_return failure_key() throws RecognitionException {
        OracleParser_Keys.failure_key_return retval = new OracleParser_Keys.failure_key_return();
        retval.start = input.LT(1);
        int failure_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID350=null;

        Object REGULAR_ID350_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 344) ) { return retval; }
            // Keys.g:1701:5: ({...}? REGULAR_ID )
            // Keys.g:1701:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("failure"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "failure_key", "input.LT(1).getText().equalsIgnoreCase(\"failure\")");
            }
            REGULAR_ID350=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_failure_key11300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID350_tree = (Object)adaptor.create(REGULAR_ID350);
            adaptor.addChild(root_0, REGULAR_ID350_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 344, failure_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "failure_key"

    public static class insert_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert_key"
    // Keys.g:1704:1: insert_key : SQL92_RESERVED_INSERT ;
    public final OracleParser_Keys.insert_key_return insert_key() throws RecognitionException {
        OracleParser_Keys.insert_key_return retval = new OracleParser_Keys.insert_key_return();
        retval.start = input.LT(1);
        int insert_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_INSERT351=null;

        Object SQL92_RESERVED_INSERT351_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 345) ) { return retval; }
            // Keys.g:1705:5: ( SQL92_RESERVED_INSERT )
            // Keys.g:1705:10: SQL92_RESERVED_INSERT
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_INSERT351=(Token)match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_insert_key11321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_INSERT351_tree = (Object)adaptor.create(SQL92_RESERVED_INSERT351);
            adaptor.addChild(root_0, SQL92_RESERVED_INSERT351_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 345, insert_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "insert_key"

    public static class order_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_key"
    // Keys.g:1708:1: order_key : SQL92_RESERVED_ORDER ;
    public final OracleParser_Keys.order_key_return order_key() throws RecognitionException {
        OracleParser_Keys.order_key_return retval = new OracleParser_Keys.order_key_return();
        retval.start = input.LT(1);
        int order_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_ORDER352=null;

        Object SQL92_RESERVED_ORDER352_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 346) ) { return retval; }
            // Keys.g:1709:5: ( SQL92_RESERVED_ORDER )
            // Keys.g:1709:10: SQL92_RESERVED_ORDER
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_ORDER352=(Token)match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_order_key11341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ORDER352_tree = (Object)adaptor.create(SQL92_RESERVED_ORDER352);
            adaptor.addChild(root_0, SQL92_RESERVED_ORDER352_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 346, order_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_key"

    public static class minus_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minus_key"
    // Keys.g:1712:1: minus_key : PLSQL_RESERVED_MINUS ;
    public final OracleParser_Keys.minus_key_return minus_key() throws RecognitionException {
        OracleParser_Keys.minus_key_return retval = new OracleParser_Keys.minus_key_return();
        retval.start = input.LT(1);
        int minus_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_RESERVED_MINUS353=null;

        Object PLSQL_RESERVED_MINUS353_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 347) ) { return retval; }
            // Keys.g:1713:5: ( PLSQL_RESERVED_MINUS )
            // Keys.g:1713:10: PLSQL_RESERVED_MINUS
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_RESERVED_MINUS353=(Token)match(input,PLSQL_RESERVED_MINUS,FOLLOW_PLSQL_RESERVED_MINUS_in_minus_key11361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_MINUS353_tree = (Object)adaptor.create(PLSQL_RESERVED_MINUS353);
            adaptor.addChild(root_0, PLSQL_RESERVED_MINUS353_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 347, minus_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minus_key"

    public static class row_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "row_key"
    // Keys.g:1716:1: row_key : {...}? REGULAR_ID -> ROW_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.row_key_return row_key() throws RecognitionException {
        OracleParser_Keys.row_key_return retval = new OracleParser_Keys.row_key_return();
        retval.start = input.LT(1);
        int row_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID354=null;

        Object REGULAR_ID354_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 348) ) { return retval; }
            // Keys.g:1717:5: ({...}? REGULAR_ID -> ROW_VK[$REGULAR_ID] )
            // Keys.g:1717:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("row"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "row_key", "input.LT(1).getText().equalsIgnoreCase(\"row\")");
            }
            REGULAR_ID354=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_row_key11383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID354);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1717:70: -> ROW_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ROW_VK, REGULAR_ID354));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 348, row_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "row_key"

    public static class mod_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mod_key"
    // Keys.g:1720:1: mod_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.mod_key_return mod_key() throws RecognitionException {
        OracleParser_Keys.mod_key_return retval = new OracleParser_Keys.mod_key_return();
        retval.start = input.LT(1);
        int mod_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID355=null;

        Object REGULAR_ID355_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 349) ) { return retval; }
            // Keys.g:1721:5: ({...}? REGULAR_ID )
            // Keys.g:1721:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("mod"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "mod_key", "input.LT(1).getText().equalsIgnoreCase(\"mod\")");
            }
            REGULAR_ID355=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_mod_key11410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID355_tree = (Object)adaptor.create(REGULAR_ID355);
            adaptor.addChild(root_0, REGULAR_ID355_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 349, mod_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mod_key"

    public static class raw_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raw_key"
    // Keys.g:1724:1: raw_key : {...}? => REGULAR_ID -> RAW_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.raw_key_return raw_key() throws RecognitionException {
        OracleParser_Keys.raw_key_return retval = new OracleParser_Keys.raw_key_return();
        retval.start = input.LT(1);
        int raw_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID356=null;

        Object REGULAR_ID356_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 350) ) { return retval; }
            // Keys.g:1725:5: ({...}? => REGULAR_ID -> RAW_VK[$REGULAR_ID] )
            // Keys.g:1725:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("raw"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "raw_key", "input.LT(1).getText().equalsIgnoreCase(\"raw\")");
            }
            REGULAR_ID356=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_raw_key11433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID356);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1725:72: -> RAW_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(RAW_VK, REGULAR_ID356));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 350, raw_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raw_key"

    public static class power_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "power_key"
    // Keys.g:1728:1: power_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.power_key_return power_key() throws RecognitionException {
        OracleParser_Keys.power_key_return retval = new OracleParser_Keys.power_key_return();
        retval.start = input.LT(1);
        int power_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID357=null;

        Object REGULAR_ID357_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 351) ) { return retval; }
            // Keys.g:1729:5: ({...}? REGULAR_ID )
            // Keys.g:1729:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("power"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "power_key", "input.LT(1).getText().equalsIgnoreCase(\"power\")");
            }
            REGULAR_ID357=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_power_key11460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID357_tree = (Object)adaptor.create(REGULAR_ID357);
            adaptor.addChild(root_0, REGULAR_ID357_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 351, power_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "power_key"

    public static class lock_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_key"
    // Keys.g:1732:1: lock_key : PLSQL_RESERVED_LOCK ;
    public final OracleParser_Keys.lock_key_return lock_key() throws RecognitionException {
        OracleParser_Keys.lock_key_return retval = new OracleParser_Keys.lock_key_return();
        retval.start = input.LT(1);
        int lock_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_RESERVED_LOCK358=null;

        Object PLSQL_RESERVED_LOCK358_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 352) ) { return retval; }
            // Keys.g:1733:5: ( PLSQL_RESERVED_LOCK )
            // Keys.g:1733:10: PLSQL_RESERVED_LOCK
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_RESERVED_LOCK358=(Token)match(input,PLSQL_RESERVED_LOCK,FOLLOW_PLSQL_RESERVED_LOCK_in_lock_key11480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_LOCK358_tree = (Object)adaptor.create(PLSQL_RESERVED_LOCK358);
            adaptor.addChild(root_0, PLSQL_RESERVED_LOCK358_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 352, lock_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_key"

    public static class exists_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exists_key"
    // Keys.g:1736:1: exists_key : SQL92_RESERVED_EXISTS ;
    public final OracleParser_Keys.exists_key_return exists_key() throws RecognitionException {
        OracleParser_Keys.exists_key_return retval = new OracleParser_Keys.exists_key_return();
        retval.start = input.LT(1);
        int exists_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_EXISTS359=null;

        Object SQL92_RESERVED_EXISTS359_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 353) ) { return retval; }
            // Keys.g:1737:5: ( SQL92_RESERVED_EXISTS )
            // Keys.g:1737:10: SQL92_RESERVED_EXISTS
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_EXISTS359=(Token)match(input,SQL92_RESERVED_EXISTS,FOLLOW_SQL92_RESERVED_EXISTS_in_exists_key11500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_EXISTS359_tree = (Object)adaptor.create(SQL92_RESERVED_EXISTS359);
            adaptor.addChild(root_0, SQL92_RESERVED_EXISTS359_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 353, exists_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exists_key"

    public static class having_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "having_key"
    // Keys.g:1740:1: having_key : SQL92_RESERVED_HAVING ;
    public final OracleParser_Keys.having_key_return having_key() throws RecognitionException {
        OracleParser_Keys.having_key_return retval = new OracleParser_Keys.having_key_return();
        retval.start = input.LT(1);
        int having_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_HAVING360=null;

        Object SQL92_RESERVED_HAVING360_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 354) ) { return retval; }
            // Keys.g:1741:5: ( SQL92_RESERVED_HAVING )
            // Keys.g:1741:10: SQL92_RESERVED_HAVING
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_HAVING360=(Token)match(input,SQL92_RESERVED_HAVING,FOLLOW_SQL92_RESERVED_HAVING_in_having_key11520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_HAVING360_tree = (Object)adaptor.create(SQL92_RESERVED_HAVING360);
            adaptor.addChild(root_0, SQL92_RESERVED_HAVING360_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 354, having_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "having_key"

    public static class any_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "any_key"
    // Keys.g:1744:1: any_key : SQL92_RESERVED_ANY ;
    public final OracleParser_Keys.any_key_return any_key() throws RecognitionException {
        OracleParser_Keys.any_key_return retval = new OracleParser_Keys.any_key_return();
        retval.start = input.LT(1);
        int any_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_ANY361=null;

        Object SQL92_RESERVED_ANY361_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 355) ) { return retval; }
            // Keys.g:1745:5: ( SQL92_RESERVED_ANY )
            // Keys.g:1745:10: SQL92_RESERVED_ANY
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_ANY361=(Token)match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_any_key11540); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ANY361_tree = (Object)adaptor.create(SQL92_RESERVED_ANY361);
            adaptor.addChild(root_0, SQL92_RESERVED_ANY361_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 355, any_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "any_key"

    public static class with_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "with_key"
    // Keys.g:1748:1: with_key : SQL92_RESERVED_WITH ;
    public final OracleParser_Keys.with_key_return with_key() throws RecognitionException {
        OracleParser_Keys.with_key_return retval = new OracleParser_Keys.with_key_return();
        retval.start = input.LT(1);
        int with_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_WITH362=null;

        Object SQL92_RESERVED_WITH362_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 356) ) { return retval; }
            // Keys.g:1749:5: ( SQL92_RESERVED_WITH )
            // Keys.g:1749:10: SQL92_RESERVED_WITH
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_WITH362=(Token)match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_with_key11560); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_WITH362_tree = (Object)adaptor.create(SQL92_RESERVED_WITH362);
            adaptor.addChild(root_0, SQL92_RESERVED_WITH362_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 356, with_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "with_key"

    public static class transaction_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "transaction_key"
    // Keys.g:1752:1: transaction_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.transaction_key_return transaction_key() throws RecognitionException {
        OracleParser_Keys.transaction_key_return retval = new OracleParser_Keys.transaction_key_return();
        retval.start = input.LT(1);
        int transaction_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID363=null;

        Object REGULAR_ID363_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 357) ) { return retval; }
            // Keys.g:1753:5: ({...}? => REGULAR_ID )
            // Keys.g:1753:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("transaction"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "transaction_key", "input.LT(1).getText().equalsIgnoreCase(\"transaction\")");
            }
            REGULAR_ID363=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_transaction_key11583); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID363_tree = (Object)adaptor.create(REGULAR_ID363);
            adaptor.addChild(root_0, REGULAR_ID363_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 357, transaction_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "transaction_key"

    public static class rawtohex_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rawtohex_key"
    // Keys.g:1756:1: rawtohex_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.rawtohex_key_return rawtohex_key() throws RecognitionException {
        OracleParser_Keys.rawtohex_key_return retval = new OracleParser_Keys.rawtohex_key_return();
        retval.start = input.LT(1);
        int rawtohex_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID364=null;

        Object REGULAR_ID364_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 358) ) { return retval; }
            // Keys.g:1757:5: ({...}? REGULAR_ID )
            // Keys.g:1757:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("rawtohex"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rawtohex_key", "input.LT(1).getText().equalsIgnoreCase(\"rawtohex\")");
            }
            REGULAR_ID364=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rawtohex_key11605); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID364_tree = (Object)adaptor.create(REGULAR_ID364);
            adaptor.addChild(root_0, REGULAR_ID364_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 358, rawtohex_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rawtohex_key"

    public static class number_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number_key"
    // Keys.g:1760:1: number_key : {...}? => REGULAR_ID -> NUMBER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.number_key_return number_key() throws RecognitionException {
        OracleParser_Keys.number_key_return retval = new OracleParser_Keys.number_key_return();
        retval.start = input.LT(1);
        int number_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID365=null;

        Object REGULAR_ID365_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 359) ) { return retval; }
            // Keys.g:1761:5: ({...}? => REGULAR_ID -> NUMBER_VK[$REGULAR_ID] )
            // Keys.g:1761:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("number"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "number_key", "input.LT(1).getText().equalsIgnoreCase(\"number\")");
            }
            REGULAR_ID365=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_number_key11628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID365);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1761:75: -> NUMBER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NUMBER_VK, REGULAR_ID365));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 359, number_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "number_key"

    public static class nocopy_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nocopy_key"
    // Keys.g:1764:1: nocopy_key : {...}? => REGULAR_ID -> NOCOPY_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nocopy_key_return nocopy_key() throws RecognitionException {
        OracleParser_Keys.nocopy_key_return retval = new OracleParser_Keys.nocopy_key_return();
        retval.start = input.LT(1);
        int nocopy_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID366=null;

        Object REGULAR_ID366_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 360) ) { return retval; }
            // Keys.g:1765:5: ({...}? => REGULAR_ID -> NOCOPY_VK[$REGULAR_ID] )
            // Keys.g:1765:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nocopy"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nocopy_key", "input.LT(1).getText().equalsIgnoreCase(\"nocopy\")");
            }
            REGULAR_ID366=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nocopy_key11656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID366);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1765:75: -> NOCOPY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NOCOPY_VK, REGULAR_ID366));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 360, nocopy_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nocopy_key"

    public static class to_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_key"
    // Keys.g:1768:1: to_key : SQL92_RESERVED_TO ;
    public final OracleParser_Keys.to_key_return to_key() throws RecognitionException {
        OracleParser_Keys.to_key_return retval = new OracleParser_Keys.to_key_return();
        retval.start = input.LT(1);
        int to_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_TO367=null;

        Object SQL92_RESERVED_TO367_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 361) ) { return retval; }
            // Keys.g:1769:5: ( SQL92_RESERVED_TO )
            // Keys.g:1769:10: SQL92_RESERVED_TO
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_TO367=(Token)match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_to_key11681); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_TO367_tree = (Object)adaptor.create(SQL92_RESERVED_TO367);
            adaptor.addChild(root_0, SQL92_RESERVED_TO367_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 361, to_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to_key"

    public static class abs_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abs_key"
    // Keys.g:1772:1: abs_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.abs_key_return abs_key() throws RecognitionException {
        OracleParser_Keys.abs_key_return retval = new OracleParser_Keys.abs_key_return();
        retval.start = input.LT(1);
        int abs_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID368=null;

        Object REGULAR_ID368_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 362) ) { return retval; }
            // Keys.g:1773:5: ({...}? REGULAR_ID )
            // Keys.g:1773:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("abs"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "abs_key", "input.LT(1).getText().equalsIgnoreCase(\"abs\")");
            }
            REGULAR_ID368=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_abs_key11703); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID368_tree = (Object)adaptor.create(REGULAR_ID368);
            adaptor.addChild(root_0, REGULAR_ID368_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 362, abs_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "abs_key"

    public static class rollback_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollback_key"
    // Keys.g:1776:1: rollback_key : {...}? => REGULAR_ID -> ROLLBACK_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.rollback_key_return rollback_key() throws RecognitionException {
        OracleParser_Keys.rollback_key_return retval = new OracleParser_Keys.rollback_key_return();
        retval.start = input.LT(1);
        int rollback_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID369=null;

        Object REGULAR_ID369_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 363) ) { return retval; }
            // Keys.g:1777:5: ({...}? => REGULAR_ID -> ROLLBACK_VK[$REGULAR_ID] )
            // Keys.g:1777:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rollback"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rollback_key", "input.LT(1).getText().equalsIgnoreCase(\"rollback\")");
            }
            REGULAR_ID369=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rollback_key11726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID369);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1777:77: -> ROLLBACK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ROLLBACK_VK, REGULAR_ID369));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 363, rollback_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollback_key"

    public static class share_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "share_key"
    // Keys.g:1780:1: share_key : PLSQL_RESERVED_SHARE ;
    public final OracleParser_Keys.share_key_return share_key() throws RecognitionException {
        OracleParser_Keys.share_key_return retval = new OracleParser_Keys.share_key_return();
        retval.start = input.LT(1);
        int share_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_RESERVED_SHARE370=null;

        Object PLSQL_RESERVED_SHARE370_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 364) ) { return retval; }
            // Keys.g:1781:5: ( PLSQL_RESERVED_SHARE )
            // Keys.g:1781:10: PLSQL_RESERVED_SHARE
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_RESERVED_SHARE370=(Token)match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_share_key11751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_SHARE370_tree = (Object)adaptor.create(PLSQL_RESERVED_SHARE370);
            adaptor.addChild(root_0, PLSQL_RESERVED_SHARE370_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 364, share_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "share_key"

    public static class greatest_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "greatest_key"
    // Keys.g:1784:1: greatest_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.greatest_key_return greatest_key() throws RecognitionException {
        OracleParser_Keys.greatest_key_return retval = new OracleParser_Keys.greatest_key_return();
        retval.start = input.LT(1);
        int greatest_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID371=null;

        Object REGULAR_ID371_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 365) ) { return retval; }
            // Keys.g:1785:5: ({...}? REGULAR_ID )
            // Keys.g:1785:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("greatest"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "greatest_key", "input.LT(1).getText().equalsIgnoreCase(\"greatest\")");
            }
            REGULAR_ID371=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_greatest_key11773); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID371_tree = (Object)adaptor.create(REGULAR_ID371);
            adaptor.addChild(root_0, REGULAR_ID371_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 365, greatest_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "greatest_key"

    public static class vsize_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vsize_key"
    // Keys.g:1788:1: vsize_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.vsize_key_return vsize_key() throws RecognitionException {
        OracleParser_Keys.vsize_key_return retval = new OracleParser_Keys.vsize_key_return();
        retval.start = input.LT(1);
        int vsize_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID372=null;

        Object REGULAR_ID372_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 366) ) { return retval; }
            // Keys.g:1789:5: ({...}? REGULAR_ID )
            // Keys.g:1789:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("vsize"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "vsize_key", "input.LT(1).getText().equalsIgnoreCase(\"vsize\")");
            }
            REGULAR_ID372=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_vsize_key11795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID372_tree = (Object)adaptor.create(REGULAR_ID372);
            adaptor.addChild(root_0, REGULAR_ID372_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 366, vsize_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vsize_key"

    public static class exclusive_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusive_key"
    // Keys.g:1792:1: exclusive_key : PLSQL_RESERVED_EXCLUSIVE ;
    public final OracleParser_Keys.exclusive_key_return exclusive_key() throws RecognitionException {
        OracleParser_Keys.exclusive_key_return retval = new OracleParser_Keys.exclusive_key_return();
        retval.start = input.LT(1);
        int exclusive_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_RESERVED_EXCLUSIVE373=null;

        Object PLSQL_RESERVED_EXCLUSIVE373_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 367) ) { return retval; }
            // Keys.g:1793:5: ( PLSQL_RESERVED_EXCLUSIVE )
            // Keys.g:1793:10: PLSQL_RESERVED_EXCLUSIVE
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_RESERVED_EXCLUSIVE373=(Token)match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_exclusive_key11815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_EXCLUSIVE373_tree = (Object)adaptor.create(PLSQL_RESERVED_EXCLUSIVE373);
            adaptor.addChild(root_0, PLSQL_RESERVED_EXCLUSIVE373_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 367, exclusive_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusive_key"

    public static class varchar2_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varchar2_key"
    // Keys.g:1796:1: varchar2_key : {...}? => REGULAR_ID -> VARCHAR2_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.varchar2_key_return varchar2_key() throws RecognitionException {
        OracleParser_Keys.varchar2_key_return retval = new OracleParser_Keys.varchar2_key_return();
        retval.start = input.LT(1);
        int varchar2_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID374=null;

        Object REGULAR_ID374_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 368) ) { return retval; }
            // Keys.g:1797:5: ({...}? => REGULAR_ID -> VARCHAR2_VK[$REGULAR_ID] )
            // Keys.g:1797:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("varchar2"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "varchar2_key", "input.LT(1).getText().equalsIgnoreCase(\"varchar2\")");
            }
            REGULAR_ID374=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_varchar2_key11838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID374);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1797:77: -> VARCHAR2_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VARCHAR2_VK, REGULAR_ID374));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 368, varchar2_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varchar2_key"

    public static class rowidtochar_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowidtochar_key"
    // Keys.g:1800:1: rowidtochar_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.rowidtochar_key_return rowidtochar_key() throws RecognitionException {
        OracleParser_Keys.rowidtochar_key_return retval = new OracleParser_Keys.rowidtochar_key_return();
        retval.start = input.LT(1);
        int rowidtochar_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID375=null;

        Object REGULAR_ID375_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 369) ) { return retval; }
            // Keys.g:1801:5: ({...}? REGULAR_ID )
            // Keys.g:1801:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("rowidtochar"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rowidtochar_key", "input.LT(1).getText().equalsIgnoreCase(\"rowidtochar\")");
            }
            REGULAR_ID375=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rowidtochar_key11865); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID375_tree = (Object)adaptor.create(REGULAR_ID375);
            adaptor.addChild(root_0, REGULAR_ID375_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 369, rowidtochar_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rowidtochar_key"

    public static class open_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_key"
    // Keys.g:1804:1: open_key : {...}? => REGULAR_ID -> OPEN_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.open_key_return open_key() throws RecognitionException {
        OracleParser_Keys.open_key_return retval = new OracleParser_Keys.open_key_return();
        retval.start = input.LT(1);
        int open_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID376=null;

        Object REGULAR_ID376_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 370) ) { return retval; }
            // Keys.g:1805:5: ({...}? => REGULAR_ID -> OPEN_VK[$REGULAR_ID] )
            // Keys.g:1805:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("open"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "open_key", "input.LT(1).getText().equalsIgnoreCase(\"open\")");
            }
            REGULAR_ID376=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_open_key11888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID376);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1805:73: -> OPEN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(OPEN_VK, REGULAR_ID376));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 370, open_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_key"

    public static class comment_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comment_key"
    // Keys.g:1808:1: comment_key : {...}? => REGULAR_ID -> COMMENT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.comment_key_return comment_key() throws RecognitionException {
        OracleParser_Keys.comment_key_return retval = new OracleParser_Keys.comment_key_return();
        retval.start = input.LT(1);
        int comment_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID377=null;

        Object REGULAR_ID377_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 371) ) { return retval; }
            // Keys.g:1809:5: ({...}? => REGULAR_ID -> COMMENT_VK[$REGULAR_ID] )
            // Keys.g:1809:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("comment"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "comment_key", "input.LT(1).getText().equalsIgnoreCase(\"comment\")");
            }
            REGULAR_ID377=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_comment_key11916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID377);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1809:76: -> COMMENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(COMMENT_VK, REGULAR_ID377));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 371, comment_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comment_key"

    public static class sqrt_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqrt_key"
    // Keys.g:1812:1: sqrt_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.sqrt_key_return sqrt_key() throws RecognitionException {
        OracleParser_Keys.sqrt_key_return retval = new OracleParser_Keys.sqrt_key_return();
        retval.start = input.LT(1);
        int sqrt_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID378=null;

        Object REGULAR_ID378_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 372) ) { return retval; }
            // Keys.g:1813:5: ({...}? REGULAR_ID )
            // Keys.g:1813:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("sqrt"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sqrt_key", "input.LT(1).getText().equalsIgnoreCase(\"sqrt\")");
            }
            REGULAR_ID378=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sqrt_key11943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID378_tree = (Object)adaptor.create(REGULAR_ID378);
            adaptor.addChild(root_0, REGULAR_ID378_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 372, sqrt_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqrt_key"

    public static class instr_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instr_key"
    // Keys.g:1816:1: instr_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.instr_key_return instr_key() throws RecognitionException {
        OracleParser_Keys.instr_key_return retval = new OracleParser_Keys.instr_key_return();
        retval.start = input.LT(1);
        int instr_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID379=null;

        Object REGULAR_ID379_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 373) ) { return retval; }
            // Keys.g:1817:5: ({...}? REGULAR_ID )
            // Keys.g:1817:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("instr"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instr_key", "input.LT(1).getText().equalsIgnoreCase(\"instr\")");
            }
            REGULAR_ID379=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_instr_key11965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID379_tree = (Object)adaptor.create(REGULAR_ID379);
            adaptor.addChild(root_0, REGULAR_ID379_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 373, instr_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instr_key"

    public static class nowait_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nowait_key"
    // Keys.g:1820:1: nowait_key : PLSQL_RESERVED_NOWAIT ;
    public final OracleParser_Keys.nowait_key_return nowait_key() throws RecognitionException {
        OracleParser_Keys.nowait_key_return retval = new OracleParser_Keys.nowait_key_return();
        retval.start = input.LT(1);
        int nowait_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_RESERVED_NOWAIT380=null;

        Object PLSQL_RESERVED_NOWAIT380_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 374) ) { return retval; }
            // Keys.g:1821:5: ( PLSQL_RESERVED_NOWAIT )
            // Keys.g:1821:10: PLSQL_RESERVED_NOWAIT
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_RESERVED_NOWAIT380=(Token)match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_nowait_key11985); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_NOWAIT380_tree = (Object)adaptor.create(PLSQL_RESERVED_NOWAIT380);
            adaptor.addChild(root_0, PLSQL_RESERVED_NOWAIT380_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 374, nowait_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nowait_key"

    public static class lpad_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lpad_key"
    // Keys.g:1824:1: lpad_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.lpad_key_return lpad_key() throws RecognitionException {
        OracleParser_Keys.lpad_key_return retval = new OracleParser_Keys.lpad_key_return();
        retval.start = input.LT(1);
        int lpad_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID381=null;

        Object REGULAR_ID381_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 375) ) { return retval; }
            // Keys.g:1825:5: ({...}? REGULAR_ID )
            // Keys.g:1825:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("lpad"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "lpad_key", "input.LT(1).getText().equalsIgnoreCase(\"lpad\")");
            }
            REGULAR_ID381=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_lpad_key12007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID381_tree = (Object)adaptor.create(REGULAR_ID381);
            adaptor.addChild(root_0, REGULAR_ID381_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 375, lpad_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lpad_key"

    public static class boolean_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolean_key"
    // Keys.g:1828:1: boolean_key : {...}? => REGULAR_ID -> BOOLEAN_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.boolean_key_return boolean_key() throws RecognitionException {
        OracleParser_Keys.boolean_key_return retval = new OracleParser_Keys.boolean_key_return();
        retval.start = input.LT(1);
        int boolean_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID382=null;

        Object REGULAR_ID382_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 376) ) { return retval; }
            // Keys.g:1829:5: ({...}? => REGULAR_ID -> BOOLEAN_VK[$REGULAR_ID] )
            // Keys.g:1829:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("boolean"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "boolean_key", "input.LT(1).getText().equalsIgnoreCase(\"boolean\")");
            }
            REGULAR_ID382=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_boolean_key12030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID382);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1829:76: -> BOOLEAN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BOOLEAN_VK, REGULAR_ID382));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 376, boolean_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolean_key"

    public static class rpad_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rpad_key"
    // Keys.g:1832:1: rpad_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.rpad_key_return rpad_key() throws RecognitionException {
        OracleParser_Keys.rpad_key_return retval = new OracleParser_Keys.rpad_key_return();
        retval.start = input.LT(1);
        int rpad_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID383=null;

        Object REGULAR_ID383_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 377) ) { return retval; }
            // Keys.g:1833:5: ({...}? REGULAR_ID )
            // Keys.g:1833:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("rpad"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rpad_key", "input.LT(1).getText().equalsIgnoreCase(\"rpad\")");
            }
            REGULAR_ID383=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rpad_key12057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID383_tree = (Object)adaptor.create(REGULAR_ID383);
            adaptor.addChild(root_0, REGULAR_ID383_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 377, rpad_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rpad_key"

    public static class savepoint_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "savepoint_key"
    // Keys.g:1836:1: savepoint_key : {...}? => REGULAR_ID -> SAVEPOINT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.savepoint_key_return savepoint_key() throws RecognitionException {
        OracleParser_Keys.savepoint_key_return retval = new OracleParser_Keys.savepoint_key_return();
        retval.start = input.LT(1);
        int savepoint_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID384=null;

        Object REGULAR_ID384_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 378) ) { return retval; }
            // Keys.g:1837:5: ({...}? => REGULAR_ID -> SAVEPOINT_VK[$REGULAR_ID] )
            // Keys.g:1837:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "savepoint_key", "input.LT(1).getText().equalsIgnoreCase(\"savepoint\")");
            }
            REGULAR_ID384=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_savepoint_key12080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID384);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1837:78: -> SAVEPOINT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SAVEPOINT_VK, REGULAR_ID384));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 378, savepoint_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "savepoint_key"

    public static class decode_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decode_key"
    // Keys.g:1840:1: decode_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.decode_key_return decode_key() throws RecognitionException {
        OracleParser_Keys.decode_key_return retval = new OracleParser_Keys.decode_key_return();
        retval.start = input.LT(1);
        int decode_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID385=null;

        Object REGULAR_ID385_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 379) ) { return retval; }
            // Keys.g:1841:5: ({...}? REGULAR_ID )
            // Keys.g:1841:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("decode"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "decode_key", "input.LT(1).getText().equalsIgnoreCase(\"decode\")");
            }
            REGULAR_ID385=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_decode_key12107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID385_tree = (Object)adaptor.create(REGULAR_ID385);
            adaptor.addChild(root_0, REGULAR_ID385_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 379, decode_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "decode_key"

    public static class reverse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reverse_key"
    // Keys.g:1844:1: reverse_key : {...}? REGULAR_ID -> REVERSE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.reverse_key_return reverse_key() throws RecognitionException {
        OracleParser_Keys.reverse_key_return retval = new OracleParser_Keys.reverse_key_return();
        retval.start = input.LT(1);
        int reverse_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID386=null;

        Object REGULAR_ID386_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 380) ) { return retval; }
            // Keys.g:1845:5: ({...}? REGULAR_ID -> REVERSE_VK[$REGULAR_ID] )
            // Keys.g:1845:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("reverse"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reverse_key", "input.LT(1).getText().equalsIgnoreCase(\"reverse\")");
            }
            REGULAR_ID386=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_reverse_key12129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID386);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1845:74: -> REVERSE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(REVERSE_VK, REGULAR_ID386));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 380, reverse_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reverse_key"

    public static class least_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "least_key"
    // Keys.g:1848:1: least_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.least_key_return least_key() throws RecognitionException {
        OracleParser_Keys.least_key_return retval = new OracleParser_Keys.least_key_return();
        retval.start = input.LT(1);
        int least_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID387=null;

        Object REGULAR_ID387_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 381) ) { return retval; }
            // Keys.g:1849:5: ({...}? REGULAR_ID )
            // Keys.g:1849:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("least"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "least_key", "input.LT(1).getText().equalsIgnoreCase(\"least\")");
            }
            REGULAR_ID387=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_least_key12156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID387_tree = (Object)adaptor.create(REGULAR_ID387);
            adaptor.addChild(root_0, REGULAR_ID387_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 381, least_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "least_key"

    public static class nvl_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nvl_key"
    // Keys.g:1852:1: nvl_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.nvl_key_return nvl_key() throws RecognitionException {
        OracleParser_Keys.nvl_key_return retval = new OracleParser_Keys.nvl_key_return();
        retval.start = input.LT(1);
        int nvl_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID388=null;

        Object REGULAR_ID388_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 382) ) { return retval; }
            // Keys.g:1853:5: ({...}? REGULAR_ID )
            // Keys.g:1853:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("nvl"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nvl_key", "input.LT(1).getText().equalsIgnoreCase(\"nvl\")");
            }
            REGULAR_ID388=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nvl_key12178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID388_tree = (Object)adaptor.create(REGULAR_ID388);
            adaptor.addChild(root_0, REGULAR_ID388_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 382, nvl_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nvl_key"

    public static class variance_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variance_key"
    // Keys.g:1856:1: variance_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.variance_key_return variance_key() throws RecognitionException {
        OracleParser_Keys.variance_key_return retval = new OracleParser_Keys.variance_key_return();
        retval.start = input.LT(1);
        int variance_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID389=null;

        Object REGULAR_ID389_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 383) ) { return retval; }
            // Keys.g:1857:5: ({...}? REGULAR_ID )
            // Keys.g:1857:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("variance"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "variance_key", "input.LT(1).getText().equalsIgnoreCase(\"variance\")");
            }
            REGULAR_ID389=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_variance_key12200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID389_tree = (Object)adaptor.create(REGULAR_ID389);
            adaptor.addChild(root_0, REGULAR_ID389_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 383, variance_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variance_key"

    public static class start_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "start_key"
    // Keys.g:1860:1: start_key : PLSQL_RESERVED_START ;
    public final OracleParser_Keys.start_key_return start_key() throws RecognitionException {
        OracleParser_Keys.start_key_return retval = new OracleParser_Keys.start_key_return();
        retval.start = input.LT(1);
        int start_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_RESERVED_START390=null;

        Object PLSQL_RESERVED_START390_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 384) ) { return retval; }
            // Keys.g:1861:5: ( PLSQL_RESERVED_START )
            // Keys.g:1861:10: PLSQL_RESERVED_START
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_RESERVED_START390=(Token)match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_start_key12220); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_START390_tree = (Object)adaptor.create(PLSQL_RESERVED_START390);
            adaptor.addChild(root_0, PLSQL_RESERVED_START390_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 384, start_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "start_key"

    public static class desc_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "desc_key"
    // Keys.g:1864:1: desc_key : SQL92_RESERVED_DESC ;
    public final OracleParser_Keys.desc_key_return desc_key() throws RecognitionException {
        OracleParser_Keys.desc_key_return retval = new OracleParser_Keys.desc_key_return();
        retval.start = input.LT(1);
        int desc_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_DESC391=null;

        Object SQL92_RESERVED_DESC391_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 385) ) { return retval; }
            // Keys.g:1865:5: ( SQL92_RESERVED_DESC )
            // Keys.g:1865:10: SQL92_RESERVED_DESC
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_DESC391=(Token)match(input,SQL92_RESERVED_DESC,FOLLOW_SQL92_RESERVED_DESC_in_desc_key12240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DESC391_tree = (Object)adaptor.create(SQL92_RESERVED_DESC391);
            adaptor.addChild(root_0, SQL92_RESERVED_DESC391_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 385, desc_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "desc_key"

    public static class concat_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concat_key"
    // Keys.g:1868:1: concat_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.concat_key_return concat_key() throws RecognitionException {
        OracleParser_Keys.concat_key_return retval = new OracleParser_Keys.concat_key_return();
        retval.start = input.LT(1);
        int concat_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID392=null;

        Object REGULAR_ID392_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 386) ) { return retval; }
            // Keys.g:1869:5: ({...}? REGULAR_ID )
            // Keys.g:1869:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("concat"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "concat_key", "input.LT(1).getText().equalsIgnoreCase(\"concat\")");
            }
            REGULAR_ID392=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_concat_key12262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID392_tree = (Object)adaptor.create(REGULAR_ID392);
            adaptor.addChild(root_0, REGULAR_ID392_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 386, concat_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "concat_key"

    public static class dump_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dump_key"
    // Keys.g:1872:1: dump_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.dump_key_return dump_key() throws RecognitionException {
        OracleParser_Keys.dump_key_return retval = new OracleParser_Keys.dump_key_return();
        retval.start = input.LT(1);
        int dump_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID393=null;

        Object REGULAR_ID393_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 387) ) { return retval; }
            // Keys.g:1873:5: ({...}? REGULAR_ID )
            // Keys.g:1873:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("dump"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dump_key", "input.LT(1).getText().equalsIgnoreCase(\"dump\")");
            }
            REGULAR_ID393=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dump_key12284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID393_tree = (Object)adaptor.create(REGULAR_ID393);
            adaptor.addChild(root_0, REGULAR_ID393_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 387, dump_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dump_key"

    public static class soundex_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "soundex_key"
    // Keys.g:1876:1: soundex_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.soundex_key_return soundex_key() throws RecognitionException {
        OracleParser_Keys.soundex_key_return retval = new OracleParser_Keys.soundex_key_return();
        retval.start = input.LT(1);
        int soundex_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID394=null;

        Object REGULAR_ID394_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 388) ) { return retval; }
            // Keys.g:1877:5: ({...}? REGULAR_ID )
            // Keys.g:1877:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("soundex"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "soundex_key", "input.LT(1).getText().equalsIgnoreCase(\"soundex\")");
            }
            REGULAR_ID394=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_soundex_key12306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID394_tree = (Object)adaptor.create(REGULAR_ID394);
            adaptor.addChild(root_0, REGULAR_ID394_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 388, soundex_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "soundex_key"

    public static class positive_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "positive_key"
    // Keys.g:1880:1: positive_key : {...}? => REGULAR_ID -> POSITIVE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.positive_key_return positive_key() throws RecognitionException {
        OracleParser_Keys.positive_key_return retval = new OracleParser_Keys.positive_key_return();
        retval.start = input.LT(1);
        int positive_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID395=null;

        Object REGULAR_ID395_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 389) ) { return retval; }
            // Keys.g:1881:5: ({...}? => REGULAR_ID -> POSITIVE_VK[$REGULAR_ID] )
            // Keys.g:1881:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("positive"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "positive_key", "input.LT(1).getText().equalsIgnoreCase(\"positive\")");
            }
            REGULAR_ID395=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_positive_key12329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID395);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1881:77: -> POSITIVE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(POSITIVE_VK, REGULAR_ID395));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 389, positive_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "positive_key"

    public static class union_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "union_key"
    // Keys.g:1884:1: union_key : SQL92_RESERVED_UNION ;
    public final OracleParser_Keys.union_key_return union_key() throws RecognitionException {
        OracleParser_Keys.union_key_return retval = new OracleParser_Keys.union_key_return();
        retval.start = input.LT(1);
        int union_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_UNION396=null;

        Object SQL92_RESERVED_UNION396_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 390) ) { return retval; }
            // Keys.g:1885:5: ( SQL92_RESERVED_UNION )
            // Keys.g:1885:10: SQL92_RESERVED_UNION
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_UNION396=(Token)match(input,SQL92_RESERVED_UNION,FOLLOW_SQL92_RESERVED_UNION_in_union_key12354); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_UNION396_tree = (Object)adaptor.create(SQL92_RESERVED_UNION396);
            adaptor.addChild(root_0, SQL92_RESERVED_UNION396_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 390, union_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "union_key"

    public static class ascii_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ascii_key"
    // Keys.g:1888:1: ascii_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.ascii_key_return ascii_key() throws RecognitionException {
        OracleParser_Keys.ascii_key_return retval = new OracleParser_Keys.ascii_key_return();
        retval.start = input.LT(1);
        int ascii_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID397=null;

        Object REGULAR_ID397_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 391) ) { return retval; }
            // Keys.g:1889:5: ({...}? REGULAR_ID )
            // Keys.g:1889:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("ascii"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ascii_key", "input.LT(1).getText().equalsIgnoreCase(\"ascii\")");
            }
            REGULAR_ID397=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ascii_key12376); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID397_tree = (Object)adaptor.create(REGULAR_ID397);
            adaptor.addChild(root_0, REGULAR_ID397_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 391, ascii_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ascii_key"

    public static class connect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "connect_key"
    // Keys.g:1892:1: connect_key : SQL92_RESERVED_CONNECT ;
    public final OracleParser_Keys.connect_key_return connect_key() throws RecognitionException {
        OracleParser_Keys.connect_key_return retval = new OracleParser_Keys.connect_key_return();
        retval.start = input.LT(1);
        int connect_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_CONNECT398=null;

        Object SQL92_RESERVED_CONNECT398_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 392) ) { return retval; }
            // Keys.g:1893:5: ( SQL92_RESERVED_CONNECT )
            // Keys.g:1893:10: SQL92_RESERVED_CONNECT
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_CONNECT398=(Token)match(input,SQL92_RESERVED_CONNECT,FOLLOW_SQL92_RESERVED_CONNECT_in_connect_key12396); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CONNECT398_tree = (Object)adaptor.create(SQL92_RESERVED_CONNECT398);
            adaptor.addChild(root_0, SQL92_RESERVED_CONNECT398_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 392, connect_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "connect_key"

    public static class asc_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asc_key"
    // Keys.g:1896:1: asc_key : SQL92_RESERVED_ASC ;
    public final OracleParser_Keys.asc_key_return asc_key() throws RecognitionException {
        OracleParser_Keys.asc_key_return retval = new OracleParser_Keys.asc_key_return();
        retval.start = input.LT(1);
        int asc_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_ASC399=null;

        Object SQL92_RESERVED_ASC399_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 393) ) { return retval; }
            // Keys.g:1897:5: ( SQL92_RESERVED_ASC )
            // Keys.g:1897:10: SQL92_RESERVED_ASC
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_ASC399=(Token)match(input,SQL92_RESERVED_ASC,FOLLOW_SQL92_RESERVED_ASC_in_asc_key12416); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ASC399_tree = (Object)adaptor.create(SQL92_RESERVED_ASC399);
            adaptor.addChild(root_0, SQL92_RESERVED_ASC399_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 393, asc_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asc_key"

    public static class hextoraw_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hextoraw_key"
    // Keys.g:1900:1: hextoraw_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.hextoraw_key_return hextoraw_key() throws RecognitionException {
        OracleParser_Keys.hextoraw_key_return retval = new OracleParser_Keys.hextoraw_key_return();
        retval.start = input.LT(1);
        int hextoraw_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID400=null;

        Object REGULAR_ID400_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 394) ) { return retval; }
            // Keys.g:1901:5: ({...}? REGULAR_ID )
            // Keys.g:1901:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("hextoraw"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "hextoraw_key", "input.LT(1).getText().equalsIgnoreCase(\"hextoraw\")");
            }
            REGULAR_ID400=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_hextoraw_key12438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID400_tree = (Object)adaptor.create(REGULAR_ID400);
            adaptor.addChild(root_0, REGULAR_ID400_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 394, hextoraw_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hextoraw_key"

    public static class to_date_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_date_key"
    // Keys.g:1904:1: to_date_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.to_date_key_return to_date_key() throws RecognitionException {
        OracleParser_Keys.to_date_key_return retval = new OracleParser_Keys.to_date_key_return();
        retval.start = input.LT(1);
        int to_date_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID401=null;

        Object REGULAR_ID401_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 395) ) { return retval; }
            // Keys.g:1905:5: ({...}? REGULAR_ID )
            // Keys.g:1905:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("to_date"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "to_date_key", "input.LT(1).getText().equalsIgnoreCase(\"to_date\")");
            }
            REGULAR_ID401=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_to_date_key12460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID401_tree = (Object)adaptor.create(REGULAR_ID401);
            adaptor.addChild(root_0, REGULAR_ID401_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 395, to_date_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to_date_key"

    public static class floor_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "floor_key"
    // Keys.g:1908:1: floor_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.floor_key_return floor_key() throws RecognitionException {
        OracleParser_Keys.floor_key_return retval = new OracleParser_Keys.floor_key_return();
        retval.start = input.LT(1);
        int floor_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID402=null;

        Object REGULAR_ID402_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 396) ) { return retval; }
            // Keys.g:1909:5: ({...}? REGULAR_ID )
            // Keys.g:1909:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("floor"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "floor_key", "input.LT(1).getText().equalsIgnoreCase(\"floor\")");
            }
            REGULAR_ID402=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_floor_key12482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID402_tree = (Object)adaptor.create(REGULAR_ID402);
            adaptor.addChild(root_0, REGULAR_ID402_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 396, floor_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "floor_key"

    public static class sign_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sign_key"
    // Keys.g:1912:1: sign_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.sign_key_return sign_key() throws RecognitionException {
        OracleParser_Keys.sign_key_return retval = new OracleParser_Keys.sign_key_return();
        retval.start = input.LT(1);
        int sign_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID403=null;

        Object REGULAR_ID403_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 397) ) { return retval; }
            // Keys.g:1913:5: ({...}? REGULAR_ID )
            // Keys.g:1913:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("sign"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sign_key", "input.LT(1).getText().equalsIgnoreCase(\"sign\")");
            }
            REGULAR_ID403=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sign_key12504); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID403_tree = (Object)adaptor.create(REGULAR_ID403);
            adaptor.addChild(root_0, REGULAR_ID403_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 397, sign_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sign_key"

    public static class update_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_key"
    // Keys.g:1916:1: update_key : SQL92_RESERVED_UPDATE ;
    public final OracleParser_Keys.update_key_return update_key() throws RecognitionException {
        OracleParser_Keys.update_key_return retval = new OracleParser_Keys.update_key_return();
        retval.start = input.LT(1);
        int update_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_UPDATE404=null;

        Object SQL92_RESERVED_UPDATE404_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 398) ) { return retval; }
            // Keys.g:1917:5: ( SQL92_RESERVED_UPDATE )
            // Keys.g:1917:10: SQL92_RESERVED_UPDATE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_UPDATE404=(Token)match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_update_key12524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_UPDATE404_tree = (Object)adaptor.create(SQL92_RESERVED_UPDATE404);
            adaptor.addChild(root_0, SQL92_RESERVED_UPDATE404_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 398, update_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_key"

    public static class trunc_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trunc_key"
    // Keys.g:1920:1: trunc_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.trunc_key_return trunc_key() throws RecognitionException {
        OracleParser_Keys.trunc_key_return retval = new OracleParser_Keys.trunc_key_return();
        retval.start = input.LT(1);
        int trunc_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID405=null;

        Object REGULAR_ID405_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 399) ) { return retval; }
            // Keys.g:1921:5: ({...}? REGULAR_ID )
            // Keys.g:1921:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("trunc"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "trunc_key", "input.LT(1).getText().equalsIgnoreCase(\"trunc\")");
            }
            REGULAR_ID405=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_trunc_key12546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID405_tree = (Object)adaptor.create(REGULAR_ID405);
            adaptor.addChild(root_0, REGULAR_ID405_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 399, trunc_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trunc_key"

    public static class rtrim_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rtrim_key"
    // Keys.g:1924:1: rtrim_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.rtrim_key_return rtrim_key() throws RecognitionException {
        OracleParser_Keys.rtrim_key_return retval = new OracleParser_Keys.rtrim_key_return();
        retval.start = input.LT(1);
        int rtrim_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID406=null;

        Object REGULAR_ID406_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 400) ) { return retval; }
            // Keys.g:1925:5: ({...}? REGULAR_ID )
            // Keys.g:1925:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("rtrim"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rtrim_key", "input.LT(1).getText().equalsIgnoreCase(\"rtrim\")");
            }
            REGULAR_ID406=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rtrim_key12568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID406_tree = (Object)adaptor.create(REGULAR_ID406);
            adaptor.addChild(root_0, REGULAR_ID406_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 400, rtrim_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rtrim_key"

    public static class close_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "close_key"
    // Keys.g:1928:1: close_key : {...}? => REGULAR_ID -> CLOSE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.close_key_return close_key() throws RecognitionException {
        OracleParser_Keys.close_key_return retval = new OracleParser_Keys.close_key_return();
        retval.start = input.LT(1);
        int close_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID407=null;

        Object REGULAR_ID407_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 401) ) { return retval; }
            // Keys.g:1929:5: ({...}? => REGULAR_ID -> CLOSE_VK[$REGULAR_ID] )
            // Keys.g:1929:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("close"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "close_key", "input.LT(1).getText().equalsIgnoreCase(\"close\")");
            }
            REGULAR_ID407=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_close_key12591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID407);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1929:74: -> CLOSE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CLOSE_VK, REGULAR_ID407));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 401, close_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "close_key"

    public static class to_char_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_char_key"
    // Keys.g:1932:1: to_char_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.to_char_key_return to_char_key() throws RecognitionException {
        OracleParser_Keys.to_char_key_return retval = new OracleParser_Keys.to_char_key_return();
        retval.start = input.LT(1);
        int to_char_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID408=null;

        Object REGULAR_ID408_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 402) ) { return retval; }
            // Keys.g:1933:5: ({...}? REGULAR_ID )
            // Keys.g:1933:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("to_char"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "to_char_key", "input.LT(1).getText().equalsIgnoreCase(\"to_char\")");
            }
            REGULAR_ID408=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_to_char_key12618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID408_tree = (Object)adaptor.create(REGULAR_ID408);
            adaptor.addChild(root_0, REGULAR_ID408_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 402, to_char_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to_char_key"

    public static class ltrim_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ltrim_key"
    // Keys.g:1936:1: ltrim_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.ltrim_key_return ltrim_key() throws RecognitionException {
        OracleParser_Keys.ltrim_key_return retval = new OracleParser_Keys.ltrim_key_return();
        retval.start = input.LT(1);
        int ltrim_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID409=null;

        Object REGULAR_ID409_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 403) ) { return retval; }
            // Keys.g:1937:5: ({...}? REGULAR_ID )
            // Keys.g:1937:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("ltrim"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ltrim_key", "input.LT(1).getText().equalsIgnoreCase(\"ltrim\")");
            }
            REGULAR_ID409=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ltrim_key12640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID409_tree = (Object)adaptor.create(REGULAR_ID409);
            adaptor.addChild(root_0, REGULAR_ID409_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 403, ltrim_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ltrim_key"

    public static class mode_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mode_key"
    // Keys.g:1940:1: mode_key : PLSQL_RESERVED_MODE ;
    public final OracleParser_Keys.mode_key_return mode_key() throws RecognitionException {
        OracleParser_Keys.mode_key_return retval = new OracleParser_Keys.mode_key_return();
        retval.start = input.LT(1);
        int mode_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_RESERVED_MODE410=null;

        Object PLSQL_RESERVED_MODE410_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 404) ) { return retval; }
            // Keys.g:1941:5: ( PLSQL_RESERVED_MODE )
            // Keys.g:1941:10: PLSQL_RESERVED_MODE
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_RESERVED_MODE410=(Token)match(input,PLSQL_RESERVED_MODE,FOLLOW_PLSQL_RESERVED_MODE_in_mode_key12660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_MODE410_tree = (Object)adaptor.create(PLSQL_RESERVED_MODE410);
            adaptor.addChild(root_0, PLSQL_RESERVED_MODE410_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 404, mode_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mode_key"

    public static class uid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uid_key"
    // Keys.g:1944:1: uid_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.uid_key_return uid_key() throws RecognitionException {
        OracleParser_Keys.uid_key_return retval = new OracleParser_Keys.uid_key_return();
        retval.start = input.LT(1);
        int uid_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID411=null;

        Object REGULAR_ID411_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 405) ) { return retval; }
            // Keys.g:1945:5: ({...}? REGULAR_ID )
            // Keys.g:1945:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("uid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "uid_key", "input.LT(1).getText().equalsIgnoreCase(\"uid\")");
            }
            REGULAR_ID411=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_uid_key12682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID411_tree = (Object)adaptor.create(REGULAR_ID411);
            adaptor.addChild(root_0, REGULAR_ID411_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 405, uid_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uid_key"

    public static class chr_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "chr_key"
    // Keys.g:1948:1: chr_key : {...}? REGULAR_ID -> CHR_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.chr_key_return chr_key() throws RecognitionException {
        OracleParser_Keys.chr_key_return retval = new OracleParser_Keys.chr_key_return();
        retval.start = input.LT(1);
        int chr_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID412=null;

        Object REGULAR_ID412_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 406) ) { return retval; }
            // Keys.g:1949:5: ({...}? REGULAR_ID -> CHR_VK[$REGULAR_ID] )
            // Keys.g:1949:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("chr"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "chr_key", "input.LT(1).getText().equalsIgnoreCase(\"chr\")");
            }
            REGULAR_ID412=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_chr_key12704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID412);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1949:70: -> CHR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CHR_VK, REGULAR_ID412));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 406, chr_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "chr_key"

    public static class intersect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "intersect_key"
    // Keys.g:1952:1: intersect_key : SQL92_RESERVED_INTERSECT ;
    public final OracleParser_Keys.intersect_key_return intersect_key() throws RecognitionException {
        OracleParser_Keys.intersect_key_return retval = new OracleParser_Keys.intersect_key_return();
        retval.start = input.LT(1);
        int intersect_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_INTERSECT413=null;

        Object SQL92_RESERVED_INTERSECT413_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 407) ) { return retval; }
            // Keys.g:1953:5: ( SQL92_RESERVED_INTERSECT )
            // Keys.g:1953:10: SQL92_RESERVED_INTERSECT
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_INTERSECT413=(Token)match(input,SQL92_RESERVED_INTERSECT,FOLLOW_SQL92_RESERVED_INTERSECT_in_intersect_key12729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_INTERSECT413_tree = (Object)adaptor.create(SQL92_RESERVED_INTERSECT413);
            adaptor.addChild(root_0, SQL92_RESERVED_INTERSECT413_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 407, intersect_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "intersect_key"

    public static class chartorowid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "chartorowid_key"
    // Keys.g:1956:1: chartorowid_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.chartorowid_key_return chartorowid_key() throws RecognitionException {
        OracleParser_Keys.chartorowid_key_return retval = new OracleParser_Keys.chartorowid_key_return();
        retval.start = input.LT(1);
        int chartorowid_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID414=null;

        Object REGULAR_ID414_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 408) ) { return retval; }
            // Keys.g:1957:5: ({...}? REGULAR_ID )
            // Keys.g:1957:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("chartorowid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "chartorowid_key", "input.LT(1).getText().equalsIgnoreCase(\"chartorowid\")");
            }
            REGULAR_ID414=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_chartorowid_key12751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID414_tree = (Object)adaptor.create(REGULAR_ID414);
            adaptor.addChild(root_0, REGULAR_ID414_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 408, chartorowid_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "chartorowid_key"

    public static class mlslabel_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mlslabel_key"
    // Keys.g:1960:1: mlslabel_key : {...}? => REGULAR_ID -> MLSLABEL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.mlslabel_key_return mlslabel_key() throws RecognitionException {
        OracleParser_Keys.mlslabel_key_return retval = new OracleParser_Keys.mlslabel_key_return();
        retval.start = input.LT(1);
        int mlslabel_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID415=null;

        Object REGULAR_ID415_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 409) ) { return retval; }
            // Keys.g:1961:5: ({...}? => REGULAR_ID -> MLSLABEL_VK[$REGULAR_ID] )
            // Keys.g:1961:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("mlslabel"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "mlslabel_key", "input.LT(1).getText().equalsIgnoreCase(\"mlslabel\")");
            }
            REGULAR_ID415=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_mlslabel_key12774); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID415);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1961:77: -> MLSLABEL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(MLSLABEL_VK, REGULAR_ID415));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 409, mlslabel_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mlslabel_key"

    public static class userenv_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "userenv_key"
    // Keys.g:1964:1: userenv_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.userenv_key_return userenv_key() throws RecognitionException {
        OracleParser_Keys.userenv_key_return retval = new OracleParser_Keys.userenv_key_return();
        retval.start = input.LT(1);
        int userenv_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID416=null;

        Object REGULAR_ID416_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 410) ) { return retval; }
            // Keys.g:1965:5: ({...}? REGULAR_ID )
            // Keys.g:1965:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("userenv"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "userenv_key", "input.LT(1).getText().equalsIgnoreCase(\"userenv\")");
            }
            REGULAR_ID416=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_userenv_key12801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID416_tree = (Object)adaptor.create(REGULAR_ID416);
            adaptor.addChild(root_0, REGULAR_ID416_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 410, userenv_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "userenv_key"

    public static class stddev_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stddev_key"
    // Keys.g:1968:1: stddev_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.stddev_key_return stddev_key() throws RecognitionException {
        OracleParser_Keys.stddev_key_return retval = new OracleParser_Keys.stddev_key_return();
        retval.start = input.LT(1);
        int stddev_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID417=null;

        Object REGULAR_ID417_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 411) ) { return retval; }
            // Keys.g:1969:5: ({...}? REGULAR_ID )
            // Keys.g:1969:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("stddev"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "stddev_key", "input.LT(1).getText().equalsIgnoreCase(\"stddev\")");
            }
            REGULAR_ID417=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_stddev_key12823); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID417_tree = (Object)adaptor.create(REGULAR_ID417);
            adaptor.addChild(root_0, REGULAR_ID417_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 411, stddev_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stddev_key"

    public static class length_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "length_key"
    // Keys.g:1972:1: length_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.length_key_return length_key() throws RecognitionException {
        OracleParser_Keys.length_key_return retval = new OracleParser_Keys.length_key_return();
        retval.start = input.LT(1);
        int length_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID418=null;

        Object REGULAR_ID418_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 412) ) { return retval; }
            // Keys.g:1973:5: ({...}? REGULAR_ID )
            // Keys.g:1973:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("length"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "length_key", "input.LT(1).getText().equalsIgnoreCase(\"length\")");
            }
            REGULAR_ID418=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_length_key12845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID418_tree = (Object)adaptor.create(REGULAR_ID418);
            adaptor.addChild(root_0, REGULAR_ID418_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 412, length_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "length_key"

    public static class fetch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fetch_key"
    // Keys.g:1976:1: fetch_key : SQL92_RESERVED_FETCH ;
    public final OracleParser_Keys.fetch_key_return fetch_key() throws RecognitionException {
        OracleParser_Keys.fetch_key_return retval = new OracleParser_Keys.fetch_key_return();
        retval.start = input.LT(1);
        int fetch_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_FETCH419=null;

        Object SQL92_RESERVED_FETCH419_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 413) ) { return retval; }
            // Keys.g:1977:5: ( SQL92_RESERVED_FETCH )
            // Keys.g:1977:10: SQL92_RESERVED_FETCH
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_FETCH419=(Token)match(input,SQL92_RESERVED_FETCH,FOLLOW_SQL92_RESERVED_FETCH_in_fetch_key12865); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_FETCH419_tree = (Object)adaptor.create(SQL92_RESERVED_FETCH419);
            adaptor.addChild(root_0, SQL92_RESERVED_FETCH419_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 413, fetch_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fetch_key"

    public static class group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_key"
    // Keys.g:1980:1: group_key : SQL92_RESERVED_GROUP ;
    public final OracleParser_Keys.group_key_return group_key() throws RecognitionException {
        OracleParser_Keys.group_key_return retval = new OracleParser_Keys.group_key_return();
        retval.start = input.LT(1);
        int group_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_GROUP420=null;

        Object SQL92_RESERVED_GROUP420_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 414) ) { return retval; }
            // Keys.g:1981:5: ( SQL92_RESERVED_GROUP )
            // Keys.g:1981:10: SQL92_RESERVED_GROUP
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_GROUP420=(Token)match(input,SQL92_RESERVED_GROUP,FOLLOW_SQL92_RESERVED_GROUP_in_group_key12885); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_GROUP420_tree = (Object)adaptor.create(SQL92_RESERVED_GROUP420);
            adaptor.addChild(root_0, SQL92_RESERVED_GROUP420_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 414, group_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_key"

    public static class sysdate_interval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sysdate_interval_key"
    // Keys.g:1984:1: sysdate_interval_key : {...}? REGULAR_ID MINUS_SIGN REGULAR_ID -> ^( FUNC_NAME REGULAR_ID MINUS_SIGN REGULAR_ID ) ;
    public final OracleParser_Keys.sysdate_interval_key_return sysdate_interval_key() throws RecognitionException {
        OracleParser_Keys.sysdate_interval_key_return retval = new OracleParser_Keys.sysdate_interval_key_return();
        retval.start = input.LT(1);
        int sysdate_interval_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID421=null;
        Token MINUS_SIGN422=null;
        Token REGULAR_ID423=null;

        Object REGULAR_ID421_tree=null;
        Object MINUS_SIGN422_tree=null;
        Object REGULAR_ID423_tree=null;
        RewriteRuleTokenStream stream_MINUS_SIGN=new RewriteRuleTokenStream(adaptor,"token MINUS_SIGN");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 415) ) { return retval; }
            // Keys.g:1985:5: ({...}? REGULAR_ID MINUS_SIGN REGULAR_ID -> ^( FUNC_NAME REGULAR_ID MINUS_SIGN REGULAR_ID ) )
            // Keys.g:1985:10: {...}? REGULAR_ID MINUS_SIGN REGULAR_ID
            {
            if ( !(((input.LT(1).getText() + input.LT(2).getText() + input.LT(3).getText()).equalsIgnoreCase("sysdate-interval"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sysdate_interval_key", "(input.LT(1).getText() + input.LT(2).getText() + input.LT(3).getText()).equalsIgnoreCase(\"sysdate-interval\")");
            }
            REGULAR_ID421=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sysdate_interval_key12907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID421);

            MINUS_SIGN422=(Token)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_sysdate_interval_key12909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS_SIGN.add(MINUS_SIGN422);

            REGULAR_ID423=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sysdate_interval_key12911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID423);



            // AST REWRITE
            // elements: MINUS_SIGN, REGULAR_ID, REGULAR_ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1985:155: -> ^( FUNC_NAME REGULAR_ID MINUS_SIGN REGULAR_ID )
            {
                // Keys.g:1985:158: ^( FUNC_NAME REGULAR_ID MINUS_SIGN REGULAR_ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNC_NAME, "FUNC_NAME"), root_1);

                adaptor.addChild(root_1, stream_REGULAR_ID.nextNode());
                adaptor.addChild(root_1, stream_MINUS_SIGN.nextNode());
                adaptor.addChild(root_1, stream_REGULAR_ID.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 415, sysdate_interval_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sysdate_interval_key"

    public static class sysdate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sysdate_key"
    // Keys.g:1988:1: sysdate_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.sysdate_key_return sysdate_key() throws RecognitionException {
        OracleParser_Keys.sysdate_key_return retval = new OracleParser_Keys.sysdate_key_return();
        retval.start = input.LT(1);
        int sysdate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID424=null;

        Object REGULAR_ID424_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 416) ) { return retval; }
            // Keys.g:1989:5: ({...}? REGULAR_ID )
            // Keys.g:1989:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("sysdate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sysdate_key", "input.LT(1).getText().equalsIgnoreCase(\"sysdate\")");
            }
            REGULAR_ID424=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sysdate_key12946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID424_tree = (Object)adaptor.create(REGULAR_ID424);
            adaptor.addChild(root_0, REGULAR_ID424_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 416, sysdate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sysdate_key"

    public static class binary_integer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_integer_key"
    // Keys.g:1992:1: binary_integer_key : {...}? => REGULAR_ID -> BINARY_INTEGER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.binary_integer_key_return binary_integer_key() throws RecognitionException {
        OracleParser_Keys.binary_integer_key_return retval = new OracleParser_Keys.binary_integer_key_return();
        retval.start = input.LT(1);
        int binary_integer_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID425=null;

        Object REGULAR_ID425_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 417) ) { return retval; }
            // Keys.g:1993:5: ({...}? => REGULAR_ID -> BINARY_INTEGER_VK[$REGULAR_ID] )
            // Keys.g:1993:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_integer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_integer_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_integer\")");
            }
            REGULAR_ID425=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_integer_key12969); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID425);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1993:83: -> BINARY_INTEGER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BINARY_INTEGER_VK, REGULAR_ID425));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 417, binary_integer_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_integer_key"

    public static class to_number_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_number_key"
    // Keys.g:1996:1: to_number_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.to_number_key_return to_number_key() throws RecognitionException {
        OracleParser_Keys.to_number_key_return retval = new OracleParser_Keys.to_number_key_return();
        retval.start = input.LT(1);
        int to_number_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID426=null;

        Object REGULAR_ID426_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 418) ) { return retval; }
            // Keys.g:1997:5: ({...}? REGULAR_ID )
            // Keys.g:1997:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("to_number"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "to_number_key", "input.LT(1).getText().equalsIgnoreCase(\"to_number\")");
            }
            REGULAR_ID426=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_to_number_key12996); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID426_tree = (Object)adaptor.create(REGULAR_ID426);
            adaptor.addChild(root_0, REGULAR_ID426_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 418, to_number_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to_number_key"

    public static class substr_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substr_key"
    // Keys.g:2000:1: substr_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.substr_key_return substr_key() throws RecognitionException {
        OracleParser_Keys.substr_key_return retval = new OracleParser_Keys.substr_key_return();
        retval.start = input.LT(1);
        int substr_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID427=null;

        Object REGULAR_ID427_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 419) ) { return retval; }
            // Keys.g:2001:5: ({...}? REGULAR_ID )
            // Keys.g:2001:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("substr"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "substr_key", "input.LT(1).getText().equalsIgnoreCase(\"substr\")");
            }
            REGULAR_ID427=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_substr_key13018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID427_tree = (Object)adaptor.create(REGULAR_ID427);
            adaptor.addChild(root_0, REGULAR_ID427_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 419, substr_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "substr_key"

    public static class ceil_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ceil_key"
    // Keys.g:2004:1: ceil_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.ceil_key_return ceil_key() throws RecognitionException {
        OracleParser_Keys.ceil_key_return retval = new OracleParser_Keys.ceil_key_return();
        retval.start = input.LT(1);
        int ceil_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID428=null;

        Object REGULAR_ID428_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 420) ) { return retval; }
            // Keys.g:2005:5: ({...}? REGULAR_ID )
            // Keys.g:2005:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("ceil"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ceil_key", "input.LT(1).getText().equalsIgnoreCase(\"ceil\")");
            }
            REGULAR_ID428=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ceil_key13040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID428_tree = (Object)adaptor.create(REGULAR_ID428);
            adaptor.addChild(root_0, REGULAR_ID428_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 420, ceil_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ceil_key"

    public static class initcap_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "initcap_key"
    // Keys.g:2008:1: initcap_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.initcap_key_return initcap_key() throws RecognitionException {
        OracleParser_Keys.initcap_key_return retval = new OracleParser_Keys.initcap_key_return();
        retval.start = input.LT(1);
        int initcap_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID429=null;

        Object REGULAR_ID429_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 421) ) { return retval; }
            // Keys.g:2009:5: ({...}? REGULAR_ID )
            // Keys.g:2009:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("initcap"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "initcap_key", "input.LT(1).getText().equalsIgnoreCase(\"initcap\")");
            }
            REGULAR_ID429=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_initcap_key13062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID429_tree = (Object)adaptor.create(REGULAR_ID429);
            adaptor.addChild(root_0, REGULAR_ID429_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 421, initcap_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "initcap_key"

    public static class round_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "round_key"
    // Keys.g:2012:1: round_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.round_key_return round_key() throws RecognitionException {
        OracleParser_Keys.round_key_return retval = new OracleParser_Keys.round_key_return();
        retval.start = input.LT(1);
        int round_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID430=null;

        Object REGULAR_ID430_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 422) ) { return retval; }
            // Keys.g:2013:5: ({...}? REGULAR_ID )
            // Keys.g:2013:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("round"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "round_key", "input.LT(1).getText().equalsIgnoreCase(\"round\")");
            }
            REGULAR_ID430=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_round_key13084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID430_tree = (Object)adaptor.create(REGULAR_ID430);
            adaptor.addChild(root_0, REGULAR_ID430_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 422, round_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "round_key"

    public static class long_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "long_key"
    // Keys.g:2016:1: long_key : {...}? => REGULAR_ID -> LONG_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.long_key_return long_key() throws RecognitionException {
        OracleParser_Keys.long_key_return retval = new OracleParser_Keys.long_key_return();
        retval.start = input.LT(1);
        int long_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID431=null;

        Object REGULAR_ID431_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 423) ) { return retval; }
            // Keys.g:2017:5: ({...}? => REGULAR_ID -> LONG_VK[$REGULAR_ID] )
            // Keys.g:2017:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("long"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "long_key", "input.LT(1).getText().equalsIgnoreCase(\"long\")");
            }
            REGULAR_ID431=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_long_key13107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID431);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2017:73: -> LONG_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LONG_VK, REGULAR_ID431));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 423, long_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "long_key"

    public static class read_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "read_key"
    // Keys.g:2020:1: read_key : {...}? => REGULAR_ID -> READ_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.read_key_return read_key() throws RecognitionException {
        OracleParser_Keys.read_key_return retval = new OracleParser_Keys.read_key_return();
        retval.start = input.LT(1);
        int read_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID432=null;

        Object REGULAR_ID432_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 424) ) { return retval; }
            // Keys.g:2021:5: ({...}? => REGULAR_ID -> READ_VK[$REGULAR_ID] )
            // Keys.g:2021:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("read"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "read_key", "input.LT(1).getText().equalsIgnoreCase(\"read\")");
            }
            REGULAR_ID432=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_read_key13135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID432);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2021:73: -> READ_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(READ_VK, REGULAR_ID432));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 424, read_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "read_key"

    public static class only_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "only_key"
    // Keys.g:2024:1: only_key : {...}? REGULAR_ID -> ONLY_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.only_key_return only_key() throws RecognitionException {
        OracleParser_Keys.only_key_return retval = new OracleParser_Keys.only_key_return();
        retval.start = input.LT(1);
        int only_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID433=null;

        Object REGULAR_ID433_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 425) ) { return retval; }
            // Keys.g:2025:5: ({...}? REGULAR_ID -> ONLY_VK[$REGULAR_ID] )
            // Keys.g:2025:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("only"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "only_key", "input.LT(1).getText().equalsIgnoreCase(\"only\")");
            }
            REGULAR_ID433=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_only_key13162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID433);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2025:71: -> ONLY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(ONLY_VK, REGULAR_ID433));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 425, only_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "only_key"

    public static class set_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_key"
    // Keys.g:2028:1: set_key : {...}? => REGULAR_ID -> SET_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.set_key_return set_key() throws RecognitionException {
        OracleParser_Keys.set_key_return retval = new OracleParser_Keys.set_key_return();
        retval.start = input.LT(1);
        int set_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID434=null;

        Object REGULAR_ID434_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 426) ) { return retval; }
            // Keys.g:2029:5: ({...}? => REGULAR_ID -> SET_VK[$REGULAR_ID] )
            // Keys.g:2029:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("set"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "set_key", "input.LT(1).getText().equalsIgnoreCase(\"set\")");
            }
            REGULAR_ID434=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_set_key13190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID434);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2029:72: -> SET_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SET_VK, REGULAR_ID434));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 426, set_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_key"

    public static class nullif_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nullif_key"
    // Keys.g:2032:1: nullif_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.nullif_key_return nullif_key() throws RecognitionException {
        OracleParser_Keys.nullif_key_return retval = new OracleParser_Keys.nullif_key_return();
        retval.start = input.LT(1);
        int nullif_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID435=null;

        Object REGULAR_ID435_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 427) ) { return retval; }
            // Keys.g:2033:5: ({...}? REGULAR_ID )
            // Keys.g:2033:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("nullif"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nullif_key", "input.LT(1).getText().equalsIgnoreCase(\"nullif\")");
            }
            REGULAR_ID435=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nullif_key13217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID435_tree = (Object)adaptor.create(REGULAR_ID435);
            adaptor.addChild(root_0, REGULAR_ID435_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 427, nullif_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nullif_key"

    public static class coalesce_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "coalesce_key"
    // Keys.g:2036:1: coalesce_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.coalesce_key_return coalesce_key() throws RecognitionException {
        OracleParser_Keys.coalesce_key_return retval = new OracleParser_Keys.coalesce_key_return();
        retval.start = input.LT(1);
        int coalesce_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID436=null;

        Object REGULAR_ID436_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 428) ) { return retval; }
            // Keys.g:2037:5: ({...}? REGULAR_ID )
            // Keys.g:2037:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("coalesce"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "coalesce_key", "input.LT(1).getText().equalsIgnoreCase(\"coalesce\")");
            }
            REGULAR_ID436=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_coalesce_key13239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID436_tree = (Object)adaptor.create(REGULAR_ID436);
            adaptor.addChild(root_0, REGULAR_ID436_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 428, coalesce_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "coalesce_key"

    public static class count_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "count_key"
    // Keys.g:2040:1: count_key : {...}? REGULAR_ID -> COUNT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.count_key_return count_key() throws RecognitionException {
        OracleParser_Keys.count_key_return retval = new OracleParser_Keys.count_key_return();
        retval.start = input.LT(1);
        int count_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID437=null;

        Object REGULAR_ID437_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 429) ) { return retval; }
            // Keys.g:2041:5: ({...}? REGULAR_ID -> COUNT_VK[$REGULAR_ID] )
            // Keys.g:2041:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("count"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "count_key", "input.LT(1).getText().equalsIgnoreCase(\"count\")");
            }
            REGULAR_ID437=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_count_key13261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID437);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2041:72: -> COUNT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(COUNT_VK, REGULAR_ID437));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 429, count_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "count_key"

    public static class avg_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "avg_key"
    // Keys.g:2044:1: avg_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.avg_key_return avg_key() throws RecognitionException {
        OracleParser_Keys.avg_key_return retval = new OracleParser_Keys.avg_key_return();
        retval.start = input.LT(1);
        int avg_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID438=null;

        Object REGULAR_ID438_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 430) ) { return retval; }
            // Keys.g:2044:12: ({...}? REGULAR_ID )
            // Keys.g:2044:17: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("avg"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "avg_key", "input.LT(1).getText().equalsIgnoreCase(\"avg\")");
            }
            REGULAR_ID438=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_avg_key13287); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID438_tree = (Object)adaptor.create(REGULAR_ID438);
            adaptor.addChild(root_0, REGULAR_ID438_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 430, avg_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "avg_key"

    public static class max_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "max_key"
    // Keys.g:2047:1: max_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.max_key_return max_key() throws RecognitionException {
        OracleParser_Keys.max_key_return retval = new OracleParser_Keys.max_key_return();
        retval.start = input.LT(1);
        int max_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID439=null;

        Object REGULAR_ID439_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 431) ) { return retval; }
            // Keys.g:2047:12: ({...}? REGULAR_ID )
            // Keys.g:2047:17: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("max"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "max_key", "input.LT(1).getText().equalsIgnoreCase(\"max\")");
            }
            REGULAR_ID439=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_max_key13308); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID439_tree = (Object)adaptor.create(REGULAR_ID439);
            adaptor.addChild(root_0, REGULAR_ID439_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 431, max_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "max_key"

    public static class min_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "min_key"
    // Keys.g:2050:1: min_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.min_key_return min_key() throws RecognitionException {
        OracleParser_Keys.min_key_return retval = new OracleParser_Keys.min_key_return();
        retval.start = input.LT(1);
        int min_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID440=null;

        Object REGULAR_ID440_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 432) ) { return retval; }
            // Keys.g:2050:12: ({...}? REGULAR_ID )
            // Keys.g:2050:17: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("min"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "min_key", "input.LT(1).getText().equalsIgnoreCase(\"min\")");
            }
            REGULAR_ID440=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_min_key13329); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID440_tree = (Object)adaptor.create(REGULAR_ID440);
            adaptor.addChild(root_0, REGULAR_ID440_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 432, min_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "min_key"

    public static class sum_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sum_key"
    // Keys.g:2053:1: sum_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.sum_key_return sum_key() throws RecognitionException {
        OracleParser_Keys.sum_key_return retval = new OracleParser_Keys.sum_key_return();
        retval.start = input.LT(1);
        int sum_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID441=null;

        Object REGULAR_ID441_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 433) ) { return retval; }
            // Keys.g:2053:12: ({...}? REGULAR_ID )
            // Keys.g:2053:17: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("sum"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sum_key", "input.LT(1).getText().equalsIgnoreCase(\"sum\")");
            }
            REGULAR_ID441=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sum_key13350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID441_tree = (Object)adaptor.create(REGULAR_ID441);
            adaptor.addChild(root_0, REGULAR_ID441_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 433, sum_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sum_key"

    public static class unknown_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unknown_key"
    // Keys.g:2056:1: unknown_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.unknown_key_return unknown_key() throws RecognitionException {
        OracleParser_Keys.unknown_key_return retval = new OracleParser_Keys.unknown_key_return();
        retval.start = input.LT(1);
        int unknown_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID442=null;

        Object REGULAR_ID442_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 434) ) { return retval; }
            // Keys.g:2057:5: ({...}? REGULAR_ID )
            // Keys.g:2057:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("unknown"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "unknown_key", "input.LT(1).getText().equalsIgnoreCase(\"unknown\")");
            }
            REGULAR_ID442=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_unknown_key13372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID442_tree = (Object)adaptor.create(REGULAR_ID442);
            adaptor.addChild(root_0, REGULAR_ID442_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 434, unknown_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unknown_key"

    public static class escape_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escape_key"
    // Keys.g:2060:1: escape_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.escape_key_return escape_key() throws RecognitionException {
        OracleParser_Keys.escape_key_return retval = new OracleParser_Keys.escape_key_return();
        retval.start = input.LT(1);
        int escape_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID443=null;

        Object REGULAR_ID443_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 435) ) { return retval; }
            // Keys.g:2061:5: ({...}? REGULAR_ID )
            // Keys.g:2061:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("escape"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "escape_key", "input.LT(1).getText().equalsIgnoreCase(\"escape\")");
            }
            REGULAR_ID443=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_escape_key13394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID443_tree = (Object)adaptor.create(REGULAR_ID443);
            adaptor.addChild(root_0, REGULAR_ID443_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 435, escape_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "escape_key"

    public static class some_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "some_key"
    // Keys.g:2064:1: some_key : {...}? REGULAR_ID -> SOME_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.some_key_return some_key() throws RecognitionException {
        OracleParser_Keys.some_key_return retval = new OracleParser_Keys.some_key_return();
        retval.start = input.LT(1);
        int some_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID444=null;

        Object REGULAR_ID444_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 436) ) { return retval; }
            // Keys.g:2065:5: ({...}? REGULAR_ID -> SOME_VK[$REGULAR_ID] )
            // Keys.g:2065:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("some"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "some_key", "input.LT(1).getText().equalsIgnoreCase(\"some\")");
            }
            REGULAR_ID444=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_some_key13416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID444);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2065:71: -> SOME_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SOME_VK, REGULAR_ID444));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 436, some_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "some_key"

    public static class match_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "match_key"
    // Keys.g:2068:1: match_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.match_key_return match_key() throws RecognitionException {
        OracleParser_Keys.match_key_return retval = new OracleParser_Keys.match_key_return();
        retval.start = input.LT(1);
        int match_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID445=null;

        Object REGULAR_ID445_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 437) ) { return retval; }
            // Keys.g:2069:5: ({...}? REGULAR_ID )
            // Keys.g:2069:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("match"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "match_key", "input.LT(1).getText().equalsIgnoreCase(\"match\")");
            }
            REGULAR_ID445=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_match_key13443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID445_tree = (Object)adaptor.create(REGULAR_ID445);
            adaptor.addChild(root_0, REGULAR_ID445_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 437, match_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "match_key"

    public static class cast_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cast_key"
    // Keys.g:2072:1: cast_key : {...}? REGULAR_ID -> CAST_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.cast_key_return cast_key() throws RecognitionException {
        OracleParser_Keys.cast_key_return retval = new OracleParser_Keys.cast_key_return();
        retval.start = input.LT(1);
        int cast_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID446=null;

        Object REGULAR_ID446_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 438) ) { return retval; }
            // Keys.g:2073:5: ({...}? REGULAR_ID -> CAST_VK[$REGULAR_ID] )
            // Keys.g:2073:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cast"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cast_key", "input.LT(1).getText().equalsIgnoreCase(\"cast\")");
            }
            REGULAR_ID446=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cast_key13465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID446);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2073:71: -> CAST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CAST_VK, REGULAR_ID446));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 438, cast_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cast_key"

    public static class full_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "full_key"
    // Keys.g:2076:1: full_key : {...}? => REGULAR_ID -> FULL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.full_key_return full_key() throws RecognitionException {
        OracleParser_Keys.full_key_return retval = new OracleParser_Keys.full_key_return();
        retval.start = input.LT(1);
        int full_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID447=null;

        Object REGULAR_ID447_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 439) ) { return retval; }
            // Keys.g:2076:9: ({...}? => REGULAR_ID -> FULL_VK[$REGULAR_ID] )
            // Keys.g:2076:14: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("full"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "full_key", "input.LT(1).getText().equalsIgnoreCase(\"full\")");
            }
            REGULAR_ID447=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_full_key13488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID447);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2076:77: -> FULL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FULL_VK, REGULAR_ID447));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 439, full_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "full_key"

    public static class partial_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "partial_key"
    // Keys.g:2079:1: partial_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.partial_key_return partial_key() throws RecognitionException {
        OracleParser_Keys.partial_key_return retval = new OracleParser_Keys.partial_key_return();
        retval.start = input.LT(1);
        int partial_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID448=null;

        Object REGULAR_ID448_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 440) ) { return retval; }
            // Keys.g:2080:5: ({...}? REGULAR_ID )
            // Keys.g:2080:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("partial"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "partial_key", "input.LT(1).getText().equalsIgnoreCase(\"partial\")");
            }
            REGULAR_ID448=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_partial_key13515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID448_tree = (Object)adaptor.create(REGULAR_ID448);
            adaptor.addChild(root_0, REGULAR_ID448_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 440, partial_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "partial_key"

    public static class character_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "character_key"
    // Keys.g:2083:1: character_key : {...}? => REGULAR_ID -> CHARACTER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.character_key_return character_key() throws RecognitionException {
        OracleParser_Keys.character_key_return retval = new OracleParser_Keys.character_key_return();
        retval.start = input.LT(1);
        int character_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID449=null;

        Object REGULAR_ID449_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 441) ) { return retval; }
            // Keys.g:2084:5: ({...}? => REGULAR_ID -> CHARACTER_VK[$REGULAR_ID] )
            // Keys.g:2084:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("character"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "character_key", "input.LT(1).getText().equalsIgnoreCase(\"character\")");
            }
            REGULAR_ID449=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_character_key13538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID449);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2084:78: -> CHARACTER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CHARACTER_VK, REGULAR_ID449));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 441, character_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "character_key"

    public static class except_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "except_key"
    // Keys.g:2087:1: except_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.except_key_return except_key() throws RecognitionException {
        OracleParser_Keys.except_key_return retval = new OracleParser_Keys.except_key_return();
        retval.start = input.LT(1);
        int except_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID450=null;

        Object REGULAR_ID450_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 442) ) { return retval; }
            // Keys.g:2088:5: ({...}? REGULAR_ID )
            // Keys.g:2088:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("except"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "except_key", "input.LT(1).getText().equalsIgnoreCase(\"except\")");
            }
            REGULAR_ID450=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_except_key13565); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID450_tree = (Object)adaptor.create(REGULAR_ID450);
            adaptor.addChild(root_0, REGULAR_ID450_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 442, except_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "except_key"

    public static class char_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_key"
    // Keys.g:2091:1: char_key : {...}? => REGULAR_ID -> CHAR_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.char_key_return char_key() throws RecognitionException {
        OracleParser_Keys.char_key_return retval = new OracleParser_Keys.char_key_return();
        retval.start = input.LT(1);
        int char_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID451=null;

        Object REGULAR_ID451_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 443) ) { return retval; }
            // Keys.g:2091:9: ({...}? => REGULAR_ID -> CHAR_VK[$REGULAR_ID] )
            // Keys.g:2091:14: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("char"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_key", "input.LT(1).getText().equalsIgnoreCase(\"char\")");
            }
            REGULAR_ID451=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_char_key13583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID451);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2091:77: -> CHAR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CHAR_VK, REGULAR_ID451));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 443, char_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "char_key"

    public static class varying_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varying_key"
    // Keys.g:2094:1: varying_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.varying_key_return varying_key() throws RecognitionException {
        OracleParser_Keys.varying_key_return retval = new OracleParser_Keys.varying_key_return();
        retval.start = input.LT(1);
        int varying_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID452=null;

        Object REGULAR_ID452_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 444) ) { return retval; }
            // Keys.g:2095:5: ({...}? => REGULAR_ID )
            // Keys.g:2095:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("varying"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "varying_key", "input.LT(1).getText().equalsIgnoreCase(\"varying\")");
            }
            REGULAR_ID452=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_varying_key13611); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID452_tree = (Object)adaptor.create(REGULAR_ID452);
            adaptor.addChild(root_0, REGULAR_ID452_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 444, varying_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varying_key"

    public static class varchar_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varchar_key"
    // Keys.g:2098:1: varchar_key : {...}? => REGULAR_ID -> VARCHAR_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.varchar_key_return varchar_key() throws RecognitionException {
        OracleParser_Keys.varchar_key_return retval = new OracleParser_Keys.varchar_key_return();
        retval.start = input.LT(1);
        int varchar_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID453=null;

        Object REGULAR_ID453_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 445) ) { return retval; }
            // Keys.g:2099:5: ({...}? => REGULAR_ID -> VARCHAR_VK[$REGULAR_ID] )
            // Keys.g:2099:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("varchar"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "varchar_key", "input.LT(1).getText().equalsIgnoreCase(\"varchar\")");
            }
            REGULAR_ID453=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_varchar_key13634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID453);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2099:76: -> VARCHAR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VARCHAR_VK, REGULAR_ID453));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 445, varchar_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varchar_key"

    public static class national_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "national_key"
    // Keys.g:2102:1: national_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.national_key_return national_key() throws RecognitionException {
        OracleParser_Keys.national_key_return retval = new OracleParser_Keys.national_key_return();
        retval.start = input.LT(1);
        int national_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID454=null;

        Object REGULAR_ID454_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 446) ) { return retval; }
            // Keys.g:2103:5: ({...}? REGULAR_ID )
            // Keys.g:2103:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("national"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "national_key", "input.LT(1).getText().equalsIgnoreCase(\"national\")");
            }
            REGULAR_ID454=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_national_key13661); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID454_tree = (Object)adaptor.create(REGULAR_ID454);
            adaptor.addChild(root_0, REGULAR_ID454_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 446, national_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "national_key"

    public static class nchar_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nchar_key"
    // Keys.g:2106:1: nchar_key : {...}? REGULAR_ID -> NCHAR_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nchar_key_return nchar_key() throws RecognitionException {
        OracleParser_Keys.nchar_key_return retval = new OracleParser_Keys.nchar_key_return();
        retval.start = input.LT(1);
        int nchar_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID455=null;

        Object REGULAR_ID455_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 447) ) { return retval; }
            // Keys.g:2107:5: ({...}? REGULAR_ID -> NCHAR_VK[$REGULAR_ID] )
            // Keys.g:2107:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nchar"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nchar_key", "input.LT(1).getText().equalsIgnoreCase(\"nchar\")");
            }
            REGULAR_ID455=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nchar_key13683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID455);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2107:72: -> NCHAR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NCHAR_VK, REGULAR_ID455));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 447, nchar_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nchar_key"

    public static class bit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bit_key"
    // Keys.g:2110:1: bit_key : {...}? REGULAR_ID -> BIT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.bit_key_return bit_key() throws RecognitionException {
        OracleParser_Keys.bit_key_return retval = new OracleParser_Keys.bit_key_return();
        retval.start = input.LT(1);
        int bit_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID456=null;

        Object REGULAR_ID456_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 448) ) { return retval; }
            // Keys.g:2110:12: ({...}? REGULAR_ID -> BIT_VK[$REGULAR_ID] )
            // Keys.g:2110:17: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("bit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "bit_key", "input.LT(1).getText().equalsIgnoreCase(\"bit\")");
            }
            REGULAR_ID456=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_bit_key13709); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID456);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2110:77: -> BIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BIT_VK, REGULAR_ID456));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 448, bit_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bit_key"

    public static class float_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "float_key"
    // Keys.g:2113:1: float_key : {...}? REGULAR_ID -> FLOAT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.float_key_return float_key() throws RecognitionException {
        OracleParser_Keys.float_key_return retval = new OracleParser_Keys.float_key_return();
        retval.start = input.LT(1);
        int float_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID457=null;

        Object REGULAR_ID457_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 449) ) { return retval; }
            // Keys.g:2114:5: ({...}? REGULAR_ID -> FLOAT_VK[$REGULAR_ID] )
            // Keys.g:2114:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("float"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "float_key", "input.LT(1).getText().equalsIgnoreCase(\"float\")");
            }
            REGULAR_ID457=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_float_key13736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID457);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2114:72: -> FLOAT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FLOAT_VK, REGULAR_ID457));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 449, float_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "float_key"

    public static class real_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "real_key"
    // Keys.g:2117:1: real_key : {...}? => REGULAR_ID -> REAL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.real_key_return real_key() throws RecognitionException {
        OracleParser_Keys.real_key_return retval = new OracleParser_Keys.real_key_return();
        retval.start = input.LT(1);
        int real_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID458=null;

        Object REGULAR_ID458_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 450) ) { return retval; }
            // Keys.g:2117:9: ({...}? => REGULAR_ID -> REAL_VK[$REGULAR_ID] )
            // Keys.g:2117:14: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("real"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "real_key", "input.LT(1).getText().equalsIgnoreCase(\"real\")");
            }
            REGULAR_ID458=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_real_key13763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID458);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2117:77: -> REAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(REAL_VK, REGULAR_ID458));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 450, real_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "real_key"

    public static class double_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "double_key"
    // Keys.g:2120:1: double_key : {...}? => REGULAR_ID -> DOUBLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.double_key_return double_key() throws RecognitionException {
        OracleParser_Keys.double_key_return retval = new OracleParser_Keys.double_key_return();
        retval.start = input.LT(1);
        int double_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID459=null;

        Object REGULAR_ID459_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 451) ) { return retval; }
            // Keys.g:2121:5: ({...}? => REGULAR_ID -> DOUBLE_VK[$REGULAR_ID] )
            // Keys.g:2121:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("double"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "double_key", "input.LT(1).getText().equalsIgnoreCase(\"double\")");
            }
            REGULAR_ID459=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_double_key13791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID459);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2121:75: -> DOUBLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DOUBLE_VK, REGULAR_ID459));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 451, double_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "double_key"

    public static class precision_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "precision_key"
    // Keys.g:2124:1: precision_key : {...}? REGULAR_ID -> PRECISION_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.precision_key_return precision_key() throws RecognitionException {
        OracleParser_Keys.precision_key_return retval = new OracleParser_Keys.precision_key_return();
        retval.start = input.LT(1);
        int precision_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID460=null;

        Object REGULAR_ID460_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 452) ) { return retval; }
            // Keys.g:2125:5: ({...}? REGULAR_ID -> PRECISION_VK[$REGULAR_ID] )
            // Keys.g:2125:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("precision"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "precision_key", "input.LT(1).getText().equalsIgnoreCase(\"precision\")");
            }
            REGULAR_ID460=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_precision_key13818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID460);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2125:76: -> PRECISION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PRECISION_VK, REGULAR_ID460));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 452, precision_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "precision_key"

    public static class interval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_key"
    // Keys.g:2128:1: interval_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.interval_key_return interval_key() throws RecognitionException {
        OracleParser_Keys.interval_key_return retval = new OracleParser_Keys.interval_key_return();
        retval.start = input.LT(1);
        int interval_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID461=null;

        Object REGULAR_ID461_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 453) ) { return retval; }
            // Keys.g:2129:5: ({...}? => REGULAR_ID )
            // Keys.g:2129:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("interval"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "interval_key", "input.LT(1).getText().equalsIgnoreCase(\"interval\")");
            }
            REGULAR_ID461=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_interval_key13846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID461_tree = (Object)adaptor.create(REGULAR_ID461);
            adaptor.addChild(root_0, REGULAR_ID461_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 453, interval_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_key"

    public static class time_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "time_key"
    // Keys.g:2132:1: time_key : {...}? REGULAR_ID -> TIME_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.time_key_return time_key() throws RecognitionException {
        OracleParser_Keys.time_key_return retval = new OracleParser_Keys.time_key_return();
        retval.start = input.LT(1);
        int time_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID462=null;

        Object REGULAR_ID462_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 454) ) { return retval; }
            // Keys.g:2133:5: ({...}? REGULAR_ID -> TIME_VK[$REGULAR_ID] )
            // Keys.g:2133:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("time"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "time_key", "input.LT(1).getText().equalsIgnoreCase(\"time\")");
            }
            REGULAR_ID462=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_time_key13868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID462);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2133:71: -> TIME_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TIME_VK, REGULAR_ID462));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 454, time_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "time_key"

    public static class zone_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "zone_key"
    // Keys.g:2136:1: zone_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.zone_key_return zone_key() throws RecognitionException {
        OracleParser_Keys.zone_key_return retval = new OracleParser_Keys.zone_key_return();
        retval.start = input.LT(1);
        int zone_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID463=null;

        Object REGULAR_ID463_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 455) ) { return retval; }
            // Keys.g:2136:9: ({...}? REGULAR_ID )
            // Keys.g:2136:14: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("zone"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "zone_key", "input.LT(1).getText().equalsIgnoreCase(\"zone\")");
            }
            REGULAR_ID463=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_zone_key13891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID463_tree = (Object)adaptor.create(REGULAR_ID463);
            adaptor.addChild(root_0, REGULAR_ID463_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 455, zone_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "zone_key"

    public static class timestamp_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_key"
    // Keys.g:2139:1: timestamp_key : {...}? REGULAR_ID -> TIMESTAMP_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.timestamp_key_return timestamp_key() throws RecognitionException {
        OracleParser_Keys.timestamp_key_return retval = new OracleParser_Keys.timestamp_key_return();
        retval.start = input.LT(1);
        int timestamp_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID464=null;

        Object REGULAR_ID464_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 456) ) { return retval; }
            // Keys.g:2140:5: ({...}? REGULAR_ID -> TIMESTAMP_VK[$REGULAR_ID] )
            // Keys.g:2140:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timestamp"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timestamp_key", "input.LT(1).getText().equalsIgnoreCase(\"timestamp\")");
            }
            REGULAR_ID464=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timestamp_key13913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID464);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2140:76: -> TIMESTAMP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TIMESTAMP_VK, REGULAR_ID464));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 456, timestamp_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_key"

    public static class date_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_key"
    // Keys.g:2143:1: date_key : SQL92_RESERVED_DATE ;
    public final OracleParser_Keys.date_key_return date_key() throws RecognitionException {
        OracleParser_Keys.date_key_return retval = new OracleParser_Keys.date_key_return();
        retval.start = input.LT(1);
        int date_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_DATE465=null;

        Object SQL92_RESERVED_DATE465_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 457) ) { return retval; }
            // Keys.g:2144:5: ( SQL92_RESERVED_DATE )
            // Keys.g:2144:10: SQL92_RESERVED_DATE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_DATE465=(Token)match(input,SQL92_RESERVED_DATE,FOLLOW_SQL92_RESERVED_DATE_in_date_key13938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DATE465_tree = (Object)adaptor.create(SQL92_RESERVED_DATE465);
            adaptor.addChild(root_0, SQL92_RESERVED_DATE465_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 457, date_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "date_key"

    public static class numeric_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric_key"
    // Keys.g:2147:1: numeric_key : {...}? => REGULAR_ID -> NUMERIC_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.numeric_key_return numeric_key() throws RecognitionException {
        OracleParser_Keys.numeric_key_return retval = new OracleParser_Keys.numeric_key_return();
        retval.start = input.LT(1);
        int numeric_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID466=null;

        Object REGULAR_ID466_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 458) ) { return retval; }
            // Keys.g:2148:5: ({...}? => REGULAR_ID -> NUMERIC_VK[$REGULAR_ID] )
            // Keys.g:2148:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("numeric"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "numeric_key", "input.LT(1).getText().equalsIgnoreCase(\"numeric\")");
            }
            REGULAR_ID466=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_numeric_key13961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID466);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2148:76: -> NUMERIC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NUMERIC_VK, REGULAR_ID466));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 458, numeric_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric_key"

    public static class decimal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decimal_key"
    // Keys.g:2151:1: decimal_key : {...}? => REGULAR_ID -> DECIMAL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.decimal_key_return decimal_key() throws RecognitionException {
        OracleParser_Keys.decimal_key_return retval = new OracleParser_Keys.decimal_key_return();
        retval.start = input.LT(1);
        int decimal_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID467=null;

        Object REGULAR_ID467_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 459) ) { return retval; }
            // Keys.g:2152:5: ({...}? => REGULAR_ID -> DECIMAL_VK[$REGULAR_ID] )
            // Keys.g:2152:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("decimal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "decimal_key", "input.LT(1).getText().equalsIgnoreCase(\"decimal\")");
            }
            REGULAR_ID467=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_decimal_key13989); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID467);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2152:76: -> DECIMAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DECIMAL_VK, REGULAR_ID467));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 459, decimal_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "decimal_key"

    public static class dec_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dec_key"
    // Keys.g:2155:1: dec_key : {...}? => REGULAR_ID -> DEC_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.dec_key_return dec_key() throws RecognitionException {
        OracleParser_Keys.dec_key_return retval = new OracleParser_Keys.dec_key_return();
        retval.start = input.LT(1);
        int dec_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID468=null;

        Object REGULAR_ID468_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 460) ) { return retval; }
            // Keys.g:2155:12: ({...}? => REGULAR_ID -> DEC_VK[$REGULAR_ID] )
            // Keys.g:2155:17: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("dec"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dec_key", "input.LT(1).getText().equalsIgnoreCase(\"dec\")");
            }
            REGULAR_ID468=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dec_key14016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID468);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2155:79: -> DEC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DEC_VK, REGULAR_ID468));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 460, dec_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dec_key"

    public static class integer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integer_key"
    // Keys.g:2158:1: integer_key : {...}? => REGULAR_ID -> INTEGER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.integer_key_return integer_key() throws RecognitionException {
        OracleParser_Keys.integer_key_return retval = new OracleParser_Keys.integer_key_return();
        retval.start = input.LT(1);
        int integer_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID469=null;

        Object REGULAR_ID469_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 461) ) { return retval; }
            // Keys.g:2159:5: ({...}? => REGULAR_ID -> INTEGER_VK[$REGULAR_ID] )
            // Keys.g:2159:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("integer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "integer_key", "input.LT(1).getText().equalsIgnoreCase(\"integer\")");
            }
            REGULAR_ID469=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_integer_key14044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID469);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2159:76: -> INTEGER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INTEGER_VK, REGULAR_ID469));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 461, integer_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integer_key"

    public static class int_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "int_key"
    // Keys.g:2162:1: int_key : {...}? => REGULAR_ID -> INT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.int_key_return int_key() throws RecognitionException {
        OracleParser_Keys.int_key_return retval = new OracleParser_Keys.int_key_return();
        retval.start = input.LT(1);
        int int_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID470=null;

        Object REGULAR_ID470_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 462) ) { return retval; }
            // Keys.g:2162:12: ({...}? => REGULAR_ID -> INT_VK[$REGULAR_ID] )
            // Keys.g:2162:17: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("int"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "int_key", "input.LT(1).getText().equalsIgnoreCase(\"int\")");
            }
            REGULAR_ID470=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_int_key14071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID470);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2162:79: -> INT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(INT_VK, REGULAR_ID470));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 462, int_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "int_key"

    public static class smallint_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "smallint_key"
    // Keys.g:2165:1: smallint_key : {...}? => REGULAR_ID -> SMALLINT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.smallint_key_return smallint_key() throws RecognitionException {
        OracleParser_Keys.smallint_key_return retval = new OracleParser_Keys.smallint_key_return();
        retval.start = input.LT(1);
        int smallint_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID471=null;

        Object REGULAR_ID471_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 463) ) { return retval; }
            // Keys.g:2166:5: ({...}? => REGULAR_ID -> SMALLINT_VK[$REGULAR_ID] )
            // Keys.g:2166:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("smallint"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "smallint_key", "input.LT(1).getText().equalsIgnoreCase(\"smallint\")");
            }
            REGULAR_ID471=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_smallint_key14099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID471);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2166:77: -> SMALLINT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SMALLINT_VK, REGULAR_ID471));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 463, smallint_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "smallint_key"

    public static class corresponding_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "corresponding_key"
    // Keys.g:2169:1: corresponding_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.corresponding_key_return corresponding_key() throws RecognitionException {
        OracleParser_Keys.corresponding_key_return retval = new OracleParser_Keys.corresponding_key_return();
        retval.start = input.LT(1);
        int corresponding_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID472=null;

        Object REGULAR_ID472_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 464) ) { return retval; }
            // Keys.g:2170:5: ({...}? REGULAR_ID )
            // Keys.g:2170:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("corresponding"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "corresponding_key", "input.LT(1).getText().equalsIgnoreCase(\"corresponding\")");
            }
            REGULAR_ID472=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_corresponding_key14126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID472_tree = (Object)adaptor.create(REGULAR_ID472);
            adaptor.addChild(root_0, REGULAR_ID472_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 464, corresponding_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "corresponding_key"

    public static class cross_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cross_key"
    // Keys.g:2173:1: cross_key : {...}? => REGULAR_ID -> CROSS_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.cross_key_return cross_key() throws RecognitionException {
        OracleParser_Keys.cross_key_return retval = new OracleParser_Keys.cross_key_return();
        retval.start = input.LT(1);
        int cross_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID473=null;

        Object REGULAR_ID473_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 465) ) { return retval; }
            // Keys.g:2174:5: ({...}? => REGULAR_ID -> CROSS_VK[$REGULAR_ID] )
            // Keys.g:2174:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cross"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cross_key", "input.LT(1).getText().equalsIgnoreCase(\"cross\")");
            }
            REGULAR_ID473=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cross_key14149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID473);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2174:74: -> CROSS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CROSS_VK, REGULAR_ID473));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 465, cross_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cross_key"

    public static class join_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "join_key"
    // Keys.g:2177:1: join_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.join_key_return join_key() throws RecognitionException {
        OracleParser_Keys.join_key_return retval = new OracleParser_Keys.join_key_return();
        retval.start = input.LT(1);
        int join_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID474=null;

        Object REGULAR_ID474_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 466) ) { return retval; }
            // Keys.g:2178:5: ({...}? => REGULAR_ID )
            // Keys.g:2178:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("join"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "join_key", "input.LT(1).getText().equalsIgnoreCase(\"join\")");
            }
            REGULAR_ID474=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_join_key14177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID474_tree = (Object)adaptor.create(REGULAR_ID474);
            adaptor.addChild(root_0, REGULAR_ID474_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 466, join_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "join_key"

    public static class left_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "left_key"
    // Keys.g:2181:1: left_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.left_key_return left_key() throws RecognitionException {
        OracleParser_Keys.left_key_return retval = new OracleParser_Keys.left_key_return();
        retval.start = input.LT(1);
        int left_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID475=null;

        Object REGULAR_ID475_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 467) ) { return retval; }
            // Keys.g:2182:5: ({...}? => REGULAR_ID )
            // Keys.g:2182:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("left"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "left_key", "input.LT(1).getText().equalsIgnoreCase(\"left\")");
            }
            REGULAR_ID475=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_left_key14200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID475_tree = (Object)adaptor.create(REGULAR_ID475);
            adaptor.addChild(root_0, REGULAR_ID475_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 467, left_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "left_key"

    public static class right_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "right_key"
    // Keys.g:2185:1: right_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.right_key_return right_key() throws RecognitionException {
        OracleParser_Keys.right_key_return retval = new OracleParser_Keys.right_key_return();
        retval.start = input.LT(1);
        int right_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID476=null;

        Object REGULAR_ID476_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 468) ) { return retval; }
            // Keys.g:2186:5: ({...}? => REGULAR_ID )
            // Keys.g:2186:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("right"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "right_key", "input.LT(1).getText().equalsIgnoreCase(\"right\")");
            }
            REGULAR_ID476=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_right_key14224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID476_tree = (Object)adaptor.create(REGULAR_ID476);
            adaptor.addChild(root_0, REGULAR_ID476_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 468, right_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "right_key"

    public static class inner_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inner_key"
    // Keys.g:2189:1: inner_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.inner_key_return inner_key() throws RecognitionException {
        OracleParser_Keys.inner_key_return retval = new OracleParser_Keys.inner_key_return();
        retval.start = input.LT(1);
        int inner_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID477=null;

        Object REGULAR_ID477_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 469) ) { return retval; }
            // Keys.g:2190:5: ({...}? => REGULAR_ID )
            // Keys.g:2190:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("inner"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "inner_key", "input.LT(1).getText().equalsIgnoreCase(\"inner\")");
            }
            REGULAR_ID477=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_inner_key14247); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID477_tree = (Object)adaptor.create(REGULAR_ID477);
            adaptor.addChild(root_0, REGULAR_ID477_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 469, inner_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inner_key"

    public static class natural_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "natural_key"
    // Keys.g:2193:1: natural_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.natural_key_return natural_key() throws RecognitionException {
        OracleParser_Keys.natural_key_return retval = new OracleParser_Keys.natural_key_return();
        retval.start = input.LT(1);
        int natural_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID478=null;

        Object REGULAR_ID478_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 470) ) { return retval; }
            // Keys.g:2194:5: ({...}? => REGULAR_ID )
            // Keys.g:2194:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("natural"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "natural_key", "input.LT(1).getText().equalsIgnoreCase(\"natural\")");
            }
            REGULAR_ID478=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_natural_key14270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID478_tree = (Object)adaptor.create(REGULAR_ID478);
            adaptor.addChild(root_0, REGULAR_ID478_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 470, natural_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "natural_key"

    public static class outer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outer_key"
    // Keys.g:2197:1: outer_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.outer_key_return outer_key() throws RecognitionException {
        OracleParser_Keys.outer_key_return retval = new OracleParser_Keys.outer_key_return();
        retval.start = input.LT(1);
        int outer_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID479=null;

        Object REGULAR_ID479_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 471) ) { return retval; }
            // Keys.g:2198:5: ({...}? => REGULAR_ID )
            // Keys.g:2198:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("outer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "outer_key", "input.LT(1).getText().equalsIgnoreCase(\"outer\")");
            }
            REGULAR_ID479=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_outer_key14293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID479_tree = (Object)adaptor.create(REGULAR_ID479);
            adaptor.addChild(root_0, REGULAR_ID479_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 471, outer_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "outer_key"

    public static class using_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_key"
    // Keys.g:2201:1: using_key : PLSQL_NON_RESERVED_USING ;
    public final OracleParser_Keys.using_key_return using_key() throws RecognitionException {
        OracleParser_Keys.using_key_return retval = new OracleParser_Keys.using_key_return();
        retval.start = input.LT(1);
        int using_key_StartIndex = input.index();
        Object root_0 = null;

        Token PLSQL_NON_RESERVED_USING480=null;

        Object PLSQL_NON_RESERVED_USING480_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 472) ) { return retval; }
            // Keys.g:2202:5: ( PLSQL_NON_RESERVED_USING )
            // Keys.g:2202:10: PLSQL_NON_RESERVED_USING
            {
            root_0 = (Object)adaptor.nil();

            PLSQL_NON_RESERVED_USING480=(Token)match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_using_key14313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_NON_RESERVED_USING480_tree = (Object)adaptor.create(PLSQL_NON_RESERVED_USING480);
            adaptor.addChild(root_0, PLSQL_NON_RESERVED_USING480_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 472, using_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_key"

    public static class indicator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indicator_key"
    // Keys.g:2205:1: indicator_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.indicator_key_return indicator_key() throws RecognitionException {
        OracleParser_Keys.indicator_key_return retval = new OracleParser_Keys.indicator_key_return();
        retval.start = input.LT(1);
        int indicator_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID481=null;

        Object REGULAR_ID481_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 473) ) { return retval; }
            // Keys.g:2206:5: ({...}? REGULAR_ID )
            // Keys.g:2206:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("indicator"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "indicator_key", "input.LT(1).getText().equalsIgnoreCase(\"indicator\")");
            }
            REGULAR_ID481=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_indicator_key14335); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID481_tree = (Object)adaptor.create(REGULAR_ID481);
            adaptor.addChild(root_0, REGULAR_ID481_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 473, indicator_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "indicator_key"

    public static class user_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "user_key"
    // Keys.g:2209:1: user_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.user_key_return user_key() throws RecognitionException {
        OracleParser_Keys.user_key_return retval = new OracleParser_Keys.user_key_return();
        retval.start = input.LT(1);
        int user_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID482=null;

        Object REGULAR_ID482_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 474) ) { return retval; }
            // Keys.g:2210:5: ({...}? REGULAR_ID )
            // Keys.g:2210:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("user"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "user_key", "input.LT(1).getText().equalsIgnoreCase(\"user\")");
            }
            REGULAR_ID482=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_user_key14357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID482_tree = (Object)adaptor.create(REGULAR_ID482);
            adaptor.addChild(root_0, REGULAR_ID482_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 474, user_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "user_key"

    public static class current_user_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "current_user_key"
    // Keys.g:2213:1: current_user_key : {...}? REGULAR_ID -> CURRENT_USER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.current_user_key_return current_user_key() throws RecognitionException {
        OracleParser_Keys.current_user_key_return retval = new OracleParser_Keys.current_user_key_return();
        retval.start = input.LT(1);
        int current_user_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID483=null;

        Object REGULAR_ID483_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 475) ) { return retval; }
            // Keys.g:2214:5: ({...}? REGULAR_ID -> CURRENT_USER_VK[$REGULAR_ID] )
            // Keys.g:2214:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("current_user"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "current_user_key", "input.LT(1).getText().equalsIgnoreCase(\"current_user\")");
            }
            REGULAR_ID483=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_current_user_key14379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID483);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2214:79: -> CURRENT_USER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CURRENT_USER_VK, REGULAR_ID483));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 475, current_user_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "current_user_key"

    public static class session_user_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "session_user_key"
    // Keys.g:2217:1: session_user_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.session_user_key_return session_user_key() throws RecognitionException {
        OracleParser_Keys.session_user_key_return retval = new OracleParser_Keys.session_user_key_return();
        retval.start = input.LT(1);
        int session_user_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID484=null;

        Object REGULAR_ID484_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 476) ) { return retval; }
            // Keys.g:2218:5: ({...}? REGULAR_ID )
            // Keys.g:2218:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("session_user"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "session_user_key", "input.LT(1).getText().equalsIgnoreCase(\"session_user\")");
            }
            REGULAR_ID484=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_session_user_key14406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID484_tree = (Object)adaptor.create(REGULAR_ID484);
            adaptor.addChild(root_0, REGULAR_ID484_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 476, session_user_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "session_user_key"

    public static class system_user_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "system_user_key"
    // Keys.g:2221:1: system_user_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.system_user_key_return system_user_key() throws RecognitionException {
        OracleParser_Keys.system_user_key_return retval = new OracleParser_Keys.system_user_key_return();
        retval.start = input.LT(1);
        int system_user_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID485=null;

        Object REGULAR_ID485_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 477) ) { return retval; }
            // Keys.g:2222:5: ({...}? REGULAR_ID )
            // Keys.g:2222:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("system_user"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "system_user_key", "input.LT(1).getText().equalsIgnoreCase(\"system_user\")");
            }
            REGULAR_ID485=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_system_user_key14428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID485_tree = (Object)adaptor.create(REGULAR_ID485);
            adaptor.addChild(root_0, REGULAR_ID485_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 477, system_user_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "system_user_key"

    public static class value_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "value_key"
    // Keys.g:2225:1: value_key : {...}? REGULAR_ID -> VALUE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.value_key_return value_key() throws RecognitionException {
        OracleParser_Keys.value_key_return retval = new OracleParser_Keys.value_key_return();
        retval.start = input.LT(1);
        int value_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID486=null;

        Object REGULAR_ID486_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 478) ) { return retval; }
            // Keys.g:2226:5: ({...}? REGULAR_ID -> VALUE_VK[$REGULAR_ID] )
            // Keys.g:2226:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("value"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "value_key", "input.LT(1).getText().equalsIgnoreCase(\"value\")");
            }
            REGULAR_ID486=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_value_key14450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID486);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2226:72: -> VALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VALUE_VK, REGULAR_ID486));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 478, value_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "value_key"

    public static class substring_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substring_key"
    // Keys.g:2229:1: substring_key : {...}? => REGULAR_ID ;
    public final OracleParser_Keys.substring_key_return substring_key() throws RecognitionException {
        OracleParser_Keys.substring_key_return retval = new OracleParser_Keys.substring_key_return();
        retval.start = input.LT(1);
        int substring_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID487=null;

        Object REGULAR_ID487_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 479) ) { return retval; }
            // Keys.g:2230:5: ({...}? => REGULAR_ID )
            // Keys.g:2230:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("substring"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "substring_key", "input.LT(1).getText().equalsIgnoreCase(\"substring\")");
            }
            REGULAR_ID487=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_substring_key14478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID487_tree = (Object)adaptor.create(REGULAR_ID487);
            adaptor.addChild(root_0, REGULAR_ID487_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 479, substring_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "substring_key"

    public static class upper_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "upper_key"
    // Keys.g:2233:1: upper_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.upper_key_return upper_key() throws RecognitionException {
        OracleParser_Keys.upper_key_return retval = new OracleParser_Keys.upper_key_return();
        retval.start = input.LT(1);
        int upper_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID488=null;

        Object REGULAR_ID488_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 480) ) { return retval; }
            // Keys.g:2234:5: ({...}? REGULAR_ID )
            // Keys.g:2234:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("upper"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "upper_key", "input.LT(1).getText().equalsIgnoreCase(\"upper\")");
            }
            REGULAR_ID488=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_upper_key14500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID488_tree = (Object)adaptor.create(REGULAR_ID488);
            adaptor.addChild(root_0, REGULAR_ID488_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 480, upper_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "upper_key"

    public static class lower_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lower_key"
    // Keys.g:2237:1: lower_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.lower_key_return lower_key() throws RecognitionException {
        OracleParser_Keys.lower_key_return retval = new OracleParser_Keys.lower_key_return();
        retval.start = input.LT(1);
        int lower_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID489=null;

        Object REGULAR_ID489_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 481) ) { return retval; }
            // Keys.g:2238:5: ({...}? REGULAR_ID )
            // Keys.g:2238:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("lower"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "lower_key", "input.LT(1).getText().equalsIgnoreCase(\"lower\")");
            }
            REGULAR_ID489=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_lower_key14522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID489_tree = (Object)adaptor.create(REGULAR_ID489);
            adaptor.addChild(root_0, REGULAR_ID489_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 481, lower_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lower_key"

    public static class convert_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "convert_key"
    // Keys.g:2241:1: convert_key : {...}? REGULAR_ID -> CONVERT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.convert_key_return convert_key() throws RecognitionException {
        OracleParser_Keys.convert_key_return retval = new OracleParser_Keys.convert_key_return();
        retval.start = input.LT(1);
        int convert_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID490=null;

        Object REGULAR_ID490_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 482) ) { return retval; }
            // Keys.g:2242:5: ({...}? REGULAR_ID -> CONVERT_VK[$REGULAR_ID] )
            // Keys.g:2242:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("convert"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "convert_key", "input.LT(1).getText().equalsIgnoreCase(\"convert\")");
            }
            REGULAR_ID490=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_convert_key14544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID490);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2242:74: -> CONVERT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CONVERT_VK, REGULAR_ID490));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 482, convert_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "convert_key"

    public static class translate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "translate_key"
    // Keys.g:2245:1: translate_key : {...}? REGULAR_ID -> TRANSLATE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.translate_key_return translate_key() throws RecognitionException {
        OracleParser_Keys.translate_key_return retval = new OracleParser_Keys.translate_key_return();
        retval.start = input.LT(1);
        int translate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID491=null;

        Object REGULAR_ID491_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 483) ) { return retval; }
            // Keys.g:2246:5: ({...}? REGULAR_ID -> TRANSLATE_VK[$REGULAR_ID] )
            // Keys.g:2246:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("translate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "translate_key", "input.LT(1).getText().equalsIgnoreCase(\"translate\")");
            }
            REGULAR_ID491=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_translate_key14571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID491);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2246:76: -> TRANSLATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TRANSLATE_VK, REGULAR_ID491));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 483, translate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "translate_key"

    public static class trim_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trim_key"
    // Keys.g:2249:1: trim_key : {...}? REGULAR_ID -> TRIM_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.trim_key_return trim_key() throws RecognitionException {
        OracleParser_Keys.trim_key_return retval = new OracleParser_Keys.trim_key_return();
        retval.start = input.LT(1);
        int trim_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID492=null;

        Object REGULAR_ID492_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 484) ) { return retval; }
            // Keys.g:2250:5: ({...}? REGULAR_ID -> TRIM_VK[$REGULAR_ID] )
            // Keys.g:2250:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("trim"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "trim_key", "input.LT(1).getText().equalsIgnoreCase(\"trim\")");
            }
            REGULAR_ID492=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_trim_key14598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID492);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2250:71: -> TRIM_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TRIM_VK, REGULAR_ID492));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 484, trim_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trim_key"

    public static class leading_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "leading_key"
    // Keys.g:2253:1: leading_key : {...}? REGULAR_ID -> LEADING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.leading_key_return leading_key() throws RecognitionException {
        OracleParser_Keys.leading_key_return retval = new OracleParser_Keys.leading_key_return();
        retval.start = input.LT(1);
        int leading_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID493=null;

        Object REGULAR_ID493_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 485) ) { return retval; }
            // Keys.g:2254:5: ({...}? REGULAR_ID -> LEADING_VK[$REGULAR_ID] )
            // Keys.g:2254:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("leading"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "leading_key", "input.LT(1).getText().equalsIgnoreCase(\"leading\")");
            }
            REGULAR_ID493=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_leading_key14625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID493);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2254:74: -> LEADING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LEADING_VK, REGULAR_ID493));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 485, leading_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "leading_key"

    public static class trailing_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trailing_key"
    // Keys.g:2257:1: trailing_key : {...}? REGULAR_ID -> TRAILING_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.trailing_key_return trailing_key() throws RecognitionException {
        OracleParser_Keys.trailing_key_return retval = new OracleParser_Keys.trailing_key_return();
        retval.start = input.LT(1);
        int trailing_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID494=null;

        Object REGULAR_ID494_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 486) ) { return retval; }
            // Keys.g:2258:5: ({...}? REGULAR_ID -> TRAILING_VK[$REGULAR_ID] )
            // Keys.g:2258:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("trailing"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "trailing_key", "input.LT(1).getText().equalsIgnoreCase(\"trailing\")");
            }
            REGULAR_ID494=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_trailing_key14652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID494);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2258:75: -> TRAILING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TRAILING_VK, REGULAR_ID494));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 486, trailing_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trailing_key"

    public static class both_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "both_key"
    // Keys.g:2261:1: both_key : {...}? REGULAR_ID -> BOTH_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.both_key_return both_key() throws RecognitionException {
        OracleParser_Keys.both_key_return retval = new OracleParser_Keys.both_key_return();
        retval.start = input.LT(1);
        int both_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID495=null;

        Object REGULAR_ID495_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 487) ) { return retval; }
            // Keys.g:2262:5: ({...}? REGULAR_ID -> BOTH_VK[$REGULAR_ID] )
            // Keys.g:2262:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("both"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "both_key", "input.LT(1).getText().equalsIgnoreCase(\"both\")");
            }
            REGULAR_ID495=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_both_key14679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID495);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2262:71: -> BOTH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BOTH_VK, REGULAR_ID495));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 487, both_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "both_key"

    public static class collate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collate_key"
    // Keys.g:2265:1: collate_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.collate_key_return collate_key() throws RecognitionException {
        OracleParser_Keys.collate_key_return retval = new OracleParser_Keys.collate_key_return();
        retval.start = input.LT(1);
        int collate_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID496=null;

        Object REGULAR_ID496_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 488) ) { return retval; }
            // Keys.g:2266:5: ({...}? REGULAR_ID )
            // Keys.g:2266:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("collate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "collate_key", "input.LT(1).getText().equalsIgnoreCase(\"collate\")");
            }
            REGULAR_ID496=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_collate_key14706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID496_tree = (Object)adaptor.create(REGULAR_ID496);
            adaptor.addChild(root_0, REGULAR_ID496_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 488, collate_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collate_key"

    public static class position_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "position_key"
    // Keys.g:2269:1: position_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.position_key_return position_key() throws RecognitionException {
        OracleParser_Keys.position_key_return retval = new OracleParser_Keys.position_key_return();
        retval.start = input.LT(1);
        int position_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID497=null;

        Object REGULAR_ID497_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 489) ) { return retval; }
            // Keys.g:2270:5: ({...}? REGULAR_ID )
            // Keys.g:2270:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("position"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "position_key", "input.LT(1).getText().equalsIgnoreCase(\"position\")");
            }
            REGULAR_ID497=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_position_key14728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID497_tree = (Object)adaptor.create(REGULAR_ID497);
            adaptor.addChild(root_0, REGULAR_ID497_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 489, position_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "position_key"

    public static class extract_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extract_key"
    // Keys.g:2273:1: extract_key : {...}? REGULAR_ID -> EXTRACT_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.extract_key_return extract_key() throws RecognitionException {
        OracleParser_Keys.extract_key_return retval = new OracleParser_Keys.extract_key_return();
        retval.start = input.LT(1);
        int extract_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID498=null;

        Object REGULAR_ID498_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 490) ) { return retval; }
            // Keys.g:2274:5: ({...}? REGULAR_ID -> EXTRACT_VK[$REGULAR_ID] )
            // Keys.g:2274:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("extract"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extract_key", "input.LT(1).getText().equalsIgnoreCase(\"extract\")");
            }
            REGULAR_ID498=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_extract_key14750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID498);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2274:74: -> EXTRACT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(EXTRACT_VK, REGULAR_ID498));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 490, extract_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "extract_key"

    public static class second_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "second_key"
    // Keys.g:2277:1: second_key : {...}? REGULAR_ID -> SECOND_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.second_key_return second_key() throws RecognitionException {
        OracleParser_Keys.second_key_return retval = new OracleParser_Keys.second_key_return();
        retval.start = input.LT(1);
        int second_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID499=null;

        Object REGULAR_ID499_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 491) ) { return retval; }
            // Keys.g:2278:5: ({...}? REGULAR_ID -> SECOND_VK[$REGULAR_ID] )
            // Keys.g:2278:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("second"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "second_key", "input.LT(1).getText().equalsIgnoreCase(\"second\")");
            }
            REGULAR_ID499=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_second_key14777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID499);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2278:73: -> SECOND_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SECOND_VK, REGULAR_ID499));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 491, second_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "second_key"

    public static class timezone_hour_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timezone_hour_key"
    // Keys.g:2281:1: timezone_hour_key : {...}? REGULAR_ID -> TIMEZONE_HOUR_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.timezone_hour_key_return timezone_hour_key() throws RecognitionException {
        OracleParser_Keys.timezone_hour_key_return retval = new OracleParser_Keys.timezone_hour_key_return();
        retval.start = input.LT(1);
        int timezone_hour_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID500=null;

        Object REGULAR_ID500_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 492) ) { return retval; }
            // Keys.g:2282:5: ({...}? REGULAR_ID -> TIMEZONE_HOUR_VK[$REGULAR_ID] )
            // Keys.g:2282:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timezone_hour"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timezone_hour_key", "input.LT(1).getText().equalsIgnoreCase(\"timezone_hour\")");
            }
            REGULAR_ID500=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timezone_hour_key14804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID500);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2282:80: -> TIMEZONE_HOUR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TIMEZONE_HOUR_VK, REGULAR_ID500));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 492, timezone_hour_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timezone_hour_key"

    public static class timezone_minute_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timezone_minute_key"
    // Keys.g:2285:1: timezone_minute_key : {...}? REGULAR_ID -> TIMEZONE_MINUTE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.timezone_minute_key_return timezone_minute_key() throws RecognitionException {
        OracleParser_Keys.timezone_minute_key_return retval = new OracleParser_Keys.timezone_minute_key_return();
        retval.start = input.LT(1);
        int timezone_minute_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID501=null;

        Object REGULAR_ID501_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 493) ) { return retval; }
            // Keys.g:2286:5: ({...}? REGULAR_ID -> TIMEZONE_MINUTE_VK[$REGULAR_ID] )
            // Keys.g:2286:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timezone_minute"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timezone_minute_key", "input.LT(1).getText().equalsIgnoreCase(\"timezone_minute\")");
            }
            REGULAR_ID501=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timezone_minute_key14831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID501);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2286:82: -> TIMEZONE_MINUTE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(TIMEZONE_MINUTE_VK, REGULAR_ID501));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 493, timezone_minute_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timezone_minute_key"

    public static class char_length_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_length_key"
    // Keys.g:2289:1: char_length_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.char_length_key_return char_length_key() throws RecognitionException {
        OracleParser_Keys.char_length_key_return retval = new OracleParser_Keys.char_length_key_return();
        retval.start = input.LT(1);
        int char_length_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID502=null;

        Object REGULAR_ID502_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 494) ) { return retval; }
            // Keys.g:2290:5: ({...}? REGULAR_ID )
            // Keys.g:2290:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("char_length"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_length_key", "input.LT(1).getText().equalsIgnoreCase(\"char_length\")");
            }
            REGULAR_ID502=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_char_length_key14858); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID502_tree = (Object)adaptor.create(REGULAR_ID502);
            adaptor.addChild(root_0, REGULAR_ID502_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 494, char_length_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "char_length_key"

    public static class octet_length_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "octet_length_key"
    // Keys.g:2293:1: octet_length_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.octet_length_key_return octet_length_key() throws RecognitionException {
        OracleParser_Keys.octet_length_key_return retval = new OracleParser_Keys.octet_length_key_return();
        retval.start = input.LT(1);
        int octet_length_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID503=null;

        Object REGULAR_ID503_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 495) ) { return retval; }
            // Keys.g:2294:5: ({...}? REGULAR_ID )
            // Keys.g:2294:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("octet_length"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "octet_length_key", "input.LT(1).getText().equalsIgnoreCase(\"octet_length\")");
            }
            REGULAR_ID503=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_octet_length_key14880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID503_tree = (Object)adaptor.create(REGULAR_ID503);
            adaptor.addChild(root_0, REGULAR_ID503_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 495, octet_length_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "octet_length_key"

    public static class character_length_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "character_length_key"
    // Keys.g:2297:1: character_length_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.character_length_key_return character_length_key() throws RecognitionException {
        OracleParser_Keys.character_length_key_return retval = new OracleParser_Keys.character_length_key_return();
        retval.start = input.LT(1);
        int character_length_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID504=null;

        Object REGULAR_ID504_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 496) ) { return retval; }
            // Keys.g:2298:5: ({...}? REGULAR_ID )
            // Keys.g:2298:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("character_length"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "character_length_key", "input.LT(1).getText().equalsIgnoreCase(\"character_length\")");
            }
            REGULAR_ID504=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_character_length_key14902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID504_tree = (Object)adaptor.create(REGULAR_ID504);
            adaptor.addChild(root_0, REGULAR_ID504_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 496, character_length_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "character_length_key"

    public static class bit_length_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bit_length_key"
    // Keys.g:2301:1: bit_length_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.bit_length_key_return bit_length_key() throws RecognitionException {
        OracleParser_Keys.bit_length_key_return retval = new OracleParser_Keys.bit_length_key_return();
        retval.start = input.LT(1);
        int bit_length_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID505=null;

        Object REGULAR_ID505_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 497) ) { return retval; }
            // Keys.g:2302:5: ({...}? REGULAR_ID )
            // Keys.g:2302:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("bit_length"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "bit_length_key", "input.LT(1).getText().equalsIgnoreCase(\"bit_length\")");
            }
            REGULAR_ID505=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_bit_length_key14924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID505_tree = (Object)adaptor.create(REGULAR_ID505);
            adaptor.addChild(root_0, REGULAR_ID505_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 497, bit_length_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bit_length_key"

    public static class local_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_key"
    // Keys.g:2305:1: local_key : {...}? REGULAR_ID -> LOCAL_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.local_key_return local_key() throws RecognitionException {
        OracleParser_Keys.local_key_return retval = new OracleParser_Keys.local_key_return();
        retval.start = input.LT(1);
        int local_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID506=null;

        Object REGULAR_ID506_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 498) ) { return retval; }
            // Keys.g:2306:5: ({...}? REGULAR_ID -> LOCAL_VK[$REGULAR_ID] )
            // Keys.g:2306:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("local"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "local_key", "input.LT(1).getText().equalsIgnoreCase(\"local\")");
            }
            REGULAR_ID506=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_local_key14946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID506);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2306:72: -> LOCAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(LOCAL_VK, REGULAR_ID506));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 498, local_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_key"

    public static class current_timestamp_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "current_timestamp_key"
    // Keys.g:2309:1: current_timestamp_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.current_timestamp_key_return current_timestamp_key() throws RecognitionException {
        OracleParser_Keys.current_timestamp_key_return retval = new OracleParser_Keys.current_timestamp_key_return();
        retval.start = input.LT(1);
        int current_timestamp_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID507=null;

        Object REGULAR_ID507_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 499) ) { return retval; }
            // Keys.g:2310:5: ({...}? REGULAR_ID )
            // Keys.g:2310:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("current_timestamp"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "current_timestamp_key", "input.LT(1).getText().equalsIgnoreCase(\"current_timestamp\")");
            }
            REGULAR_ID507=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_current_timestamp_key14973); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID507_tree = (Object)adaptor.create(REGULAR_ID507);
            adaptor.addChild(root_0, REGULAR_ID507_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 499, current_timestamp_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "current_timestamp_key"

    public static class current_date_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "current_date_key"
    // Keys.g:2313:1: current_date_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.current_date_key_return current_date_key() throws RecognitionException {
        OracleParser_Keys.current_date_key_return retval = new OracleParser_Keys.current_date_key_return();
        retval.start = input.LT(1);
        int current_date_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID508=null;

        Object REGULAR_ID508_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 500) ) { return retval; }
            // Keys.g:2314:5: ({...}? REGULAR_ID )
            // Keys.g:2314:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("current_date"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "current_date_key", "input.LT(1).getText().equalsIgnoreCase(\"current_date\")");
            }
            REGULAR_ID508=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_current_date_key14995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID508_tree = (Object)adaptor.create(REGULAR_ID508);
            adaptor.addChild(root_0, REGULAR_ID508_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 500, current_date_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "current_date_key"

    public static class current_time_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "current_time_key"
    // Keys.g:2317:1: current_time_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.current_time_key_return current_time_key() throws RecognitionException {
        OracleParser_Keys.current_time_key_return retval = new OracleParser_Keys.current_time_key_return();
        retval.start = input.LT(1);
        int current_time_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID509=null;

        Object REGULAR_ID509_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 501) ) { return retval; }
            // Keys.g:2318:5: ({...}? REGULAR_ID )
            // Keys.g:2318:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("current_time"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "current_time_key", "input.LT(1).getText().equalsIgnoreCase(\"current_time\")");
            }
            REGULAR_ID509=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_current_time_key15017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID509_tree = (Object)adaptor.create(REGULAR_ID509);
            adaptor.addChild(root_0, REGULAR_ID509_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 501, current_time_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "current_time_key"

    public static class module_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_key"
    // Keys.g:2321:1: module_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.module_key_return module_key() throws RecognitionException {
        OracleParser_Keys.module_key_return retval = new OracleParser_Keys.module_key_return();
        retval.start = input.LT(1);
        int module_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID510=null;

        Object REGULAR_ID510_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 502) ) { return retval; }
            // Keys.g:2322:5: ({...}? REGULAR_ID )
            // Keys.g:2322:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("module"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "module_key", "input.LT(1).getText().equalsIgnoreCase(\"module\")");
            }
            REGULAR_ID510=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_module_key15039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID510_tree = (Object)adaptor.create(REGULAR_ID510);
            adaptor.addChild(root_0, REGULAR_ID510_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 502, module_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "module_key"

    public static class global_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_key"
    // Keys.g:2325:1: global_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.global_key_return global_key() throws RecognitionException {
        OracleParser_Keys.global_key_return retval = new OracleParser_Keys.global_key_return();
        retval.start = input.LT(1);
        int global_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID511=null;

        Object REGULAR_ID511_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 503) ) { return retval; }
            // Keys.g:2326:5: ({...}? REGULAR_ID )
            // Keys.g:2326:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("global"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "global_key", "input.LT(1).getText().equalsIgnoreCase(\"global\")");
            }
            REGULAR_ID511=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_global_key15061); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID511_tree = (Object)adaptor.create(REGULAR_ID511);
            adaptor.addChild(root_0, REGULAR_ID511_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 503, global_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "global_key"

    public static class year_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "year_key"
    // Keys.g:2329:1: year_key : {...}? => REGULAR_ID -> YEAR_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.year_key_return year_key() throws RecognitionException {
        OracleParser_Keys.year_key_return retval = new OracleParser_Keys.year_key_return();
        retval.start = input.LT(1);
        int year_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID512=null;

        Object REGULAR_ID512_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 504) ) { return retval; }
            // Keys.g:2330:5: ({...}? => REGULAR_ID -> YEAR_VK[$REGULAR_ID] )
            // Keys.g:2330:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("year"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "year_key", "input.LT(1).getText().equalsIgnoreCase(\"year\")");
            }
            REGULAR_ID512=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_year_key15084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID512);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2330:73: -> YEAR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(YEAR_VK, REGULAR_ID512));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 504, year_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "year_key"

    public static class month_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "month_key"
    // Keys.g:2333:1: month_key : {...}? REGULAR_ID -> MONTH_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.month_key_return month_key() throws RecognitionException {
        OracleParser_Keys.month_key_return retval = new OracleParser_Keys.month_key_return();
        retval.start = input.LT(1);
        int month_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID513=null;

        Object REGULAR_ID513_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 505) ) { return retval; }
            // Keys.g:2334:5: ({...}? REGULAR_ID -> MONTH_VK[$REGULAR_ID] )
            // Keys.g:2334:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("month"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "month_key", "input.LT(1).getText().equalsIgnoreCase(\"month\")");
            }
            REGULAR_ID513=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_month_key15111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID513);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2334:72: -> MONTH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(MONTH_VK, REGULAR_ID513));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 505, month_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "month_key"

    public static class day_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "day_key"
    // Keys.g:2337:1: day_key : {...}? => REGULAR_ID -> DAY_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.day_key_return day_key() throws RecognitionException {
        OracleParser_Keys.day_key_return retval = new OracleParser_Keys.day_key_return();
        retval.start = input.LT(1);
        int day_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID514=null;

        Object REGULAR_ID514_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 506) ) { return retval; }
            // Keys.g:2338:5: ({...}? => REGULAR_ID -> DAY_VK[$REGULAR_ID] )
            // Keys.g:2338:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("day"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "day_key", "input.LT(1).getText().equalsIgnoreCase(\"day\")");
            }
            REGULAR_ID514=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_day_key15139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID514);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2338:72: -> DAY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DAY_VK, REGULAR_ID514));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 506, day_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "day_key"

    public static class hour_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hour_key"
    // Keys.g:2341:1: hour_key : {...}? REGULAR_ID -> HOUR_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.hour_key_return hour_key() throws RecognitionException {
        OracleParser_Keys.hour_key_return retval = new OracleParser_Keys.hour_key_return();
        retval.start = input.LT(1);
        int hour_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID515=null;

        Object REGULAR_ID515_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 507) ) { return retval; }
            // Keys.g:2341:9: ({...}? REGULAR_ID -> HOUR_VK[$REGULAR_ID] )
            // Keys.g:2341:14: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("hour"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "hour_key", "input.LT(1).getText().equalsIgnoreCase(\"hour\")");
            }
            REGULAR_ID515=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_hour_key15161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID515);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2341:75: -> HOUR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(HOUR_VK, REGULAR_ID515));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 507, hour_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hour_key"

    public static class minute_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minute_key"
    // Keys.g:2344:1: minute_key : {...}? REGULAR_ID -> MINUTE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.minute_key_return minute_key() throws RecognitionException {
        OracleParser_Keys.minute_key_return retval = new OracleParser_Keys.minute_key_return();
        retval.start = input.LT(1);
        int minute_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID516=null;

        Object REGULAR_ID516_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 508) ) { return retval; }
            // Keys.g:2345:5: ({...}? REGULAR_ID -> MINUTE_VK[$REGULAR_ID] )
            // Keys.g:2345:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("minute"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "minute_key", "input.LT(1).getText().equalsIgnoreCase(\"minute\")");
            }
            REGULAR_ID516=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_minute_key15188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID516);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2345:73: -> MINUTE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(MINUTE_VK, REGULAR_ID516));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 508, minute_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minute_key"

    public static class whenever_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenever_key"
    // Keys.g:2348:1: whenever_key : {...}? REGULAR_ID ;
    public final OracleParser_Keys.whenever_key_return whenever_key() throws RecognitionException {
        OracleParser_Keys.whenever_key_return retval = new OracleParser_Keys.whenever_key_return();
        retval.start = input.LT(1);
        int whenever_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID517=null;

        Object REGULAR_ID517_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 509) ) { return retval; }
            // Keys.g:2349:5: ({...}? REGULAR_ID )
            // Keys.g:2349:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("whenever"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "whenever_key", "input.LT(1).getText().equalsIgnoreCase(\"whenever\")");
            }
            REGULAR_ID517=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_whenever_key15215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID517_tree = (Object)adaptor.create(REGULAR_ID517);
            adaptor.addChild(root_0, REGULAR_ID517_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 509, whenever_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "whenever_key"

    public static class is_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "is_key"
    // Keys.g:2352:1: is_key : SQL92_RESERVED_IS ;
    public final OracleParser_Keys.is_key_return is_key() throws RecognitionException {
        OracleParser_Keys.is_key_return retval = new OracleParser_Keys.is_key_return();
        retval.start = input.LT(1);
        int is_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_IS518=null;

        Object SQL92_RESERVED_IS518_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 510) ) { return retval; }
            // Keys.g:2353:5: ( SQL92_RESERVED_IS )
            // Keys.g:2353:10: SQL92_RESERVED_IS
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_IS518=(Token)match(input,SQL92_RESERVED_IS,FOLLOW_SQL92_RESERVED_IS_in_is_key15235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_IS518_tree = (Object)adaptor.create(SQL92_RESERVED_IS518);
            adaptor.addChild(root_0, SQL92_RESERVED_IS518_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 510, is_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "is_key"

    public static class else_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_key"
    // Keys.g:2356:1: else_key : SQL92_RESERVED_ELSE ;
    public final OracleParser_Keys.else_key_return else_key() throws RecognitionException {
        OracleParser_Keys.else_key_return retval = new OracleParser_Keys.else_key_return();
        retval.start = input.LT(1);
        int else_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_ELSE519=null;

        Object SQL92_RESERVED_ELSE519_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 511) ) { return retval; }
            // Keys.g:2357:5: ( SQL92_RESERVED_ELSE )
            // Keys.g:2357:10: SQL92_RESERVED_ELSE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_ELSE519=(Token)match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_else_key15255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ELSE519_tree = (Object)adaptor.create(SQL92_RESERVED_ELSE519);
            adaptor.addChild(root_0, SQL92_RESERVED_ELSE519_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 511, else_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "else_key"

    public static class table_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_key"
    // Keys.g:2360:1: table_key : SQL92_RESERVED_TABLE ;
    public final OracleParser_Keys.table_key_return table_key() throws RecognitionException {
        OracleParser_Keys.table_key_return retval = new OracleParser_Keys.table_key_return();
        retval.start = input.LT(1);
        int table_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_TABLE520=null;

        Object SQL92_RESERVED_TABLE520_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 512) ) { return retval; }
            // Keys.g:2361:5: ( SQL92_RESERVED_TABLE )
            // Keys.g:2361:10: SQL92_RESERVED_TABLE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_TABLE520=(Token)match(input,SQL92_RESERVED_TABLE,FOLLOW_SQL92_RESERVED_TABLE_in_table_key15275); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_TABLE520_tree = (Object)adaptor.create(SQL92_RESERVED_TABLE520);
            adaptor.addChild(root_0, SQL92_RESERVED_TABLE520_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 512, table_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_key"

    public static class the_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "the_key"
    // Keys.g:2364:1: the_key : SQL92_RESERVED_THE ;
    public final OracleParser_Keys.the_key_return the_key() throws RecognitionException {
        OracleParser_Keys.the_key_return retval = new OracleParser_Keys.the_key_return();
        retval.start = input.LT(1);
        int the_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_THE521=null;

        Object SQL92_RESERVED_THE521_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 513) ) { return retval; }
            // Keys.g:2365:5: ( SQL92_RESERVED_THE )
            // Keys.g:2365:10: SQL92_RESERVED_THE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_THE521=(Token)match(input,SQL92_RESERVED_THE,FOLLOW_SQL92_RESERVED_THE_in_the_key15295); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_THE521_tree = (Object)adaptor.create(SQL92_RESERVED_THE521);
            adaptor.addChild(root_0, SQL92_RESERVED_THE521_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 513, the_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "the_key"

    public static class then_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "then_key"
    // Keys.g:2368:1: then_key : SQL92_RESERVED_THEN ;
    public final OracleParser_Keys.then_key_return then_key() throws RecognitionException {
        OracleParser_Keys.then_key_return retval = new OracleParser_Keys.then_key_return();
        retval.start = input.LT(1);
        int then_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_THEN522=null;

        Object SQL92_RESERVED_THEN522_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 514) ) { return retval; }
            // Keys.g:2369:5: ( SQL92_RESERVED_THEN )
            // Keys.g:2369:10: SQL92_RESERVED_THEN
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_THEN522=(Token)match(input,SQL92_RESERVED_THEN,FOLLOW_SQL92_RESERVED_THEN_in_then_key15315); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_THEN522_tree = (Object)adaptor.create(SQL92_RESERVED_THEN522);
            adaptor.addChild(root_0, SQL92_RESERVED_THEN522_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 514, then_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "then_key"

    public static class end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "end_key"
    // Keys.g:2372:1: end_key : SQL92_RESERVED_END ;
    public final OracleParser_Keys.end_key_return end_key() throws RecognitionException {
        OracleParser_Keys.end_key_return retval = new OracleParser_Keys.end_key_return();
        retval.start = input.LT(1);
        int end_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_END523=null;

        Object SQL92_RESERVED_END523_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 515) ) { return retval; }
            // Keys.g:2373:5: ( SQL92_RESERVED_END )
            // Keys.g:2373:10: SQL92_RESERVED_END
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_END523=(Token)match(input,SQL92_RESERVED_END,FOLLOW_SQL92_RESERVED_END_in_end_key15335); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_END523_tree = (Object)adaptor.create(SQL92_RESERVED_END523);
            adaptor.addChild(root_0, SQL92_RESERVED_END523_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 515, end_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "end_key"

    public static class all_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "all_key"
    // Keys.g:2376:1: all_key : SQL92_RESERVED_ALL ;
    public final OracleParser_Keys.all_key_return all_key() throws RecognitionException {
        OracleParser_Keys.all_key_return retval = new OracleParser_Keys.all_key_return();
        retval.start = input.LT(1);
        int all_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_ALL524=null;

        Object SQL92_RESERVED_ALL524_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 516) ) { return retval; }
            // Keys.g:2377:5: ( SQL92_RESERVED_ALL )
            // Keys.g:2377:10: SQL92_RESERVED_ALL
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_ALL524=(Token)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_all_key15355); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ALL524_tree = (Object)adaptor.create(SQL92_RESERVED_ALL524);
            adaptor.addChild(root_0, SQL92_RESERVED_ALL524_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 516, all_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "all_key"

    public static class on_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "on_key"
    // Keys.g:2380:1: on_key : SQL92_RESERVED_ON ;
    public final OracleParser_Keys.on_key_return on_key() throws RecognitionException {
        OracleParser_Keys.on_key_return retval = new OracleParser_Keys.on_key_return();
        retval.start = input.LT(1);
        int on_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_ON525=null;

        Object SQL92_RESERVED_ON525_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 517) ) { return retval; }
            // Keys.g:2381:5: ( SQL92_RESERVED_ON )
            // Keys.g:2381:10: SQL92_RESERVED_ON
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_ON525=(Token)match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_on_key15375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ON525_tree = (Object)adaptor.create(SQL92_RESERVED_ON525);
            adaptor.addChild(root_0, SQL92_RESERVED_ON525_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 517, on_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "on_key"

    public static class or_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_key"
    // Keys.g:2384:1: or_key : SQL92_RESERVED_OR ;
    public final OracleParser_Keys.or_key_return or_key() throws RecognitionException {
        OracleParser_Keys.or_key_return retval = new OracleParser_Keys.or_key_return();
        retval.start = input.LT(1);
        int or_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_OR526=null;

        Object SQL92_RESERVED_OR526_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 518) ) { return retval; }
            // Keys.g:2385:5: ( SQL92_RESERVED_OR )
            // Keys.g:2385:10: SQL92_RESERVED_OR
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_OR526=(Token)match(input,SQL92_RESERVED_OR,FOLLOW_SQL92_RESERVED_OR_in_or_key15395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_OR526_tree = (Object)adaptor.create(SQL92_RESERVED_OR526);
            adaptor.addChild(root_0, SQL92_RESERVED_OR526_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 518, or_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "or_key"

    public static class and_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_key"
    // Keys.g:2388:1: and_key : SQL92_RESERVED_AND ;
    public final OracleParser_Keys.and_key_return and_key() throws RecognitionException {
        OracleParser_Keys.and_key_return retval = new OracleParser_Keys.and_key_return();
        retval.start = input.LT(1);
        int and_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_AND527=null;

        Object SQL92_RESERVED_AND527_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 519) ) { return retval; }
            // Keys.g:2389:5: ( SQL92_RESERVED_AND )
            // Keys.g:2389:10: SQL92_RESERVED_AND
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_AND527=(Token)match(input,SQL92_RESERVED_AND,FOLLOW_SQL92_RESERVED_AND_in_and_key15415); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_AND527_tree = (Object)adaptor.create(SQL92_RESERVED_AND527);
            adaptor.addChild(root_0, SQL92_RESERVED_AND527_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 519, and_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "and_key"

    public static class not_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_key"
    // Keys.g:2392:1: not_key : SQL92_RESERVED_NOT ;
    public final OracleParser_Keys.not_key_return not_key() throws RecognitionException {
        OracleParser_Keys.not_key_return retval = new OracleParser_Keys.not_key_return();
        retval.start = input.LT(1);
        int not_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_NOT528=null;

        Object SQL92_RESERVED_NOT528_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 520) ) { return retval; }
            // Keys.g:2393:5: ( SQL92_RESERVED_NOT )
            // Keys.g:2393:10: SQL92_RESERVED_NOT
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_NOT528=(Token)match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_not_key15435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_NOT528_tree = (Object)adaptor.create(SQL92_RESERVED_NOT528);
            adaptor.addChild(root_0, SQL92_RESERVED_NOT528_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 520, not_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "not_key"

    public static class true_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "true_key"
    // Keys.g:2396:1: true_key : SQL92_RESERVED_TRUE ;
    public final OracleParser_Keys.true_key_return true_key() throws RecognitionException {
        OracleParser_Keys.true_key_return retval = new OracleParser_Keys.true_key_return();
        retval.start = input.LT(1);
        int true_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_TRUE529=null;

        Object SQL92_RESERVED_TRUE529_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 521) ) { return retval; }
            // Keys.g:2397:5: ( SQL92_RESERVED_TRUE )
            // Keys.g:2397:10: SQL92_RESERVED_TRUE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_TRUE529=(Token)match(input,SQL92_RESERVED_TRUE,FOLLOW_SQL92_RESERVED_TRUE_in_true_key15455); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_TRUE529_tree = (Object)adaptor.create(SQL92_RESERVED_TRUE529);
            adaptor.addChild(root_0, SQL92_RESERVED_TRUE529_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 521, true_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "true_key"

    public static class false_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "false_key"
    // Keys.g:2400:1: false_key : SQL92_RESERVED_FALSE ;
    public final OracleParser_Keys.false_key_return false_key() throws RecognitionException {
        OracleParser_Keys.false_key_return retval = new OracleParser_Keys.false_key_return();
        retval.start = input.LT(1);
        int false_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_FALSE530=null;

        Object SQL92_RESERVED_FALSE530_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 522) ) { return retval; }
            // Keys.g:2401:5: ( SQL92_RESERVED_FALSE )
            // Keys.g:2401:10: SQL92_RESERVED_FALSE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_FALSE530=(Token)match(input,SQL92_RESERVED_FALSE,FOLLOW_SQL92_RESERVED_FALSE_in_false_key15475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_FALSE530_tree = (Object)adaptor.create(SQL92_RESERVED_FALSE530);
            adaptor.addChild(root_0, SQL92_RESERVED_FALSE530_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 522, false_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "false_key"

    public static class default_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "default_key"
    // Keys.g:2404:1: default_key : SQL92_RESERVED_DEFAULT ;
    public final OracleParser_Keys.default_key_return default_key() throws RecognitionException {
        OracleParser_Keys.default_key_return retval = new OracleParser_Keys.default_key_return();
        retval.start = input.LT(1);
        int default_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_DEFAULT531=null;

        Object SQL92_RESERVED_DEFAULT531_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 523) ) { return retval; }
            // Keys.g:2405:5: ( SQL92_RESERVED_DEFAULT )
            // Keys.g:2405:10: SQL92_RESERVED_DEFAULT
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_DEFAULT531=(Token)match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_default_key15495); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DEFAULT531_tree = (Object)adaptor.create(SQL92_RESERVED_DEFAULT531);
            adaptor.addChild(root_0, SQL92_RESERVED_DEFAULT531_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 523, default_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "default_key"

    public static class distinct_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinct_key"
    // Keys.g:2408:1: distinct_key : SQL92_RESERVED_DISTINCT ;
    public final OracleParser_Keys.distinct_key_return distinct_key() throws RecognitionException {
        OracleParser_Keys.distinct_key_return retval = new OracleParser_Keys.distinct_key_return();
        retval.start = input.LT(1);
        int distinct_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_DISTINCT532=null;

        Object SQL92_RESERVED_DISTINCT532_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 524) ) { return retval; }
            // Keys.g:2409:5: ( SQL92_RESERVED_DISTINCT )
            // Keys.g:2409:10: SQL92_RESERVED_DISTINCT
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_DISTINCT532=(Token)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_distinct_key15515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DISTINCT532_tree = (Object)adaptor.create(SQL92_RESERVED_DISTINCT532);
            adaptor.addChild(root_0, SQL92_RESERVED_DISTINCT532_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 524, distinct_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "distinct_key"

    public static class into_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "into_key"
    // Keys.g:2412:1: into_key : SQL92_RESERVED_INTO ;
    public final OracleParser_Keys.into_key_return into_key() throws RecognitionException {
        OracleParser_Keys.into_key_return retval = new OracleParser_Keys.into_key_return();
        retval.start = input.LT(1);
        int into_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_INTO533=null;

        Object SQL92_RESERVED_INTO533_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 525) ) { return retval; }
            // Keys.g:2413:5: ( SQL92_RESERVED_INTO )
            // Keys.g:2413:10: SQL92_RESERVED_INTO
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_INTO533=(Token)match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_into_key15535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_INTO533_tree = (Object)adaptor.create(SQL92_RESERVED_INTO533);
            adaptor.addChild(root_0, SQL92_RESERVED_INTO533_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 525, into_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "into_key"

    public static class by_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "by_key"
    // Keys.g:2416:1: by_key : SQL92_RESERVED_BY ;
    public final OracleParser_Keys.by_key_return by_key() throws RecognitionException {
        OracleParser_Keys.by_key_return retval = new OracleParser_Keys.by_key_return();
        retval.start = input.LT(1);
        int by_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_BY534=null;

        Object SQL92_RESERVED_BY534_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 526) ) { return retval; }
            // Keys.g:2417:5: ( SQL92_RESERVED_BY )
            // Keys.g:2417:10: SQL92_RESERVED_BY
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_BY534=(Token)match(input,SQL92_RESERVED_BY,FOLLOW_SQL92_RESERVED_BY_in_by_key15555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_BY534_tree = (Object)adaptor.create(SQL92_RESERVED_BY534);
            adaptor.addChild(root_0, SQL92_RESERVED_BY534_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 526, by_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "by_key"

    public static class as_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as_key"
    // Keys.g:2420:1: as_key : SQL92_RESERVED_AS ;
    public final OracleParser_Keys.as_key_return as_key() throws RecognitionException {
        OracleParser_Keys.as_key_return retval = new OracleParser_Keys.as_key_return();
        retval.start = input.LT(1);
        int as_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_AS535=null;

        Object SQL92_RESERVED_AS535_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 527) ) { return retval; }
            // Keys.g:2421:5: ( SQL92_RESERVED_AS )
            // Keys.g:2421:10: SQL92_RESERVED_AS
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_AS535=(Token)match(input,SQL92_RESERVED_AS,FOLLOW_SQL92_RESERVED_AS_in_as_key15575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_AS535_tree = (Object)adaptor.create(SQL92_RESERVED_AS535);
            adaptor.addChild(root_0, SQL92_RESERVED_AS535_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 527, as_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "as_key"

    public static class in_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_key"
    // Keys.g:2424:1: in_key : SQL92_RESERVED_IN ;
    public final OracleParser_Keys.in_key_return in_key() throws RecognitionException {
        OracleParser_Keys.in_key_return retval = new OracleParser_Keys.in_key_return();
        retval.start = input.LT(1);
        int in_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_IN536=null;

        Object SQL92_RESERVED_IN536_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 528) ) { return retval; }
            // Keys.g:2425:5: ( SQL92_RESERVED_IN )
            // Keys.g:2425:10: SQL92_RESERVED_IN
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_IN536=(Token)match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_in_key15595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_IN536_tree = (Object)adaptor.create(SQL92_RESERVED_IN536);
            adaptor.addChild(root_0, SQL92_RESERVED_IN536_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 528, in_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in_key"

    public static class of_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "of_key"
    // Keys.g:2428:1: of_key : SQL92_RESERVED_OF ;
    public final OracleParser_Keys.of_key_return of_key() throws RecognitionException {
        OracleParser_Keys.of_key_return retval = new OracleParser_Keys.of_key_return();
        retval.start = input.LT(1);
        int of_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_OF537=null;

        Object SQL92_RESERVED_OF537_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 529) ) { return retval; }
            // Keys.g:2429:5: ( SQL92_RESERVED_OF )
            // Keys.g:2429:10: SQL92_RESERVED_OF
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_OF537=(Token)match(input,SQL92_RESERVED_OF,FOLLOW_SQL92_RESERVED_OF_in_of_key15615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_OF537_tree = (Object)adaptor.create(SQL92_RESERVED_OF537);
            adaptor.addChild(root_0, SQL92_RESERVED_OF537_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 529, of_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "of_key"

    public static class null_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "null_key"
    // Keys.g:2432:1: null_key : SQL92_RESERVED_NULL ;
    public final OracleParser_Keys.null_key_return null_key() throws RecognitionException {
        OracleParser_Keys.null_key_return retval = new OracleParser_Keys.null_key_return();
        retval.start = input.LT(1);
        int null_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_NULL538=null;

        Object SQL92_RESERVED_NULL538_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 530) ) { return retval; }
            // Keys.g:2433:5: ( SQL92_RESERVED_NULL )
            // Keys.g:2433:10: SQL92_RESERVED_NULL
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_NULL538=(Token)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_null_key15635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_NULL538_tree = (Object)adaptor.create(SQL92_RESERVED_NULL538);
            adaptor.addChild(root_0, SQL92_RESERVED_NULL538_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 530, null_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "null_key"

    public static class for_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_key"
    // Keys.g:2436:1: for_key : SQL92_RESERVED_FOR ;
    public final OracleParser_Keys.for_key_return for_key() throws RecognitionException {
        OracleParser_Keys.for_key_return retval = new OracleParser_Keys.for_key_return();
        retval.start = input.LT(1);
        int for_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_FOR539=null;

        Object SQL92_RESERVED_FOR539_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 531) ) { return retval; }
            // Keys.g:2437:5: ( SQL92_RESERVED_FOR )
            // Keys.g:2437:10: SQL92_RESERVED_FOR
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_FOR539=(Token)match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_for_key15655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_FOR539_tree = (Object)adaptor.create(SQL92_RESERVED_FOR539);
            adaptor.addChild(root_0, SQL92_RESERVED_FOR539_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 531, for_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_key"

    public static class select_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_key"
    // Keys.g:2440:1: select_key : SQL92_RESERVED_SELECT ;
    public final OracleParser_Keys.select_key_return select_key() throws RecognitionException {
        OracleParser_Keys.select_key_return retval = new OracleParser_Keys.select_key_return();
        retval.start = input.LT(1);
        int select_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_SELECT540=null;

        Object SQL92_RESERVED_SELECT540_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 532) ) { return retval; }
            // Keys.g:2441:5: ( SQL92_RESERVED_SELECT )
            // Keys.g:2441:10: SQL92_RESERVED_SELECT
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_SELECT540=(Token)match(input,SQL92_RESERVED_SELECT,FOLLOW_SQL92_RESERVED_SELECT_in_select_key15675); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_SELECT540_tree = (Object)adaptor.create(SQL92_RESERVED_SELECT540);
            adaptor.addChild(root_0, SQL92_RESERVED_SELECT540_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 532, select_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_key"

    public static class when_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "when_key"
    // Keys.g:2444:1: when_key : SQL92_RESERVED_WHEN ;
    public final OracleParser_Keys.when_key_return when_key() throws RecognitionException {
        OracleParser_Keys.when_key_return retval = new OracleParser_Keys.when_key_return();
        retval.start = input.LT(1);
        int when_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_WHEN541=null;

        Object SQL92_RESERVED_WHEN541_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 533) ) { return retval; }
            // Keys.g:2445:5: ( SQL92_RESERVED_WHEN )
            // Keys.g:2445:10: SQL92_RESERVED_WHEN
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_WHEN541=(Token)match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_when_key15695); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_WHEN541_tree = (Object)adaptor.create(SQL92_RESERVED_WHEN541);
            adaptor.addChild(root_0, SQL92_RESERVED_WHEN541_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 533, when_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "when_key"

    public static class delete_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delete_key"
    // Keys.g:2448:1: delete_key : SQL92_RESERVED_DELETE ;
    public final OracleParser_Keys.delete_key_return delete_key() throws RecognitionException {
        OracleParser_Keys.delete_key_return retval = new OracleParser_Keys.delete_key_return();
        retval.start = input.LT(1);
        int delete_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_DELETE542=null;

        Object SQL92_RESERVED_DELETE542_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 534) ) { return retval; }
            // Keys.g:2449:5: ( SQL92_RESERVED_DELETE )
            // Keys.g:2449:10: SQL92_RESERVED_DELETE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_DELETE542=(Token)match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_delete_key15715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DELETE542_tree = (Object)adaptor.create(SQL92_RESERVED_DELETE542);
            adaptor.addChild(root_0, SQL92_RESERVED_DELETE542_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 534, delete_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delete_key"

    public static class between_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "between_key"
    // Keys.g:2452:1: between_key : SQL92_RESERVED_BETWEEN ;
    public final OracleParser_Keys.between_key_return between_key() throws RecognitionException {
        OracleParser_Keys.between_key_return retval = new OracleParser_Keys.between_key_return();
        retval.start = input.LT(1);
        int between_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_BETWEEN543=null;

        Object SQL92_RESERVED_BETWEEN543_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 535) ) { return retval; }
            // Keys.g:2453:5: ( SQL92_RESERVED_BETWEEN )
            // Keys.g:2453:10: SQL92_RESERVED_BETWEEN
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_BETWEEN543=(Token)match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_between_key15735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_BETWEEN543_tree = (Object)adaptor.create(SQL92_RESERVED_BETWEEN543);
            adaptor.addChild(root_0, SQL92_RESERVED_BETWEEN543_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 535, between_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "between_key"

    public static class like_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "like_key"
    // Keys.g:2456:1: like_key : SQL92_RESERVED_LIKE ;
    public final OracleParser_Keys.like_key_return like_key() throws RecognitionException {
        OracleParser_Keys.like_key_return retval = new OracleParser_Keys.like_key_return();
        retval.start = input.LT(1);
        int like_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_LIKE544=null;

        Object SQL92_RESERVED_LIKE544_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 536) ) { return retval; }
            // Keys.g:2457:5: ( SQL92_RESERVED_LIKE )
            // Keys.g:2457:10: SQL92_RESERVED_LIKE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_LIKE544=(Token)match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_like_key15755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_LIKE544_tree = (Object)adaptor.create(SQL92_RESERVED_LIKE544);
            adaptor.addChild(root_0, SQL92_RESERVED_LIKE544_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 536, like_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "like_key"

    public static class from_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "from_key"
    // Keys.g:2460:1: from_key : SQL92_RESERVED_FROM ;
    public final OracleParser_Keys.from_key_return from_key() throws RecognitionException {
        OracleParser_Keys.from_key_return retval = new OracleParser_Keys.from_key_return();
        retval.start = input.LT(1);
        int from_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_FROM545=null;

        Object SQL92_RESERVED_FROM545_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 537) ) { return retval; }
            // Keys.g:2461:5: ( SQL92_RESERVED_FROM )
            // Keys.g:2461:10: SQL92_RESERVED_FROM
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_FROM545=(Token)match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_from_key15775); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_FROM545_tree = (Object)adaptor.create(SQL92_RESERVED_FROM545);
            adaptor.addChild(root_0, SQL92_RESERVED_FROM545_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 537, from_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "from_key"

    public static class where_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_key"
    // Keys.g:2464:1: where_key : SQL92_RESERVED_WHERE ;
    public final OracleParser_Keys.where_key_return where_key() throws RecognitionException {
        OracleParser_Keys.where_key_return retval = new OracleParser_Keys.where_key_return();
        retval.start = input.LT(1);
        int where_key_StartIndex = input.index();
        Object root_0 = null;

        Token SQL92_RESERVED_WHERE546=null;

        Object SQL92_RESERVED_WHERE546_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 538) ) { return retval; }
            // Keys.g:2465:5: ( SQL92_RESERVED_WHERE )
            // Keys.g:2465:10: SQL92_RESERVED_WHERE
            {
            root_0 = (Object)adaptor.nil();

            SQL92_RESERVED_WHERE546=(Token)match(input,SQL92_RESERVED_WHERE,FOLLOW_SQL92_RESERVED_WHERE_in_where_key15795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_WHERE546_tree = (Object)adaptor.create(SQL92_RESERVED_WHERE546);
            adaptor.addChild(root_0, SQL92_RESERVED_WHERE546_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 538, where_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "where_key"

    public static class sequence_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sequence_key"
    // Keys.g:2468:1: sequence_key : {...}? REGULAR_ID -> SEQUENCE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.sequence_key_return sequence_key() throws RecognitionException {
        OracleParser_Keys.sequence_key_return retval = new OracleParser_Keys.sequence_key_return();
        retval.start = input.LT(1);
        int sequence_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID547=null;

        Object REGULAR_ID547_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 539) ) { return retval; }
            // Keys.g:2469:5: ({...}? REGULAR_ID -> SEQUENCE_VK[$REGULAR_ID] )
            // Keys.g:2469:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("sequence"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sequence_key", "input.LT(1).getText().equalsIgnoreCase(\"sequence\")");
            }
            REGULAR_ID547=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sequence_key15816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID547);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2469:74: -> SEQUENCE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SEQUENCE_VK, REGULAR_ID547));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 539, sequence_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sequence_key"

    public static class noorder_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noorder_key"
    // Keys.g:2472:1: noorder_key : {...}? REGULAR_ID -> NOORDER_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.noorder_key_return noorder_key() throws RecognitionException {
        OracleParser_Keys.noorder_key_return retval = new OracleParser_Keys.noorder_key_return();
        retval.start = input.LT(1);
        int noorder_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID548=null;

        Object REGULAR_ID548_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 540) ) { return retval; }
            // Keys.g:2473:5: ({...}? REGULAR_ID -> NOORDER_VK[$REGULAR_ID] )
            // Keys.g:2473:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("noorder"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "noorder_key", "input.LT(1).getText().equalsIgnoreCase(\"noorder\")");
            }
            REGULAR_ID548=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_noorder_key15842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID548);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2473:73: -> NOORDER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NOORDER_VK, REGULAR_ID548));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 540, noorder_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noorder_key"

    public static class cycle_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycle_key"
    // Keys.g:2476:1: cycle_key : {...}? REGULAR_ID -> CYCLE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.cycle_key_return cycle_key() throws RecognitionException {
        OracleParser_Keys.cycle_key_return retval = new OracleParser_Keys.cycle_key_return();
        retval.start = input.LT(1);
        int cycle_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID549=null;

        Object REGULAR_ID549_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 541) ) { return retval; }
            // Keys.g:2477:5: ({...}? REGULAR_ID -> CYCLE_VK[$REGULAR_ID] )
            // Keys.g:2477:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cycle"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cycle_key", "input.LT(1).getText().equalsIgnoreCase(\"cycle\")");
            }
            REGULAR_ID549=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cycle_key15868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID549);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2477:71: -> CYCLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CYCLE_VK, REGULAR_ID549));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 541, cycle_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycle_key"

    public static class cache_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cache_key"
    // Keys.g:2480:1: cache_key : {...}? REGULAR_ID -> CACHE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.cache_key_return cache_key() throws RecognitionException {
        OracleParser_Keys.cache_key_return retval = new OracleParser_Keys.cache_key_return();
        retval.start = input.LT(1);
        int cache_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID550=null;

        Object REGULAR_ID550_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 542) ) { return retval; }
            // Keys.g:2481:5: ({...}? REGULAR_ID -> CACHE_VK[$REGULAR_ID] )
            // Keys.g:2481:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cache"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cache_key", "input.LT(1).getText().equalsIgnoreCase(\"cache\")");
            }
            REGULAR_ID550=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cache_key15894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID550);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2481:71: -> CACHE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(CACHE_VK, REGULAR_ID550));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 542, cache_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cache_key"

    public static class nocache_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nocache_key"
    // Keys.g:2484:1: nocache_key : {...}? REGULAR_ID -> NOCACHE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nocache_key_return nocache_key() throws RecognitionException {
        OracleParser_Keys.nocache_key_return retval = new OracleParser_Keys.nocache_key_return();
        retval.start = input.LT(1);
        int nocache_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID551=null;

        Object REGULAR_ID551_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 543) ) { return retval; }
            // Keys.g:2485:5: ({...}? REGULAR_ID -> NOCACHE_VK[$REGULAR_ID] )
            // Keys.g:2485:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nocache"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nocache_key", "input.LT(1).getText().equalsIgnoreCase(\"nocache\")");
            }
            REGULAR_ID551=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nocache_key15920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID551);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2485:73: -> NOCACHE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NOCACHE_VK, REGULAR_ID551));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 543, nocache_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nocache_key"

    public static class nomaxvalue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nomaxvalue_key"
    // Keys.g:2488:1: nomaxvalue_key : {...}? REGULAR_ID -> NOMAXVALUE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nomaxvalue_key_return nomaxvalue_key() throws RecognitionException {
        OracleParser_Keys.nomaxvalue_key_return retval = new OracleParser_Keys.nomaxvalue_key_return();
        retval.start = input.LT(1);
        int nomaxvalue_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID552=null;

        Object REGULAR_ID552_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 544) ) { return retval; }
            // Keys.g:2489:5: ({...}? REGULAR_ID -> NOMAXVALUE_VK[$REGULAR_ID] )
            // Keys.g:2489:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nomaxvalue"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nomaxvalue_key", "input.LT(1).getText().equalsIgnoreCase(\"nomaxvalue\")");
            }
            REGULAR_ID552=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nomaxvalue_key15946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID552);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2489:76: -> NOMAXVALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NOMAXVALUE_VK, REGULAR_ID552));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 544, nomaxvalue_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nomaxvalue_key"

    public static class nominvalue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nominvalue_key"
    // Keys.g:2492:1: nominvalue_key : {...}? REGULAR_ID -> NOMINVALUE_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.nominvalue_key_return nominvalue_key() throws RecognitionException {
        OracleParser_Keys.nominvalue_key_return retval = new OracleParser_Keys.nominvalue_key_return();
        retval.start = input.LT(1);
        int nominvalue_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID553=null;

        Object REGULAR_ID553_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 545) ) { return retval; }
            // Keys.g:2493:5: ({...}? REGULAR_ID -> NOMINVALUE_VK[$REGULAR_ID] )
            // Keys.g:2493:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nominvalue"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nominvalue_key", "input.LT(1).getText().equalsIgnoreCase(\"nominvalue\")");
            }
            REGULAR_ID553=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nominvalue_key15972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID553);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2493:76: -> NOMINVALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(NOMINVALUE_VK, REGULAR_ID553));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 545, nominvalue_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nominvalue_key"

    public static class search_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "search_key"
    // Keys.g:2496:1: search_key : {...}? REGULAR_ID -> SEARCH_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.search_key_return search_key() throws RecognitionException {
        OracleParser_Keys.search_key_return retval = new OracleParser_Keys.search_key_return();
        retval.start = input.LT(1);
        int search_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID554=null;

        Object REGULAR_ID554_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 546) ) { return retval; }
            // Keys.g:2497:5: ({...}? REGULAR_ID -> SEARCH_VK[$REGULAR_ID] )
            // Keys.g:2497:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("search"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "search_key", "input.LT(1).getText().equalsIgnoreCase(\"search\")");
            }
            REGULAR_ID554=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_search_key15998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID554);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2497:72: -> SEARCH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SEARCH_VK, REGULAR_ID554));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 546, search_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "search_key"

    public static class depth_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "depth_key"
    // Keys.g:2500:1: depth_key : {...}? REGULAR_ID -> DEPTH_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.depth_key_return depth_key() throws RecognitionException {
        OracleParser_Keys.depth_key_return retval = new OracleParser_Keys.depth_key_return();
        retval.start = input.LT(1);
        int depth_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID555=null;

        Object REGULAR_ID555_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 547) ) { return retval; }
            // Keys.g:2501:5: ({...}? REGULAR_ID -> DEPTH_VK[$REGULAR_ID] )
            // Keys.g:2501:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("depth"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "depth_key", "input.LT(1).getText().equalsIgnoreCase(\"depth\")");
            }
            REGULAR_ID555=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_depth_key16024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID555);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2501:71: -> DEPTH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(DEPTH_VK, REGULAR_ID555));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 547, depth_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "depth_key"

    public static class breadth_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "breadth_key"
    // Keys.g:2504:1: breadth_key : {...}? REGULAR_ID -> BREADTH_VK[$REGULAR_ID] ;
    public final OracleParser_Keys.breadth_key_return breadth_key() throws RecognitionException {
        OracleParser_Keys.breadth_key_return retval = new OracleParser_Keys.breadth_key_return();
        retval.start = input.LT(1);
        int breadth_key_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID556=null;

        Object REGULAR_ID556_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 548) ) { return retval; }
            // Keys.g:2505:5: ({...}? REGULAR_ID -> BREADTH_VK[$REGULAR_ID] )
            // Keys.g:2505:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("breadth"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "breadth_key", "input.LT(1).getText().equalsIgnoreCase(\"breadth\")");
            }
            REGULAR_ID556=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_breadth_key16050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID556);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2505:73: -> BREADTH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(BREADTH_VK, REGULAR_ID556));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 548, breadth_key_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "breadth_key"

    // Delegated rules


 

    public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_key2268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_replace_key2295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_package_key2323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_body_key2350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_BEGIN_in_begin_key2375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_exit_key2392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DECLARE_in_declare_key2417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_key2437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_serveroutput_key2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_off_key2481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_constant_key2508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_subtype_key2535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CURSOR_in_cursor_key2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nextval_key2578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_GOTO_in_goto_key2598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_execute_key2620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_immediate_key2648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_return_key2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_PROCEDURE_in_procedure_key2700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_function_key2723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_pragma_key2745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_exception_init_key2772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_type_key2800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_record_key2828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_indexed_key2850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_INDEX_in_index_key2870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_notfound_key2893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_notfound_key2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_found_key2923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_found_key2925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_isopen_key2953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_isopen_key2955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_rowcount_key2983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_rowcount_key2985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_rowtype_key3013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_rowtype_key3015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_type_key3044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_type_key3046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_out_key3074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_inout_key3101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_extend_key3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_raise_key3151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_while_key3178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_loop_key3200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_commit_key3228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_work_key3250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_IF_in_if_key3275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_key3295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_authid_key3318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_definer_key3345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_external_key3372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_language_key3399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_java_key3426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_name_key3454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_deterministic_key3482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_parallel_enable_key3510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_result_cache_key3538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_pipelined_key3566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_aggregate_key3593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ALTER_in_alter_key3618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_compile_key3640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_debug_key3668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_reuse_key3695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_settings_key3722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_specification_key3744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_drop_key3769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_trigger_key3792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_force_key3815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_validate_key3842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ref_key3870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_array_key3898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_varray_key3921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_pls_integer_key3944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_serially_reusable_key3972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_autonomous_transaction_key4000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_inline_key4028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_restrict_references_key4056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_exceptions_key4084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_save_key4113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_forall_key4136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_continue_key4164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_indices_key4192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_VALUES_in_values_key4212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CASE_in_case_key4232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_bulk_key4255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_collect_key4283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_committed_key4310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_use_key4338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_level_key4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_isolation_key4383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_serializable_key4410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_segment_key4437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_write_key4460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_wait_key4488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_corrupt_xid_all_key4516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_corrupt_xid_key4544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_batch_key4572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_session_key4600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_role_key4623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_constraint_key4646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_constraints_key4669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_call_key4692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_explain_key4720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_merge_key4743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_plan_key4771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_system_key4794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_subpartition_key4817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_partition_key4845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_matched_key4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_reject_key4896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_log_key4924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_unlimited_key4952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_limit_key4980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_errors_key5008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timestamp_tz_unconstrained_key5031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_urowid_key5059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_min_subnormal_key5087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_min_normal_key5110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_max_normal_key5133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_positiven_key5156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timezone_abbr_key5184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_min_subnormal_key5212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_max_subnormal_key5235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_key5258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_bfile_key5286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_infinity_key5314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timezone_region_key5337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timestamp_ltz_unconstrained_key5365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_naturaln_key5393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_simple_integer_key5421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_max_subnormal_key5449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_byte_key5472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_infinity_key5500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_key5523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_range_key5551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nclob_key5579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_clob_key5607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dsinterval_unconstrained_key5635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_yminterval_unconstrained_key5663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rowid_key5691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_nan_key5719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timestamp_unconstrained_key5742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_min_normal_key5770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_signtype_key5793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_blob_key5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nvarchar2_key5849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_max_normal_key5877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_nan_key5900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_string_key5923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_c_key5951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_library_key5979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_context_key6007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_parameters_key6035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_agent_key6063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cluster_key6091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_hash_key6119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_relies_on_key6147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_returning_key6175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_statement_id_key6202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_deferred_key6225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_advise_key6253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_resumable_key6276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timeout_key6299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_parallel_key6322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ddl_key6345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_query_key6373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dml_key6396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_guard_key6419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nothing_key6442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_enable_key6465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_database_key6493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_disable_key6521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_link_key6549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_IDENTIFIED_in_identified_key6569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_none_key6592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_before_key6615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_referencing_key6644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_logon_key6672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_after_key6700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_schema_key6728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_GRANT_in_grant_key6753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_truncate_key6776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_startup_key6804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_statistics_key6832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_noaudit_key6860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_suspend_key6888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_audit_key6916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_disassociate_key6944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_shutdown_key6973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_compound_key7001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_servererror_key7029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_parent_key7057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_follows_key7085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nested_key7113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_old_key7141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_statement_key7169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_db_role_change_key7192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_each_key7220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_logoff_key7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_analyze_key7271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_instead_key7299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_associate_key7327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_new_key7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_REVOKE_in_revoke_key7380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rename_key7403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_customdatum_key7432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_oradata_key7460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_constructor_key7488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sqldata_key7516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_member_key7544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_self_key7572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_object_key7600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_variable_key7628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_instantiable_key7651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_final_key7679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_static_key7707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_oid_key7735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_result_key7758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_under_key7781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_map_key7809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_overriding_key7837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_add_key7865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_modify_key7893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_including_key7921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_substitutable_key7949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_attribute_key7972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cascade_key7995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_data_key8024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_invalidate_key8047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_element_key8075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_first_key8098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CHECK_in_check_key8123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_OPTION_in_option_key8143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nocycle_key8166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_locked_key8194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_block_key8217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xml_key8245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_pivot_key8273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_PRIOR_in_prior_key8298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sequential_key8321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_single_key8349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_skip_key8377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_key8411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_updated_key8434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_increment_key8462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_exclude_key8490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_reference_key8518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sets_key8546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_until_key8569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_seed_key8597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_maxvalue_key8625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_siblings_key8653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cube_key8681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nulls_key8709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dimension_key8737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_scn_key8765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_snapshot_key8793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_decrement_key8816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_unpivot_key8844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_keep_key8872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_measures_key8900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rows_key8928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sample_key8956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_upsert_key8984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_versions_key9012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rules_key9040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_iterate_key9068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_minvalue_key9096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rollup_key9124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nav_key9152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_automatic_key9180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_last_key9208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_main_key9236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_grouping_key9259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_include_key9287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ignore_key9315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_respect_key9343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_unique_key9367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_submultiset_key9390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_at_key9418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_a_key9446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_empty_key9469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_likec_key9492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nan_key9520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_infinite_key9543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_like2_key9566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_like4_key9594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_present_key9622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dbtimezone_key9645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sessiontimezone_key9673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nchar_cs_key9701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_decompose_key9729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_following_key9757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_first_value_key9785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_preceding_key9813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_within_key9841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_canonical_key9869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_compatibility_key9897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_over_key9925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_multiset_key9953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_CONNECT_BY_ROOT_in_connect_by_root_key9973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_last_value_key9996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CURRENT_in_current_key10021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_unbounded_key10044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dense_rank_key10072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cost_key10100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_char_cs_key10128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_auto_key10156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_treat_key10184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_content_key10212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlparse_key10240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlelement_key10268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_entityescaping_key10296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_standalone_key10324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_wellformed_key10352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlexists_key10380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_version_key10408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlcast_key10436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_yes_key10464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_no_key10492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_evalname_key10520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlpi_key10548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlcolattval_key10576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_document_key10604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlforest_key10632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_passing_key10660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_columns_key10688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_indent_key10717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_hide_key10745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlagg_key10773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_path_key10801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlnamespaces_key10824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_SIZE_in_size_key10849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_noschemacheck_key10872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_noentityescaping_key10900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlquery_key10928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmltable_key10956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlroot_key10984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_schemacheck_key11012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlattributes_key11040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_encoding_key11068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_show_key11096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlserialize_key11124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ordinality_key11152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_defaults_key11180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sqlerror_key11207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_oserror_key11231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_success_key11254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_warning_key11277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_failure_key11300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_insert_key11321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_order_key11341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_MINUS_in_minus_key11361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_row_key11383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_mod_key11410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_raw_key11433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_power_key11460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_LOCK_in_lock_key11480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_EXISTS_in_exists_key11500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_HAVING_in_having_key11520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_any_key11540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_with_key11560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_transaction_key11583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rawtohex_key11605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_number_key11628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nocopy_key11656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_to_key11681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_abs_key11703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rollback_key11726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_share_key11751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_greatest_key11773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_vsize_key11795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_exclusive_key11815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_varchar2_key11838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rowidtochar_key11865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_open_key11888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_comment_key11916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sqrt_key11943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_instr_key11965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_nowait_key11985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_lpad_key12007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_boolean_key12030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rpad_key12057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_savepoint_key12080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_decode_key12107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_reverse_key12129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_least_key12156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nvl_key12178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_variance_key12200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_start_key12220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DESC_in_desc_key12240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_concat_key12262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dump_key12284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_soundex_key12306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_positive_key12329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UNION_in_union_key12354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ascii_key12376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CONNECT_in_connect_key12396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ASC_in_asc_key12416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_hextoraw_key12438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_to_date_key12460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_floor_key12482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sign_key12504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_update_key12524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_trunc_key12546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rtrim_key12568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_close_key12591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_to_char_key12618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ltrim_key12640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_MODE_in_mode_key12660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_uid_key12682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_chr_key12704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INTERSECT_in_intersect_key12729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_chartorowid_key12751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_mlslabel_key12774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_userenv_key12801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_stddev_key12823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_length_key12845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FETCH_in_fetch_key12865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_GROUP_in_group_key12885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sysdate_interval_key12907 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_sysdate_interval_key12909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sysdate_interval_key12911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sysdate_key12946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_integer_key12969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_to_number_key12996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_substr_key13018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ceil_key13040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_initcap_key13062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_round_key13084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_long_key13107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_read_key13135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_only_key13162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_set_key13190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nullif_key13217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_coalesce_key13239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_count_key13261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_avg_key13287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_max_key13308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_min_key13329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sum_key13350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_unknown_key13372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_escape_key13394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_some_key13416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_match_key13443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cast_key13465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_full_key13488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_partial_key13515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_character_key13538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_except_key13565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_char_key13583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_varying_key13611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_varchar_key13634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_national_key13661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nchar_key13683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_bit_key13709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_float_key13736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_real_key13763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_double_key13791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_precision_key13818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_interval_key13846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_time_key13868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_zone_key13891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timestamp_key13913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DATE_in_date_key13938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_numeric_key13961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_decimal_key13989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dec_key14016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_integer_key14044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_int_key14071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_smallint_key14099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_corresponding_key14126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cross_key14149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_join_key14177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_left_key14200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_right_key14224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_inner_key14247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_natural_key14270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_outer_key14293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_using_key14313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_indicator_key14335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_user_key14357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_current_user_key14379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_session_user_key14406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_system_user_key14428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_value_key14450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_substring_key14478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_upper_key14500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_lower_key14522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_convert_key14544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_translate_key14571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_trim_key14598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_leading_key14625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_trailing_key14652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_both_key14679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_collate_key14706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_position_key14728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_extract_key14750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_second_key14777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timezone_hour_key14804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timezone_minute_key14831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_char_length_key14858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_octet_length_key14880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_character_length_key14902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_bit_length_key14924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_local_key14946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_current_timestamp_key14973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_current_date_key14995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_current_time_key15017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_module_key15039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_global_key15061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_year_key15084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_month_key15111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_day_key15139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_hour_key15161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_minute_key15188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_whenever_key15215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_IS_in_is_key15235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_else_key15255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_TABLE_in_table_key15275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_THE_in_the_key15295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_THEN_in_then_key15315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_END_in_end_key15335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_all_key15355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_on_key15375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_OR_in_or_key15395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_AND_in_and_key15415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_not_key15435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_TRUE_in_true_key15455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FALSE_in_false_key15475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_default_key15495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_distinct_key15515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_into_key15535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_BY_in_by_key15555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_AS_in_as_key15575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_in_key15595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_OF_in_of_key15615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_null_key15635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_for_key15655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_SELECT_in_select_key15675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_when_key15695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_delete_key15715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_between_key15735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_like_key15755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_from_key15775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WHERE_in_where_key15795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sequence_key15816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_noorder_key15842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cycle_key15868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cache_key15894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nocache_key15920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nomaxvalue_key15946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nominvalue_key15972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_search_key15998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_depth_key16024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_breadth_key16050 = new BitSet(new long[]{0x0000000000000002L});

}