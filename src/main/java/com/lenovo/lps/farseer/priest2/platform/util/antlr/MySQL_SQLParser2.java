// $ANTLR 3.1.3 Mar 17, 2009 19:23:44 SQLParser2.g 2013-11-29 14:34:08
package com.lenovo.lps.farseer.priest2.platform.util.antlr;

import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.DFA;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.runtime.tree.RewriteRuleSubtreeStream;
import org.antlr.runtime.tree.RewriteRuleTokenStream;
import org.antlr.runtime.tree.TreeAdaptor;

@SuppressWarnings("unused")
public class MySQL_SQLParser2 extends Parser {
    public static final int D_=7;
    public static final int DEGREES=153;
    public static final int NAME_CONST=323;
    public static final int CASCADED=74;
    public static final int KOI8U=262;
    public static final int LAST_DAY=264;
    public static final int LIKE_SYM=276;
    public static final int CONCAT_WS=103;
    public static final int INNER_SYM=243;
    public static final int CACHE_SYM=71;
    public static final int E_=8;
    public static final int REORGANIZE_SYM=378;
    public static final int RPAREN=539;
    public static final int CREATE=124;
    public static final int SUBPARTITIONS_SYM=438;
    public static final int REGEXP=374;
    public static final int GET=529;
    public static final int MEDIUMINT=308;
    public static final int DIVIDE=521;
    public static final int TIME_TO_SEC=457;
    public static final int RBRACK=540;
    public static final int SPATIAL_SYM=417;
    public static final int SQL_CACHE_SYM=420;
    public static final int F_=9;
    public static final int ASC=47;
    public static final int ACOS=31;
    public static final int TRANSACTION=470;
    public static final int LATIN2=270;
    public static final int LATIN1=269;
    public static final int LATIN7=272;
    public static final int HEX_DIGIT_FRAGMENT=551;
    public static final int DAYOFYEAR=147;
    public static final int DAY_MINUTE=142;
    public static final int POWER=358;
    public static final int LATIN5=271;
    public static final int CURDATE=127;
    public static final int TN_SELECT=565;
    public static final int RESTRICT=383;
    public static final int OCT=332;
    public static final int G_=10;
    public static final int LOW_PRIORITY=292;
    public static final int SL_COMMENT=563;
    public static final int USER=486;
    public static final int TN_DROP=586;
    public static final int INVOKER_SYM=252;
    public static final int DATE_SUB=135;
    public static final int ASIN=49;
    public static final int SYSTEM_USER=445;
    public static final int KOI8R=261;
    public static final int LOWER=293;
    public static final int MAXVALUE_SYM=305;
    public static final int GET_FORMAT=216;
    public static final int UTF8=491;
    public static final int AVG_ROW_LENGTH=55;
    public static final int MAX_ROWS=304;
    public static final int CONSTRAINT=107;
    public static final int SQL_SMALL_RESULT=423;
    public static final int OPTIONS_SYM=341;
    public static final int TIME_SYM=456;
    public static final int ALTER=42;
    public static final int LBRACK=541;
    public static final int INTERVAL_SYM=250;
    public static final int UUID=492;
    public static final int TIME_FORMAT=455;
    public static final int CURRENT_USER=129;
    public static final int BTREE_SYM=69;
    public static final int TN_UNION=591;
    public static final int SLEEP=411;
    public static final int LONGBLOB=290;
    public static final int GROUP_SYM=220;
    public static final int RANGE_SYM=368;
    public static final int BIT_NUM=553;
    public static final int LINES=279;
    public static final int TABLE=446;
    public static final int VARCHAR=498;
    public static final int SESSION_USER=401;
    public static final int YEAR_FUNC=517;
    public static final int SUM=442;
    public static final int WHITE_SPACE=562;
    public static final int BITAND=546;
    public static final int CHAR_LENGTH=81;
    public static final int SECOND_MICROSECOND=397;
    public static final int UNIX_TIMESTAMP=480;
    public static final int ADDDATE=34;
    public static final int CONNECTION_ID=105;
    public static final int ANALYZE_SYM=43;
    public static final int NULL_SYM=330;
    public static final int INTEGER_NUM=550;
    public static final int COMPRESS=100;
    public static final int AVG=54;
    public static final int LEFT=273;
    public static final int TRUNCATE=473;
    public static final int A_=4;
    public static final int BIT_SYM=65;
    public static final int EQ_SYM=526;
    public static final int GROUP_CONCAT=219;
    public static final int STD=429;
    public static final int PLUS=542;
    public static final int MINUTE_SECOND=317;
    public static final int OUTER=344;
    public static final int CP866=121;
    public static final int LONGTEXT=291;
    public static final int B_=5;
    public static final int INSTR=247;
    public static final int MINUTE_MICROSECOND=316;
    public static final int REMOVE_SYM=376;
    public static final int HEX_DIGIT=552;
    public static final int RIGHT=385;
    public static final int COMPLETION_SYM=99;
    public static final int ATAN2=52;
    public static final int HAVING=223;
    public static final int CHECK_SYM=84;
    public static final int GB2312=213;
    public static final int MINUS=543;
    public static final int SEMI=534;
    public static final int QUICK=364;
    public static final int NOT_EQ=527;
    public static final int VERTBAR=545;
    public static final int COLON=535;
    public static final int OPTIMIZE=338;
    public static final int DATE_SYM=136;
    public static final int CP852=120;
    public static final int COLUMN_SYM=94;
    public static final int DATABASE=131;
    public static final int ENCRYPT=175;
    public static final int C_=6;
    public static final int CP850=119;
    public static final int VIEW_SYM=502;
    public static final int USE_SYM=485;
    public static final int SQL_BIG_RESULT=418;
    public static final int TEXT_STRING=555;
    public static final int FROM_BASE64=208;
    public static final int ARROW=525;
    public static final int FORMAT=205;
    public static final int NATURAL=324;
    public static final int TN_LOCKTYPE=582;
    public static final int CLOSE_SYM=87;
    public static final int FORCE_SYM=203;
    public static final int PARTITION_SYM=349;
    public static final int WEEK=504;
    public static final int LESS_SYM=275;
    public static final int LN=281;
    public static final int UNSIGNED_SYM=481;
    public static final int SQL_CALC_FOUND_ROWS=421;
    public static final int CONVERT_SYM=109;
    public static final int CHAR=80;
    public static final int INT_SYM=248;
    public static final int COUNT=114;
    public static final int BIT_LENGTH=63;
    public static final int FIND_IN_SET=197;
    public static final int SUBSTRING_INDEX=440;
    public static final int TERMINATED=451;
    public static final int L_=15;
    public static final int DATEDIFF=137;
    public static final int BENCHMARK=56;
    public static final int CURTIME=130;
    public static final int QUOTE=365;
    public static final int ENDS_SYM=177;
    public static final int QUARTER=362;
    public static final int XML_SYM=514;
    public static final int BIT_OR=64;
    public static final int TAN=448;
    public static final int SWE7=443;
    public static final int MEDIUMBLOB=307;
    public static final int LATIN1_BIN=267;
    public static final int PERIOD_DIFF=354;
    public static final int HOUR_MICROSECOND=229;
    public static final int TN_REPLACE=588;
    public static final int TN_COL=568;
    public static final int AND_SYM=524;
    public static final int LPAD=294;
    public static final int TN_ORDERBY=580;
    public static final int SELECT=399;
    public static final int M_=16;
    public static final int BIG5=58;
    public static final int INTO=251;
    public static final int DELAYED_SYM=155;
    public static final int LTRIM=295;
    public static final int COALESCE=88;
    public static final int SECOND=396;
    public static final int DAY_MICROSECOND=141;
    public static final int FILE_SYM=196;
    public static final int TN_PARTITION=576;
    public static final int LOG10=288;
    public static final int SQL_NO_CACHE_SYM=422;
    public static final int TINYTEXT=464;
    public static final int CIPHER_SYM=86;
    public static final int ON=335;
    public static final int SHARED_SYM=403;
    public static final int MATCH=302;
    public static final int FOR_SYM=202;
    public static final int STRAIGHT_JOIN=435;
    public static final int FLOOR=201;
    public static final int COMMITTED_SYM=97;
    public static final int COLLATE_SYM=91;
    public static final int AGAINST=39;
    public static final int N_=17;
    public static final int SHIFT_LEFT=531;
    public static final int SHIFT_RIGHT=532;
    public static final int FIELDS_SYM=194;
    public static final int DELETE_SYM=156;
    public static final int DISCARD=162;
    public static final int FOUND_ROWS=206;
    public static final int ADDTIME=35;
    public static final int MODE_SYM=319;
    public static final int TO_BASE64=466;
    public static final int PORT_SYM=356;
    public static final int TN_SUBQUERY=597;
    public static final int STDDEV=430;
    public static final int DOUBLE_SYM=166;
    public static final int ROUND=387;
    public static final int CONCURRENT=104;
    public static final int ONE_SYM=336;
    public static final int PI=355;
    public static final int THEN_SYM=454;
    public static final int KEY_BLOCK_SIZE=257;
    public static final int TN_ALTER=585;
    public static final int GET_LOCK=217;
    public static final int IN_SYM=238;
    public static final int TIMESTAMP=459;
    public static final int O_=18;
    public static final int UPPER=484;
    public static final int DISTINCTROW=164;
    public static final int WHERE=509;
    public static final int VAR_SAMP=496;
    public static final int TN_COL_EXP=571;
    public static final int DIRECTORY_SYM=160;
    public static final int LOAD_FILE=283;
    public static final int BIT_AND=62;
    public static final int UTC_TIMESTAMP=490;
    public static final int ROW_FORMAT_SYM=388;
    public static final int LIMIT=277;
    public static final int TN_LIMIT=581;
    public static final int MOD_SYM=522;
    public static final int ADD_SYM=33;
    public static final int H_=11;
    public static final int ID=556;
    public static final int SPACE=416;
    public static final int ENABLE_SYM=172;
    public static final int CROSS=126;
    public static final int DATA_SYM=132;
    public static final int LENGTH=274;
    public static final int IF=234;
    public static final int YEAR_MONTH=518;
    public static final int TN_JOIN_QUALIFIER=593;
    public static final int MACCE=296;
    public static final int QUERY_SYM=363;
    public static final int MD5=306;
    public static final int COMMA=537;
    public static final int EXPORT_SET=191;
    public static final int HEX=225;
    public static final int REFERENCES=373;
    public static final int OFFSET_SYM=333;
    public static final int WAIT_SYM=503;
    public static final int ELSE_SYM=170;
    public static final int PARTITIONS_SYM=351;
    public static final int AT_SYM=50;
    public static final int I_=12;
    public static final int CHECKSUM_SYM=85;
    public static final int TN_JOIN=592;
    public static final int WITH=510;
    public static final int FULLTEXT_SYM=212;
    public static final int EUCJPMS=182;
    public static final int IS_SYM=254;
    public static final int VARBINARY=497;
    public static final int GBK=214;
    public static final int UNHEX=477;
    public static final int OPEN_SYM=337;
    public static final int DATETIME=138;
    public static final int SOUNDS_SYM=415;
    public static final int DEFAULT=151;
    public static final int J_=13;
    public static final int DEC8=148;
    public static final int SQRT=425;
    public static final int DO_SYM=165;
    public static final int STRCMP=436;
    public static final int LAST_INSERT_ID=265;
    public static final int END_SYM=176;
    public static final int SUBPARTITION_SYM=437;
    public static final int SUBSTRING=439;
    public static final int LATIN1_GENERAL_CS=268;
    public static final int COMPACT_SYM=98;
    public static final int DAY_SECOND=143;
    public static final int BLOB_SYM=67;
    public static final int TN_FUNCTION=596;
    public static final int LOCATE=285;
    public static final int MODIFY_SYM=320;
    public static final int CROSECOND=125;
    public static final int TN_CREATE=584;
    public static final int VARIANCE=500;
    public static final int K_=14;
    public static final int TN_SELECT_OPTIONS=566;
    public static final int TN_UPDATE=583;
    public static final int MINUTE=315;
    public static final int INFILE=242;
    public static final int LET=528;
    public static final int COMPRESSED_SYM=101;
    public static final int TN_WHERE=577;
    public static final int IGNORE_SYM=236;
    public static final int DES_DECRYPT=157;
    public static final int GREEK=218;
    public static final int USING_SYM=487;
    public static final int INSERT_METHOD=246;
    public static final int MOD=318;
    public static final int LOCAL_SYM=284;
    public static final int UNIQUE_SYM=479;
    public static final int TN_CASE_WHEN=598;
    public static final int NOW=329;
    public static final int U_=24;
    public static final int EOF=-1;
    public static final int FOREIGN=204;
    public static final int UTC_DATE=488;
    public static final int UNDEFINED_SYM=476;
    public static final int ACTION=32;
    public static final int MONTH=321;
    public static final int TN_TRUNCATE=590;
    public static final int IDENTIFIED_SYM=233;
    public static final int TN_GROUPBY=578;
    public static final int USER_VAR=561;
    public static final int WEIGHT_STRING=507;
    public static final int STDDEV_POP=431;
    public static final int AS_SYM=46;
    public static final int IMPORT=237;
    public static final int SIN=408;
    public static final int NO_SYM=326;
    public static final int STORAGE_SYM=433;
    public static final int TRUE_SYM=472;
    public static final int AUTO_INCREMENT=53;
    public static final int TEXT_SYM=452;
    public static final int ZEROFILL=520;
    public static final int PREV_SYM=360;
    public static final int T_=23;
    public static final int CONNECTION_SYM=106;
    public static final int TINYBLOB=462;
    public static final int BY_SYM=70;
    public static final int DAYOFWEEK=146;
    public static final int ARMSCII8=45;
    public static final int STDDEV_SAMP=432;
    public static final int MONTHNAME=322;
    public static final int ROLLUP_SYM=386;
    public static final int CHARACTER_SYM=82;
    public static final int WRAPPER_SYM=511;
    public static final int SLAVE=410;
    public static final int DELAY_KEY_WRITE_SYM=154;
    public static final int YEARWEEK=519;
    public static final int TIS620=465;
    public static final int IS_USED_LOCK=255;
    public static final int SHARE_SYM=404;
    public static final int ELT=171;
    public static final int PRIMARY_SYM=361;
    public static final int LOAD=282;
    public static final int AES_DECRYPT=36;
    public static final int TIMESTAMPADD=460;
    public static final int MEDIUMTEXT=309;
    public static final int DEFINER=152;
    public static final int W_=26;
    public static final int UPGRADE_SYM=483;
    public static final int MERGE_SYM=310;
    public static final int TABLESPACE=447;
    public static final int ABS=30;
    public static final int INET_ATON=240;
    public static final int REAL=370;
    public static final int CALL_SYM=72;
    public static final int LANGUAGE=263;
    public static final int UNION_SYM=478;
    public static final int RADIANS=366;
    public static final int MAKEDATE=299;
    public static final int REAL_NUMBER=554;
    public static final int TN_TABLE_SPEC=575;
    public static final int TRIM=471;
    public static final int V_=25;
    public static final int MIN_ROWS=314;
    public static final int REPEAT=380;
    public static final int UTC_TIME=489;
    public static final int NONE_SYM=327;
    public static final int REVERSE=384;
    public static final int TO_DAYS=467;
    public static final int INTEGER_SYM=249;
    public static final int TEMPTABLE_SYM=450;
    public static final int STATS_AUTO_RECALC=427;
    public static final int DISABLE_SYM=161;
    public static final int CONVERT_TZ=110;
    public static final int HEBREW=224;
    public static final int REBUILD_SYM=371;
    public static final int REPLICATION=382;
    public static final int RENAME=377;
    public static final int SQL_BUFFER_RESULT=419;
    public static final int OPTION=339;
    public static final int JOIN_SYM=256;
    public static final int PERIOD_ADD=353;
    public static final int MICROSECOND=311;
    public static final int EXCLUSIVE_SYM=187;
    public static final int OPTIONALLY=340;
    public static final int TN_HAVING=579;
    public static final int NEXT_SYM=325;
    public static final int ALL_FIELDS=533;
    public static final int Q_=20;
    public static final int CHARSET=83;
    public static final int SOCKET_SYM=413;
    public static final int DAYOFMONTH=145;
    public static final int ASTERISK=538;
    public static final int LPAREN=516;
    public static final int PARSER_SYM=347;
    public static final int DAY_HOUR=140;
    public static final int COLLATION=92;
    public static final int REPLACE=381;
    public static final int EUCKR=183;
    public static final int HANDLER_SYM=221;
    public static final int RAND=367;
    public static final int TIMEDIFF=458;
    public static final int FROM_UNIXTIME=210;
    public static final int EXISTS=188;
    public static final int INET_NTOA=241;
    public static final int P_=19;
    public static final int INDEX_SYM=239;
    public static final int CP932=122;
    public static final int NUMERIC_SYM=331;
    public static final int PACK_KEYS_SYM=346;
    public static final int DES_ENCRYPT=158;
    public static final int MACROMAN=297;
    public static final int TN_COL_ALLC=569;
    public static final int FALSE_SYM=193;
    public static final int MID=312;
    public static final int UCS2=474;
    public static final int WRITE_SYM=512;
    public static final int TO_SYM=469;
    public static final int HOUR=228;
    public static final int THAN_SYM=453;
    public static final int CHANGE=79;
    public static final int S_=22;
    public static final int REDUNDANT_SYM=372;
    public static final int SCHEMA=394;
    public static final int ENUM=179;
    public static final int COLUMNS_SYM=95;
    public static final int NEGATION=544;
    public static final int DROP=167;
    public static final int BIGINT=59;
    public static final int EXPANSION_SYM=190;
    public static final int BIT_XOR=66;
    public static final int VALUE_SYM=493;
    public static final int HOUR_MINUTE=230;
    public static final int ORDER_SYM=343;
    public static final int IS_FREE_LOCK=253;
    public static final int XA_SYM=513;
    public static final int BIN=60;
    public static final int BETWEEN=57;
    public static final int R_=21;
    public static final int SIGN=405;
    public static final int LOG=287;
    public static final int OWNER_SYM=345;
    public static final int MAKETIME=300;
    public static final int TN_COL_BITEXP=572;
    public static final int DAYNAME=144;
    public static final int CASCADE=73;
    public static final int OR_SYM=523;
    public static final int MIN_SYM=313;
    public static final int TO_SECONDS=468;
    public static final int TN_JOIN_COND=595;
    public static final int WEEKDAY=505;
    public static final int SOUNDEX=414;
    public static final int FULL=211;
    public static final int REPAIR=379;
    public static final int COT=113;
    public static final int POW=357;
    public static final int INSERT=245;
    public static final int SECURITY_SYM=398;
    public static final int EXP=189;
    public static final int DATE_FORMAT=134;
    public static final int COS=112;
    public static final int EVENT_SYM=184;
    public static final int BOOLEAN_SYM=68;
    public static final int FIRST_SYM=198;
    public static final int TINYINT=463;
    public static final int AES_ENCRYPT=37;
    public static final int LOG2=289;
    public static final int MASTER_POS_WAIT=301;
    public static final int ATAN=51;
    public static final int TN_COLS=567;
    public static final int FLOAT_SYM=200;
    public static final int EVERY_SYM=185;
    public static final int NOT_SYM=328;
    public static final int CP1256=117;
    public static final int COMMENT_SYM=96;
    public static final int CP1251=116;
    public static final int CP1250=115;
    public static final int CONCAT=102;
    public static final int KEYBCS2=259;
    public static final int OLD_PASSWORD=334;
    public static final int LIST_SYM=280;
    public static final int CODE_SYM=89;
    public static final int DATE_ADD=133;
    public static final int POWER_OP=547;
    public static final int VERSION_SYM=501;
    public static final int HOUR_SECOND=231;
    public static final int PASSWORD=352;
    public static final int CP1257=118;
    public static final int COLUMN_FORMAT=93;
    public static final int CASE_SYM=75;
    public static final int SERVER_SYM=400;
    public static final int VAR_POP=495;
    public static final int TIMESTAMPDIFF=461;
    public static final int SUBTIME=441;
    public static final int FIELD=195;
    public static final int ESCAPED=181;
    public static final int STR_TO_DATE=434;
    public static final int FROM=207;
    public static final int GEOSTD8=215;
    public static final int TEMPORARY=449;
    public static final int DISTINCT=163;
    public static final int RTRIM=392;
    public static final int ENCODE=174;
    public static final int SEC_TO_TIME=395;
    public static final int UJIS=475;
    public static final int Y_=28;
    public static final int MAKE_SET=298;
    public static final int CEILING=78;
    public static final int GTH=548;
    public static final int DECIMAL_SYM=149;
    public static final int FROM_DAYS=209;
    public static final int COPY_SYM=111;
    public static final int UPDATE=482;
    public static final int TN_INSERT=587;
    public static final int WEEKOFYEAR=506;
    public static final int HP8=232;
    public static final int SCHEDULE_SYM=393;
    public static final int AFTER_SYM=38;
    public static final int READ_SYM=369;
    public static final int ORD=342;
    public static final int LOCK=286;
    public static final int RELEASE_LOCK=375;
    public static final int ROWS_SYM=390;
    public static final int ML_COMMENT=564;
    public static final int X_=27;
    public static final int PRESERVE_SYM=359;
    public static final int INPLACE_SYM=244;
    public static final int SJIS=409;
    public static final int SYSDATE=444;
    public static final int ALGORITHM_SYM=40;
    public static final int ALL=41;
    public static final int HIGH_PRIORITY=226;
    public static final int COERCIBILITY=90;
    public static final int TN_JOIN_TABLE=594;
    public static final int DAY_SYM=139;
    public static final int ASCII_SYM=48;
    public static final int DOT=536;
    public static final int EXTRACT=192;
    public static final int STATS_PERSISTENT=428;
    public static final int EXCHANGE_SYM=186;
    public static final int CURRENT_TIMESTAMP=128;
    public static final int PARTITIONING_SYM=350;
    public static final int PARTIAL=348;
    public static final int USER_VAR_SUBFIX4=560;
    public static final int TN_TABLE_REF=574;
    public static final int USER_VAR_SUBFIX3=559;
    public static final int SIMPLE_SYM=407;
    public static final int USER_VAR_SUBFIX2=558;
    public static final int USER_VAR_SUBFIX1=557;
    public static final int XOR=515;
    public static final int CRC32=123;
    public static final int VALUES=494;
    public static final int HOST_SYM=227;
    public static final int SET_VAR=530;
    public static final int IFNULL=235;
    public static final int DYNAMIC_SYM=169;
    public static final int TN_FROM=573;
    public static final int ROW_SYM=389;
    public static final int ENCLOSED=173;
    public static final int DUPLICATE_SYM=168;
    public static final int LAST_SYM=266;
    public static final int TN_DELETE=589;
    public static final int KEY_SYM=258;
    public static final int LINEAR_SYM=278;
    public static final int TN_COL_ALLTC=570;
    public static final int LTH=549;
    public static final int ANY=44;
    public static final int Z_=29;
    public static final int SET_SYM=402;
    public static final int ESCAPE_SYM=180;
    public static final int DECODE=150;
    public static final int CONV=108;
    public static final int VARIABLES=499;
    public static final int STARTING=426;
    public static final int CEIL=77;
    public static final int SIGNED_SYM=406;
    public static final int FIXED_SYM=199;
    public static final int WHEN_SYM=508;
    public static final int DESC=159;
    public static final int BINARY=61;
    public static final int CAST_SYM=76;
    public static final int HASH_SYM=222;
    public static final int KEYS=260;
    public static final int MAX_SYM=303;
    public static final int ENGINE_SYM=178;
    public static final int SQL_SYM=424;
    public static final int RPAD=391;
    public static final int SMALLINT=412;

    // delegates
    // delegators
    public MySQLParser gMySQL;
    public MySQLParser gParent;


        public MySQL_SQLParser2(TokenStream input, MySQLParser gMySQL) {
            this(input, new RecognizerSharedState(), gMySQL);
        }
        public MySQL_SQLParser2(TokenStream input, RecognizerSharedState state, MySQLParser gMySQL) {
            super(input, state);
            this.gMySQL = gMySQL;
             
            gParent = gMySQL;
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return MySQLParser.tokenNames; }
    public String getGrammarFileName() { return "SQLParser2.g"; }


    public static class create_table_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_table_statement"
    // SQLParser2.g:10:1: create_table_statement : ( create_table_statement1 | create_table_statement2 | create_table_statement3 );
    public final MySQL_SQLParser2.create_table_statement_return create_table_statement() throws RecognitionException {
        MySQL_SQLParser2.create_table_statement_return retval = new MySQL_SQLParser2.create_table_statement_return();
        retval.start = input.LT(1);
        int create_table_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        MySQL_SQLParser2.create_table_statement1_return create_table_statement11 = null;

        MySQL_SQLParser2.create_table_statement2_return create_table_statement22 = null;

        MySQL_SQLParser2.create_table_statement3_return create_table_statement33 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // SQLParser2.g:10:23: ( create_table_statement1 | create_table_statement2 | create_table_statement3 )
            int alt1=3;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // SQLParser2.g:11:2: create_table_statement1
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_create_table_statement1_in_create_table_statement19);
                    create_table_statement11=create_table_statement1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement11.getTree());

                    }
                    break;
                case 2 :
                    // SQLParser2.g:11:28: create_table_statement2
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_create_table_statement2_in_create_table_statement23);
                    create_table_statement22=create_table_statement2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement22.getTree());

                    }
                    break;
                case 3 :
                    // SQLParser2.g:11:54: create_table_statement3
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_create_table_statement3_in_create_table_statement27);
                    create_table_statement33=create_table_statement3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, create_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_table_statement"

    public static class create_table_statement1_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_table_statement1"
    // SQLParser2.g:14:1: create_table_statement1 : CREATE create_table_expression1 -> ^( TN_CREATE create_table_expression1 ) ;
    public final MySQL_SQLParser2.create_table_statement1_return create_table_statement1() throws RecognitionException {
        MySQL_SQLParser2.create_table_statement1_return retval = new MySQL_SQLParser2.create_table_statement1_return();
        retval.start = input.LT(1);
        int create_table_statement1_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CREATE4=null;
        MySQL_SQLParser2.create_table_expression1_return create_table_expression15 = null;


        CommonTree CREATE4_tree=null;
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_create_table_expression1=new RewriteRuleSubtreeStream(adaptor,"rule create_table_expression1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // SQLParser2.g:14:24: ( CREATE create_table_expression1 -> ^( TN_CREATE create_table_expression1 ) )
            // SQLParser2.g:15:2: CREATE create_table_expression1
            {
            CREATE4=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE4);

            pushFollow(FOLLOW_create_table_expression1_in_create_table_statement139);
            create_table_expression15=create_table_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_create_table_expression1.add(create_table_expression15.getTree());


            // AST REWRITE
            // elements: create_table_expression1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 15:34: -> ^( TN_CREATE create_table_expression1 )
            {
                // SQLParser2.g:15:37: ^( TN_CREATE create_table_expression1 )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TN_CREATE, "TN_CREATE"), root_1);

                adaptor.addChild(root_1, stream_create_table_expression1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, create_table_statement1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_table_statement1"

    public static class create_table_expression1_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_table_expression1"
    // SQLParser2.g:18:1: create_table_expression1 : ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )? ;
    public final MySQL_SQLParser2.create_table_expression1_return create_table_expression1() throws RecognitionException {
        MySQL_SQLParser2.create_table_expression1_return retval = new MySQL_SQLParser2.create_table_expression1_return();
        retval.start = input.LT(1);
        int create_table_expression1_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TEMPORARY6=null;
        Token TABLE7=null;
        Token IF8=null;
        Token NOT_SYM9=null;
        Token EXISTS10=null;
        Token LPAREN12=null;
        Token COMMA14=null;
        Token RPAREN16=null;
        MySQLParser.table_name_return table_name11 = null;

        MySQL_SQLParser2.create_definition_return create_definition13 = null;

        MySQL_SQLParser2.create_definition_return create_definition15 = null;

        MySQL_SQLParser2.table_options_return table_options17 = null;

        MySQL_SQLParser2.partition_options_return partition_options18 = null;

        MySQLParser.select_statement_return select_statement19 = null;


        CommonTree TEMPORARY6_tree=null;
        CommonTree TABLE7_tree=null;
        CommonTree IF8_tree=null;
        CommonTree NOT_SYM9_tree=null;
        CommonTree EXISTS10_tree=null;
        CommonTree LPAREN12_tree=null;
        CommonTree COMMA14_tree=null;
        CommonTree RPAREN16_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // SQLParser2.g:18:25: ( ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )? )
            // SQLParser2.g:19:2: ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // SQLParser2.g:19:2: ( TEMPORARY )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==TEMPORARY) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // SQLParser2.g:19:3: TEMPORARY
                    {
                    TEMPORARY6=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_expression157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEMPORARY6_tree = (CommonTree)adaptor.create(TEMPORARY6);
                    adaptor.addChild(root_0, TEMPORARY6_tree);
                    }

                    }
                    break;

            }

            TABLE7=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_expression161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE7_tree = (CommonTree)adaptor.create(TABLE7);
            adaptor.addChild(root_0, TABLE7_tree);
            }
            // SQLParser2.g:19:21: ( IF NOT_SYM EXISTS )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==IF) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // SQLParser2.g:19:22: IF NOT_SYM EXISTS
                    {
                    IF8=(Token)match(input,IF,FOLLOW_IF_in_create_table_expression164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF8_tree = (CommonTree)adaptor.create(IF8);
                    adaptor.addChild(root_0, IF8_tree);
                    }
                    NOT_SYM9=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_expression166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_SYM9_tree = (CommonTree)adaptor.create(NOT_SYM9);
                    adaptor.addChild(root_0, NOT_SYM9_tree);
                    }
                    EXISTS10=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_expression168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS10_tree = (CommonTree)adaptor.create(EXISTS10);
                    adaptor.addChild(root_0, EXISTS10_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_create_table_expression172);
            table_name11=gMySQL.table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name11.getTree());
            LPAREN12=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_table_expression175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN12_tree = (CommonTree)adaptor.create(LPAREN12);
            adaptor.addChild(root_0, LPAREN12_tree);
            }
            pushFollow(FOLLOW_create_definition_in_create_table_expression177);
            create_definition13=create_definition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, create_definition13.getTree());
            // SQLParser2.g:20:27: ( COMMA create_definition )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==COMMA) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // SQLParser2.g:20:28: COMMA create_definition
            	    {
            	    COMMA14=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_table_expression180); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA14_tree = (CommonTree)adaptor.create(COMMA14);
            	    adaptor.addChild(root_0, COMMA14_tree);
            	    }
            	    pushFollow(FOLLOW_create_definition_in_create_table_expression182);
            	    create_definition15=create_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_definition15.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);

            RPAREN16=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_table_expression186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN16_tree = (CommonTree)adaptor.create(RPAREN16);
            adaptor.addChild(root_0, RPAREN16_tree);
            }
            // SQLParser2.g:21:2: ( table_options )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==AUTO_INCREMENT||LA5_0==AVG_ROW_LENGTH||(LA5_0>=CHARACTER_SYM && LA5_0<=CHARSET)||LA5_0==CHECKSUM_SYM||LA5_0==COLLATE_SYM||LA5_0==COMMENT_SYM||LA5_0==CONNECTION_SYM||LA5_0==DATA_SYM||LA5_0==DEFAULT||LA5_0==DELAY_KEY_WRITE_SYM||LA5_0==ENGINE_SYM||LA5_0==INDEX_SYM||LA5_0==INSERT_METHOD||LA5_0==KEY_BLOCK_SIZE||LA5_0==MAX_ROWS||LA5_0==MIN_ROWS||LA5_0==PACK_KEYS_SYM||LA5_0==PASSWORD||LA5_0==ROW_FORMAT_SYM||(LA5_0>=STATS_AUTO_RECALC && LA5_0<=STATS_PERSISTENT)||LA5_0==UNION_SYM) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // SQLParser2.g:21:3: table_options
                    {
                    pushFollow(FOLLOW_table_options_in_create_table_expression190);
                    table_options17=table_options();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options17.getTree());

                    }
                    break;

            }

            // SQLParser2.g:22:2: ( partition_options )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==PARTITION_SYM) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // SQLParser2.g:22:3: partition_options
                    {
                    pushFollow(FOLLOW_partition_options_in_create_table_expression196);
                    partition_options18=partition_options();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options18.getTree());

                    }
                    break;

            }

            // SQLParser2.g:23:2: ( select_statement )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SELECT) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // SQLParser2.g:23:3: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_create_table_expression1102);
                    select_statement19=gMySQL.select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement19.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, create_table_expression1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_table_expression1"

    public static class create_table_statement2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_table_statement2"
    // SQLParser2.g:26:1: create_table_statement2 : CREATE create_table_expression2 -> ^( TN_CREATE create_table_expression2 ) ;
    public final MySQL_SQLParser2.create_table_statement2_return create_table_statement2() throws RecognitionException {
        MySQL_SQLParser2.create_table_statement2_return retval = new MySQL_SQLParser2.create_table_statement2_return();
        retval.start = input.LT(1);
        int create_table_statement2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CREATE20=null;
        MySQL_SQLParser2.create_table_expression2_return create_table_expression221 = null;


        CommonTree CREATE20_tree=null;
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_create_table_expression2=new RewriteRuleSubtreeStream(adaptor,"rule create_table_expression2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // SQLParser2.g:26:24: ( CREATE create_table_expression2 -> ^( TN_CREATE create_table_expression2 ) )
            // SQLParser2.g:27:2: CREATE create_table_expression2
            {
            CREATE20=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement2114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE20);

            pushFollow(FOLLOW_create_table_expression2_in_create_table_statement2116);
            create_table_expression221=create_table_expression2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_create_table_expression2.add(create_table_expression221.getTree());


            // AST REWRITE
            // elements: create_table_expression2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 27:34: -> ^( TN_CREATE create_table_expression2 )
            {
                // SQLParser2.g:27:37: ^( TN_CREATE create_table_expression2 )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TN_CREATE, "TN_CREATE"), root_1);

                adaptor.addChild(root_1, stream_create_table_expression2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, create_table_statement2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_table_statement2"

    public static class create_table_expression2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_table_expression2"
    // SQLParser2.g:30:1: create_table_expression2 : ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement ;
    public final MySQL_SQLParser2.create_table_expression2_return create_table_expression2() throws RecognitionException {
        MySQL_SQLParser2.create_table_expression2_return retval = new MySQL_SQLParser2.create_table_expression2_return();
        retval.start = input.LT(1);
        int create_table_expression2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TEMPORARY22=null;
        Token TABLE23=null;
        Token IF24=null;
        Token NOT_SYM25=null;
        Token EXISTS26=null;
        MySQLParser.table_name_return table_name27 = null;

        MySQL_SQLParser2.table_options_return table_options28 = null;

        MySQL_SQLParser2.partition_options_return partition_options29 = null;

        MySQLParser.select_statement_return select_statement30 = null;


        CommonTree TEMPORARY22_tree=null;
        CommonTree TABLE23_tree=null;
        CommonTree IF24_tree=null;
        CommonTree NOT_SYM25_tree=null;
        CommonTree EXISTS26_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // SQLParser2.g:30:25: ( ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement )
            // SQLParser2.g:31:2: ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            // SQLParser2.g:31:2: ( TEMPORARY )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==TEMPORARY) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // SQLParser2.g:31:3: TEMPORARY
                    {
                    TEMPORARY22=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_expression2134); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEMPORARY22_tree = (CommonTree)adaptor.create(TEMPORARY22);
                    adaptor.addChild(root_0, TEMPORARY22_tree);
                    }

                    }
                    break;

            }

            TABLE23=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_expression2138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE23_tree = (CommonTree)adaptor.create(TABLE23);
            adaptor.addChild(root_0, TABLE23_tree);
            }
            // SQLParser2.g:31:21: ( IF NOT_SYM EXISTS )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IF) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // SQLParser2.g:31:22: IF NOT_SYM EXISTS
                    {
                    IF24=(Token)match(input,IF,FOLLOW_IF_in_create_table_expression2141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF24_tree = (CommonTree)adaptor.create(IF24);
                    adaptor.addChild(root_0, IF24_tree);
                    }
                    NOT_SYM25=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_expression2143); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_SYM25_tree = (CommonTree)adaptor.create(NOT_SYM25);
                    adaptor.addChild(root_0, NOT_SYM25_tree);
                    }
                    EXISTS26=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_expression2145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS26_tree = (CommonTree)adaptor.create(EXISTS26);
                    adaptor.addChild(root_0, EXISTS26_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_create_table_expression2149);
            table_name27=gMySQL.table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name27.getTree());
            // SQLParser2.g:32:2: ( table_options )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==AUTO_INCREMENT||LA10_0==AVG_ROW_LENGTH||(LA10_0>=CHARACTER_SYM && LA10_0<=CHARSET)||LA10_0==CHECKSUM_SYM||LA10_0==COLLATE_SYM||LA10_0==COMMENT_SYM||LA10_0==CONNECTION_SYM||LA10_0==DATA_SYM||LA10_0==DEFAULT||LA10_0==DELAY_KEY_WRITE_SYM||LA10_0==ENGINE_SYM||LA10_0==INDEX_SYM||LA10_0==INSERT_METHOD||LA10_0==KEY_BLOCK_SIZE||LA10_0==MAX_ROWS||LA10_0==MIN_ROWS||LA10_0==PACK_KEYS_SYM||LA10_0==PASSWORD||LA10_0==ROW_FORMAT_SYM||(LA10_0>=STATS_AUTO_RECALC && LA10_0<=STATS_PERSISTENT)||LA10_0==UNION_SYM) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // SQLParser2.g:32:3: table_options
                    {
                    pushFollow(FOLLOW_table_options_in_create_table_expression2153);
                    table_options28=table_options();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options28.getTree());

                    }
                    break;

            }

            // SQLParser2.g:33:2: ( partition_options )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==PARTITION_SYM) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // SQLParser2.g:33:3: partition_options
                    {
                    pushFollow(FOLLOW_partition_options_in_create_table_expression2159);
                    partition_options29=partition_options();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options29.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_select_statement_in_create_table_expression2164);
            select_statement30=gMySQL.select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement30.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, create_table_expression2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_table_expression2"

    public static class create_table_statement3_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_table_statement3"
    // SQLParser2.g:37:1: create_table_statement3 : CREATE create_table_expression3 -> ^( TN_CREATE create_table_expression3 ) ;
    public final MySQL_SQLParser2.create_table_statement3_return create_table_statement3() throws RecognitionException {
        MySQL_SQLParser2.create_table_statement3_return retval = new MySQL_SQLParser2.create_table_statement3_return();
        retval.start = input.LT(1);
        int create_table_statement3_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CREATE31=null;
        MySQL_SQLParser2.create_table_expression3_return create_table_expression332 = null;


        CommonTree CREATE31_tree=null;
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_create_table_expression3=new RewriteRuleSubtreeStream(adaptor,"rule create_table_expression3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // SQLParser2.g:37:24: ( CREATE create_table_expression3 -> ^( TN_CREATE create_table_expression3 ) )
            // SQLParser2.g:38:2: CREATE create_table_expression3
            {
            CREATE31=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement3174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE31);

            pushFollow(FOLLOW_create_table_expression3_in_create_table_statement3176);
            create_table_expression332=create_table_expression3();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_create_table_expression3.add(create_table_expression332.getTree());


            // AST REWRITE
            // elements: create_table_expression3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 38:34: -> ^( TN_CREATE create_table_expression3 )
            {
                // SQLParser2.g:38:37: ^( TN_CREATE create_table_expression3 )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TN_CREATE, "TN_CREATE"), root_1);

                adaptor.addChild(root_1, stream_create_table_expression3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, create_table_statement3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_table_statement3"

    public static class create_table_expression3_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_table_expression3"
    // SQLParser2.g:41:1: create_table_expression3 : ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) ) ;
    public final MySQL_SQLParser2.create_table_expression3_return create_table_expression3() throws RecognitionException {
        MySQL_SQLParser2.create_table_expression3_return retval = new MySQL_SQLParser2.create_table_expression3_return();
        retval.start = input.LT(1);
        int create_table_expression3_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TEMPORARY33=null;
        Token TABLE34=null;
        Token IF35=null;
        Token NOT_SYM36=null;
        Token EXISTS37=null;
        Token LIKE_SYM39=null;
        Token LPAREN41=null;
        Token LIKE_SYM42=null;
        Token RPAREN44=null;
        MySQLParser.table_name_return table_name38 = null;

        MySQLParser.table_name_return table_name40 = null;

        MySQLParser.table_name_return table_name43 = null;


        CommonTree TEMPORARY33_tree=null;
        CommonTree TABLE34_tree=null;
        CommonTree IF35_tree=null;
        CommonTree NOT_SYM36_tree=null;
        CommonTree EXISTS37_tree=null;
        CommonTree LIKE_SYM39_tree=null;
        CommonTree LPAREN41_tree=null;
        CommonTree LIKE_SYM42_tree=null;
        CommonTree RPAREN44_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // SQLParser2.g:41:25: ( ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) ) )
            // SQLParser2.g:42:2: ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) )
            {
            root_0 = (CommonTree)adaptor.nil();

            // SQLParser2.g:42:2: ( TEMPORARY )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==TEMPORARY) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // SQLParser2.g:42:3: TEMPORARY
                    {
                    TEMPORARY33=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_expression3194); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEMPORARY33_tree = (CommonTree)adaptor.create(TEMPORARY33);
                    adaptor.addChild(root_0, TEMPORARY33_tree);
                    }

                    }
                    break;

            }

            TABLE34=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_expression3198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE34_tree = (CommonTree)adaptor.create(TABLE34);
            adaptor.addChild(root_0, TABLE34_tree);
            }
            // SQLParser2.g:42:21: ( IF NOT_SYM EXISTS )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==IF) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // SQLParser2.g:42:22: IF NOT_SYM EXISTS
                    {
                    IF35=(Token)match(input,IF,FOLLOW_IF_in_create_table_expression3201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF35_tree = (CommonTree)adaptor.create(IF35);
                    adaptor.addChild(root_0, IF35_tree);
                    }
                    NOT_SYM36=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_expression3203); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_SYM36_tree = (CommonTree)adaptor.create(NOT_SYM36);
                    adaptor.addChild(root_0, NOT_SYM36_tree);
                    }
                    EXISTS37=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_expression3205); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS37_tree = (CommonTree)adaptor.create(EXISTS37);
                    adaptor.addChild(root_0, EXISTS37_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_create_table_expression3209);
            table_name38=gMySQL.table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name38.getTree());
            // SQLParser2.g:43:2: ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==LIKE_SYM) ) {
                alt14=1;
            }
            else if ( (LA14_0==LPAREN) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // SQLParser2.g:43:4: ( LIKE_SYM table_name )
                    {
                    // SQLParser2.g:43:4: ( LIKE_SYM table_name )
                    // SQLParser2.g:43:5: LIKE_SYM table_name
                    {
                    LIKE_SYM39=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_create_table_expression3215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_SYM39_tree = (CommonTree)adaptor.create(LIKE_SYM39);
                    adaptor.addChild(root_0, LIKE_SYM39_tree);
                    }
                    pushFollow(FOLLOW_table_name_in_create_table_expression3217);
                    table_name40=gMySQL.table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name40.getTree());

                    }


                    }
                    break;
                case 2 :
                    // SQLParser2.g:43:28: ( LPAREN LIKE_SYM table_name RPAREN )
                    {
                    // SQLParser2.g:43:28: ( LPAREN LIKE_SYM table_name RPAREN )
                    // SQLParser2.g:43:29: LPAREN LIKE_SYM table_name RPAREN
                    {
                    LPAREN41=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_table_expression3223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN41_tree = (CommonTree)adaptor.create(LPAREN41);
                    adaptor.addChild(root_0, LPAREN41_tree);
                    }
                    LIKE_SYM42=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_create_table_expression3225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_SYM42_tree = (CommonTree)adaptor.create(LIKE_SYM42);
                    adaptor.addChild(root_0, LIKE_SYM42_tree);
                    }
                    pushFollow(FOLLOW_table_name_in_create_table_expression3227);
                    table_name43=gMySQL.table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name43.getTree());
                    RPAREN44=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_table_expression3229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN44_tree = (CommonTree)adaptor.create(RPAREN44);
                    adaptor.addChild(root_0, RPAREN44_tree);
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, create_table_expression3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_table_expression3"

    public static class create_definition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_definition"
    // SQLParser2.g:46:1: create_definition : ( ( column_name column_definition ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition ) | ( CHECK_SYM LPAREN expression RPAREN ) );
    public final MySQL_SQLParser2.create_definition_return create_definition() throws RecognitionException {
        MySQL_SQLParser2.create_definition_return retval = new MySQL_SQLParser2.create_definition_return();
        retval.start = input.LT(1);
        int create_definition_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CONSTRAINT47=null;
        Token PRIMARY_SYM49=null;
        Token KEY_SYM50=null;
        Token LPAREN52=null;
        Token COMMA54=null;
        Token RPAREN56=null;
        Token set58=null;
        Token LPAREN61=null;
        Token COMMA63=null;
        Token RPAREN65=null;
        Token CONSTRAINT67=null;
        Token UNIQUE_SYM69=null;
        Token set70=null;
        Token LPAREN73=null;
        Token COMMA75=null;
        Token RPAREN77=null;
        Token set79=null;
        Token set80=null;
        Token LPAREN82=null;
        Token COMMA84=null;
        Token RPAREN86=null;
        Token CONSTRAINT88=null;
        Token FOREIGN90=null;
        Token KEY_SYM91=null;
        Token LPAREN93=null;
        Token COMMA95=null;
        Token RPAREN97=null;
        Token CHECK_SYM99=null;
        Token LPAREN100=null;
        Token RPAREN102=null;
        MySQLParser.column_name_return column_name45 = null;

        MySQL_SQLParser2.column_definition_return column_definition46 = null;

        MySQLParser.constraint_symbol_name_return constraint_symbol_name48 = null;

        MySQL_SQLParser2.index_type_return index_type51 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name53 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name55 = null;

        MySQL_SQLParser2.index_option_return index_option57 = null;

        MySQLParser.index_name_return index_name59 = null;

        MySQL_SQLParser2.index_type_return index_type60 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name62 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name64 = null;

        MySQL_SQLParser2.index_option_return index_option66 = null;

        MySQLParser.constraint_symbol_name_return constraint_symbol_name68 = null;

        MySQLParser.index_name_return index_name71 = null;

        MySQL_SQLParser2.index_type_return index_type72 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name74 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name76 = null;

        MySQL_SQLParser2.index_option_return index_option78 = null;

        MySQLParser.index_name_return index_name81 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name83 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name85 = null;

        MySQL_SQLParser2.index_option_return index_option87 = null;

        MySQLParser.constraint_symbol_name_return constraint_symbol_name89 = null;

        MySQLParser.index_name_return index_name92 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name94 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name96 = null;

        MySQL_SQLParser2.reference_definition_return reference_definition98 = null;

        MySQLParser.expression_return expression101 = null;


        CommonTree CONSTRAINT47_tree=null;
        CommonTree PRIMARY_SYM49_tree=null;
        CommonTree KEY_SYM50_tree=null;
        CommonTree LPAREN52_tree=null;
        CommonTree COMMA54_tree=null;
        CommonTree RPAREN56_tree=null;
        CommonTree set58_tree=null;
        CommonTree LPAREN61_tree=null;
        CommonTree COMMA63_tree=null;
        CommonTree RPAREN65_tree=null;
        CommonTree CONSTRAINT67_tree=null;
        CommonTree UNIQUE_SYM69_tree=null;
        CommonTree set70_tree=null;
        CommonTree LPAREN73_tree=null;
        CommonTree COMMA75_tree=null;
        CommonTree RPAREN77_tree=null;
        CommonTree set79_tree=null;
        CommonTree set80_tree=null;
        CommonTree LPAREN82_tree=null;
        CommonTree COMMA84_tree=null;
        CommonTree RPAREN86_tree=null;
        CommonTree CONSTRAINT88_tree=null;
        CommonTree FOREIGN90_tree=null;
        CommonTree KEY_SYM91_tree=null;
        CommonTree LPAREN93_tree=null;
        CommonTree COMMA95_tree=null;
        CommonTree RPAREN97_tree=null;
        CommonTree CHECK_SYM99_tree=null;
        CommonTree LPAREN100_tree=null;
        CommonTree RPAREN102_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // SQLParser2.g:46:18: ( ( column_name column_definition ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition ) | ( CHECK_SYM LPAREN expression RPAREN ) )
            int alt39=7;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // SQLParser2.g:47:4: ( column_name column_definition )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:47:4: ( column_name column_definition )
                    // SQLParser2.g:47:7: column_name column_definition
                    {
                    pushFollow(FOLLOW_column_name_in_create_definition247);
                    column_name45=gMySQL.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name45.getTree());
                    pushFollow(FOLLOW_column_definition_in_create_definition249);
                    column_definition46=column_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition46.getTree());

                    }


                    }
                    break;
                case 2 :
                    // SQLParser2.g:48:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:48:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
                    // SQLParser2.g:48:7: ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
                    {
                    // SQLParser2.g:48:7: ( CONSTRAINT ( constraint_symbol_name )? )?
                    int alt16=2;
                    int LA16_0 = input.LA(1);

                    if ( (LA16_0==CONSTRAINT) ) {
                        alt16=1;
                    }
                    switch (alt16) {
                        case 1 :
                            // SQLParser2.g:48:8: CONSTRAINT ( constraint_symbol_name )?
                            {
                            CONSTRAINT47=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition261); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CONSTRAINT47_tree = (CommonTree)adaptor.create(CONSTRAINT47);
                            adaptor.addChild(root_0, CONSTRAINT47_tree);
                            }
                            // SQLParser2.g:48:19: ( constraint_symbol_name )?
                            int alt15=2;
                            int LA15_0 = input.LA(1);

                            if ( (LA15_0==ID) ) {
                                alt15=1;
                            }
                            switch (alt15) {
                                case 1 :
                                    // SQLParser2.g:48:20: constraint_symbol_name
                                    {
                                    pushFollow(FOLLOW_constraint_symbol_name_in_create_definition264);
                                    constraint_symbol_name48=gMySQL.constraint_symbol_name();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name48.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    PRIMARY_SYM49=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_create_definition270); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIMARY_SYM49_tree = (CommonTree)adaptor.create(PRIMARY_SYM49);
                    adaptor.addChild(root_0, PRIMARY_SYM49_tree);
                    }
                    KEY_SYM50=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_create_definition272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEY_SYM50_tree = (CommonTree)adaptor.create(KEY_SYM50);
                    adaptor.addChild(root_0, KEY_SYM50_tree);
                    }
                    // SQLParser2.g:48:67: ( index_type )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==USING_SYM) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // SQLParser2.g:48:68: index_type
                            {
                            pushFollow(FOLLOW_index_type_in_create_definition275);
                            index_type51=index_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type51.getTree());

                            }
                            break;

                    }

                    LPAREN52=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN52_tree = (CommonTree)adaptor.create(LPAREN52);
                    adaptor.addChild(root_0, LPAREN52_tree);
                    }
                    pushFollow(FOLLOW_index_column_name_in_create_definition281);
                    index_column_name53=index_column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name53.getTree());
                    // SQLParser2.g:48:106: ( COMMA index_column_name )*
                    loop18:
                    do {
                        int alt18=2;
                        int LA18_0 = input.LA(1);

                        if ( (LA18_0==COMMA) ) {
                            alt18=1;
                        }


                        switch (alt18) {
                    	case 1 :
                    	    // SQLParser2.g:48:107: COMMA index_column_name
                    	    {
                    	    COMMA54=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition284); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA54_tree = (CommonTree)adaptor.create(COMMA54);
                    	    adaptor.addChild(root_0, COMMA54_tree);
                    	    }
                    	    pushFollow(FOLLOW_index_column_name_in_create_definition286);
                    	    index_column_name55=index_column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name55.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop18;
                        }
                    } while (true);

                    RPAREN56=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN56_tree = (CommonTree)adaptor.create(RPAREN56);
                    adaptor.addChild(root_0, RPAREN56_tree);
                    }
                    // SQLParser2.g:48:140: ( index_option )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==COMMENT_SYM||LA19_0==KEY_BLOCK_SIZE||LA19_0==USING_SYM||LA19_0==WITH) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // SQLParser2.g:48:141: index_option
                    	    {
                    	    pushFollow(FOLLOW_index_option_in_create_definition293);
                    	    index_option57=index_option();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option57.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 3 :
                    // SQLParser2.g:49:4: ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:49:4: ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
                    // SQLParser2.g:49:7: ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
                    {
                    set58=(Token)input.LT(1);
                    if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set58));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // SQLParser2.g:49:27: ( index_name )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==ID) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // SQLParser2.g:49:28: index_name
                            {
                            pushFollow(FOLLOW_index_name_in_create_definition313);
                            index_name59=gMySQL.index_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name59.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:49:41: ( index_type )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==USING_SYM) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // SQLParser2.g:49:42: index_type
                            {
                            pushFollow(FOLLOW_index_type_in_create_definition318);
                            index_type60=index_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type60.getTree());

                            }
                            break;

                    }

                    LPAREN61=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN61_tree = (CommonTree)adaptor.create(LPAREN61);
                    adaptor.addChild(root_0, LPAREN61_tree);
                    }
                    pushFollow(FOLLOW_index_column_name_in_create_definition324);
                    index_column_name62=index_column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name62.getTree());
                    // SQLParser2.g:49:80: ( COMMA index_column_name )*
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);

                        if ( (LA22_0==COMMA) ) {
                            alt22=1;
                        }


                        switch (alt22) {
                    	case 1 :
                    	    // SQLParser2.g:49:81: COMMA index_column_name
                    	    {
                    	    COMMA63=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition327); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA63_tree = (CommonTree)adaptor.create(COMMA63);
                    	    adaptor.addChild(root_0, COMMA63_tree);
                    	    }
                    	    pushFollow(FOLLOW_index_column_name_in_create_definition329);
                    	    index_column_name64=index_column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name64.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop22;
                        }
                    } while (true);

                    RPAREN65=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition333); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN65_tree = (CommonTree)adaptor.create(RPAREN65);
                    adaptor.addChild(root_0, RPAREN65_tree);
                    }
                    // SQLParser2.g:49:114: ( index_option )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMENT_SYM||LA23_0==KEY_BLOCK_SIZE||LA23_0==USING_SYM||LA23_0==WITH) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // SQLParser2.g:49:115: index_option
                    	    {
                    	    pushFollow(FOLLOW_index_option_in_create_definition336);
                    	    index_option66=index_option();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option66.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 4 :
                    // SQLParser2.g:50:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:50:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
                    // SQLParser2.g:50:7: ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
                    {
                    // SQLParser2.g:50:7: ( CONSTRAINT ( constraint_symbol_name )? )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==CONSTRAINT) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // SQLParser2.g:50:8: CONSTRAINT ( constraint_symbol_name )?
                            {
                            CONSTRAINT67=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition350); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CONSTRAINT67_tree = (CommonTree)adaptor.create(CONSTRAINT67);
                            adaptor.addChild(root_0, CONSTRAINT67_tree);
                            }
                            // SQLParser2.g:50:19: ( constraint_symbol_name )?
                            int alt24=2;
                            int LA24_0 = input.LA(1);

                            if ( (LA24_0==ID) ) {
                                alt24=1;
                            }
                            switch (alt24) {
                                case 1 :
                                    // SQLParser2.g:50:20: constraint_symbol_name
                                    {
                                    pushFollow(FOLLOW_constraint_symbol_name_in_create_definition353);
                                    constraint_symbol_name68=gMySQL.constraint_symbol_name();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name68.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    UNIQUE_SYM69=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_create_definition359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIQUE_SYM69_tree = (CommonTree)adaptor.create(UNIQUE_SYM69);
                    adaptor.addChild(root_0, UNIQUE_SYM69_tree);
                    }
                    // SQLParser2.g:50:58: ( INDEX_SYM | KEY_SYM )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==INDEX_SYM||LA26_0==KEY_SYM) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // SQLParser2.g:
                            {
                            set70=(Token)input.LT(1);
                            if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set70));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    // SQLParser2.g:50:79: ( index_name )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==ID) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // SQLParser2.g:50:80: index_name
                            {
                            pushFollow(FOLLOW_index_name_in_create_definition369);
                            index_name71=gMySQL.index_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name71.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:50:93: ( index_type )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==USING_SYM) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // SQLParser2.g:50:94: index_type
                            {
                            pushFollow(FOLLOW_index_type_in_create_definition374);
                            index_type72=index_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type72.getTree());

                            }
                            break;

                    }

                    LPAREN73=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN73_tree = (CommonTree)adaptor.create(LPAREN73);
                    adaptor.addChild(root_0, LPAREN73_tree);
                    }
                    pushFollow(FOLLOW_index_column_name_in_create_definition380);
                    index_column_name74=index_column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name74.getTree());
                    // SQLParser2.g:50:132: ( COMMA index_column_name )*
                    loop29:
                    do {
                        int alt29=2;
                        int LA29_0 = input.LA(1);

                        if ( (LA29_0==COMMA) ) {
                            alt29=1;
                        }


                        switch (alt29) {
                    	case 1 :
                    	    // SQLParser2.g:50:133: COMMA index_column_name
                    	    {
                    	    COMMA75=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition383); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA75_tree = (CommonTree)adaptor.create(COMMA75);
                    	    adaptor.addChild(root_0, COMMA75_tree);
                    	    }
                    	    pushFollow(FOLLOW_index_column_name_in_create_definition385);
                    	    index_column_name76=index_column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name76.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop29;
                        }
                    } while (true);

                    RPAREN77=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN77_tree = (CommonTree)adaptor.create(RPAREN77);
                    adaptor.addChild(root_0, RPAREN77_tree);
                    }
                    // SQLParser2.g:50:166: ( index_option )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==COMMENT_SYM||LA30_0==KEY_BLOCK_SIZE||LA30_0==USING_SYM||LA30_0==WITH) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                    	case 1 :
                    	    // SQLParser2.g:50:167: index_option
                    	    {
                    	    pushFollow(FOLLOW_index_option_in_create_definition392);
                    	    index_option78=index_option();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option78.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 5 :
                    // SQLParser2.g:51:4: ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:51:4: ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
                    // SQLParser2.g:51:7: ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
                    {
                    set79=(Token)input.LT(1);
                    if ( input.LA(1)==FULLTEXT_SYM||input.LA(1)==SPATIAL_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set79));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // SQLParser2.g:51:34: ( INDEX_SYM | KEY_SYM )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==INDEX_SYM||LA31_0==KEY_SYM) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // SQLParser2.g:
                            {
                            set80=(Token)input.LT(1);
                            if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set80));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    // SQLParser2.g:51:55: ( index_name )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==ID) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // SQLParser2.g:51:56: index_name
                            {
                            pushFollow(FOLLOW_index_name_in_create_definition419);
                            index_name81=gMySQL.index_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name81.getTree());

                            }
                            break;

                    }

                    LPAREN82=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition423); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN82_tree = (CommonTree)adaptor.create(LPAREN82);
                    adaptor.addChild(root_0, LPAREN82_tree);
                    }
                    pushFollow(FOLLOW_index_column_name_in_create_definition425);
                    index_column_name83=index_column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name83.getTree());
                    // SQLParser2.g:51:94: ( COMMA index_column_name )*
                    loop33:
                    do {
                        int alt33=2;
                        int LA33_0 = input.LA(1);

                        if ( (LA33_0==COMMA) ) {
                            alt33=1;
                        }


                        switch (alt33) {
                    	case 1 :
                    	    // SQLParser2.g:51:95: COMMA index_column_name
                    	    {
                    	    COMMA84=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition428); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA84_tree = (CommonTree)adaptor.create(COMMA84);
                    	    adaptor.addChild(root_0, COMMA84_tree);
                    	    }
                    	    pushFollow(FOLLOW_index_column_name_in_create_definition430);
                    	    index_column_name85=index_column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name85.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop33;
                        }
                    } while (true);

                    RPAREN86=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition434); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN86_tree = (CommonTree)adaptor.create(RPAREN86);
                    adaptor.addChild(root_0, RPAREN86_tree);
                    }
                    // SQLParser2.g:51:128: ( index_option )*
                    loop34:
                    do {
                        int alt34=2;
                        int LA34_0 = input.LA(1);

                        if ( (LA34_0==COMMENT_SYM||LA34_0==KEY_BLOCK_SIZE||LA34_0==USING_SYM||LA34_0==WITH) ) {
                            alt34=1;
                        }


                        switch (alt34) {
                    	case 1 :
                    	    // SQLParser2.g:51:129: index_option
                    	    {
                    	    pushFollow(FOLLOW_index_option_in_create_definition437);
                    	    index_option87=index_option();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option87.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop34;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 6 :
                    // SQLParser2.g:52:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:52:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition )
                    // SQLParser2.g:52:7: ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition
                    {
                    // SQLParser2.g:52:7: ( CONSTRAINT ( constraint_symbol_name )? )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==CONSTRAINT) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // SQLParser2.g:52:8: CONSTRAINT ( constraint_symbol_name )?
                            {
                            CONSTRAINT88=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition451); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CONSTRAINT88_tree = (CommonTree)adaptor.create(CONSTRAINT88);
                            adaptor.addChild(root_0, CONSTRAINT88_tree);
                            }
                            // SQLParser2.g:52:19: ( constraint_symbol_name )?
                            int alt35=2;
                            int LA35_0 = input.LA(1);

                            if ( (LA35_0==ID) ) {
                                alt35=1;
                            }
                            switch (alt35) {
                                case 1 :
                                    // SQLParser2.g:52:20: constraint_symbol_name
                                    {
                                    pushFollow(FOLLOW_constraint_symbol_name_in_create_definition454);
                                    constraint_symbol_name89=gMySQL.constraint_symbol_name();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name89.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    FOREIGN90=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_create_definition460); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREIGN90_tree = (CommonTree)adaptor.create(FOREIGN90);
                    adaptor.addChild(root_0, FOREIGN90_tree);
                    }
                    KEY_SYM91=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_create_definition462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEY_SYM91_tree = (CommonTree)adaptor.create(KEY_SYM91);
                    adaptor.addChild(root_0, KEY_SYM91_tree);
                    }
                    // SQLParser2.g:52:63: ( index_name )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==ID) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // SQLParser2.g:52:64: index_name
                            {
                            pushFollow(FOLLOW_index_name_in_create_definition465);
                            index_name92=gMySQL.index_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name92.getTree());

                            }
                            break;

                    }

                    LPAREN93=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN93_tree = (CommonTree)adaptor.create(LPAREN93);
                    adaptor.addChild(root_0, LPAREN93_tree);
                    }
                    pushFollow(FOLLOW_index_column_name_in_create_definition471);
                    index_column_name94=index_column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name94.getTree());
                    // SQLParser2.g:52:102: ( COMMA index_column_name )*
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==COMMA) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    // SQLParser2.g:52:103: COMMA index_column_name
                    	    {
                    	    COMMA95=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition474); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA95_tree = (CommonTree)adaptor.create(COMMA95);
                    	    adaptor.addChild(root_0, COMMA95_tree);
                    	    }
                    	    pushFollow(FOLLOW_index_column_name_in_create_definition476);
                    	    index_column_name96=index_column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name96.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);

                    RPAREN97=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN97_tree = (CommonTree)adaptor.create(RPAREN97);
                    adaptor.addChild(root_0, RPAREN97_tree);
                    }
                    pushFollow(FOLLOW_reference_definition_in_create_definition482);
                    reference_definition98=reference_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition98.getTree());

                    }


                    }
                    break;
                case 7 :
                    // SQLParser2.g:53:4: ( CHECK_SYM LPAREN expression RPAREN )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:53:4: ( CHECK_SYM LPAREN expression RPAREN )
                    // SQLParser2.g:53:7: CHECK_SYM LPAREN expression RPAREN
                    {
                    CHECK_SYM99=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_create_definition493); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHECK_SYM99_tree = (CommonTree)adaptor.create(CHECK_SYM99);
                    adaptor.addChild(root_0, CHECK_SYM99_tree);
                    }
                    LPAREN100=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN100_tree = (CommonTree)adaptor.create(LPAREN100);
                    adaptor.addChild(root_0, LPAREN100_tree);
                    }
                    pushFollow(FOLLOW_expression_in_create_definition497);
                    expression101=gMySQL.expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression101.getTree());
                    RPAREN102=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition499); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN102_tree = (CommonTree)adaptor.create(RPAREN102);
                    adaptor.addChild(root_0, RPAREN102_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, create_definition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_definition"

    public static class column_definition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "column_definition"
    // SQLParser2.g:56:1: column_definition : column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )? ;
    public final MySQL_SQLParser2.column_definition_return column_definition() throws RecognitionException {
        MySQL_SQLParser2.column_definition_return retval = new MySQL_SQLParser2.column_definition_return();
        retval.start = input.LT(1);
        int column_definition_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AUTO_INCREMENT104=null;
        Token UNIQUE_SYM105=null;
        Token KEY_SYM106=null;
        Token PRIMARY_SYM107=null;
        Token KEY_SYM108=null;
        Token COMMENT_SYM109=null;
        Token TEXT_STRING110=null;
        Token COLUMN_FORMAT111=null;
        Token set112=null;
        MySQL_SQLParser2.column_data_type_header_return column_data_type_header103 = null;

        MySQL_SQLParser2.reference_definition_return reference_definition113 = null;


        CommonTree AUTO_INCREMENT104_tree=null;
        CommonTree UNIQUE_SYM105_tree=null;
        CommonTree KEY_SYM106_tree=null;
        CommonTree PRIMARY_SYM107_tree=null;
        CommonTree KEY_SYM108_tree=null;
        CommonTree COMMENT_SYM109_tree=null;
        CommonTree TEXT_STRING110_tree=null;
        CommonTree COLUMN_FORMAT111_tree=null;
        CommonTree set112_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // SQLParser2.g:56:18: ( column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )? )
            // SQLParser2.g:57:2: column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_column_data_type_header_in_column_definition511);
            column_data_type_header103=column_data_type_header();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_data_type_header103.getTree());
            // SQLParser2.g:58:2: ( AUTO_INCREMENT )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==AUTO_INCREMENT) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // SQLParser2.g:58:3: AUTO_INCREMENT
                    {
                    AUTO_INCREMENT104=(Token)match(input,AUTO_INCREMENT,FOLLOW_AUTO_INCREMENT_in_column_definition515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AUTO_INCREMENT104_tree = (CommonTree)adaptor.create(AUTO_INCREMENT104);
                    adaptor.addChild(root_0, AUTO_INCREMENT104_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:58:20: ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )?
            int alt43=3;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==UNIQUE_SYM) ) {
                alt43=1;
            }
            else if ( (LA43_0==PRIMARY_SYM) ) {
                alt43=2;
            }
            switch (alt43) {
                case 1 :
                    // SQLParser2.g:58:22: ( UNIQUE_SYM ( KEY_SYM )? )
                    {
                    // SQLParser2.g:58:22: ( UNIQUE_SYM ( KEY_SYM )? )
                    // SQLParser2.g:58:23: UNIQUE_SYM ( KEY_SYM )?
                    {
                    UNIQUE_SYM105=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_column_definition522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIQUE_SYM105_tree = (CommonTree)adaptor.create(UNIQUE_SYM105);
                    adaptor.addChild(root_0, UNIQUE_SYM105_tree);
                    }
                    // SQLParser2.g:58:34: ( KEY_SYM )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==KEY_SYM) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // SQLParser2.g:58:35: KEY_SYM
                            {
                            KEY_SYM106=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_column_definition525); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            KEY_SYM106_tree = (CommonTree)adaptor.create(KEY_SYM106);
                            adaptor.addChild(root_0, KEY_SYM106_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // SQLParser2.g:58:48: ( PRIMARY_SYM ( KEY_SYM )? )
                    {
                    // SQLParser2.g:58:48: ( PRIMARY_SYM ( KEY_SYM )? )
                    // SQLParser2.g:58:49: PRIMARY_SYM ( KEY_SYM )?
                    {
                    PRIMARY_SYM107=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_column_definition533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIMARY_SYM107_tree = (CommonTree)adaptor.create(PRIMARY_SYM107);
                    adaptor.addChild(root_0, PRIMARY_SYM107_tree);
                    }
                    // SQLParser2.g:58:61: ( KEY_SYM )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==KEY_SYM) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // SQLParser2.g:58:62: KEY_SYM
                            {
                            KEY_SYM108=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_column_definition536); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            KEY_SYM108_tree = (CommonTree)adaptor.create(KEY_SYM108);
                            adaptor.addChild(root_0, KEY_SYM108_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            // SQLParser2.g:59:2: ( COMMENT_SYM TEXT_STRING )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==COMMENT_SYM) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // SQLParser2.g:59:3: COMMENT_SYM TEXT_STRING
                    {
                    COMMENT_SYM109=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_column_definition546); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMENT_SYM109_tree = (CommonTree)adaptor.create(COMMENT_SYM109);
                    adaptor.addChild(root_0, COMMENT_SYM109_tree);
                    }
                    TEXT_STRING110=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_definition548); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING110_tree = (CommonTree)adaptor.create(TEXT_STRING110);
                    adaptor.addChild(root_0, TEXT_STRING110_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:60:2: ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==COLUMN_FORMAT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // SQLParser2.g:60:3: COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT )
                    {
                    COLUMN_FORMAT111=(Token)match(input,COLUMN_FORMAT,FOLLOW_COLUMN_FORMAT_in_column_definition554); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLUMN_FORMAT111_tree = (CommonTree)adaptor.create(COLUMN_FORMAT111);
                    adaptor.addChild(root_0, COLUMN_FORMAT111_tree);
                    }
                    set112=(Token)input.LT(1);
                    if ( input.LA(1)==DEFAULT||input.LA(1)==DYNAMIC_SYM||input.LA(1)==FIXED_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set112));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // SQLParser2.g:61:2: ( reference_definition )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==REFERENCES) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // SQLParser2.g:61:3: reference_definition
                    {
                    pushFollow(FOLLOW_reference_definition_in_column_definition568);
                    reference_definition113=reference_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition113.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, column_definition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "column_definition"

    public static class null_or_notnull_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "null_or_notnull"
    // SQLParser2.g:64:1: null_or_notnull : ( ( NOT_SYM NULL_SYM ) | NULL_SYM );
    public final MySQL_SQLParser2.null_or_notnull_return null_or_notnull() throws RecognitionException {
        MySQL_SQLParser2.null_or_notnull_return retval = new MySQL_SQLParser2.null_or_notnull_return();
        retval.start = input.LT(1);
        int null_or_notnull_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT_SYM114=null;
        Token NULL_SYM115=null;
        Token NULL_SYM116=null;

        CommonTree NOT_SYM114_tree=null;
        CommonTree NULL_SYM115_tree=null;
        CommonTree NULL_SYM116_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // SQLParser2.g:64:16: ( ( NOT_SYM NULL_SYM ) | NULL_SYM )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==NOT_SYM) ) {
                alt47=1;
            }
            else if ( (LA47_0==NULL_SYM) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // SQLParser2.g:65:2: ( NOT_SYM NULL_SYM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:65:2: ( NOT_SYM NULL_SYM )
                    // SQLParser2.g:65:3: NOT_SYM NULL_SYM
                    {
                    NOT_SYM114=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_null_or_notnull580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_SYM114_tree = (CommonTree)adaptor.create(NOT_SYM114);
                    adaptor.addChild(root_0, NOT_SYM114_tree);
                    }
                    NULL_SYM115=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_null_or_notnull582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_SYM115_tree = (CommonTree)adaptor.create(NULL_SYM115);
                    adaptor.addChild(root_0, NULL_SYM115_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // SQLParser2.g:65:23: NULL_SYM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NULL_SYM116=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_null_or_notnull587); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_SYM116_tree = (CommonTree)adaptor.create(NULL_SYM116);
                    adaptor.addChild(root_0, NULL_SYM116_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, null_or_notnull_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "null_or_notnull"

    public static class column_data_type_header_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "column_data_type_header"
    // SQLParser2.g:68:1: column_data_type_header : ( ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? ) | ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT ( number_literal | TEXT_STRING ) )? ) | ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DATE_SYM ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( TIME_SYM ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )? ) | ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )? ) | ( Y_ E_ A_ R_ ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? ) | ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( TINYBLOB ( null_or_notnull )? ) | ( BLOB_SYM ( null_or_notnull )? ) | ( MEDIUMBLOB ( null_or_notnull )? ) | ( LONGBLOB ( null_or_notnull )? ) | ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) );
    public final MySQL_SQLParser2.column_data_type_header_return column_data_type_header() throws RecognitionException {
        MySQL_SQLParser2.column_data_type_header_return retval = new MySQL_SQLParser2.column_data_type_header_return();
        retval.start = input.LT(1);
        int column_data_type_header_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BIT_SYM117=null;
        Token LPAREN118=null;
        Token RPAREN120=null;
        Token DEFAULT122=null;
        Token TINYINT124=null;
        Token LPAREN125=null;
        Token RPAREN127=null;
        Token UNSIGNED_SYM128=null;
        Token ZEROFILL129=null;
        Token DEFAULT131=null;
        Token SMALLINT133=null;
        Token LPAREN134=null;
        Token RPAREN136=null;
        Token UNSIGNED_SYM137=null;
        Token ZEROFILL138=null;
        Token DEFAULT140=null;
        Token MEDIUMINT142=null;
        Token LPAREN143=null;
        Token RPAREN145=null;
        Token UNSIGNED_SYM146=null;
        Token ZEROFILL147=null;
        Token DEFAULT149=null;
        Token INT_SYM151=null;
        Token LPAREN152=null;
        Token RPAREN154=null;
        Token UNSIGNED_SYM155=null;
        Token ZEROFILL156=null;
        Token DEFAULT158=null;
        Token TEXT_STRING160=null;
        Token INTEGER_SYM161=null;
        Token LPAREN162=null;
        Token RPAREN164=null;
        Token UNSIGNED_SYM165=null;
        Token ZEROFILL166=null;
        Token DEFAULT168=null;
        Token BIGINT170=null;
        Token LPAREN171=null;
        Token RPAREN173=null;
        Token UNSIGNED_SYM174=null;
        Token ZEROFILL175=null;
        Token DEFAULT177=null;
        Token REAL179=null;
        Token LPAREN180=null;
        Token COMMA182=null;
        Token RPAREN184=null;
        Token UNSIGNED_SYM185=null;
        Token ZEROFILL186=null;
        Token DEFAULT188=null;
        Token DOUBLE_SYM190=null;
        Token LPAREN191=null;
        Token COMMA193=null;
        Token RPAREN195=null;
        Token UNSIGNED_SYM196=null;
        Token ZEROFILL197=null;
        Token DEFAULT199=null;
        Token FLOAT_SYM201=null;
        Token LPAREN202=null;
        Token COMMA204=null;
        Token RPAREN206=null;
        Token UNSIGNED_SYM207=null;
        Token ZEROFILL208=null;
        Token DEFAULT210=null;
        Token DECIMAL_SYM212=null;
        Token LPAREN213=null;
        Token COMMA215=null;
        Token RPAREN217=null;
        Token UNSIGNED_SYM218=null;
        Token ZEROFILL219=null;
        Token DEFAULT221=null;
        Token NUMERIC_SYM223=null;
        Token LPAREN224=null;
        Token COMMA226=null;
        Token RPAREN228=null;
        Token UNSIGNED_SYM229=null;
        Token ZEROFILL230=null;
        Token DEFAULT232=null;
        Token DATE_SYM234=null;
        Token DEFAULT236=null;
        Token set237=null;
        Token TIME_SYM238=null;
        Token DEFAULT240=null;
        Token set241=null;
        Token TIMESTAMP242=null;
        Token DEFAULT244=null;
        Token set245=null;
        Token DATETIME246=null;
        Token DEFAULT248=null;
        Token set249=null;
        Token Y_250=null;
        Token E_251=null;
        Token A_252=null;
        Token R_253=null;
        Token DEFAULT255=null;
        Token INTEGER_NUM256=null;
        Token CHAR257=null;
        Token LPAREN258=null;
        Token RPAREN260=null;
        Token CHARACTER_SYM261=null;
        Token SET_SYM262=null;
        Token COLLATE_SYM264=null;
        Token DEFAULT267=null;
        Token set268=null;
        Token VARCHAR269=null;
        Token LPAREN270=null;
        Token RPAREN272=null;
        Token CHARACTER_SYM273=null;
        Token SET_SYM274=null;
        Token COLLATE_SYM276=null;
        Token DEFAULT279=null;
        Token set280=null;
        Token BINARY281=null;
        Token LPAREN282=null;
        Token RPAREN284=null;
        Token DEFAULT286=null;
        Token set287=null;
        Token VARBINARY288=null;
        Token LPAREN289=null;
        Token RPAREN291=null;
        Token DEFAULT293=null;
        Token set294=null;
        Token TINYBLOB295=null;
        Token BLOB_SYM297=null;
        Token MEDIUMBLOB299=null;
        Token LONGBLOB301=null;
        Token TINYTEXT303=null;
        Token BINARY304=null;
        Token CHARACTER_SYM305=null;
        Token SET_SYM306=null;
        Token COLLATE_SYM308=null;
        Token TEXT_SYM311=null;
        Token BINARY312=null;
        Token CHARACTER_SYM313=null;
        Token SET_SYM314=null;
        Token COLLATE_SYM316=null;
        Token MEDIUMTEXT319=null;
        Token BINARY320=null;
        Token CHARACTER_SYM321=null;
        Token SET_SYM322=null;
        Token COLLATE_SYM324=null;
        Token LONGTEXT327=null;
        Token BINARY328=null;
        Token CHARACTER_SYM329=null;
        Token SET_SYM330=null;
        Token COLLATE_SYM332=null;
        Token ENUM335=null;
        Token LPAREN336=null;
        Token TEXT_STRING337=null;
        Token COMMA338=null;
        Token TEXT_STRING339=null;
        Token RPAREN340=null;
        Token CHARACTER_SYM341=null;
        Token SET_SYM342=null;
        Token COLLATE_SYM344=null;
        Token DEFAULT347=null;
        Token set348=null;
        Token SET_SYM349=null;
        Token LPAREN350=null;
        Token TEXT_STRING351=null;
        Token COMMA352=null;
        Token TEXT_STRING353=null;
        Token RPAREN354=null;
        Token CHARACTER_SYM355=null;
        Token SET_SYM356=null;
        Token COLLATE_SYM358=null;
        Token DEFAULT361=null;
        Token set362=null;
        MySQL_SQLParser2.length_return length119 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull121 = null;

        MySQLParser.bit_literal_return bit_literal123 = null;

        MySQL_SQLParser2.length_return length126 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull130 = null;

        MySQLParser.number_literal_return number_literal132 = null;

        MySQL_SQLParser2.length_return length135 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull139 = null;

        MySQLParser.number_literal_return number_literal141 = null;

        MySQL_SQLParser2.length_return length144 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull148 = null;

        MySQLParser.number_literal_return number_literal150 = null;

        MySQL_SQLParser2.length_return length153 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull157 = null;

        MySQLParser.number_literal_return number_literal159 = null;

        MySQL_SQLParser2.length_return length163 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull167 = null;

        MySQLParser.number_literal_return number_literal169 = null;

        MySQL_SQLParser2.length_return length172 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull176 = null;

        MySQLParser.number_literal_return number_literal178 = null;

        MySQL_SQLParser2.length_return length181 = null;

        MySQLParser.number_literal_return number_literal183 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull187 = null;

        MySQLParser.number_literal_return number_literal189 = null;

        MySQL_SQLParser2.length_return length192 = null;

        MySQLParser.number_literal_return number_literal194 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull198 = null;

        MySQLParser.number_literal_return number_literal200 = null;

        MySQL_SQLParser2.length_return length203 = null;

        MySQLParser.number_literal_return number_literal205 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull209 = null;

        MySQLParser.number_literal_return number_literal211 = null;

        MySQL_SQLParser2.length_return length214 = null;

        MySQLParser.number_literal_return number_literal216 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull220 = null;

        MySQLParser.number_literal_return number_literal222 = null;

        MySQL_SQLParser2.length_return length225 = null;

        MySQLParser.number_literal_return number_literal227 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull231 = null;

        MySQLParser.number_literal_return number_literal233 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull235 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull239 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull243 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull247 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull254 = null;

        MySQL_SQLParser2.length_return length259 = null;

        MySQLParser.charset_name_return charset_name263 = null;

        MySQLParser.collation_name_return collation_name265 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull266 = null;

        MySQL_SQLParser2.length_return length271 = null;

        MySQLParser.charset_name_return charset_name275 = null;

        MySQLParser.collation_name_return collation_name277 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull278 = null;

        MySQL_SQLParser2.length_return length283 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull285 = null;

        MySQL_SQLParser2.length_return length290 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull292 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull296 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull298 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull300 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull302 = null;

        MySQLParser.charset_name_return charset_name307 = null;

        MySQLParser.collation_name_return collation_name309 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull310 = null;

        MySQLParser.charset_name_return charset_name315 = null;

        MySQLParser.collation_name_return collation_name317 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull318 = null;

        MySQLParser.charset_name_return charset_name323 = null;

        MySQLParser.collation_name_return collation_name325 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull326 = null;

        MySQLParser.charset_name_return charset_name331 = null;

        MySQLParser.collation_name_return collation_name333 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull334 = null;

        MySQLParser.charset_name_return charset_name343 = null;

        MySQLParser.collation_name_return collation_name345 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull346 = null;

        MySQLParser.charset_name_return charset_name357 = null;

        MySQLParser.collation_name_return collation_name359 = null;

        MySQL_SQLParser2.null_or_notnull_return null_or_notnull360 = null;


        CommonTree BIT_SYM117_tree=null;
        CommonTree LPAREN118_tree=null;
        CommonTree RPAREN120_tree=null;
        CommonTree DEFAULT122_tree=null;
        CommonTree TINYINT124_tree=null;
        CommonTree LPAREN125_tree=null;
        CommonTree RPAREN127_tree=null;
        CommonTree UNSIGNED_SYM128_tree=null;
        CommonTree ZEROFILL129_tree=null;
        CommonTree DEFAULT131_tree=null;
        CommonTree SMALLINT133_tree=null;
        CommonTree LPAREN134_tree=null;
        CommonTree RPAREN136_tree=null;
        CommonTree UNSIGNED_SYM137_tree=null;
        CommonTree ZEROFILL138_tree=null;
        CommonTree DEFAULT140_tree=null;
        CommonTree MEDIUMINT142_tree=null;
        CommonTree LPAREN143_tree=null;
        CommonTree RPAREN145_tree=null;
        CommonTree UNSIGNED_SYM146_tree=null;
        CommonTree ZEROFILL147_tree=null;
        CommonTree DEFAULT149_tree=null;
        CommonTree INT_SYM151_tree=null;
        CommonTree LPAREN152_tree=null;
        CommonTree RPAREN154_tree=null;
        CommonTree UNSIGNED_SYM155_tree=null;
        CommonTree ZEROFILL156_tree=null;
        CommonTree DEFAULT158_tree=null;
        CommonTree TEXT_STRING160_tree=null;
        CommonTree INTEGER_SYM161_tree=null;
        CommonTree LPAREN162_tree=null;
        CommonTree RPAREN164_tree=null;
        CommonTree UNSIGNED_SYM165_tree=null;
        CommonTree ZEROFILL166_tree=null;
        CommonTree DEFAULT168_tree=null;
        CommonTree BIGINT170_tree=null;
        CommonTree LPAREN171_tree=null;
        CommonTree RPAREN173_tree=null;
        CommonTree UNSIGNED_SYM174_tree=null;
        CommonTree ZEROFILL175_tree=null;
        CommonTree DEFAULT177_tree=null;
        CommonTree REAL179_tree=null;
        CommonTree LPAREN180_tree=null;
        CommonTree COMMA182_tree=null;
        CommonTree RPAREN184_tree=null;
        CommonTree UNSIGNED_SYM185_tree=null;
        CommonTree ZEROFILL186_tree=null;
        CommonTree DEFAULT188_tree=null;
        CommonTree DOUBLE_SYM190_tree=null;
        CommonTree LPAREN191_tree=null;
        CommonTree COMMA193_tree=null;
        CommonTree RPAREN195_tree=null;
        CommonTree UNSIGNED_SYM196_tree=null;
        CommonTree ZEROFILL197_tree=null;
        CommonTree DEFAULT199_tree=null;
        CommonTree FLOAT_SYM201_tree=null;
        CommonTree LPAREN202_tree=null;
        CommonTree COMMA204_tree=null;
        CommonTree RPAREN206_tree=null;
        CommonTree UNSIGNED_SYM207_tree=null;
        CommonTree ZEROFILL208_tree=null;
        CommonTree DEFAULT210_tree=null;
        CommonTree DECIMAL_SYM212_tree=null;
        CommonTree LPAREN213_tree=null;
        CommonTree COMMA215_tree=null;
        CommonTree RPAREN217_tree=null;
        CommonTree UNSIGNED_SYM218_tree=null;
        CommonTree ZEROFILL219_tree=null;
        CommonTree DEFAULT221_tree=null;
        CommonTree NUMERIC_SYM223_tree=null;
        CommonTree LPAREN224_tree=null;
        CommonTree COMMA226_tree=null;
        CommonTree RPAREN228_tree=null;
        CommonTree UNSIGNED_SYM229_tree=null;
        CommonTree ZEROFILL230_tree=null;
        CommonTree DEFAULT232_tree=null;
        CommonTree DATE_SYM234_tree=null;
        CommonTree DEFAULT236_tree=null;
        CommonTree set237_tree=null;
        CommonTree TIME_SYM238_tree=null;
        CommonTree DEFAULT240_tree=null;
        CommonTree set241_tree=null;
        CommonTree TIMESTAMP242_tree=null;
        CommonTree DEFAULT244_tree=null;
        CommonTree set245_tree=null;
        CommonTree DATETIME246_tree=null;
        CommonTree DEFAULT248_tree=null;
        CommonTree set249_tree=null;
        CommonTree Y_250_tree=null;
        CommonTree E_251_tree=null;
        CommonTree A_252_tree=null;
        CommonTree R_253_tree=null;
        CommonTree DEFAULT255_tree=null;
        CommonTree INTEGER_NUM256_tree=null;
        CommonTree CHAR257_tree=null;
        CommonTree LPAREN258_tree=null;
        CommonTree RPAREN260_tree=null;
        CommonTree CHARACTER_SYM261_tree=null;
        CommonTree SET_SYM262_tree=null;
        CommonTree COLLATE_SYM264_tree=null;
        CommonTree DEFAULT267_tree=null;
        CommonTree set268_tree=null;
        CommonTree VARCHAR269_tree=null;
        CommonTree LPAREN270_tree=null;
        CommonTree RPAREN272_tree=null;
        CommonTree CHARACTER_SYM273_tree=null;
        CommonTree SET_SYM274_tree=null;
        CommonTree COLLATE_SYM276_tree=null;
        CommonTree DEFAULT279_tree=null;
        CommonTree set280_tree=null;
        CommonTree BINARY281_tree=null;
        CommonTree LPAREN282_tree=null;
        CommonTree RPAREN284_tree=null;
        CommonTree DEFAULT286_tree=null;
        CommonTree set287_tree=null;
        CommonTree VARBINARY288_tree=null;
        CommonTree LPAREN289_tree=null;
        CommonTree RPAREN291_tree=null;
        CommonTree DEFAULT293_tree=null;
        CommonTree set294_tree=null;
        CommonTree TINYBLOB295_tree=null;
        CommonTree BLOB_SYM297_tree=null;
        CommonTree MEDIUMBLOB299_tree=null;
        CommonTree LONGBLOB301_tree=null;
        CommonTree TINYTEXT303_tree=null;
        CommonTree BINARY304_tree=null;
        CommonTree CHARACTER_SYM305_tree=null;
        CommonTree SET_SYM306_tree=null;
        CommonTree COLLATE_SYM308_tree=null;
        CommonTree TEXT_SYM311_tree=null;
        CommonTree BINARY312_tree=null;
        CommonTree CHARACTER_SYM313_tree=null;
        CommonTree SET_SYM314_tree=null;
        CommonTree COLLATE_SYM316_tree=null;
        CommonTree MEDIUMTEXT319_tree=null;
        CommonTree BINARY320_tree=null;
        CommonTree CHARACTER_SYM321_tree=null;
        CommonTree SET_SYM322_tree=null;
        CommonTree COLLATE_SYM324_tree=null;
        CommonTree LONGTEXT327_tree=null;
        CommonTree BINARY328_tree=null;
        CommonTree CHARACTER_SYM329_tree=null;
        CommonTree SET_SYM330_tree=null;
        CommonTree COLLATE_SYM332_tree=null;
        CommonTree ENUM335_tree=null;
        CommonTree LPAREN336_tree=null;
        CommonTree TEXT_STRING337_tree=null;
        CommonTree COMMA338_tree=null;
        CommonTree TEXT_STRING339_tree=null;
        CommonTree RPAREN340_tree=null;
        CommonTree CHARACTER_SYM341_tree=null;
        CommonTree SET_SYM342_tree=null;
        CommonTree COLLATE_SYM344_tree=null;
        CommonTree DEFAULT347_tree=null;
        CommonTree set348_tree=null;
        CommonTree SET_SYM349_tree=null;
        CommonTree LPAREN350_tree=null;
        CommonTree TEXT_STRING351_tree=null;
        CommonTree COMMA352_tree=null;
        CommonTree TEXT_STRING353_tree=null;
        CommonTree RPAREN354_tree=null;
        CommonTree CHARACTER_SYM355_tree=null;
        CommonTree SET_SYM356_tree=null;
        CommonTree COLLATE_SYM358_tree=null;
        CommonTree DEFAULT361_tree=null;
        CommonTree set362_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // SQLParser2.g:68:24: ( ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? ) | ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT ( number_literal | TEXT_STRING ) )? ) | ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DATE_SYM ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( TIME_SYM ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )? ) | ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )? ) | ( Y_ E_ A_ R_ ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? ) | ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( TINYBLOB ( null_or_notnull )? ) | ( BLOB_SYM ( null_or_notnull )? ) | ( MEDIUMBLOB ( null_or_notnull )? ) | ( LONGBLOB ( null_or_notnull )? ) | ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) | ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? ) )
            int alt163=31;
            switch ( input.LA(1) ) {
            case BIT_SYM:
                {
                alt163=1;
                }
                break;
            case TINYINT:
                {
                alt163=2;
                }
                break;
            case SMALLINT:
                {
                alt163=3;
                }
                break;
            case MEDIUMINT:
                {
                alt163=4;
                }
                break;
            case INT_SYM:
                {
                alt163=5;
                }
                break;
            case INTEGER_SYM:
                {
                alt163=6;
                }
                break;
            case BIGINT:
                {
                alt163=7;
                }
                break;
            case REAL:
                {
                alt163=8;
                }
                break;
            case DOUBLE_SYM:
                {
                alt163=9;
                }
                break;
            case FLOAT_SYM:
                {
                alt163=10;
                }
                break;
            case DECIMAL_SYM:
                {
                alt163=11;
                }
                break;
            case NUMERIC_SYM:
                {
                alt163=12;
                }
                break;
            case DATE_SYM:
                {
                alt163=13;
                }
                break;
            case TIME_SYM:
                {
                alt163=14;
                }
                break;
            case TIMESTAMP:
                {
                alt163=15;
                }
                break;
            case DATETIME:
                {
                alt163=16;
                }
                break;
            case Y_:
                {
                alt163=17;
                }
                break;
            case CHAR:
                {
                alt163=18;
                }
                break;
            case VARCHAR:
                {
                alt163=19;
                }
                break;
            case BINARY:
                {
                alt163=20;
                }
                break;
            case VARBINARY:
                {
                alt163=21;
                }
                break;
            case TINYBLOB:
                {
                alt163=22;
                }
                break;
            case BLOB_SYM:
                {
                alt163=23;
                }
                break;
            case MEDIUMBLOB:
                {
                alt163=24;
                }
                break;
            case LONGBLOB:
                {
                alt163=25;
                }
                break;
            case TINYTEXT:
                {
                alt163=26;
                }
                break;
            case TEXT_SYM:
                {
                alt163=27;
                }
                break;
            case MEDIUMTEXT:
                {
                alt163=28;
                }
                break;
            case LONGTEXT:
                {
                alt163=29;
                }
                break;
            case ENUM:
                {
                alt163=30;
                }
                break;
            case SET_SYM:
                {
                alt163=31;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // SQLParser2.g:69:4: ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:69:4: ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? )
                    // SQLParser2.g:69:7: BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )?
                    {
                    BIT_SYM117=(Token)match(input,BIT_SYM,FOLLOW_BIT_SYM_in_column_data_type_header601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIT_SYM117_tree = (CommonTree)adaptor.create(BIT_SYM117);
                    adaptor.addChild(root_0, BIT_SYM117_tree);
                    }
                    // SQLParser2.g:69:14: ( LPAREN length RPAREN )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==LPAREN) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // SQLParser2.g:69:15: LPAREN length RPAREN
                            {
                            LPAREN118=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header603); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN118_tree = (CommonTree)adaptor.create(LPAREN118);
                            adaptor.addChild(root_0, LPAREN118_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header605);
                            length119=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length119.getTree());
                            RPAREN120=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header607); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN120_tree = (CommonTree)adaptor.create(RPAREN120);
                            adaptor.addChild(root_0, RPAREN120_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:69:38: ( null_or_notnull )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==NOT_SYM||LA49_0==NULL_SYM) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // SQLParser2.g:69:39: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header612);
                            null_or_notnull121=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull121.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:69:57: ( DEFAULT bit_literal )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==DEFAULT) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // SQLParser2.g:69:58: DEFAULT bit_literal
                            {
                            DEFAULT122=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header617); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT122_tree = (CommonTree)adaptor.create(DEFAULT122);
                            adaptor.addChild(root_0, DEFAULT122_tree);
                            }
                            pushFollow(FOLLOW_bit_literal_in_column_data_type_header619);
                            bit_literal123=gMySQL.bit_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_literal123.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // SQLParser2.g:70:4: ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:70:4: ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    // SQLParser2.g:70:7: TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
                    {
                    TINYINT124=(Token)match(input,TINYINT,FOLLOW_TINYINT_in_column_data_type_header632); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TINYINT124_tree = (CommonTree)adaptor.create(TINYINT124);
                    adaptor.addChild(root_0, TINYINT124_tree);
                    }
                    // SQLParser2.g:70:14: ( LPAREN length RPAREN )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==LPAREN) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // SQLParser2.g:70:15: LPAREN length RPAREN
                            {
                            LPAREN125=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header634); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN125_tree = (CommonTree)adaptor.create(LPAREN125);
                            adaptor.addChild(root_0, LPAREN125_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header636);
                            length126=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length126.getTree());
                            RPAREN127=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header638); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN127_tree = (CommonTree)adaptor.create(RPAREN127);
                            adaptor.addChild(root_0, RPAREN127_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:70:38: ( UNSIGNED_SYM )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==UNSIGNED_SYM) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // SQLParser2.g:70:39: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM128=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header643); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM128_tree = (CommonTree)adaptor.create(UNSIGNED_SYM128);
                            adaptor.addChild(root_0, UNSIGNED_SYM128_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:70:54: ( ZEROFILL )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==ZEROFILL) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // SQLParser2.g:70:55: ZEROFILL
                            {
                            ZEROFILL129=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header648); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL129_tree = (CommonTree)adaptor.create(ZEROFILL129);
                            adaptor.addChild(root_0, ZEROFILL129_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:70:66: ( null_or_notnull )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==NOT_SYM||LA54_0==NULL_SYM) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // SQLParser2.g:70:67: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header653);
                            null_or_notnull130=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull130.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:70:85: ( DEFAULT number_literal )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==DEFAULT) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // SQLParser2.g:70:86: DEFAULT number_literal
                            {
                            DEFAULT131=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header658); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT131_tree = (CommonTree)adaptor.create(DEFAULT131);
                            adaptor.addChild(root_0, DEFAULT131_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header660);
                            number_literal132=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal132.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // SQLParser2.g:71:4: ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:71:4: ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    // SQLParser2.g:71:7: SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
                    {
                    SMALLINT133=(Token)match(input,SMALLINT,FOLLOW_SMALLINT_in_column_data_type_header673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SMALLINT133_tree = (CommonTree)adaptor.create(SMALLINT133);
                    adaptor.addChild(root_0, SMALLINT133_tree);
                    }
                    // SQLParser2.g:71:15: ( LPAREN length RPAREN )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==LPAREN) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // SQLParser2.g:71:16: LPAREN length RPAREN
                            {
                            LPAREN134=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header675); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN134_tree = (CommonTree)adaptor.create(LPAREN134);
                            adaptor.addChild(root_0, LPAREN134_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header677);
                            length135=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length135.getTree());
                            RPAREN136=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header679); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN136_tree = (CommonTree)adaptor.create(RPAREN136);
                            adaptor.addChild(root_0, RPAREN136_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:71:39: ( UNSIGNED_SYM )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==UNSIGNED_SYM) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // SQLParser2.g:71:40: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM137=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header684); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM137_tree = (CommonTree)adaptor.create(UNSIGNED_SYM137);
                            adaptor.addChild(root_0, UNSIGNED_SYM137_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:71:55: ( ZEROFILL )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==ZEROFILL) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // SQLParser2.g:71:56: ZEROFILL
                            {
                            ZEROFILL138=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header689); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL138_tree = (CommonTree)adaptor.create(ZEROFILL138);
                            adaptor.addChild(root_0, ZEROFILL138_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:71:67: ( null_or_notnull )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==NOT_SYM||LA59_0==NULL_SYM) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // SQLParser2.g:71:68: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header694);
                            null_or_notnull139=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull139.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:71:86: ( DEFAULT number_literal )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==DEFAULT) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // SQLParser2.g:71:87: DEFAULT number_literal
                            {
                            DEFAULT140=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header699); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT140_tree = (CommonTree)adaptor.create(DEFAULT140);
                            adaptor.addChild(root_0, DEFAULT140_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header701);
                            number_literal141=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal141.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // SQLParser2.g:72:4: ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:72:4: ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    // SQLParser2.g:72:7: MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
                    {
                    MEDIUMINT142=(Token)match(input,MEDIUMINT,FOLLOW_MEDIUMINT_in_column_data_type_header714); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIUMINT142_tree = (CommonTree)adaptor.create(MEDIUMINT142);
                    adaptor.addChild(root_0, MEDIUMINT142_tree);
                    }
                    // SQLParser2.g:72:16: ( LPAREN length RPAREN )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==LPAREN) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // SQLParser2.g:72:17: LPAREN length RPAREN
                            {
                            LPAREN143=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header716); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN143_tree = (CommonTree)adaptor.create(LPAREN143);
                            adaptor.addChild(root_0, LPAREN143_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header718);
                            length144=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length144.getTree());
                            RPAREN145=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header720); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN145_tree = (CommonTree)adaptor.create(RPAREN145);
                            adaptor.addChild(root_0, RPAREN145_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:72:40: ( UNSIGNED_SYM )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==UNSIGNED_SYM) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // SQLParser2.g:72:41: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM146=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header725); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM146_tree = (CommonTree)adaptor.create(UNSIGNED_SYM146);
                            adaptor.addChild(root_0, UNSIGNED_SYM146_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:72:56: ( ZEROFILL )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==ZEROFILL) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // SQLParser2.g:72:57: ZEROFILL
                            {
                            ZEROFILL147=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header730); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL147_tree = (CommonTree)adaptor.create(ZEROFILL147);
                            adaptor.addChild(root_0, ZEROFILL147_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:72:68: ( null_or_notnull )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==NOT_SYM||LA64_0==NULL_SYM) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // SQLParser2.g:72:69: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header735);
                            null_or_notnull148=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull148.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:72:87: ( DEFAULT number_literal )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==DEFAULT) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // SQLParser2.g:72:88: DEFAULT number_literal
                            {
                            DEFAULT149=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header740); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT149_tree = (CommonTree)adaptor.create(DEFAULT149);
                            adaptor.addChild(root_0, DEFAULT149_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header742);
                            number_literal150=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal150.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    // SQLParser2.g:73:4: ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT ( number_literal | TEXT_STRING ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:73:4: ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT ( number_literal | TEXT_STRING ) )? )
                    // SQLParser2.g:73:7: INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT ( number_literal | TEXT_STRING ) )?
                    {
                    INT_SYM151=(Token)match(input,INT_SYM,FOLLOW_INT_SYM_in_column_data_type_header755); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT_SYM151_tree = (CommonTree)adaptor.create(INT_SYM151);
                    adaptor.addChild(root_0, INT_SYM151_tree);
                    }
                    // SQLParser2.g:73:14: ( LPAREN length RPAREN )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==LPAREN) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // SQLParser2.g:73:15: LPAREN length RPAREN
                            {
                            LPAREN152=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header757); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN152_tree = (CommonTree)adaptor.create(LPAREN152);
                            adaptor.addChild(root_0, LPAREN152_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header759);
                            length153=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length153.getTree());
                            RPAREN154=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header761); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN154_tree = (CommonTree)adaptor.create(RPAREN154);
                            adaptor.addChild(root_0, RPAREN154_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:73:38: ( UNSIGNED_SYM )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==UNSIGNED_SYM) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // SQLParser2.g:73:39: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM155=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header766); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM155_tree = (CommonTree)adaptor.create(UNSIGNED_SYM155);
                            adaptor.addChild(root_0, UNSIGNED_SYM155_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:73:54: ( ZEROFILL )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==ZEROFILL) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // SQLParser2.g:73:55: ZEROFILL
                            {
                            ZEROFILL156=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header771); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL156_tree = (CommonTree)adaptor.create(ZEROFILL156);
                            adaptor.addChild(root_0, ZEROFILL156_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:73:66: ( null_or_notnull )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==NOT_SYM||LA69_0==NULL_SYM) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // SQLParser2.g:73:67: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header776);
                            null_or_notnull157=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull157.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:73:85: ( DEFAULT ( number_literal | TEXT_STRING ) )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==DEFAULT) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // SQLParser2.g:73:86: DEFAULT ( number_literal | TEXT_STRING )
                            {
                            DEFAULT158=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header781); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT158_tree = (CommonTree)adaptor.create(DEFAULT158);
                            adaptor.addChild(root_0, DEFAULT158_tree);
                            }
                            // SQLParser2.g:73:94: ( number_literal | TEXT_STRING )
                            int alt70=2;
                            int LA70_0 = input.LA(1);

                            if ( (LA70_0==NULL_SYM||(LA70_0>=PLUS && LA70_0<=MINUS)||LA70_0==INTEGER_NUM||LA70_0==REAL_NUMBER) ) {
                                alt70=1;
                            }
                            else if ( (LA70_0==TEXT_STRING) ) {
                                alt70=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 70, 0, input);

                                throw nvae;
                            }
                            switch (alt70) {
                                case 1 :
                                    // SQLParser2.g:73:95: number_literal
                                    {
                                    pushFollow(FOLLOW_number_literal_in_column_data_type_header784);
                                    number_literal159=gMySQL.number_literal();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal159.getTree());

                                    }
                                    break;
                                case 2 :
                                    // SQLParser2.g:73:110: TEXT_STRING
                                    {
                                    TEXT_STRING160=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header786); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    TEXT_STRING160_tree = (CommonTree)adaptor.create(TEXT_STRING160);
                                    adaptor.addChild(root_0, TEXT_STRING160_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 6 :
                    // SQLParser2.g:74:4: ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:74:4: ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    // SQLParser2.g:74:7: INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
                    {
                    INTEGER_SYM161=(Token)match(input,INTEGER_SYM,FOLLOW_INTEGER_SYM_in_column_data_type_header800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_SYM161_tree = (CommonTree)adaptor.create(INTEGER_SYM161);
                    adaptor.addChild(root_0, INTEGER_SYM161_tree);
                    }
                    // SQLParser2.g:74:18: ( LPAREN length RPAREN )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==LPAREN) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // SQLParser2.g:74:19: LPAREN length RPAREN
                            {
                            LPAREN162=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header802); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN162_tree = (CommonTree)adaptor.create(LPAREN162);
                            adaptor.addChild(root_0, LPAREN162_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header804);
                            length163=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length163.getTree());
                            RPAREN164=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header806); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN164_tree = (CommonTree)adaptor.create(RPAREN164);
                            adaptor.addChild(root_0, RPAREN164_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:74:42: ( UNSIGNED_SYM )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==UNSIGNED_SYM) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // SQLParser2.g:74:43: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM165=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header811); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM165_tree = (CommonTree)adaptor.create(UNSIGNED_SYM165);
                            adaptor.addChild(root_0, UNSIGNED_SYM165_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:74:58: ( ZEROFILL )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==ZEROFILL) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // SQLParser2.g:74:59: ZEROFILL
                            {
                            ZEROFILL166=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header816); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL166_tree = (CommonTree)adaptor.create(ZEROFILL166);
                            adaptor.addChild(root_0, ZEROFILL166_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:74:70: ( null_or_notnull )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==NOT_SYM||LA75_0==NULL_SYM) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // SQLParser2.g:74:71: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header821);
                            null_or_notnull167=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull167.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:74:89: ( DEFAULT number_literal )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==DEFAULT) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // SQLParser2.g:74:90: DEFAULT number_literal
                            {
                            DEFAULT168=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header826); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT168_tree = (CommonTree)adaptor.create(DEFAULT168);
                            adaptor.addChild(root_0, DEFAULT168_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header828);
                            number_literal169=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal169.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 7 :
                    // SQLParser2.g:75:4: ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:75:4: ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    // SQLParser2.g:75:7: BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
                    {
                    BIGINT170=(Token)match(input,BIGINT,FOLLOW_BIGINT_in_column_data_type_header841); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIGINT170_tree = (CommonTree)adaptor.create(BIGINT170);
                    adaptor.addChild(root_0, BIGINT170_tree);
                    }
                    // SQLParser2.g:75:13: ( LPAREN length RPAREN )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==LPAREN) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // SQLParser2.g:75:14: LPAREN length RPAREN
                            {
                            LPAREN171=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header843); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN171_tree = (CommonTree)adaptor.create(LPAREN171);
                            adaptor.addChild(root_0, LPAREN171_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header845);
                            length172=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length172.getTree());
                            RPAREN173=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header847); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN173_tree = (CommonTree)adaptor.create(RPAREN173);
                            adaptor.addChild(root_0, RPAREN173_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:75:37: ( UNSIGNED_SYM )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==UNSIGNED_SYM) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // SQLParser2.g:75:38: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM174=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header852); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM174_tree = (CommonTree)adaptor.create(UNSIGNED_SYM174);
                            adaptor.addChild(root_0, UNSIGNED_SYM174_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:75:53: ( ZEROFILL )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==ZEROFILL) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // SQLParser2.g:75:54: ZEROFILL
                            {
                            ZEROFILL175=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header857); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL175_tree = (CommonTree)adaptor.create(ZEROFILL175);
                            adaptor.addChild(root_0, ZEROFILL175_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:75:65: ( null_or_notnull )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==NOT_SYM||LA80_0==NULL_SYM) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // SQLParser2.g:75:66: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header862);
                            null_or_notnull176=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull176.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:75:84: ( DEFAULT number_literal )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==DEFAULT) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // SQLParser2.g:75:85: DEFAULT number_literal
                            {
                            DEFAULT177=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header867); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT177_tree = (CommonTree)adaptor.create(DEFAULT177);
                            adaptor.addChild(root_0, DEFAULT177_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header869);
                            number_literal178=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal178.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 8 :
                    // SQLParser2.g:76:4: ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:76:4: ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    // SQLParser2.g:76:7: REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
                    {
                    REAL179=(Token)match(input,REAL,FOLLOW_REAL_in_column_data_type_header882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REAL179_tree = (CommonTree)adaptor.create(REAL179);
                    adaptor.addChild(root_0, REAL179_tree);
                    }
                    // SQLParser2.g:76:11: ( LPAREN length COMMA number_literal RPAREN )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==LPAREN) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // SQLParser2.g:76:12: LPAREN length COMMA number_literal RPAREN
                            {
                            LPAREN180=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header884); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN180_tree = (CommonTree)adaptor.create(LPAREN180);
                            adaptor.addChild(root_0, LPAREN180_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header886);
                            length181=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length181.getTree());
                            COMMA182=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header888); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA182_tree = (CommonTree)adaptor.create(COMMA182);
                            adaptor.addChild(root_0, COMMA182_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header890);
                            number_literal183=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal183.getTree());
                            RPAREN184=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header892); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN184_tree = (CommonTree)adaptor.create(RPAREN184);
                            adaptor.addChild(root_0, RPAREN184_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:76:56: ( UNSIGNED_SYM )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==UNSIGNED_SYM) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // SQLParser2.g:76:57: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM185=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header897); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM185_tree = (CommonTree)adaptor.create(UNSIGNED_SYM185);
                            adaptor.addChild(root_0, UNSIGNED_SYM185_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:76:72: ( ZEROFILL )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==ZEROFILL) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // SQLParser2.g:76:73: ZEROFILL
                            {
                            ZEROFILL186=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header902); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL186_tree = (CommonTree)adaptor.create(ZEROFILL186);
                            adaptor.addChild(root_0, ZEROFILL186_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:76:84: ( null_or_notnull )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==NOT_SYM||LA85_0==NULL_SYM) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // SQLParser2.g:76:85: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header907);
                            null_or_notnull187=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull187.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:76:103: ( DEFAULT number_literal )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==DEFAULT) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // SQLParser2.g:76:104: DEFAULT number_literal
                            {
                            DEFAULT188=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header912); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT188_tree = (CommonTree)adaptor.create(DEFAULT188);
                            adaptor.addChild(root_0, DEFAULT188_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header914);
                            number_literal189=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal189.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 9 :
                    // SQLParser2.g:77:4: ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:77:4: ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    // SQLParser2.g:77:7: DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
                    {
                    DOUBLE_SYM190=(Token)match(input,DOUBLE_SYM,FOLLOW_DOUBLE_SYM_in_column_data_type_header927); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE_SYM190_tree = (CommonTree)adaptor.create(DOUBLE_SYM190);
                    adaptor.addChild(root_0, DOUBLE_SYM190_tree);
                    }
                    // SQLParser2.g:77:17: ( LPAREN length COMMA number_literal RPAREN )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==LPAREN) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // SQLParser2.g:77:18: LPAREN length COMMA number_literal RPAREN
                            {
                            LPAREN191=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header929); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN191_tree = (CommonTree)adaptor.create(LPAREN191);
                            adaptor.addChild(root_0, LPAREN191_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header931);
                            length192=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length192.getTree());
                            COMMA193=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header933); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA193_tree = (CommonTree)adaptor.create(COMMA193);
                            adaptor.addChild(root_0, COMMA193_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header935);
                            number_literal194=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal194.getTree());
                            RPAREN195=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header937); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN195_tree = (CommonTree)adaptor.create(RPAREN195);
                            adaptor.addChild(root_0, RPAREN195_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:77:62: ( UNSIGNED_SYM )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==UNSIGNED_SYM) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // SQLParser2.g:77:63: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM196=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header942); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM196_tree = (CommonTree)adaptor.create(UNSIGNED_SYM196);
                            adaptor.addChild(root_0, UNSIGNED_SYM196_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:77:78: ( ZEROFILL )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==ZEROFILL) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // SQLParser2.g:77:79: ZEROFILL
                            {
                            ZEROFILL197=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header947); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL197_tree = (CommonTree)adaptor.create(ZEROFILL197);
                            adaptor.addChild(root_0, ZEROFILL197_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:77:90: ( null_or_notnull )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==NOT_SYM||LA90_0==NULL_SYM) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // SQLParser2.g:77:91: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header952);
                            null_or_notnull198=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull198.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:77:109: ( DEFAULT number_literal )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==DEFAULT) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // SQLParser2.g:77:110: DEFAULT number_literal
                            {
                            DEFAULT199=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header957); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT199_tree = (CommonTree)adaptor.create(DEFAULT199);
                            adaptor.addChild(root_0, DEFAULT199_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header959);
                            number_literal200=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal200.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 10 :
                    // SQLParser2.g:78:4: ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:78:4: ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    // SQLParser2.g:78:7: FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
                    {
                    FLOAT_SYM201=(Token)match(input,FLOAT_SYM,FOLLOW_FLOAT_SYM_in_column_data_type_header972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT_SYM201_tree = (CommonTree)adaptor.create(FLOAT_SYM201);
                    adaptor.addChild(root_0, FLOAT_SYM201_tree);
                    }
                    // SQLParser2.g:78:16: ( LPAREN length COMMA number_literal RPAREN )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==LPAREN) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // SQLParser2.g:78:17: LPAREN length COMMA number_literal RPAREN
                            {
                            LPAREN202=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header974); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN202_tree = (CommonTree)adaptor.create(LPAREN202);
                            adaptor.addChild(root_0, LPAREN202_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header976);
                            length203=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length203.getTree());
                            COMMA204=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header978); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA204_tree = (CommonTree)adaptor.create(COMMA204);
                            adaptor.addChild(root_0, COMMA204_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header980);
                            number_literal205=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal205.getTree());
                            RPAREN206=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header982); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN206_tree = (CommonTree)adaptor.create(RPAREN206);
                            adaptor.addChild(root_0, RPAREN206_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:78:61: ( UNSIGNED_SYM )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==UNSIGNED_SYM) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // SQLParser2.g:78:62: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM207=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header987); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM207_tree = (CommonTree)adaptor.create(UNSIGNED_SYM207);
                            adaptor.addChild(root_0, UNSIGNED_SYM207_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:78:77: ( ZEROFILL )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==ZEROFILL) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // SQLParser2.g:78:78: ZEROFILL
                            {
                            ZEROFILL208=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header992); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL208_tree = (CommonTree)adaptor.create(ZEROFILL208);
                            adaptor.addChild(root_0, ZEROFILL208_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:78:89: ( null_or_notnull )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==NOT_SYM||LA95_0==NULL_SYM) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // SQLParser2.g:78:90: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header997);
                            null_or_notnull209=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull209.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:78:108: ( DEFAULT number_literal )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==DEFAULT) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // SQLParser2.g:78:109: DEFAULT number_literal
                            {
                            DEFAULT210=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1002); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT210_tree = (CommonTree)adaptor.create(DEFAULT210);
                            adaptor.addChild(root_0, DEFAULT210_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header1004);
                            number_literal211=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal211.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 11 :
                    // SQLParser2.g:79:4: ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:79:4: ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    // SQLParser2.g:79:7: DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
                    {
                    DECIMAL_SYM212=(Token)match(input,DECIMAL_SYM,FOLLOW_DECIMAL_SYM_in_column_data_type_header1017); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_SYM212_tree = (CommonTree)adaptor.create(DECIMAL_SYM212);
                    adaptor.addChild(root_0, DECIMAL_SYM212_tree);
                    }
                    // SQLParser2.g:79:18: ( LPAREN length ( COMMA number_literal )? RPAREN )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==LPAREN) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // SQLParser2.g:79:19: LPAREN length ( COMMA number_literal )? RPAREN
                            {
                            LPAREN213=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header1019); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN213_tree = (CommonTree)adaptor.create(LPAREN213);
                            adaptor.addChild(root_0, LPAREN213_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header1021);
                            length214=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length214.getTree());
                            // SQLParser2.g:79:32: ( COMMA number_literal )?
                            int alt97=2;
                            int LA97_0 = input.LA(1);

                            if ( (LA97_0==COMMA) ) {
                                alt97=1;
                            }
                            switch (alt97) {
                                case 1 :
                                    // SQLParser2.g:79:34: COMMA number_literal
                                    {
                                    COMMA215=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header1024); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    COMMA215_tree = (CommonTree)adaptor.create(COMMA215);
                                    adaptor.addChild(root_0, COMMA215_tree);
                                    }
                                    pushFollow(FOLLOW_number_literal_in_column_data_type_header1026);
                                    number_literal216=gMySQL.number_literal();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal216.getTree());

                                    }
                                    break;

                            }

                            RPAREN217=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header1030); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN217_tree = (CommonTree)adaptor.create(RPAREN217);
                            adaptor.addChild(root_0, RPAREN217_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:79:66: ( UNSIGNED_SYM )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==UNSIGNED_SYM) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // SQLParser2.g:79:67: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM218=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header1035); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM218_tree = (CommonTree)adaptor.create(UNSIGNED_SYM218);
                            adaptor.addChild(root_0, UNSIGNED_SYM218_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:79:82: ( ZEROFILL )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==ZEROFILL) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // SQLParser2.g:79:83: ZEROFILL
                            {
                            ZEROFILL219=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header1040); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL219_tree = (CommonTree)adaptor.create(ZEROFILL219);
                            adaptor.addChild(root_0, ZEROFILL219_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:79:94: ( null_or_notnull )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==NOT_SYM||LA101_0==NULL_SYM) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // SQLParser2.g:79:95: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1045);
                            null_or_notnull220=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull220.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:79:113: ( DEFAULT number_literal )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==DEFAULT) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            // SQLParser2.g:79:114: DEFAULT number_literal
                            {
                            DEFAULT221=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1050); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT221_tree = (CommonTree)adaptor.create(DEFAULT221);
                            adaptor.addChild(root_0, DEFAULT221_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header1052);
                            number_literal222=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal222.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 12 :
                    // SQLParser2.g:80:4: ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:80:4: ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
                    // SQLParser2.g:80:7: NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
                    {
                    NUMERIC_SYM223=(Token)match(input,NUMERIC_SYM,FOLLOW_NUMERIC_SYM_in_column_data_type_header1065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMERIC_SYM223_tree = (CommonTree)adaptor.create(NUMERIC_SYM223);
                    adaptor.addChild(root_0, NUMERIC_SYM223_tree);
                    }
                    // SQLParser2.g:80:18: ( LPAREN length ( COMMA number_literal )? RPAREN )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==LPAREN) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // SQLParser2.g:80:19: LPAREN length ( COMMA number_literal )? RPAREN
                            {
                            LPAREN224=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header1067); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN224_tree = (CommonTree)adaptor.create(LPAREN224);
                            adaptor.addChild(root_0, LPAREN224_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header1069);
                            length225=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length225.getTree());
                            // SQLParser2.g:80:32: ( COMMA number_literal )?
                            int alt103=2;
                            int LA103_0 = input.LA(1);

                            if ( (LA103_0==COMMA) ) {
                                alt103=1;
                            }
                            switch (alt103) {
                                case 1 :
                                    // SQLParser2.g:80:34: COMMA number_literal
                                    {
                                    COMMA226=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header1072); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    COMMA226_tree = (CommonTree)adaptor.create(COMMA226);
                                    adaptor.addChild(root_0, COMMA226_tree);
                                    }
                                    pushFollow(FOLLOW_number_literal_in_column_data_type_header1074);
                                    number_literal227=gMySQL.number_literal();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal227.getTree());

                                    }
                                    break;

                            }

                            RPAREN228=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header1078); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN228_tree = (CommonTree)adaptor.create(RPAREN228);
                            adaptor.addChild(root_0, RPAREN228_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:80:66: ( UNSIGNED_SYM )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==UNSIGNED_SYM) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // SQLParser2.g:80:67: UNSIGNED_SYM
                            {
                            UNSIGNED_SYM229=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header1083); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UNSIGNED_SYM229_tree = (CommonTree)adaptor.create(UNSIGNED_SYM229);
                            adaptor.addChild(root_0, UNSIGNED_SYM229_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:80:82: ( ZEROFILL )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==ZEROFILL) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // SQLParser2.g:80:83: ZEROFILL
                            {
                            ZEROFILL230=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header1088); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ZEROFILL230_tree = (CommonTree)adaptor.create(ZEROFILL230);
                            adaptor.addChild(root_0, ZEROFILL230_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:80:94: ( null_or_notnull )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==NOT_SYM||LA107_0==NULL_SYM) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // SQLParser2.g:80:95: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1093);
                            null_or_notnull231=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull231.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:80:113: ( DEFAULT number_literal )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==DEFAULT) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // SQLParser2.g:80:114: DEFAULT number_literal
                            {
                            DEFAULT232=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1098); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT232_tree = (CommonTree)adaptor.create(DEFAULT232);
                            adaptor.addChild(root_0, DEFAULT232_tree);
                            }
                            pushFollow(FOLLOW_number_literal_in_column_data_type_header1100);
                            number_literal233=gMySQL.number_literal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal233.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 13 :
                    // SQLParser2.g:81:4: ( DATE_SYM ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:81:4: ( DATE_SYM ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    // SQLParser2.g:81:7: DATE_SYM ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    {
                    DATE_SYM234=(Token)match(input,DATE_SYM,FOLLOW_DATE_SYM_in_column_data_type_header1113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DATE_SYM234_tree = (CommonTree)adaptor.create(DATE_SYM234);
                    adaptor.addChild(root_0, DATE_SYM234_tree);
                    }
                    // SQLParser2.g:81:16: ( null_or_notnull )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==NOT_SYM||LA109_0==NULL_SYM) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // SQLParser2.g:81:17: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1116);
                            null_or_notnull235=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull235.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:81:35: ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==DEFAULT) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // SQLParser2.g:81:36: DEFAULT ( TEXT_STRING | NULL_SYM )
                            {
                            DEFAULT236=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1121); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT236_tree = (CommonTree)adaptor.create(DEFAULT236);
                            adaptor.addChild(root_0, DEFAULT236_tree);
                            }
                            set237=(Token)input.LT(1);
                            if ( input.LA(1)==NULL_SYM||input.LA(1)==TEXT_STRING ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set237));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 14 :
                    // SQLParser2.g:82:4: ( TIME_SYM ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:82:4: ( TIME_SYM ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    // SQLParser2.g:82:7: TIME_SYM ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    {
                    TIME_SYM238=(Token)match(input,TIME_SYM,FOLLOW_TIME_SYM_in_column_data_type_header1140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIME_SYM238_tree = (CommonTree)adaptor.create(TIME_SYM238);
                    adaptor.addChild(root_0, TIME_SYM238_tree);
                    }
                    // SQLParser2.g:82:16: ( null_or_notnull )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==NOT_SYM||LA111_0==NULL_SYM) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // SQLParser2.g:82:17: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1143);
                            null_or_notnull239=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull239.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:82:35: ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==DEFAULT) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // SQLParser2.g:82:36: DEFAULT ( TEXT_STRING | NULL_SYM )
                            {
                            DEFAULT240=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1148); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT240_tree = (CommonTree)adaptor.create(DEFAULT240);
                            adaptor.addChild(root_0, DEFAULT240_tree);
                            }
                            set241=(Token)input.LT(1);
                            if ( input.LA(1)==NULL_SYM||input.LA(1)==TEXT_STRING ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set241));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 15 :
                    // SQLParser2.g:83:4: ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:83:4: ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )? )
                    // SQLParser2.g:83:7: TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )?
                    {
                    TIMESTAMP242=(Token)match(input,TIMESTAMP,FOLLOW_TIMESTAMP_in_column_data_type_header1167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIMESTAMP242_tree = (CommonTree)adaptor.create(TIMESTAMP242);
                    adaptor.addChild(root_0, TIMESTAMP242_tree);
                    }
                    // SQLParser2.g:83:17: ( null_or_notnull )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==NOT_SYM||LA113_0==NULL_SYM) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // SQLParser2.g:83:18: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1170);
                            null_or_notnull243=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull243.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:83:36: ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==DEFAULT) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // SQLParser2.g:83:37: DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM )
                            {
                            DEFAULT244=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1175); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT244_tree = (CommonTree)adaptor.create(DEFAULT244);
                            adaptor.addChild(root_0, DEFAULT244_tree);
                            }
                            set245=(Token)input.LT(1);
                            if ( input.LA(1)==CURRENT_TIMESTAMP||input.LA(1)==NULL_SYM||input.LA(1)==TEXT_STRING ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set245));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 16 :
                    // SQLParser2.g:84:4: ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:84:4: ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )? )
                    // SQLParser2.g:84:7: DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )?
                    {
                    DATETIME246=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_column_data_type_header1196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DATETIME246_tree = (CommonTree)adaptor.create(DATETIME246);
                    adaptor.addChild(root_0, DATETIME246_tree);
                    }
                    // SQLParser2.g:84:16: ( null_or_notnull )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==NOT_SYM||LA115_0==NULL_SYM) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // SQLParser2.g:84:17: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1199);
                            null_or_notnull247=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull247.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:84:35: ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM ) )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==DEFAULT) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // SQLParser2.g:84:36: DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING | NULL_SYM )
                            {
                            DEFAULT248=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1204); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT248_tree = (CommonTree)adaptor.create(DEFAULT248);
                            adaptor.addChild(root_0, DEFAULT248_tree);
                            }
                            set249=(Token)input.LT(1);
                            if ( input.LA(1)==CURRENT_TIMESTAMP||input.LA(1)==NULL_SYM||input.LA(1)==TEXT_STRING ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set249));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 17 :
                    // SQLParser2.g:85:4: ( Y_ E_ A_ R_ ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:85:4: ( Y_ E_ A_ R_ ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? )
                    // SQLParser2.g:85:7: Y_ E_ A_ R_ ( null_or_notnull )? ( DEFAULT INTEGER_NUM )?
                    {
                    Y_250=(Token)match(input,Y_,FOLLOW_Y__in_column_data_type_header1225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Y_250_tree = (CommonTree)adaptor.create(Y_250);
                    adaptor.addChild(root_0, Y_250_tree);
                    }
                    E_251=(Token)match(input,E_,FOLLOW_E__in_column_data_type_header1227); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    E_251_tree = (CommonTree)adaptor.create(E_251);
                    adaptor.addChild(root_0, E_251_tree);
                    }
                    A_252=(Token)match(input,A_,FOLLOW_A__in_column_data_type_header1229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    A_252_tree = (CommonTree)adaptor.create(A_252);
                    adaptor.addChild(root_0, A_252_tree);
                    }
                    R_253=(Token)match(input,R_,FOLLOW_R__in_column_data_type_header1231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    R_253_tree = (CommonTree)adaptor.create(R_253);
                    adaptor.addChild(root_0, R_253_tree);
                    }
                    // SQLParser2.g:85:19: ( null_or_notnull )?
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==NOT_SYM||LA117_0==NULL_SYM) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            // SQLParser2.g:85:20: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1234);
                            null_or_notnull254=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull254.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:85:38: ( DEFAULT INTEGER_NUM )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==DEFAULT) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // SQLParser2.g:85:39: DEFAULT INTEGER_NUM
                            {
                            DEFAULT255=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1239); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT255_tree = (CommonTree)adaptor.create(DEFAULT255);
                            adaptor.addChild(root_0, DEFAULT255_tree);
                            }
                            INTEGER_NUM256=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_column_data_type_header1241); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            INTEGER_NUM256_tree = (CommonTree)adaptor.create(INTEGER_NUM256);
                            adaptor.addChild(root_0, INTEGER_NUM256_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 18 :
                    // SQLParser2.g:86:4: ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:86:4: ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    // SQLParser2.g:86:7: CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    {
                    CHAR257=(Token)match(input,CHAR,FOLLOW_CHAR_in_column_data_type_header1254); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHAR257_tree = (CommonTree)adaptor.create(CHAR257);
                    adaptor.addChild(root_0, CHAR257_tree);
                    }
                    // SQLParser2.g:86:14: ( LPAREN length RPAREN )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==LPAREN) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // SQLParser2.g:86:15: LPAREN length RPAREN
                            {
                            LPAREN258=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header1259); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN258_tree = (CommonTree)adaptor.create(LPAREN258);
                            adaptor.addChild(root_0, LPAREN258_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header1261);
                            length259=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length259.getTree());
                            RPAREN260=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header1263); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN260_tree = (CommonTree)adaptor.create(RPAREN260);
                            adaptor.addChild(root_0, RPAREN260_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:86:38: ( CHARACTER_SYM SET_SYM charset_name )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==CHARACTER_SYM) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // SQLParser2.g:86:39: CHARACTER_SYM SET_SYM charset_name
                            {
                            CHARACTER_SYM261=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header1268); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CHARACTER_SYM261_tree = (CommonTree)adaptor.create(CHARACTER_SYM261);
                            adaptor.addChild(root_0, CHARACTER_SYM261_tree);
                            }
                            SET_SYM262=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header1270); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SET_SYM262_tree = (CommonTree)adaptor.create(SET_SYM262);
                            adaptor.addChild(root_0, SET_SYM262_tree);
                            }
                            pushFollow(FOLLOW_charset_name_in_column_data_type_header1272);
                            charset_name263=gMySQL.charset_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name263.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:86:76: ( COLLATE_SYM collation_name )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==COLLATE_SYM) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // SQLParser2.g:86:77: COLLATE_SYM collation_name
                            {
                            COLLATE_SYM264=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header1277); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLLATE_SYM264_tree = (CommonTree)adaptor.create(COLLATE_SYM264);
                            adaptor.addChild(root_0, COLLATE_SYM264_tree);
                            }
                            pushFollow(FOLLOW_collation_name_in_column_data_type_header1279);
                            collation_name265=gMySQL.collation_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name265.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:86:106: ( null_or_notnull )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==NOT_SYM||LA122_0==NULL_SYM) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // SQLParser2.g:86:107: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1284);
                            null_or_notnull266=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull266.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:86:125: ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==DEFAULT) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // SQLParser2.g:86:126: DEFAULT ( TEXT_STRING | NULL_SYM )
                            {
                            DEFAULT267=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1289); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT267_tree = (CommonTree)adaptor.create(DEFAULT267);
                            adaptor.addChild(root_0, DEFAULT267_tree);
                            }
                            set268=(Token)input.LT(1);
                            if ( input.LA(1)==NULL_SYM||input.LA(1)==TEXT_STRING ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set268));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 19 :
                    // SQLParser2.g:87:4: ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:87:4: ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    // SQLParser2.g:87:7: VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    {
                    VARCHAR269=(Token)match(input,VARCHAR,FOLLOW_VARCHAR_in_column_data_type_header1308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARCHAR269_tree = (CommonTree)adaptor.create(VARCHAR269);
                    adaptor.addChild(root_0, VARCHAR269_tree);
                    }
                    LPAREN270=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header1310); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN270_tree = (CommonTree)adaptor.create(LPAREN270);
                    adaptor.addChild(root_0, LPAREN270_tree);
                    }
                    pushFollow(FOLLOW_length_in_column_data_type_header1312);
                    length271=length();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, length271.getTree());
                    RPAREN272=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header1314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN272_tree = (CommonTree)adaptor.create(RPAREN272);
                    adaptor.addChild(root_0, RPAREN272_tree);
                    }
                    // SQLParser2.g:87:38: ( CHARACTER_SYM SET_SYM charset_name )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==CHARACTER_SYM) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // SQLParser2.g:87:39: CHARACTER_SYM SET_SYM charset_name
                            {
                            CHARACTER_SYM273=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header1319); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CHARACTER_SYM273_tree = (CommonTree)adaptor.create(CHARACTER_SYM273);
                            adaptor.addChild(root_0, CHARACTER_SYM273_tree);
                            }
                            SET_SYM274=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header1321); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SET_SYM274_tree = (CommonTree)adaptor.create(SET_SYM274);
                            adaptor.addChild(root_0, SET_SYM274_tree);
                            }
                            pushFollow(FOLLOW_charset_name_in_column_data_type_header1323);
                            charset_name275=gMySQL.charset_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name275.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:87:76: ( COLLATE_SYM collation_name )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==COLLATE_SYM) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // SQLParser2.g:87:77: COLLATE_SYM collation_name
                            {
                            COLLATE_SYM276=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header1328); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLLATE_SYM276_tree = (CommonTree)adaptor.create(COLLATE_SYM276);
                            adaptor.addChild(root_0, COLLATE_SYM276_tree);
                            }
                            pushFollow(FOLLOW_collation_name_in_column_data_type_header1330);
                            collation_name277=gMySQL.collation_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name277.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:87:106: ( null_or_notnull )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==NOT_SYM||LA126_0==NULL_SYM) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // SQLParser2.g:87:107: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1335);
                            null_or_notnull278=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull278.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:87:125: ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==DEFAULT) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // SQLParser2.g:87:126: DEFAULT ( TEXT_STRING | NULL_SYM )
                            {
                            DEFAULT279=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1340); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT279_tree = (CommonTree)adaptor.create(DEFAULT279);
                            adaptor.addChild(root_0, DEFAULT279_tree);
                            }
                            set280=(Token)input.LT(1);
                            if ( input.LA(1)==NULL_SYM||input.LA(1)==TEXT_STRING ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set280));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 20 :
                    // SQLParser2.g:88:4: ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:88:4: ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    // SQLParser2.g:88:7: BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    {
                    BINARY281=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header1359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BINARY281_tree = (CommonTree)adaptor.create(BINARY281);
                    adaptor.addChild(root_0, BINARY281_tree);
                    }
                    // SQLParser2.g:88:16: ( LPAREN length RPAREN )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==LPAREN) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // SQLParser2.g:88:17: LPAREN length RPAREN
                            {
                            LPAREN282=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header1364); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN282_tree = (CommonTree)adaptor.create(LPAREN282);
                            adaptor.addChild(root_0, LPAREN282_tree);
                            }
                            pushFollow(FOLLOW_length_in_column_data_type_header1366);
                            length283=length();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, length283.getTree());
                            RPAREN284=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header1368); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN284_tree = (CommonTree)adaptor.create(RPAREN284);
                            adaptor.addChild(root_0, RPAREN284_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:88:40: ( null_or_notnull )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==NOT_SYM||LA129_0==NULL_SYM) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // SQLParser2.g:88:41: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1373);
                            null_or_notnull285=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull285.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:88:59: ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==DEFAULT) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // SQLParser2.g:88:60: DEFAULT ( TEXT_STRING | NULL_SYM )
                            {
                            DEFAULT286=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1378); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT286_tree = (CommonTree)adaptor.create(DEFAULT286);
                            adaptor.addChild(root_0, DEFAULT286_tree);
                            }
                            set287=(Token)input.LT(1);
                            if ( input.LA(1)==NULL_SYM||input.LA(1)==TEXT_STRING ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set287));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 21 :
                    // SQLParser2.g:89:4: ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:89:4: ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    // SQLParser2.g:89:7: VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    {
                    VARBINARY288=(Token)match(input,VARBINARY,FOLLOW_VARBINARY_in_column_data_type_header1397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARBINARY288_tree = (CommonTree)adaptor.create(VARBINARY288);
                    adaptor.addChild(root_0, VARBINARY288_tree);
                    }
                    LPAREN289=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header1399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN289_tree = (CommonTree)adaptor.create(LPAREN289);
                    adaptor.addChild(root_0, LPAREN289_tree);
                    }
                    pushFollow(FOLLOW_length_in_column_data_type_header1401);
                    length290=length();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, length290.getTree());
                    RPAREN291=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header1403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN291_tree = (CommonTree)adaptor.create(RPAREN291);
                    adaptor.addChild(root_0, RPAREN291_tree);
                    }
                    // SQLParser2.g:89:38: ( null_or_notnull )?
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==NOT_SYM||LA131_0==NULL_SYM) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // SQLParser2.g:89:39: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1406);
                            null_or_notnull292=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull292.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:89:57: ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==DEFAULT) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // SQLParser2.g:89:58: DEFAULT ( TEXT_STRING | NULL_SYM )
                            {
                            DEFAULT293=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1411); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT293_tree = (CommonTree)adaptor.create(DEFAULT293);
                            adaptor.addChild(root_0, DEFAULT293_tree);
                            }
                            set294=(Token)input.LT(1);
                            if ( input.LA(1)==NULL_SYM||input.LA(1)==TEXT_STRING ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set294));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 22 :
                    // SQLParser2.g:90:4: ( TINYBLOB ( null_or_notnull )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:90:4: ( TINYBLOB ( null_or_notnull )? )
                    // SQLParser2.g:90:7: TINYBLOB ( null_or_notnull )?
                    {
                    TINYBLOB295=(Token)match(input,TINYBLOB,FOLLOW_TINYBLOB_in_column_data_type_header1430); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TINYBLOB295_tree = (CommonTree)adaptor.create(TINYBLOB295);
                    adaptor.addChild(root_0, TINYBLOB295_tree);
                    }
                    // SQLParser2.g:90:16: ( null_or_notnull )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==NOT_SYM||LA133_0==NULL_SYM) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // SQLParser2.g:90:17: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1433);
                            null_or_notnull296=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull296.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 23 :
                    // SQLParser2.g:91:4: ( BLOB_SYM ( null_or_notnull )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:91:4: ( BLOB_SYM ( null_or_notnull )? )
                    // SQLParser2.g:91:7: BLOB_SYM ( null_or_notnull )?
                    {
                    BLOB_SYM297=(Token)match(input,BLOB_SYM,FOLLOW_BLOB_SYM_in_column_data_type_header1446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BLOB_SYM297_tree = (CommonTree)adaptor.create(BLOB_SYM297);
                    adaptor.addChild(root_0, BLOB_SYM297_tree);
                    }
                    // SQLParser2.g:91:16: ( null_or_notnull )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==NOT_SYM||LA134_0==NULL_SYM) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // SQLParser2.g:91:17: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1449);
                            null_or_notnull298=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull298.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 24 :
                    // SQLParser2.g:92:4: ( MEDIUMBLOB ( null_or_notnull )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:92:4: ( MEDIUMBLOB ( null_or_notnull )? )
                    // SQLParser2.g:92:7: MEDIUMBLOB ( null_or_notnull )?
                    {
                    MEDIUMBLOB299=(Token)match(input,MEDIUMBLOB,FOLLOW_MEDIUMBLOB_in_column_data_type_header1462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIUMBLOB299_tree = (CommonTree)adaptor.create(MEDIUMBLOB299);
                    adaptor.addChild(root_0, MEDIUMBLOB299_tree);
                    }
                    // SQLParser2.g:92:18: ( null_or_notnull )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==NOT_SYM||LA135_0==NULL_SYM) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // SQLParser2.g:92:19: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1465);
                            null_or_notnull300=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull300.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 25 :
                    // SQLParser2.g:93:4: ( LONGBLOB ( null_or_notnull )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:93:4: ( LONGBLOB ( null_or_notnull )? )
                    // SQLParser2.g:93:7: LONGBLOB ( null_or_notnull )?
                    {
                    LONGBLOB301=(Token)match(input,LONGBLOB,FOLLOW_LONGBLOB_in_column_data_type_header1478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGBLOB301_tree = (CommonTree)adaptor.create(LONGBLOB301);
                    adaptor.addChild(root_0, LONGBLOB301_tree);
                    }
                    // SQLParser2.g:93:16: ( null_or_notnull )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==NOT_SYM||LA136_0==NULL_SYM) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // SQLParser2.g:93:17: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1481);
                            null_or_notnull302=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull302.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 26 :
                    // SQLParser2.g:94:4: ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:94:4: ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
                    // SQLParser2.g:94:7: TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
                    {
                    TINYTEXT303=(Token)match(input,TINYTEXT,FOLLOW_TINYTEXT_in_column_data_type_header1494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TINYTEXT303_tree = (CommonTree)adaptor.create(TINYTEXT303);
                    adaptor.addChild(root_0, TINYTEXT303_tree);
                    }
                    // SQLParser2.g:94:18: ( BINARY )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==BINARY) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // SQLParser2.g:94:19: BINARY
                            {
                            BINARY304=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header1499); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BINARY304_tree = (CommonTree)adaptor.create(BINARY304);
                            adaptor.addChild(root_0, BINARY304_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:94:28: ( CHARACTER_SYM SET_SYM charset_name )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==CHARACTER_SYM) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // SQLParser2.g:94:29: CHARACTER_SYM SET_SYM charset_name
                            {
                            CHARACTER_SYM305=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header1504); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CHARACTER_SYM305_tree = (CommonTree)adaptor.create(CHARACTER_SYM305);
                            adaptor.addChild(root_0, CHARACTER_SYM305_tree);
                            }
                            SET_SYM306=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header1506); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SET_SYM306_tree = (CommonTree)adaptor.create(SET_SYM306);
                            adaptor.addChild(root_0, SET_SYM306_tree);
                            }
                            pushFollow(FOLLOW_charset_name_in_column_data_type_header1508);
                            charset_name307=gMySQL.charset_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name307.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:94:66: ( COLLATE_SYM collation_name )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==COLLATE_SYM) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // SQLParser2.g:94:67: COLLATE_SYM collation_name
                            {
                            COLLATE_SYM308=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header1513); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLLATE_SYM308_tree = (CommonTree)adaptor.create(COLLATE_SYM308);
                            adaptor.addChild(root_0, COLLATE_SYM308_tree);
                            }
                            pushFollow(FOLLOW_collation_name_in_column_data_type_header1515);
                            collation_name309=gMySQL.collation_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name309.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:94:96: ( null_or_notnull )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==NOT_SYM||LA140_0==NULL_SYM) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // SQLParser2.g:94:97: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1520);
                            null_or_notnull310=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull310.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 27 :
                    // SQLParser2.g:95:4: ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:95:4: ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
                    // SQLParser2.g:95:7: TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
                    {
                    TEXT_SYM311=(Token)match(input,TEXT_SYM,FOLLOW_TEXT_SYM_in_column_data_type_header1533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_SYM311_tree = (CommonTree)adaptor.create(TEXT_SYM311);
                    adaptor.addChild(root_0, TEXT_SYM311_tree);
                    }
                    // SQLParser2.g:95:18: ( BINARY )?
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==BINARY) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            // SQLParser2.g:95:19: BINARY
                            {
                            BINARY312=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header1538); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BINARY312_tree = (CommonTree)adaptor.create(BINARY312);
                            adaptor.addChild(root_0, BINARY312_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:95:28: ( CHARACTER_SYM SET_SYM charset_name )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==CHARACTER_SYM) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // SQLParser2.g:95:29: CHARACTER_SYM SET_SYM charset_name
                            {
                            CHARACTER_SYM313=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header1543); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CHARACTER_SYM313_tree = (CommonTree)adaptor.create(CHARACTER_SYM313);
                            adaptor.addChild(root_0, CHARACTER_SYM313_tree);
                            }
                            SET_SYM314=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header1545); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SET_SYM314_tree = (CommonTree)adaptor.create(SET_SYM314);
                            adaptor.addChild(root_0, SET_SYM314_tree);
                            }
                            pushFollow(FOLLOW_charset_name_in_column_data_type_header1547);
                            charset_name315=gMySQL.charset_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name315.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:95:66: ( COLLATE_SYM collation_name )?
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==COLLATE_SYM) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            // SQLParser2.g:95:67: COLLATE_SYM collation_name
                            {
                            COLLATE_SYM316=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header1552); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLLATE_SYM316_tree = (CommonTree)adaptor.create(COLLATE_SYM316);
                            adaptor.addChild(root_0, COLLATE_SYM316_tree);
                            }
                            pushFollow(FOLLOW_collation_name_in_column_data_type_header1554);
                            collation_name317=gMySQL.collation_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name317.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:95:96: ( null_or_notnull )?
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==NOT_SYM||LA144_0==NULL_SYM) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            // SQLParser2.g:95:97: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1559);
                            null_or_notnull318=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull318.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 28 :
                    // SQLParser2.g:96:4: ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:96:4: ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
                    // SQLParser2.g:96:7: MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
                    {
                    MEDIUMTEXT319=(Token)match(input,MEDIUMTEXT,FOLLOW_MEDIUMTEXT_in_column_data_type_header1572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIUMTEXT319_tree = (CommonTree)adaptor.create(MEDIUMTEXT319);
                    adaptor.addChild(root_0, MEDIUMTEXT319_tree);
                    }
                    // SQLParser2.g:96:18: ( BINARY )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==BINARY) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // SQLParser2.g:96:19: BINARY
                            {
                            BINARY320=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header1575); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BINARY320_tree = (CommonTree)adaptor.create(BINARY320);
                            adaptor.addChild(root_0, BINARY320_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:96:28: ( CHARACTER_SYM SET_SYM charset_name )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==CHARACTER_SYM) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // SQLParser2.g:96:29: CHARACTER_SYM SET_SYM charset_name
                            {
                            CHARACTER_SYM321=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header1580); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CHARACTER_SYM321_tree = (CommonTree)adaptor.create(CHARACTER_SYM321);
                            adaptor.addChild(root_0, CHARACTER_SYM321_tree);
                            }
                            SET_SYM322=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header1582); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SET_SYM322_tree = (CommonTree)adaptor.create(SET_SYM322);
                            adaptor.addChild(root_0, SET_SYM322_tree);
                            }
                            pushFollow(FOLLOW_charset_name_in_column_data_type_header1584);
                            charset_name323=gMySQL.charset_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name323.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:96:66: ( COLLATE_SYM collation_name )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==COLLATE_SYM) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // SQLParser2.g:96:67: COLLATE_SYM collation_name
                            {
                            COLLATE_SYM324=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header1589); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLLATE_SYM324_tree = (CommonTree)adaptor.create(COLLATE_SYM324);
                            adaptor.addChild(root_0, COLLATE_SYM324_tree);
                            }
                            pushFollow(FOLLOW_collation_name_in_column_data_type_header1591);
                            collation_name325=gMySQL.collation_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name325.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:96:96: ( null_or_notnull )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==NOT_SYM||LA148_0==NULL_SYM) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // SQLParser2.g:96:97: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1596);
                            null_or_notnull326=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull326.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 29 :
                    // SQLParser2.g:97:4: ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:97:4: ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
                    // SQLParser2.g:97:7: LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
                    {
                    LONGTEXT327=(Token)match(input,LONGTEXT,FOLLOW_LONGTEXT_in_column_data_type_header1609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGTEXT327_tree = (CommonTree)adaptor.create(LONGTEXT327);
                    adaptor.addChild(root_0, LONGTEXT327_tree);
                    }
                    // SQLParser2.g:97:18: ( BINARY )?
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==BINARY) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            // SQLParser2.g:97:19: BINARY
                            {
                            BINARY328=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header1614); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BINARY328_tree = (CommonTree)adaptor.create(BINARY328);
                            adaptor.addChild(root_0, BINARY328_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:97:28: ( CHARACTER_SYM SET_SYM charset_name )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==CHARACTER_SYM) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // SQLParser2.g:97:29: CHARACTER_SYM SET_SYM charset_name
                            {
                            CHARACTER_SYM329=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header1619); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CHARACTER_SYM329_tree = (CommonTree)adaptor.create(CHARACTER_SYM329);
                            adaptor.addChild(root_0, CHARACTER_SYM329_tree);
                            }
                            SET_SYM330=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header1621); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SET_SYM330_tree = (CommonTree)adaptor.create(SET_SYM330);
                            adaptor.addChild(root_0, SET_SYM330_tree);
                            }
                            pushFollow(FOLLOW_charset_name_in_column_data_type_header1623);
                            charset_name331=gMySQL.charset_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name331.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:97:66: ( COLLATE_SYM collation_name )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==COLLATE_SYM) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // SQLParser2.g:97:67: COLLATE_SYM collation_name
                            {
                            COLLATE_SYM332=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header1628); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLLATE_SYM332_tree = (CommonTree)adaptor.create(COLLATE_SYM332);
                            adaptor.addChild(root_0, COLLATE_SYM332_tree);
                            }
                            pushFollow(FOLLOW_collation_name_in_column_data_type_header1630);
                            collation_name333=gMySQL.collation_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name333.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:97:96: ( null_or_notnull )?
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==NOT_SYM||LA152_0==NULL_SYM) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            // SQLParser2.g:97:97: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1635);
                            null_or_notnull334=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull334.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 30 :
                    // SQLParser2.g:98:4: ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:98:4: ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    // SQLParser2.g:98:7: ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    {
                    ENUM335=(Token)match(input,ENUM,FOLLOW_ENUM_in_column_data_type_header1648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENUM335_tree = (CommonTree)adaptor.create(ENUM335);
                    adaptor.addChild(root_0, ENUM335_tree);
                    }
                    LPAREN336=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header1653); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN336_tree = (CommonTree)adaptor.create(LPAREN336);
                    adaptor.addChild(root_0, LPAREN336_tree);
                    }
                    TEXT_STRING337=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header1655); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING337_tree = (CommonTree)adaptor.create(TEXT_STRING337);
                    adaptor.addChild(root_0, TEXT_STRING337_tree);
                    }
                    // SQLParser2.g:98:34: ( COMMA TEXT_STRING )*
                    loop153:
                    do {
                        int alt153=2;
                        int LA153_0 = input.LA(1);

                        if ( (LA153_0==COMMA) ) {
                            alt153=1;
                        }


                        switch (alt153) {
                    	case 1 :
                    	    // SQLParser2.g:98:35: COMMA TEXT_STRING
                    	    {
                    	    COMMA338=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header1658); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA338_tree = (CommonTree)adaptor.create(COMMA338);
                    	    adaptor.addChild(root_0, COMMA338_tree);
                    	    }
                    	    TEXT_STRING339=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header1660); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    TEXT_STRING339_tree = (CommonTree)adaptor.create(TEXT_STRING339);
                    	    adaptor.addChild(root_0, TEXT_STRING339_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop153;
                        }
                    } while (true);

                    RPAREN340=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header1664); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN340_tree = (CommonTree)adaptor.create(RPAREN340);
                    adaptor.addChild(root_0, RPAREN340_tree);
                    }
                    // SQLParser2.g:98:62: ( CHARACTER_SYM SET_SYM charset_name )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==CHARACTER_SYM) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // SQLParser2.g:98:63: CHARACTER_SYM SET_SYM charset_name
                            {
                            CHARACTER_SYM341=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header1667); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CHARACTER_SYM341_tree = (CommonTree)adaptor.create(CHARACTER_SYM341);
                            adaptor.addChild(root_0, CHARACTER_SYM341_tree);
                            }
                            SET_SYM342=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header1669); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SET_SYM342_tree = (CommonTree)adaptor.create(SET_SYM342);
                            adaptor.addChild(root_0, SET_SYM342_tree);
                            }
                            pushFollow(FOLLOW_charset_name_in_column_data_type_header1671);
                            charset_name343=gMySQL.charset_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name343.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:98:100: ( COLLATE_SYM collation_name )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==COLLATE_SYM) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // SQLParser2.g:98:101: COLLATE_SYM collation_name
                            {
                            COLLATE_SYM344=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header1676); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLLATE_SYM344_tree = (CommonTree)adaptor.create(COLLATE_SYM344);
                            adaptor.addChild(root_0, COLLATE_SYM344_tree);
                            }
                            pushFollow(FOLLOW_collation_name_in_column_data_type_header1678);
                            collation_name345=gMySQL.collation_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name345.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:98:130: ( null_or_notnull )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==NOT_SYM||LA156_0==NULL_SYM) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // SQLParser2.g:98:131: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1683);
                            null_or_notnull346=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull346.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:98:149: ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==DEFAULT) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // SQLParser2.g:98:150: DEFAULT ( TEXT_STRING | NULL_SYM )
                            {
                            DEFAULT347=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1688); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT347_tree = (CommonTree)adaptor.create(DEFAULT347);
                            adaptor.addChild(root_0, DEFAULT347_tree);
                            }
                            set348=(Token)input.LT(1);
                            if ( input.LA(1)==NULL_SYM||input.LA(1)==TEXT_STRING ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set348));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 31 :
                    // SQLParser2.g:99:4: ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:99:4: ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )? )
                    // SQLParser2.g:99:7: SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    {
                    SET_SYM349=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header1707); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SET_SYM349_tree = (CommonTree)adaptor.create(SET_SYM349);
                    adaptor.addChild(root_0, SET_SYM349_tree);
                    }
                    LPAREN350=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header1709); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN350_tree = (CommonTree)adaptor.create(LPAREN350);
                    adaptor.addChild(root_0, LPAREN350_tree);
                    }
                    TEXT_STRING351=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header1711); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING351_tree = (CommonTree)adaptor.create(TEXT_STRING351);
                    adaptor.addChild(root_0, TEXT_STRING351_tree);
                    }
                    // SQLParser2.g:99:34: ( COMMA TEXT_STRING )*
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==COMMA) ) {
                            alt158=1;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // SQLParser2.g:99:35: COMMA TEXT_STRING
                    	    {
                    	    COMMA352=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header1714); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA352_tree = (CommonTree)adaptor.create(COMMA352);
                    	    adaptor.addChild(root_0, COMMA352_tree);
                    	    }
                    	    TEXT_STRING353=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header1716); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    TEXT_STRING353_tree = (CommonTree)adaptor.create(TEXT_STRING353);
                    	    adaptor.addChild(root_0, TEXT_STRING353_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);

                    RPAREN354=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header1720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN354_tree = (CommonTree)adaptor.create(RPAREN354);
                    adaptor.addChild(root_0, RPAREN354_tree);
                    }
                    // SQLParser2.g:99:62: ( CHARACTER_SYM SET_SYM charset_name )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==CHARACTER_SYM) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // SQLParser2.g:99:63: CHARACTER_SYM SET_SYM charset_name
                            {
                            CHARACTER_SYM355=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header1723); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CHARACTER_SYM355_tree = (CommonTree)adaptor.create(CHARACTER_SYM355);
                            adaptor.addChild(root_0, CHARACTER_SYM355_tree);
                            }
                            SET_SYM356=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header1725); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SET_SYM356_tree = (CommonTree)adaptor.create(SET_SYM356);
                            adaptor.addChild(root_0, SET_SYM356_tree);
                            }
                            pushFollow(FOLLOW_charset_name_in_column_data_type_header1727);
                            charset_name357=gMySQL.charset_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name357.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:99:100: ( COLLATE_SYM collation_name )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==COLLATE_SYM) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // SQLParser2.g:99:101: COLLATE_SYM collation_name
                            {
                            COLLATE_SYM358=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header1732); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLLATE_SYM358_tree = (CommonTree)adaptor.create(COLLATE_SYM358);
                            adaptor.addChild(root_0, COLLATE_SYM358_tree);
                            }
                            pushFollow(FOLLOW_collation_name_in_column_data_type_header1734);
                            collation_name359=gMySQL.collation_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name359.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:99:130: ( null_or_notnull )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==NOT_SYM||LA161_0==NULL_SYM) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // SQLParser2.g:99:131: null_or_notnull
                            {
                            pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header1739);
                            null_or_notnull360=null_or_notnull();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull360.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:99:149: ( DEFAULT ( TEXT_STRING | NULL_SYM ) )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==DEFAULT) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // SQLParser2.g:99:150: DEFAULT ( TEXT_STRING | NULL_SYM )
                            {
                            DEFAULT361=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header1744); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT361_tree = (CommonTree)adaptor.create(DEFAULT361);
                            adaptor.addChild(root_0, DEFAULT361_tree);
                            }
                            set362=(Token)input.LT(1);
                            if ( input.LA(1)==NULL_SYM||input.LA(1)==TEXT_STRING ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set362));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, column_data_type_header_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "column_data_type_header"

    public static class index_column_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index_column_name"
    // SQLParser2.g:102:1: index_column_name : column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )? ;
    public final MySQL_SQLParser2.index_column_name_return index_column_name() throws RecognitionException {
        MySQL_SQLParser2.index_column_name_return retval = new MySQL_SQLParser2.index_column_name_return();
        retval.start = input.LT(1);
        int index_column_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN364=null;
        Token INTEGER_NUM365=null;
        Token RPAREN366=null;
        Token set367=null;
        MySQLParser.column_name_return column_name363 = null;


        CommonTree LPAREN364_tree=null;
        CommonTree INTEGER_NUM365_tree=null;
        CommonTree RPAREN366_tree=null;
        CommonTree set367_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // SQLParser2.g:102:18: ( column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )? )
            // SQLParser2.g:103:2: column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_column_name_in_index_column_name1764);
            column_name363=gMySQL.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name363.getTree());
            // SQLParser2.g:103:14: ( LPAREN INTEGER_NUM RPAREN )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==LPAREN) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // SQLParser2.g:103:15: LPAREN INTEGER_NUM RPAREN
                    {
                    LPAREN364=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_column_name1767); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN364_tree = (CommonTree)adaptor.create(LPAREN364);
                    adaptor.addChild(root_0, LPAREN364_tree);
                    }
                    INTEGER_NUM365=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_index_column_name1769); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM365_tree = (CommonTree)adaptor.create(INTEGER_NUM365);
                    adaptor.addChild(root_0, INTEGER_NUM365_tree);
                    }
                    RPAREN366=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_column_name1771); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN366_tree = (CommonTree)adaptor.create(RPAREN366);
                    adaptor.addChild(root_0, RPAREN366_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:103:43: ( ASC | DESC )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==ASC||LA165_0==DESC) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // SQLParser2.g:
                    {
                    set367=(Token)input.LT(1);
                    if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set367));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, index_column_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index_column_name"

    public static class reference_definition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_definition"
    // SQLParser2.g:106:1: reference_definition : REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )? ;
    public final MySQL_SQLParser2.reference_definition_return reference_definition() throws RecognitionException {
        MySQL_SQLParser2.reference_definition_return retval = new MySQL_SQLParser2.reference_definition_return();
        retval.start = input.LT(1);
        int reference_definition_StartIndex = input.index();
        CommonTree root_0 = null;

        Token REFERENCES368=null;
        Token LPAREN370=null;
        Token COMMA372=null;
        Token RPAREN374=null;
        Token MATCH375=null;
        Token FULL376=null;
        Token MATCH377=null;
        Token PARTIAL378=null;
        Token MATCH379=null;
        Token SIMPLE_SYM380=null;
        Token ON381=null;
        Token DELETE_SYM382=null;
        Token ON384=null;
        Token UPDATE385=null;
        MySQLParser.table_name_return table_name369 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name371 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name373 = null;

        MySQL_SQLParser2.reference_option_return reference_option383 = null;

        MySQL_SQLParser2.reference_option_return reference_option386 = null;


        CommonTree REFERENCES368_tree=null;
        CommonTree LPAREN370_tree=null;
        CommonTree COMMA372_tree=null;
        CommonTree RPAREN374_tree=null;
        CommonTree MATCH375_tree=null;
        CommonTree FULL376_tree=null;
        CommonTree MATCH377_tree=null;
        CommonTree PARTIAL378_tree=null;
        CommonTree MATCH379_tree=null;
        CommonTree SIMPLE_SYM380_tree=null;
        CommonTree ON381_tree=null;
        CommonTree DELETE_SYM382_tree=null;
        CommonTree ON384_tree=null;
        CommonTree UPDATE385_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // SQLParser2.g:106:21: ( REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )? )
            // SQLParser2.g:107:2: REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )?
            {
            root_0 = (CommonTree)adaptor.nil();

            REFERENCES368=(Token)match(input,REFERENCES,FOLLOW_REFERENCES_in_reference_definition1791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REFERENCES368_tree = (CommonTree)adaptor.create(REFERENCES368);
            adaptor.addChild(root_0, REFERENCES368_tree);
            }
            pushFollow(FOLLOW_table_name_in_reference_definition1793);
            table_name369=gMySQL.table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name369.getTree());
            LPAREN370=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_reference_definition1795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN370_tree = (CommonTree)adaptor.create(LPAREN370);
            adaptor.addChild(root_0, LPAREN370_tree);
            }
            pushFollow(FOLLOW_index_column_name_in_reference_definition1797);
            index_column_name371=index_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name371.getTree());
            // SQLParser2.g:107:49: ( COMMA index_column_name )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==COMMA) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // SQLParser2.g:107:50: COMMA index_column_name
            	    {
            	    COMMA372=(Token)match(input,COMMA,FOLLOW_COMMA_in_reference_definition1800); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA372_tree = (CommonTree)adaptor.create(COMMA372);
            	    adaptor.addChild(root_0, COMMA372_tree);
            	    }
            	    pushFollow(FOLLOW_index_column_name_in_reference_definition1802);
            	    index_column_name373=index_column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name373.getTree());

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);

            RPAREN374=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_reference_definition1806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN374_tree = (CommonTree)adaptor.create(RPAREN374);
            adaptor.addChild(root_0, RPAREN374_tree);
            }
            // SQLParser2.g:108:2: ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )?
            int alt167=4;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==MATCH) ) {
                switch ( input.LA(2) ) {
                    case FULL:
                        {
                        alt167=1;
                        }
                        break;
                    case PARTIAL:
                        {
                        alt167=2;
                        }
                        break;
                    case SIMPLE_SYM:
                        {
                        alt167=3;
                        }
                        break;
                }

            }
            switch (alt167) {
                case 1 :
                    // SQLParser2.g:108:4: ( MATCH FULL )
                    {
                    // SQLParser2.g:108:4: ( MATCH FULL )
                    // SQLParser2.g:108:5: MATCH FULL
                    {
                    MATCH375=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition1812); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCH375_tree = (CommonTree)adaptor.create(MATCH375);
                    adaptor.addChild(root_0, MATCH375_tree);
                    }
                    FULL376=(Token)match(input,FULL,FOLLOW_FULL_in_reference_definition1814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL376_tree = (CommonTree)adaptor.create(FULL376);
                    adaptor.addChild(root_0, FULL376_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // SQLParser2.g:108:19: ( MATCH PARTIAL )
                    {
                    // SQLParser2.g:108:19: ( MATCH PARTIAL )
                    // SQLParser2.g:108:20: MATCH PARTIAL
                    {
                    MATCH377=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition1820); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCH377_tree = (CommonTree)adaptor.create(MATCH377);
                    adaptor.addChild(root_0, MATCH377_tree);
                    }
                    PARTIAL378=(Token)match(input,PARTIAL,FOLLOW_PARTIAL_in_reference_definition1822); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTIAL378_tree = (CommonTree)adaptor.create(PARTIAL378);
                    adaptor.addChild(root_0, PARTIAL378_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // SQLParser2.g:108:37: ( MATCH SIMPLE_SYM )
                    {
                    // SQLParser2.g:108:37: ( MATCH SIMPLE_SYM )
                    // SQLParser2.g:108:38: MATCH SIMPLE_SYM
                    {
                    MATCH379=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition1828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCH379_tree = (CommonTree)adaptor.create(MATCH379);
                    adaptor.addChild(root_0, MATCH379_tree);
                    }
                    SIMPLE_SYM380=(Token)match(input,SIMPLE_SYM,FOLLOW_SIMPLE_SYM_in_reference_definition1830); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SIMPLE_SYM380_tree = (CommonTree)adaptor.create(SIMPLE_SYM380);
                    adaptor.addChild(root_0, SIMPLE_SYM380_tree);
                    }

                    }


                    }
                    break;

            }

            // SQLParser2.g:109:2: ( ON DELETE_SYM reference_option )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==ON) ) {
                int LA168_1 = input.LA(2);

                if ( (LA168_1==DELETE_SYM) ) {
                    alt168=1;
                }
            }
            switch (alt168) {
                case 1 :
                    // SQLParser2.g:109:3: ON DELETE_SYM reference_option
                    {
                    ON381=(Token)match(input,ON,FOLLOW_ON_in_reference_definition1838); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ON381_tree = (CommonTree)adaptor.create(ON381);
                    adaptor.addChild(root_0, ON381_tree);
                    }
                    DELETE_SYM382=(Token)match(input,DELETE_SYM,FOLLOW_DELETE_SYM_in_reference_definition1840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DELETE_SYM382_tree = (CommonTree)adaptor.create(DELETE_SYM382);
                    adaptor.addChild(root_0, DELETE_SYM382_tree);
                    }
                    pushFollow(FOLLOW_reference_option_in_reference_definition1842);
                    reference_option383=reference_option();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_option383.getTree());

                    }
                    break;

            }

            // SQLParser2.g:110:2: ( ON UPDATE reference_option )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==ON) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // SQLParser2.g:110:3: ON UPDATE reference_option
                    {
                    ON384=(Token)match(input,ON,FOLLOW_ON_in_reference_definition1848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ON384_tree = (CommonTree)adaptor.create(ON384);
                    adaptor.addChild(root_0, ON384_tree);
                    }
                    UPDATE385=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_reference_definition1850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UPDATE385_tree = (CommonTree)adaptor.create(UPDATE385);
                    adaptor.addChild(root_0, UPDATE385_tree);
                    }
                    pushFollow(FOLLOW_reference_option_in_reference_definition1852);
                    reference_option386=reference_option();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_option386.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, reference_definition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference_definition"

    public static class reference_option_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_option"
    // SQLParser2.g:112:1: reference_option : ( ( RESTRICT ) | ( CASCADE ) | ( SET_SYM NULL_SYM ) | ( NO_SYM ACTION ) );
    public final MySQL_SQLParser2.reference_option_return reference_option() throws RecognitionException {
        MySQL_SQLParser2.reference_option_return retval = new MySQL_SQLParser2.reference_option_return();
        retval.start = input.LT(1);
        int reference_option_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RESTRICT387=null;
        Token CASCADE388=null;
        Token SET_SYM389=null;
        Token NULL_SYM390=null;
        Token NO_SYM391=null;
        Token ACTION392=null;

        CommonTree RESTRICT387_tree=null;
        CommonTree CASCADE388_tree=null;
        CommonTree SET_SYM389_tree=null;
        CommonTree NULL_SYM390_tree=null;
        CommonTree NO_SYM391_tree=null;
        CommonTree ACTION392_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // SQLParser2.g:112:17: ( ( RESTRICT ) | ( CASCADE ) | ( SET_SYM NULL_SYM ) | ( NO_SYM ACTION ) )
            int alt170=4;
            switch ( input.LA(1) ) {
            case RESTRICT:
                {
                alt170=1;
                }
                break;
            case CASCADE:
                {
                alt170=2;
                }
                break;
            case SET_SYM:
                {
                alt170=3;
                }
                break;
            case NO_SYM:
                {
                alt170=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }

            switch (alt170) {
                case 1 :
                    // SQLParser2.g:113:2: ( RESTRICT )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:113:2: ( RESTRICT )
                    // SQLParser2.g:113:3: RESTRICT
                    {
                    RESTRICT387=(Token)match(input,RESTRICT,FOLLOW_RESTRICT_in_reference_option1863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RESTRICT387_tree = (CommonTree)adaptor.create(RESTRICT387);
                    adaptor.addChild(root_0, RESTRICT387_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // SQLParser2.g:113:15: ( CASCADE )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:113:15: ( CASCADE )
                    // SQLParser2.g:113:16: CASCADE
                    {
                    CASCADE388=(Token)match(input,CASCADE,FOLLOW_CASCADE_in_reference_option1869); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASCADE388_tree = (CommonTree)adaptor.create(CASCADE388);
                    adaptor.addChild(root_0, CASCADE388_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // SQLParser2.g:113:27: ( SET_SYM NULL_SYM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:113:27: ( SET_SYM NULL_SYM )
                    // SQLParser2.g:113:28: SET_SYM NULL_SYM
                    {
                    SET_SYM389=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_reference_option1875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SET_SYM389_tree = (CommonTree)adaptor.create(SET_SYM389);
                    adaptor.addChild(root_0, SET_SYM389_tree);
                    }
                    NULL_SYM390=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_reference_option1877); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_SYM390_tree = (CommonTree)adaptor.create(NULL_SYM390);
                    adaptor.addChild(root_0, NULL_SYM390_tree);
                    }

                    }


                    }
                    break;
                case 4 :
                    // SQLParser2.g:113:48: ( NO_SYM ACTION )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:113:48: ( NO_SYM ACTION )
                    // SQLParser2.g:113:49: NO_SYM ACTION
                    {
                    NO_SYM391=(Token)match(input,NO_SYM,FOLLOW_NO_SYM_in_reference_option1883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NO_SYM391_tree = (CommonTree)adaptor.create(NO_SYM391);
                    adaptor.addChild(root_0, NO_SYM391_tree);
                    }
                    ACTION392=(Token)match(input,ACTION,FOLLOW_ACTION_in_reference_option1885); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ACTION392_tree = (CommonTree)adaptor.create(ACTION392);
                    adaptor.addChild(root_0, ACTION392_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, reference_option_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference_option"

    public static class table_options_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_options"
    // SQLParser2.g:116:1: table_options : table_option ( ( COMMA )? table_option )* ;
    public final MySQL_SQLParser2.table_options_return table_options() throws RecognitionException {
        MySQL_SQLParser2.table_options_return retval = new MySQL_SQLParser2.table_options_return();
        retval.start = input.LT(1);
        int table_options_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA394=null;
        MySQL_SQLParser2.table_option_return table_option393 = null;

        MySQL_SQLParser2.table_option_return table_option395 = null;


        CommonTree COMMA394_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // SQLParser2.g:116:14: ( table_option ( ( COMMA )? table_option )* )
            // SQLParser2.g:117:2: table_option ( ( COMMA )? table_option )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_table_option_in_table_options1895);
            table_option393=table_option();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_option393.getTree());
            // SQLParser2.g:117:15: ( ( COMMA )? table_option )*
            loop172:
            do {
                int alt172=2;
                alt172 = dfa172.predict(input);
                switch (alt172) {
            	case 1 :
            	    // SQLParser2.g:117:16: ( COMMA )? table_option
            	    {
            	    // SQLParser2.g:117:16: ( COMMA )?
            	    int alt171=2;
            	    int LA171_0 = input.LA(1);

            	    if ( (LA171_0==COMMA) ) {
            	        alt171=1;
            	    }
            	    switch (alt171) {
            	        case 1 :
            	            // SQLParser2.g:117:18: COMMA
            	            {
            	            COMMA394=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_options1900); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            COMMA394_tree = (CommonTree)adaptor.create(COMMA394);
            	            adaptor.addChild(root_0, COMMA394_tree);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_table_option_in_table_options1905);
            	    table_option395=table_option();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_option395.getTree());

            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, table_options_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_options"

    public static class table_option_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_option"
    // SQLParser2.g:120:1: table_option : ( ( ENGINE_SYM ( EQ_SYM )? engine_name ) | ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM ) | ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? ( CHARACTER_SYM SET_SYM | CHARSET ) ( EQ_SYM )? charset_name ) | ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name ) | ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING ) | ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING ) | ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM ) | ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) ) | ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) ) | ( PASSWORD ( EQ_SYM )? TEXT_STRING ) | ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) ) | ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN ) );
    public final MySQL_SQLParser2.table_option_return table_option() throws RecognitionException {
        MySQL_SQLParser2.table_option_return retval = new MySQL_SQLParser2.table_option_return();
        retval.start = input.LT(1);
        int table_option_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ENGINE_SYM396=null;
        Token EQ_SYM397=null;
        Token AUTO_INCREMENT399=null;
        Token EQ_SYM400=null;
        Token INTEGER_NUM401=null;
        Token AVG_ROW_LENGTH402=null;
        Token EQ_SYM403=null;
        Token INTEGER_NUM404=null;
        Token DEFAULT405=null;
        Token CHARACTER_SYM406=null;
        Token SET_SYM407=null;
        Token CHARSET408=null;
        Token EQ_SYM409=null;
        Token CHECKSUM_SYM411=null;
        Token EQ_SYM412=null;
        Token INTEGER_NUM413=null;
        Token DEFAULT414=null;
        Token COLLATE_SYM415=null;
        Token EQ_SYM416=null;
        Token COMMENT_SYM418=null;
        Token EQ_SYM419=null;
        Token TEXT_STRING420=null;
        Token CONNECTION_SYM421=null;
        Token EQ_SYM422=null;
        Token TEXT_STRING423=null;
        Token DATA_SYM424=null;
        Token DIRECTORY_SYM425=null;
        Token EQ_SYM426=null;
        Token TEXT_STRING427=null;
        Token DELAY_KEY_WRITE_SYM428=null;
        Token EQ_SYM429=null;
        Token INTEGER_NUM430=null;
        Token INDEX_SYM431=null;
        Token DIRECTORY_SYM432=null;
        Token EQ_SYM433=null;
        Token TEXT_STRING434=null;
        Token INSERT_METHOD435=null;
        Token EQ_SYM436=null;
        Token set437=null;
        Token KEY_BLOCK_SIZE438=null;
        Token EQ_SYM439=null;
        Token INTEGER_NUM440=null;
        Token MAX_ROWS441=null;
        Token EQ_SYM442=null;
        Token INTEGER_NUM443=null;
        Token MIN_ROWS444=null;
        Token EQ_SYM445=null;
        Token INTEGER_NUM446=null;
        Token PACK_KEYS_SYM447=null;
        Token EQ_SYM448=null;
        Token set449=null;
        Token PASSWORD450=null;
        Token EQ_SYM451=null;
        Token TEXT_STRING452=null;
        Token ROW_FORMAT_SYM453=null;
        Token EQ_SYM454=null;
        Token set455=null;
        Token STATS_AUTO_RECALC456=null;
        Token EQ_SYM457=null;
        Token set458=null;
        Token STATS_PERSISTENT459=null;
        Token EQ_SYM460=null;
        Token set461=null;
        Token UNION_SYM462=null;
        Token EQ_SYM463=null;
        Token LPAREN464=null;
        Token COMMA466=null;
        Token RPAREN468=null;
        MySQLParser.engine_name_return engine_name398 = null;

        MySQLParser.charset_name_return charset_name410 = null;

        MySQLParser.collation_name_return collation_name417 = null;

        MySQLParser.table_name_return table_name465 = null;

        MySQLParser.table_name_return table_name467 = null;


        CommonTree ENGINE_SYM396_tree=null;
        CommonTree EQ_SYM397_tree=null;
        CommonTree AUTO_INCREMENT399_tree=null;
        CommonTree EQ_SYM400_tree=null;
        CommonTree INTEGER_NUM401_tree=null;
        CommonTree AVG_ROW_LENGTH402_tree=null;
        CommonTree EQ_SYM403_tree=null;
        CommonTree INTEGER_NUM404_tree=null;
        CommonTree DEFAULT405_tree=null;
        CommonTree CHARACTER_SYM406_tree=null;
        CommonTree SET_SYM407_tree=null;
        CommonTree CHARSET408_tree=null;
        CommonTree EQ_SYM409_tree=null;
        CommonTree CHECKSUM_SYM411_tree=null;
        CommonTree EQ_SYM412_tree=null;
        CommonTree INTEGER_NUM413_tree=null;
        CommonTree DEFAULT414_tree=null;
        CommonTree COLLATE_SYM415_tree=null;
        CommonTree EQ_SYM416_tree=null;
        CommonTree COMMENT_SYM418_tree=null;
        CommonTree EQ_SYM419_tree=null;
        CommonTree TEXT_STRING420_tree=null;
        CommonTree CONNECTION_SYM421_tree=null;
        CommonTree EQ_SYM422_tree=null;
        CommonTree TEXT_STRING423_tree=null;
        CommonTree DATA_SYM424_tree=null;
        CommonTree DIRECTORY_SYM425_tree=null;
        CommonTree EQ_SYM426_tree=null;
        CommonTree TEXT_STRING427_tree=null;
        CommonTree DELAY_KEY_WRITE_SYM428_tree=null;
        CommonTree EQ_SYM429_tree=null;
        CommonTree INTEGER_NUM430_tree=null;
        CommonTree INDEX_SYM431_tree=null;
        CommonTree DIRECTORY_SYM432_tree=null;
        CommonTree EQ_SYM433_tree=null;
        CommonTree TEXT_STRING434_tree=null;
        CommonTree INSERT_METHOD435_tree=null;
        CommonTree EQ_SYM436_tree=null;
        CommonTree set437_tree=null;
        CommonTree KEY_BLOCK_SIZE438_tree=null;
        CommonTree EQ_SYM439_tree=null;
        CommonTree INTEGER_NUM440_tree=null;
        CommonTree MAX_ROWS441_tree=null;
        CommonTree EQ_SYM442_tree=null;
        CommonTree INTEGER_NUM443_tree=null;
        CommonTree MIN_ROWS444_tree=null;
        CommonTree EQ_SYM445_tree=null;
        CommonTree INTEGER_NUM446_tree=null;
        CommonTree PACK_KEYS_SYM447_tree=null;
        CommonTree EQ_SYM448_tree=null;
        CommonTree set449_tree=null;
        CommonTree PASSWORD450_tree=null;
        CommonTree EQ_SYM451_tree=null;
        CommonTree TEXT_STRING452_tree=null;
        CommonTree ROW_FORMAT_SYM453_tree=null;
        CommonTree EQ_SYM454_tree=null;
        CommonTree set455_tree=null;
        CommonTree STATS_AUTO_RECALC456_tree=null;
        CommonTree EQ_SYM457_tree=null;
        CommonTree set458_tree=null;
        CommonTree STATS_PERSISTENT459_tree=null;
        CommonTree EQ_SYM460_tree=null;
        CommonTree set461_tree=null;
        CommonTree UNION_SYM462_tree=null;
        CommonTree EQ_SYM463_tree=null;
        CommonTree LPAREN464_tree=null;
        CommonTree COMMA466_tree=null;
        CommonTree RPAREN468_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }
            // SQLParser2.g:120:13: ( ( ENGINE_SYM ( EQ_SYM )? engine_name ) | ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM ) | ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? ( CHARACTER_SYM SET_SYM | CHARSET ) ( EQ_SYM )? charset_name ) | ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name ) | ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING ) | ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING ) | ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM ) | ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) ) | ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) ) | ( PASSWORD ( EQ_SYM )? TEXT_STRING ) | ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) ) | ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN ) )
            int alt198=21;
            alt198 = dfa198.predict(input);
            switch (alt198) {
                case 1 :
                    // SQLParser2.g:121:4: ( ENGINE_SYM ( EQ_SYM )? engine_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:121:4: ( ENGINE_SYM ( EQ_SYM )? engine_name )
                    // SQLParser2.g:121:7: ENGINE_SYM ( EQ_SYM )? engine_name
                    {
                    ENGINE_SYM396=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_table_option1921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENGINE_SYM396_tree = (CommonTree)adaptor.create(ENGINE_SYM396);
                    adaptor.addChild(root_0, ENGINE_SYM396_tree);
                    }
                    // SQLParser2.g:121:18: ( EQ_SYM )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==EQ_SYM) ) {
                        alt173=1;
                    }
                    switch (alt173) {
                        case 1 :
                            // SQLParser2.g:121:19: EQ_SYM
                            {
                            EQ_SYM397=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option1924); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM397_tree = (CommonTree)adaptor.create(EQ_SYM397);
                            adaptor.addChild(root_0, EQ_SYM397_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_engine_name_in_table_option1928);
                    engine_name398=gMySQL.engine_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name398.getTree());

                    }


                    }
                    break;
                case 2 :
                    // SQLParser2.g:122:4: ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:122:4: ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM )
                    // SQLParser2.g:122:7: AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM
                    {
                    AUTO_INCREMENT399=(Token)match(input,AUTO_INCREMENT,FOLLOW_AUTO_INCREMENT_in_table_option1939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AUTO_INCREMENT399_tree = (CommonTree)adaptor.create(AUTO_INCREMENT399);
                    adaptor.addChild(root_0, AUTO_INCREMENT399_tree);
                    }
                    // SQLParser2.g:122:22: ( EQ_SYM )?
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==EQ_SYM) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // SQLParser2.g:122:23: EQ_SYM
                            {
                            EQ_SYM400=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option1942); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM400_tree = (CommonTree)adaptor.create(EQ_SYM400);
                            adaptor.addChild(root_0, EQ_SYM400_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM401=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option1946); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM401_tree = (CommonTree)adaptor.create(INTEGER_NUM401);
                    adaptor.addChild(root_0, INTEGER_NUM401_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // SQLParser2.g:123:4: ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:123:4: ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM )
                    // SQLParser2.g:123:7: AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM
                    {
                    AVG_ROW_LENGTH402=(Token)match(input,AVG_ROW_LENGTH,FOLLOW_AVG_ROW_LENGTH_in_table_option1957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG_ROW_LENGTH402_tree = (CommonTree)adaptor.create(AVG_ROW_LENGTH402);
                    adaptor.addChild(root_0, AVG_ROW_LENGTH402_tree);
                    }
                    // SQLParser2.g:123:22: ( EQ_SYM )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==EQ_SYM) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            // SQLParser2.g:123:23: EQ_SYM
                            {
                            EQ_SYM403=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option1960); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM403_tree = (CommonTree)adaptor.create(EQ_SYM403);
                            adaptor.addChild(root_0, EQ_SYM403_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM404=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option1964); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM404_tree = (CommonTree)adaptor.create(INTEGER_NUM404);
                    adaptor.addChild(root_0, INTEGER_NUM404_tree);
                    }

                    }


                    }
                    break;
                case 4 :
                    // SQLParser2.g:124:4: ( ( DEFAULT )? ( CHARACTER_SYM SET_SYM | CHARSET ) ( EQ_SYM )? charset_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:124:4: ( ( DEFAULT )? ( CHARACTER_SYM SET_SYM | CHARSET ) ( EQ_SYM )? charset_name )
                    // SQLParser2.g:124:7: ( DEFAULT )? ( CHARACTER_SYM SET_SYM | CHARSET ) ( EQ_SYM )? charset_name
                    {
                    // SQLParser2.g:124:7: ( DEFAULT )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==DEFAULT) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // SQLParser2.g:124:8: DEFAULT
                            {
                            DEFAULT405=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_table_option1976); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT405_tree = (CommonTree)adaptor.create(DEFAULT405);
                            adaptor.addChild(root_0, DEFAULT405_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:124:18: ( CHARACTER_SYM SET_SYM | CHARSET )
                    int alt177=2;
                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==CHARACTER_SYM) ) {
                        alt177=1;
                    }
                    else if ( (LA177_0==CHARSET) ) {
                        alt177=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 177, 0, input);

                        throw nvae;
                    }
                    switch (alt177) {
                        case 1 :
                            // SQLParser2.g:124:19: CHARACTER_SYM SET_SYM
                            {
                            CHARACTER_SYM406=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_table_option1981); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CHARACTER_SYM406_tree = (CommonTree)adaptor.create(CHARACTER_SYM406);
                            adaptor.addChild(root_0, CHARACTER_SYM406_tree);
                            }
                            SET_SYM407=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_table_option1983); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SET_SYM407_tree = (CommonTree)adaptor.create(SET_SYM407);
                            adaptor.addChild(root_0, SET_SYM407_tree);
                            }

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:124:43: CHARSET
                            {
                            CHARSET408=(Token)match(input,CHARSET,FOLLOW_CHARSET_in_table_option1987); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CHARSET408_tree = (CommonTree)adaptor.create(CHARSET408);
                            adaptor.addChild(root_0, CHARSET408_tree);
                            }

                            }
                            break;

                    }

                    // SQLParser2.g:124:52: ( EQ_SYM )?
                    int alt178=2;
                    int LA178_0 = input.LA(1);

                    if ( (LA178_0==EQ_SYM) ) {
                        alt178=1;
                    }
                    switch (alt178) {
                        case 1 :
                            // SQLParser2.g:124:53: EQ_SYM
                            {
                            EQ_SYM409=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option1991); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM409_tree = (CommonTree)adaptor.create(EQ_SYM409);
                            adaptor.addChild(root_0, EQ_SYM409_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_charset_name_in_table_option1995);
                    charset_name410=gMySQL.charset_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name410.getTree());

                    }


                    }
                    break;
                case 5 :
                    // SQLParser2.g:125:4: ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:125:4: ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM )
                    // SQLParser2.g:125:7: CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM
                    {
                    CHECKSUM_SYM411=(Token)match(input,CHECKSUM_SYM,FOLLOW_CHECKSUM_SYM_in_table_option2006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHECKSUM_SYM411_tree = (CommonTree)adaptor.create(CHECKSUM_SYM411);
                    adaptor.addChild(root_0, CHECKSUM_SYM411_tree);
                    }
                    // SQLParser2.g:125:20: ( EQ_SYM )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==EQ_SYM) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            // SQLParser2.g:125:21: EQ_SYM
                            {
                            EQ_SYM412=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2009); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM412_tree = (CommonTree)adaptor.create(EQ_SYM412);
                            adaptor.addChild(root_0, EQ_SYM412_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM413=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option2013); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM413_tree = (CommonTree)adaptor.create(INTEGER_NUM413);
                    adaptor.addChild(root_0, INTEGER_NUM413_tree);
                    }

                    }


                    }
                    break;
                case 6 :
                    // SQLParser2.g:126:4: ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:126:4: ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name )
                    // SQLParser2.g:126:7: ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name
                    {
                    // SQLParser2.g:126:7: ( DEFAULT )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==DEFAULT) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // SQLParser2.g:126:8: DEFAULT
                            {
                            DEFAULT414=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_table_option2025); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT414_tree = (CommonTree)adaptor.create(DEFAULT414);
                            adaptor.addChild(root_0, DEFAULT414_tree);
                            }

                            }
                            break;

                    }

                    COLLATE_SYM415=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_table_option2029); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLLATE_SYM415_tree = (CommonTree)adaptor.create(COLLATE_SYM415);
                    adaptor.addChild(root_0, COLLATE_SYM415_tree);
                    }
                    // SQLParser2.g:126:30: ( EQ_SYM )?
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==EQ_SYM) ) {
                        alt181=1;
                    }
                    switch (alt181) {
                        case 1 :
                            // SQLParser2.g:126:31: EQ_SYM
                            {
                            EQ_SYM416=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2032); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM416_tree = (CommonTree)adaptor.create(EQ_SYM416);
                            adaptor.addChild(root_0, EQ_SYM416_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_collation_name_in_table_option2036);
                    collation_name417=gMySQL.collation_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name417.getTree());

                    }


                    }
                    break;
                case 7 :
                    // SQLParser2.g:127:4: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:127:4: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )
                    // SQLParser2.g:127:7: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
                    {
                    COMMENT_SYM418=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_table_option2047); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMENT_SYM418_tree = (CommonTree)adaptor.create(COMMENT_SYM418);
                    adaptor.addChild(root_0, COMMENT_SYM418_tree);
                    }
                    // SQLParser2.g:127:19: ( EQ_SYM )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==EQ_SYM) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            // SQLParser2.g:127:20: EQ_SYM
                            {
                            EQ_SYM419=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2050); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM419_tree = (CommonTree)adaptor.create(EQ_SYM419);
                            adaptor.addChild(root_0, EQ_SYM419_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING420=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option2054); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING420_tree = (CommonTree)adaptor.create(TEXT_STRING420);
                    adaptor.addChild(root_0, TEXT_STRING420_tree);
                    }

                    }


                    }
                    break;
                case 8 :
                    // SQLParser2.g:128:4: ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:128:4: ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING )
                    // SQLParser2.g:128:7: CONNECTION_SYM ( EQ_SYM )? TEXT_STRING
                    {
                    CONNECTION_SYM421=(Token)match(input,CONNECTION_SYM,FOLLOW_CONNECTION_SYM_in_table_option2065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONNECTION_SYM421_tree = (CommonTree)adaptor.create(CONNECTION_SYM421);
                    adaptor.addChild(root_0, CONNECTION_SYM421_tree);
                    }
                    // SQLParser2.g:128:22: ( EQ_SYM )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==EQ_SYM) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // SQLParser2.g:128:23: EQ_SYM
                            {
                            EQ_SYM422=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2068); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM422_tree = (CommonTree)adaptor.create(EQ_SYM422);
                            adaptor.addChild(root_0, EQ_SYM422_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING423=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option2072); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING423_tree = (CommonTree)adaptor.create(TEXT_STRING423);
                    adaptor.addChild(root_0, TEXT_STRING423_tree);
                    }

                    }


                    }
                    break;
                case 9 :
                    // SQLParser2.g:129:4: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:129:4: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
                    // SQLParser2.g:129:7: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
                    {
                    DATA_SYM424=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_table_option2083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DATA_SYM424_tree = (CommonTree)adaptor.create(DATA_SYM424);
                    adaptor.addChild(root_0, DATA_SYM424_tree);
                    }
                    DIRECTORY_SYM425=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_table_option2085); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIRECTORY_SYM425_tree = (CommonTree)adaptor.create(DIRECTORY_SYM425);
                    adaptor.addChild(root_0, DIRECTORY_SYM425_tree);
                    }
                    // SQLParser2.g:129:30: ( EQ_SYM )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==EQ_SYM) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // SQLParser2.g:129:31: EQ_SYM
                            {
                            EQ_SYM426=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2088); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM426_tree = (CommonTree)adaptor.create(EQ_SYM426);
                            adaptor.addChild(root_0, EQ_SYM426_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING427=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option2092); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING427_tree = (CommonTree)adaptor.create(TEXT_STRING427);
                    adaptor.addChild(root_0, TEXT_STRING427_tree);
                    }

                    }


                    }
                    break;
                case 10 :
                    // SQLParser2.g:130:4: ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:130:4: ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM )
                    // SQLParser2.g:130:7: DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM
                    {
                    DELAY_KEY_WRITE_SYM428=(Token)match(input,DELAY_KEY_WRITE_SYM,FOLLOW_DELAY_KEY_WRITE_SYM_in_table_option2103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DELAY_KEY_WRITE_SYM428_tree = (CommonTree)adaptor.create(DELAY_KEY_WRITE_SYM428);
                    adaptor.addChild(root_0, DELAY_KEY_WRITE_SYM428_tree);
                    }
                    // SQLParser2.g:130:27: ( EQ_SYM )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==EQ_SYM) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // SQLParser2.g:130:28: EQ_SYM
                            {
                            EQ_SYM429=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM429_tree = (CommonTree)adaptor.create(EQ_SYM429);
                            adaptor.addChild(root_0, EQ_SYM429_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM430=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option2110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM430_tree = (CommonTree)adaptor.create(INTEGER_NUM430);
                    adaptor.addChild(root_0, INTEGER_NUM430_tree);
                    }

                    }


                    }
                    break;
                case 11 :
                    // SQLParser2.g:131:4: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:131:4: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
                    // SQLParser2.g:131:7: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
                    {
                    INDEX_SYM431=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_table_option2121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX_SYM431_tree = (CommonTree)adaptor.create(INDEX_SYM431);
                    adaptor.addChild(root_0, INDEX_SYM431_tree);
                    }
                    DIRECTORY_SYM432=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_table_option2123); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIRECTORY_SYM432_tree = (CommonTree)adaptor.create(DIRECTORY_SYM432);
                    adaptor.addChild(root_0, DIRECTORY_SYM432_tree);
                    }
                    // SQLParser2.g:131:31: ( EQ_SYM )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==EQ_SYM) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            // SQLParser2.g:131:32: EQ_SYM
                            {
                            EQ_SYM433=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2126); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM433_tree = (CommonTree)adaptor.create(EQ_SYM433);
                            adaptor.addChild(root_0, EQ_SYM433_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING434=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option2130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING434_tree = (CommonTree)adaptor.create(TEXT_STRING434);
                    adaptor.addChild(root_0, TEXT_STRING434_tree);
                    }

                    }


                    }
                    break;
                case 12 :
                    // SQLParser2.g:132:4: ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:132:4: ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) )
                    // SQLParser2.g:132:7: INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM )
                    {
                    INSERT_METHOD435=(Token)match(input,INSERT_METHOD,FOLLOW_INSERT_METHOD_in_table_option2141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSERT_METHOD435_tree = (CommonTree)adaptor.create(INSERT_METHOD435);
                    adaptor.addChild(root_0, INSERT_METHOD435_tree);
                    }
                    // SQLParser2.g:132:21: ( EQ_SYM )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==EQ_SYM) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // SQLParser2.g:132:22: EQ_SYM
                            {
                            EQ_SYM436=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2144); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM436_tree = (CommonTree)adaptor.create(EQ_SYM436);
                            adaptor.addChild(root_0, EQ_SYM436_tree);
                            }

                            }
                            break;

                    }

                    set437=(Token)input.LT(1);
                    if ( input.LA(1)==FIRST_SYM||input.LA(1)==LAST_SYM||input.LA(1)==NO_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set437));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }


                    }
                    break;
                case 13 :
                    // SQLParser2.g:133:4: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:133:4: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
                    // SQLParser2.g:133:7: KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM
                    {
                    KEY_BLOCK_SIZE438=(Token)match(input,KEY_BLOCK_SIZE,FOLLOW_KEY_BLOCK_SIZE_in_table_option2171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEY_BLOCK_SIZE438_tree = (CommonTree)adaptor.create(KEY_BLOCK_SIZE438);
                    adaptor.addChild(root_0, KEY_BLOCK_SIZE438_tree);
                    }
                    // SQLParser2.g:133:22: ( EQ_SYM )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==EQ_SYM) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // SQLParser2.g:133:23: EQ_SYM
                            {
                            EQ_SYM439=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2174); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM439_tree = (CommonTree)adaptor.create(EQ_SYM439);
                            adaptor.addChild(root_0, EQ_SYM439_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM440=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option2178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM440_tree = (CommonTree)adaptor.create(INTEGER_NUM440);
                    adaptor.addChild(root_0, INTEGER_NUM440_tree);
                    }

                    }


                    }
                    break;
                case 14 :
                    // SQLParser2.g:134:4: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:134:4: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )
                    // SQLParser2.g:134:7: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
                    {
                    MAX_ROWS441=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_table_option2189); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX_ROWS441_tree = (CommonTree)adaptor.create(MAX_ROWS441);
                    adaptor.addChild(root_0, MAX_ROWS441_tree);
                    }
                    // SQLParser2.g:134:16: ( EQ_SYM )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==EQ_SYM) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // SQLParser2.g:134:17: EQ_SYM
                            {
                            EQ_SYM442=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2192); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM442_tree = (CommonTree)adaptor.create(EQ_SYM442);
                            adaptor.addChild(root_0, EQ_SYM442_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM443=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option2196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM443_tree = (CommonTree)adaptor.create(INTEGER_NUM443);
                    adaptor.addChild(root_0, INTEGER_NUM443_tree);
                    }

                    }


                    }
                    break;
                case 15 :
                    // SQLParser2.g:135:4: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:135:4: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )
                    // SQLParser2.g:135:7: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
                    {
                    MIN_ROWS444=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_table_option2207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN_ROWS444_tree = (CommonTree)adaptor.create(MIN_ROWS444);
                    adaptor.addChild(root_0, MIN_ROWS444_tree);
                    }
                    // SQLParser2.g:135:16: ( EQ_SYM )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==EQ_SYM) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // SQLParser2.g:135:17: EQ_SYM
                            {
                            EQ_SYM445=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2210); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM445_tree = (CommonTree)adaptor.create(EQ_SYM445);
                            adaptor.addChild(root_0, EQ_SYM445_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM446=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option2214); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM446_tree = (CommonTree)adaptor.create(INTEGER_NUM446);
                    adaptor.addChild(root_0, INTEGER_NUM446_tree);
                    }

                    }


                    }
                    break;
                case 16 :
                    // SQLParser2.g:136:4: ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:136:4: ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) )
                    // SQLParser2.g:136:7: PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT )
                    {
                    PACK_KEYS_SYM447=(Token)match(input,PACK_KEYS_SYM,FOLLOW_PACK_KEYS_SYM_in_table_option2225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PACK_KEYS_SYM447_tree = (CommonTree)adaptor.create(PACK_KEYS_SYM447);
                    adaptor.addChild(root_0, PACK_KEYS_SYM447_tree);
                    }
                    // SQLParser2.g:136:21: ( EQ_SYM )?
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==EQ_SYM) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            // SQLParser2.g:136:22: EQ_SYM
                            {
                            EQ_SYM448=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2228); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM448_tree = (CommonTree)adaptor.create(EQ_SYM448);
                            adaptor.addChild(root_0, EQ_SYM448_tree);
                            }

                            }
                            break;

                    }

                    set449=(Token)input.LT(1);
                    if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set449));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }


                    }
                    break;
                case 17 :
                    // SQLParser2.g:137:4: ( PASSWORD ( EQ_SYM )? TEXT_STRING )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:137:4: ( PASSWORD ( EQ_SYM )? TEXT_STRING )
                    // SQLParser2.g:137:7: PASSWORD ( EQ_SYM )? TEXT_STRING
                    {
                    PASSWORD450=(Token)match(input,PASSWORD,FOLLOW_PASSWORD_in_table_option2249); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PASSWORD450_tree = (CommonTree)adaptor.create(PASSWORD450);
                    adaptor.addChild(root_0, PASSWORD450_tree);
                    }
                    // SQLParser2.g:137:16: ( EQ_SYM )?
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==EQ_SYM) ) {
                        alt192=1;
                    }
                    switch (alt192) {
                        case 1 :
                            // SQLParser2.g:137:17: EQ_SYM
                            {
                            EQ_SYM451=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2252); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM451_tree = (CommonTree)adaptor.create(EQ_SYM451);
                            adaptor.addChild(root_0, EQ_SYM451_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING452=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option2256); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING452_tree = (CommonTree)adaptor.create(TEXT_STRING452);
                    adaptor.addChild(root_0, TEXT_STRING452_tree);
                    }

                    }


                    }
                    break;
                case 18 :
                    // SQLParser2.g:138:4: ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:138:4: ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) )
                    // SQLParser2.g:138:7: ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM )
                    {
                    ROW_FORMAT_SYM453=(Token)match(input,ROW_FORMAT_SYM,FOLLOW_ROW_FORMAT_SYM_in_table_option2267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROW_FORMAT_SYM453_tree = (CommonTree)adaptor.create(ROW_FORMAT_SYM453);
                    adaptor.addChild(root_0, ROW_FORMAT_SYM453_tree);
                    }
                    // SQLParser2.g:138:22: ( EQ_SYM )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==EQ_SYM) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // SQLParser2.g:138:23: EQ_SYM
                            {
                            EQ_SYM454=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2270); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM454_tree = (CommonTree)adaptor.create(EQ_SYM454);
                            adaptor.addChild(root_0, EQ_SYM454_tree);
                            }

                            }
                            break;

                    }

                    set455=(Token)input.LT(1);
                    if ( input.LA(1)==COMPACT_SYM||input.LA(1)==COMPRESSED_SYM||input.LA(1)==DEFAULT||input.LA(1)==DYNAMIC_SYM||input.LA(1)==FIXED_SYM||input.LA(1)==REDUNDANT_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set455));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }


                    }
                    break;
                case 19 :
                    // SQLParser2.g:139:4: ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:139:4: ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
                    // SQLParser2.g:139:7: STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM )
                    {
                    STATS_AUTO_RECALC456=(Token)match(input,STATS_AUTO_RECALC,FOLLOW_STATS_AUTO_RECALC_in_table_option2297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATS_AUTO_RECALC456_tree = (CommonTree)adaptor.create(STATS_AUTO_RECALC456);
                    adaptor.addChild(root_0, STATS_AUTO_RECALC456_tree);
                    }
                    // SQLParser2.g:139:25: ( EQ_SYM )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==EQ_SYM) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // SQLParser2.g:139:26: EQ_SYM
                            {
                            EQ_SYM457=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2300); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM457_tree = (CommonTree)adaptor.create(EQ_SYM457);
                            adaptor.addChild(root_0, EQ_SYM457_tree);
                            }

                            }
                            break;

                    }

                    set458=(Token)input.LT(1);
                    if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set458));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }


                    }
                    break;
                case 20 :
                    // SQLParser2.g:140:4: ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:140:4: ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
                    // SQLParser2.g:140:7: STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM )
                    {
                    STATS_PERSISTENT459=(Token)match(input,STATS_PERSISTENT,FOLLOW_STATS_PERSISTENT_in_table_option2321); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATS_PERSISTENT459_tree = (CommonTree)adaptor.create(STATS_PERSISTENT459);
                    adaptor.addChild(root_0, STATS_PERSISTENT459_tree);
                    }
                    // SQLParser2.g:140:24: ( EQ_SYM )?
                    int alt195=2;
                    int LA195_0 = input.LA(1);

                    if ( (LA195_0==EQ_SYM) ) {
                        alt195=1;
                    }
                    switch (alt195) {
                        case 1 :
                            // SQLParser2.g:140:25: EQ_SYM
                            {
                            EQ_SYM460=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2324); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM460_tree = (CommonTree)adaptor.create(EQ_SYM460);
                            adaptor.addChild(root_0, EQ_SYM460_tree);
                            }

                            }
                            break;

                    }

                    set461=(Token)input.LT(1);
                    if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set461));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }


                    }
                    break;
                case 21 :
                    // SQLParser2.g:141:4: ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:141:4: ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN )
                    // SQLParser2.g:141:7: UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN
                    {
                    UNION_SYM462=(Token)match(input,UNION_SYM,FOLLOW_UNION_SYM_in_table_option2345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION_SYM462_tree = (CommonTree)adaptor.create(UNION_SYM462);
                    adaptor.addChild(root_0, UNION_SYM462_tree);
                    }
                    // SQLParser2.g:141:17: ( EQ_SYM )?
                    int alt196=2;
                    int LA196_0 = input.LA(1);

                    if ( (LA196_0==EQ_SYM) ) {
                        alt196=1;
                    }
                    switch (alt196) {
                        case 1 :
                            // SQLParser2.g:141:18: EQ_SYM
                            {
                            EQ_SYM463=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option2348); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM463_tree = (CommonTree)adaptor.create(EQ_SYM463);
                            adaptor.addChild(root_0, EQ_SYM463_tree);
                            }

                            }
                            break;

                    }

                    LPAREN464=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_table_option2352); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN464_tree = (CommonTree)adaptor.create(LPAREN464);
                    adaptor.addChild(root_0, LPAREN464_tree);
                    }
                    pushFollow(FOLLOW_table_name_in_table_option2354);
                    table_name465=gMySQL.table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name465.getTree());
                    // SQLParser2.g:141:44: ( COMMA table_name )*
                    loop197:
                    do {
                        int alt197=2;
                        int LA197_0 = input.LA(1);

                        if ( (LA197_0==COMMA) ) {
                            alt197=1;
                        }


                        switch (alt197) {
                    	case 1 :
                    	    // SQLParser2.g:141:46: COMMA table_name
                    	    {
                    	    COMMA466=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_option2357); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA466_tree = (CommonTree)adaptor.create(COMMA466);
                    	    adaptor.addChild(root_0, COMMA466_tree);
                    	    }
                    	    pushFollow(FOLLOW_table_name_in_table_option2359);
                    	    table_name467=gMySQL.table_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name467.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop197;
                        }
                    } while (true);

                    RPAREN468=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_table_option2363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN468_tree = (CommonTree)adaptor.create(RPAREN468);
                    adaptor.addChild(root_0, RPAREN468_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 263, table_option_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_option"

    public static class partition_options_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "partition_options"
    // SQLParser2.g:144:1: partition_options : PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )? ;
    public final MySQL_SQLParser2.partition_options_return partition_options() throws RecognitionException {
        MySQL_SQLParser2.partition_options_return retval = new MySQL_SQLParser2.partition_options_return();
        retval.start = input.LT(1);
        int partition_options_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PARTITION_SYM469=null;
        Token BY_SYM470=null;
        Token LINEAR_SYM471=null;
        Token HASH_SYM472=null;
        Token LPAREN473=null;
        Token RPAREN475=null;
        Token LINEAR_SYM476=null;
        Token KEY_SYM477=null;
        Token LPAREN478=null;
        Token RPAREN480=null;
        Token RANGE_SYM481=null;
        Token LPAREN482=null;
        Token RPAREN484=null;
        Token COLUMNS_SYM485=null;
        Token LPAREN486=null;
        Token RPAREN488=null;
        Token LIST_SYM489=null;
        Token LPAREN490=null;
        Token RPAREN492=null;
        Token COLUMNS_SYM493=null;
        Token LPAREN494=null;
        Token RPAREN496=null;
        Token PARTITIONS_SYM497=null;
        Token INTEGER_NUM498=null;
        Token SUBPARTITION_SYM499=null;
        Token BY_SYM500=null;
        Token LINEAR_SYM501=null;
        Token HASH_SYM502=null;
        Token LPAREN503=null;
        Token RPAREN505=null;
        Token LINEAR_SYM506=null;
        Token KEY_SYM507=null;
        Token LPAREN508=null;
        Token RPAREN510=null;
        Token SUBPARTITIONS_SYM511=null;
        Token INTEGER_NUM512=null;
        Token LPAREN513=null;
        Token COMMA515=null;
        Token RPAREN517=null;
        MySQLParser.expression_return expression474 = null;

        MySQLParser.column_list_return column_list479 = null;

        MySQLParser.expression_return expression483 = null;

        MySQLParser.column_list_return column_list487 = null;

        MySQLParser.expression_return expression491 = null;

        MySQLParser.column_list_return column_list495 = null;

        MySQLParser.expression_return expression504 = null;

        MySQLParser.column_list_return column_list509 = null;

        MySQL_SQLParser2.partition_definition_return partition_definition514 = null;

        MySQL_SQLParser2.partition_definition_return partition_definition516 = null;


        CommonTree PARTITION_SYM469_tree=null;
        CommonTree BY_SYM470_tree=null;
        CommonTree LINEAR_SYM471_tree=null;
        CommonTree HASH_SYM472_tree=null;
        CommonTree LPAREN473_tree=null;
        CommonTree RPAREN475_tree=null;
        CommonTree LINEAR_SYM476_tree=null;
        CommonTree KEY_SYM477_tree=null;
        CommonTree LPAREN478_tree=null;
        CommonTree RPAREN480_tree=null;
        CommonTree RANGE_SYM481_tree=null;
        CommonTree LPAREN482_tree=null;
        CommonTree RPAREN484_tree=null;
        CommonTree COLUMNS_SYM485_tree=null;
        CommonTree LPAREN486_tree=null;
        CommonTree RPAREN488_tree=null;
        CommonTree LIST_SYM489_tree=null;
        CommonTree LPAREN490_tree=null;
        CommonTree RPAREN492_tree=null;
        CommonTree COLUMNS_SYM493_tree=null;
        CommonTree LPAREN494_tree=null;
        CommonTree RPAREN496_tree=null;
        CommonTree PARTITIONS_SYM497_tree=null;
        CommonTree INTEGER_NUM498_tree=null;
        CommonTree SUBPARTITION_SYM499_tree=null;
        CommonTree BY_SYM500_tree=null;
        CommonTree LINEAR_SYM501_tree=null;
        CommonTree HASH_SYM502_tree=null;
        CommonTree LPAREN503_tree=null;
        CommonTree RPAREN505_tree=null;
        CommonTree LINEAR_SYM506_tree=null;
        CommonTree KEY_SYM507_tree=null;
        CommonTree LPAREN508_tree=null;
        CommonTree RPAREN510_tree=null;
        CommonTree SUBPARTITIONS_SYM511_tree=null;
        CommonTree INTEGER_NUM512_tree=null;
        CommonTree LPAREN513_tree=null;
        CommonTree COMMA515_tree=null;
        CommonTree RPAREN517_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }
            // SQLParser2.g:144:18: ( PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )? )
            // SQLParser2.g:145:2: PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )?
            {
            root_0 = (CommonTree)adaptor.nil();

            PARTITION_SYM469=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_options2375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION_SYM469_tree = (CommonTree)adaptor.create(PARTITION_SYM469);
            adaptor.addChild(root_0, PARTITION_SYM469_tree);
            }
            BY_SYM470=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_partition_options2377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY_SYM470_tree = (CommonTree)adaptor.create(BY_SYM470);
            adaptor.addChild(root_0, BY_SYM470_tree);
            }
            // SQLParser2.g:146:2: ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) )
            int alt203=4;
            switch ( input.LA(1) ) {
            case LINEAR_SYM:
                {
                int LA203_1 = input.LA(2);

                if ( (LA203_1==HASH_SYM) ) {
                    alt203=1;
                }
                else if ( (LA203_1==KEY_SYM) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 1, input);

                    throw nvae;
                }
                }
                break;
            case HASH_SYM:
                {
                alt203=1;
                }
                break;
            case KEY_SYM:
                {
                alt203=2;
                }
                break;
            case RANGE_SYM:
                {
                alt203=3;
                }
                break;
            case LIST_SYM:
                {
                alt203=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;
            }

            switch (alt203) {
                case 1 :
                    // SQLParser2.g:147:5: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
                    {
                    // SQLParser2.g:147:5: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
                    // SQLParser2.g:147:7: ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN
                    {
                    // SQLParser2.g:147:7: ( LINEAR_SYM )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==LINEAR_SYM) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // SQLParser2.g:147:8: LINEAR_SYM
                            {
                            LINEAR_SYM471=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options2390); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LINEAR_SYM471_tree = (CommonTree)adaptor.create(LINEAR_SYM471);
                            adaptor.addChild(root_0, LINEAR_SYM471_tree);
                            }

                            }
                            break;

                    }

                    HASH_SYM472=(Token)match(input,HASH_SYM,FOLLOW_HASH_SYM_in_partition_options2394); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HASH_SYM472_tree = (CommonTree)adaptor.create(HASH_SYM472);
                    adaptor.addChild(root_0, HASH_SYM472_tree);
                    }
                    LPAREN473=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options2396); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN473_tree = (CommonTree)adaptor.create(LPAREN473);
                    adaptor.addChild(root_0, LPAREN473_tree);
                    }
                    pushFollow(FOLLOW_expression_in_partition_options2398);
                    expression474=gMySQL.expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression474.getTree());
                    RPAREN475=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options2400); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN475_tree = (CommonTree)adaptor.create(RPAREN475);
                    adaptor.addChild(root_0, RPAREN475_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // SQLParser2.g:148:5: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
                    {
                    // SQLParser2.g:148:5: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
                    // SQLParser2.g:148:7: ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN
                    {
                    // SQLParser2.g:148:7: ( LINEAR_SYM )?
                    int alt200=2;
                    int LA200_0 = input.LA(1);

                    if ( (LA200_0==LINEAR_SYM) ) {
                        alt200=1;
                    }
                    switch (alt200) {
                        case 1 :
                            // SQLParser2.g:148:8: LINEAR_SYM
                            {
                            LINEAR_SYM476=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options2411); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LINEAR_SYM476_tree = (CommonTree)adaptor.create(LINEAR_SYM476);
                            adaptor.addChild(root_0, LINEAR_SYM476_tree);
                            }

                            }
                            break;

                    }

                    KEY_SYM477=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_partition_options2415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEY_SYM477_tree = (CommonTree)adaptor.create(KEY_SYM477);
                    adaptor.addChild(root_0, KEY_SYM477_tree);
                    }
                    LPAREN478=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options2417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN478_tree = (CommonTree)adaptor.create(LPAREN478);
                    adaptor.addChild(root_0, LPAREN478_tree);
                    }
                    pushFollow(FOLLOW_column_list_in_partition_options2419);
                    column_list479=gMySQL.column_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list479.getTree());
                    RPAREN480=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options2421); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN480_tree = (CommonTree)adaptor.create(RPAREN480);
                    adaptor.addChild(root_0, RPAREN480_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // SQLParser2.g:149:5: ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
                    {
                    // SQLParser2.g:149:5: ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
                    // SQLParser2.g:149:7: RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
                    {
                    RANGE_SYM481=(Token)match(input,RANGE_SYM,FOLLOW_RANGE_SYM_in_partition_options2431); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RANGE_SYM481_tree = (CommonTree)adaptor.create(RANGE_SYM481);
                    adaptor.addChild(root_0, RANGE_SYM481_tree);
                    }
                    // SQLParser2.g:149:16: ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
                    int alt201=2;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==LPAREN) ) {
                        alt201=1;
                    }
                    else if ( (LA201_0==COLUMNS_SYM) ) {
                        alt201=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 201, 0, input);

                        throw nvae;
                    }
                    switch (alt201) {
                        case 1 :
                            // SQLParser2.g:149:17: LPAREN expression RPAREN
                            {
                            LPAREN482=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options2433); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN482_tree = (CommonTree)adaptor.create(LPAREN482);
                            adaptor.addChild(root_0, LPAREN482_tree);
                            }
                            pushFollow(FOLLOW_expression_in_partition_options2435);
                            expression483=gMySQL.expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression483.getTree());
                            RPAREN484=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options2437); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN484_tree = (CommonTree)adaptor.create(RPAREN484);
                            adaptor.addChild(root_0, RPAREN484_tree);
                            }

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:149:44: COLUMNS_SYM LPAREN column_list RPAREN
                            {
                            COLUMNS_SYM485=(Token)match(input,COLUMNS_SYM,FOLLOW_COLUMNS_SYM_in_partition_options2441); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLUMNS_SYM485_tree = (CommonTree)adaptor.create(COLUMNS_SYM485);
                            adaptor.addChild(root_0, COLUMNS_SYM485_tree);
                            }
                            LPAREN486=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options2443); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN486_tree = (CommonTree)adaptor.create(LPAREN486);
                            adaptor.addChild(root_0, LPAREN486_tree);
                            }
                            pushFollow(FOLLOW_column_list_in_partition_options2445);
                            column_list487=gMySQL.column_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list487.getTree());
                            RPAREN488=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options2447); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN488_tree = (CommonTree)adaptor.create(RPAREN488);
                            adaptor.addChild(root_0, RPAREN488_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // SQLParser2.g:150:5: ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
                    {
                    // SQLParser2.g:150:5: ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
                    // SQLParser2.g:150:7: LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
                    {
                    LIST_SYM489=(Token)match(input,LIST_SYM,FOLLOW_LIST_SYM_in_partition_options2458); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIST_SYM489_tree = (CommonTree)adaptor.create(LIST_SYM489);
                    adaptor.addChild(root_0, LIST_SYM489_tree);
                    }
                    // SQLParser2.g:150:15: ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
                    int alt202=2;
                    int LA202_0 = input.LA(1);

                    if ( (LA202_0==LPAREN) ) {
                        alt202=1;
                    }
                    else if ( (LA202_0==COLUMNS_SYM) ) {
                        alt202=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 202, 0, input);

                        throw nvae;
                    }
                    switch (alt202) {
                        case 1 :
                            // SQLParser2.g:150:16: LPAREN expression RPAREN
                            {
                            LPAREN490=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options2460); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN490_tree = (CommonTree)adaptor.create(LPAREN490);
                            adaptor.addChild(root_0, LPAREN490_tree);
                            }
                            pushFollow(FOLLOW_expression_in_partition_options2462);
                            expression491=gMySQL.expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression491.getTree());
                            RPAREN492=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options2464); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN492_tree = (CommonTree)adaptor.create(RPAREN492);
                            adaptor.addChild(root_0, RPAREN492_tree);
                            }

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:150:43: COLUMNS_SYM LPAREN column_list RPAREN
                            {
                            COLUMNS_SYM493=(Token)match(input,COLUMNS_SYM,FOLLOW_COLUMNS_SYM_in_partition_options2468); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLUMNS_SYM493_tree = (CommonTree)adaptor.create(COLUMNS_SYM493);
                            adaptor.addChild(root_0, COLUMNS_SYM493_tree);
                            }
                            LPAREN494=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options2470); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN494_tree = (CommonTree)adaptor.create(LPAREN494);
                            adaptor.addChild(root_0, LPAREN494_tree);
                            }
                            pushFollow(FOLLOW_column_list_in_partition_options2472);
                            column_list495=gMySQL.column_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list495.getTree());
                            RPAREN496=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options2474); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN496_tree = (CommonTree)adaptor.create(RPAREN496);
                            adaptor.addChild(root_0, RPAREN496_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            // SQLParser2.g:152:2: ( PARTITIONS_SYM INTEGER_NUM )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==PARTITIONS_SYM) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // SQLParser2.g:152:3: PARTITIONS_SYM INTEGER_NUM
                    {
                    PARTITIONS_SYM497=(Token)match(input,PARTITIONS_SYM,FOLLOW_PARTITIONS_SYM_in_partition_options2484); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITIONS_SYM497_tree = (CommonTree)adaptor.create(PARTITIONS_SYM497);
                    adaptor.addChild(root_0, PARTITIONS_SYM497_tree);
                    }
                    INTEGER_NUM498=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_options2486); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM498_tree = (CommonTree)adaptor.create(INTEGER_NUM498);
                    adaptor.addChild(root_0, INTEGER_NUM498_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:153:2: ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==SUBPARTITION_SYM) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    // SQLParser2.g:154:3: SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )?
                    {
                    SUBPARTITION_SYM499=(Token)match(input,SUBPARTITION_SYM,FOLLOW_SUBPARTITION_SYM_in_partition_options2495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUBPARTITION_SYM499_tree = (CommonTree)adaptor.create(SUBPARTITION_SYM499);
                    adaptor.addChild(root_0, SUBPARTITION_SYM499_tree);
                    }
                    BY_SYM500=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_partition_options2497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_SYM500_tree = (CommonTree)adaptor.create(BY_SYM500);
                    adaptor.addChild(root_0, BY_SYM500_tree);
                    }
                    // SQLParser2.g:155:3: ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) )
                    int alt207=2;
                    switch ( input.LA(1) ) {
                    case LINEAR_SYM:
                        {
                        int LA207_1 = input.LA(2);

                        if ( (LA207_1==KEY_SYM) ) {
                            alt207=2;
                        }
                        else if ( (LA207_1==HASH_SYM) ) {
                            alt207=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case HASH_SYM:
                        {
                        alt207=1;
                        }
                        break;
                    case KEY_SYM:
                        {
                        alt207=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 0, input);

                        throw nvae;
                    }

                    switch (alt207) {
                        case 1 :
                            // SQLParser2.g:155:5: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
                            {
                            // SQLParser2.g:155:5: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
                            // SQLParser2.g:155:7: ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN
                            {
                            // SQLParser2.g:155:7: ( LINEAR_SYM )?
                            int alt205=2;
                            int LA205_0 = input.LA(1);

                            if ( (LA205_0==LINEAR_SYM) ) {
                                alt205=1;
                            }
                            switch (alt205) {
                                case 1 :
                                    // SQLParser2.g:155:8: LINEAR_SYM
                                    {
                                    LINEAR_SYM501=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options2506); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    LINEAR_SYM501_tree = (CommonTree)adaptor.create(LINEAR_SYM501);
                                    adaptor.addChild(root_0, LINEAR_SYM501_tree);
                                    }

                                    }
                                    break;

                            }

                            HASH_SYM502=(Token)match(input,HASH_SYM,FOLLOW_HASH_SYM_in_partition_options2510); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            HASH_SYM502_tree = (CommonTree)adaptor.create(HASH_SYM502);
                            adaptor.addChild(root_0, HASH_SYM502_tree);
                            }
                            LPAREN503=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options2512); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN503_tree = (CommonTree)adaptor.create(LPAREN503);
                            adaptor.addChild(root_0, LPAREN503_tree);
                            }
                            pushFollow(FOLLOW_expression_in_partition_options2514);
                            expression504=gMySQL.expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression504.getTree());
                            RPAREN505=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options2516); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN505_tree = (CommonTree)adaptor.create(RPAREN505);
                            adaptor.addChild(root_0, RPAREN505_tree);
                            }

                            }


                            }
                            break;
                        case 2 :
                            // SQLParser2.g:155:59: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
                            {
                            // SQLParser2.g:155:59: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
                            // SQLParser2.g:155:61: ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN
                            {
                            // SQLParser2.g:155:61: ( LINEAR_SYM )?
                            int alt206=2;
                            int LA206_0 = input.LA(1);

                            if ( (LA206_0==LINEAR_SYM) ) {
                                alt206=1;
                            }
                            switch (alt206) {
                                case 1 :
                                    // SQLParser2.g:155:62: LINEAR_SYM
                                    {
                                    LINEAR_SYM506=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options2525); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    LINEAR_SYM506_tree = (CommonTree)adaptor.create(LINEAR_SYM506);
                                    adaptor.addChild(root_0, LINEAR_SYM506_tree);
                                    }

                                    }
                                    break;

                            }

                            KEY_SYM507=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_partition_options2529); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            KEY_SYM507_tree = (CommonTree)adaptor.create(KEY_SYM507);
                            adaptor.addChild(root_0, KEY_SYM507_tree);
                            }
                            LPAREN508=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options2531); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN508_tree = (CommonTree)adaptor.create(LPAREN508);
                            adaptor.addChild(root_0, LPAREN508_tree);
                            }
                            pushFollow(FOLLOW_column_list_in_partition_options2533);
                            column_list509=gMySQL.column_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list509.getTree());
                            RPAREN510=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options2535); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN510_tree = (CommonTree)adaptor.create(RPAREN510);
                            adaptor.addChild(root_0, RPAREN510_tree);
                            }

                            }


                            }
                            break;

                    }

                    // SQLParser2.g:156:3: ( SUBPARTITIONS_SYM INTEGER_NUM )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==SUBPARTITIONS_SYM) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // SQLParser2.g:156:4: SUBPARTITIONS_SYM INTEGER_NUM
                            {
                            SUBPARTITIONS_SYM511=(Token)match(input,SUBPARTITIONS_SYM,FOLLOW_SUBPARTITIONS_SYM_in_partition_options2544); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SUBPARTITIONS_SYM511_tree = (CommonTree)adaptor.create(SUBPARTITIONS_SYM511);
                            adaptor.addChild(root_0, SUBPARTITIONS_SYM511_tree);
                            }
                            INTEGER_NUM512=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_options2546); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            INTEGER_NUM512_tree = (CommonTree)adaptor.create(INTEGER_NUM512);
                            adaptor.addChild(root_0, INTEGER_NUM512_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            // SQLParser2.g:158:2: ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==LPAREN) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // SQLParser2.g:158:3: LPAREN partition_definition ( COMMA partition_definition )* RPAREN
                    {
                    LPAREN513=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options2556); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN513_tree = (CommonTree)adaptor.create(LPAREN513);
                    adaptor.addChild(root_0, LPAREN513_tree);
                    }
                    pushFollow(FOLLOW_partition_definition_in_partition_options2558);
                    partition_definition514=partition_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition514.getTree());
                    // SQLParser2.g:158:31: ( COMMA partition_definition )*
                    loop210:
                    do {
                        int alt210=2;
                        int LA210_0 = input.LA(1);

                        if ( (LA210_0==COMMA) ) {
                            alt210=1;
                        }


                        switch (alt210) {
                    	case 1 :
                    	    // SQLParser2.g:158:33: COMMA partition_definition
                    	    {
                    	    COMMA515=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_options2562); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA515_tree = (CommonTree)adaptor.create(COMMA515);
                    	    adaptor.addChild(root_0, COMMA515_tree);
                    	    }
                    	    pushFollow(FOLLOW_partition_definition_in_partition_options2565);
                    	    partition_definition516=partition_definition();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition516.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop210;
                        }
                    } while (true);

                    RPAREN517=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options2569); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN517_tree = (CommonTree)adaptor.create(RPAREN517);
                    adaptor.addChild(root_0, RPAREN517_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 264, partition_options_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "partition_options"

    public static class partition_definition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "partition_definition"
    // SQLParser2.g:161:1: partition_definition : PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( expression_list | MAXVALUE_SYM ) ) | ( IN_SYM expression_list ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )? ;
    public final MySQL_SQLParser2.partition_definition_return partition_definition() throws RecognitionException {
        MySQL_SQLParser2.partition_definition_return retval = new MySQL_SQLParser2.partition_definition_return();
        retval.start = input.LT(1);
        int partition_definition_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PARTITION_SYM518=null;
        Token VALUES520=null;
        Token LESS_SYM521=null;
        Token THAN_SYM522=null;
        Token MAXVALUE_SYM524=null;
        Token IN_SYM525=null;
        Token STORAGE_SYM527=null;
        Token ENGINE_SYM528=null;
        Token EQ_SYM529=null;
        Token COMMENT_SYM531=null;
        Token EQ_SYM532=null;
        Token TEXT_STRING533=null;
        Token DATA_SYM534=null;
        Token DIRECTORY_SYM535=null;
        Token EQ_SYM536=null;
        Token TEXT_STRING537=null;
        Token INDEX_SYM538=null;
        Token DIRECTORY_SYM539=null;
        Token EQ_SYM540=null;
        Token TEXT_STRING541=null;
        Token MAX_ROWS542=null;
        Token EQ_SYM543=null;
        Token INTEGER_NUM544=null;
        Token MIN_ROWS545=null;
        Token EQ_SYM546=null;
        Token INTEGER_NUM547=null;
        Token LPAREN548=null;
        Token COMMA550=null;
        Token RPAREN552=null;
        MySQLParser.partition_name_return partition_name519 = null;

        MySQLParser.expression_list_return expression_list523 = null;

        MySQLParser.expression_list_return expression_list526 = null;

        MySQLParser.engine_name_return engine_name530 = null;

        MySQL_SQLParser2.subpartition_definition_return subpartition_definition549 = null;

        MySQL_SQLParser2.subpartition_definition_return subpartition_definition551 = null;


        CommonTree PARTITION_SYM518_tree=null;
        CommonTree VALUES520_tree=null;
        CommonTree LESS_SYM521_tree=null;
        CommonTree THAN_SYM522_tree=null;
        CommonTree MAXVALUE_SYM524_tree=null;
        CommonTree IN_SYM525_tree=null;
        CommonTree STORAGE_SYM527_tree=null;
        CommonTree ENGINE_SYM528_tree=null;
        CommonTree EQ_SYM529_tree=null;
        CommonTree COMMENT_SYM531_tree=null;
        CommonTree EQ_SYM532_tree=null;
        CommonTree TEXT_STRING533_tree=null;
        CommonTree DATA_SYM534_tree=null;
        CommonTree DIRECTORY_SYM535_tree=null;
        CommonTree EQ_SYM536_tree=null;
        CommonTree TEXT_STRING537_tree=null;
        CommonTree INDEX_SYM538_tree=null;
        CommonTree DIRECTORY_SYM539_tree=null;
        CommonTree EQ_SYM540_tree=null;
        CommonTree TEXT_STRING541_tree=null;
        CommonTree MAX_ROWS542_tree=null;
        CommonTree EQ_SYM543_tree=null;
        CommonTree INTEGER_NUM544_tree=null;
        CommonTree MIN_ROWS545_tree=null;
        CommonTree EQ_SYM546_tree=null;
        CommonTree INTEGER_NUM547_tree=null;
        CommonTree LPAREN548_tree=null;
        CommonTree COMMA550_tree=null;
        CommonTree RPAREN552_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }
            // SQLParser2.g:161:21: ( PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( expression_list | MAXVALUE_SYM ) ) | ( IN_SYM expression_list ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )? )
            // SQLParser2.g:162:2: PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( expression_list | MAXVALUE_SYM ) ) | ( IN_SYM expression_list ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )?
            {
            root_0 = (CommonTree)adaptor.nil();

            PARTITION_SYM518=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_definition2580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION_SYM518_tree = (CommonTree)adaptor.create(PARTITION_SYM518);
            adaptor.addChild(root_0, PARTITION_SYM518_tree);
            }
            pushFollow(FOLLOW_partition_name_in_partition_definition2582);
            partition_name519=gMySQL.partition_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name519.getTree());
            // SQLParser2.g:163:2: ( VALUES ( ( LESS_SYM THAN_SYM ( expression_list | MAXVALUE_SYM ) ) | ( IN_SYM expression_list ) ) )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==VALUES) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    // SQLParser2.g:164:3: VALUES ( ( LESS_SYM THAN_SYM ( expression_list | MAXVALUE_SYM ) ) | ( IN_SYM expression_list ) )
                    {
                    VALUES520=(Token)match(input,VALUES,FOLLOW_VALUES_in_partition_definition2589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VALUES520_tree = (CommonTree)adaptor.create(VALUES520);
                    adaptor.addChild(root_0, VALUES520_tree);
                    }
                    // SQLParser2.g:165:3: ( ( LESS_SYM THAN_SYM ( expression_list | MAXVALUE_SYM ) ) | ( IN_SYM expression_list ) )
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==LESS_SYM) ) {
                        alt213=1;
                    }
                    else if ( (LA213_0==IN_SYM) ) {
                        alt213=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 213, 0, input);

                        throw nvae;
                    }
                    switch (alt213) {
                        case 1 :
                            // SQLParser2.g:166:4: ( LESS_SYM THAN_SYM ( expression_list | MAXVALUE_SYM ) )
                            {
                            // SQLParser2.g:166:4: ( LESS_SYM THAN_SYM ( expression_list | MAXVALUE_SYM ) )
                            // SQLParser2.g:166:5: LESS_SYM THAN_SYM ( expression_list | MAXVALUE_SYM )
                            {
                            LESS_SYM521=(Token)match(input,LESS_SYM,FOLLOW_LESS_SYM_in_partition_definition2600); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LESS_SYM521_tree = (CommonTree)adaptor.create(LESS_SYM521);
                            adaptor.addChild(root_0, LESS_SYM521_tree);
                            }
                            THAN_SYM522=(Token)match(input,THAN_SYM,FOLLOW_THAN_SYM_in_partition_definition2602); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            THAN_SYM522_tree = (CommonTree)adaptor.create(THAN_SYM522);
                            adaptor.addChild(root_0, THAN_SYM522_tree);
                            }
                            // SQLParser2.g:166:23: ( expression_list | MAXVALUE_SYM )
                            int alt212=2;
                            int LA212_0 = input.LA(1);

                            if ( (LA212_0==LPAREN) ) {
                                alt212=1;
                            }
                            else if ( (LA212_0==MAXVALUE_SYM) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 0, input);

                                throw nvae;
                            }
                            switch (alt212) {
                                case 1 :
                                    // SQLParser2.g:166:25: expression_list
                                    {
                                    pushFollow(FOLLOW_expression_list_in_partition_definition2606);
                                    expression_list523=gMySQL.expression_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list523.getTree());

                                    }
                                    break;
                                case 2 :
                                    // SQLParser2.g:166:43: MAXVALUE_SYM
                                    {
                                    MAXVALUE_SYM524=(Token)match(input,MAXVALUE_SYM,FOLLOW_MAXVALUE_SYM_in_partition_definition2610); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    MAXVALUE_SYM524_tree = (CommonTree)adaptor.create(MAXVALUE_SYM524);
                                    adaptor.addChild(root_0, MAXVALUE_SYM524_tree);
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // SQLParser2.g:168:4: ( IN_SYM expression_list )
                            {
                            // SQLParser2.g:168:4: ( IN_SYM expression_list )
                            // SQLParser2.g:168:5: IN_SYM expression_list
                            {
                            IN_SYM525=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_partition_definition2625); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            IN_SYM525_tree = (CommonTree)adaptor.create(IN_SYM525);
                            adaptor.addChild(root_0, IN_SYM525_tree);
                            }
                            pushFollow(FOLLOW_expression_list_in_partition_definition2627);
                            expression_list526=gMySQL.expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list526.getTree());

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            // SQLParser2.g:171:2: ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==ENGINE_SYM||LA217_0==STORAGE_SYM) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // SQLParser2.g:171:3: ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name
                    {
                    // SQLParser2.g:171:3: ( STORAGE_SYM )?
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==STORAGE_SYM) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            // SQLParser2.g:171:4: STORAGE_SYM
                            {
                            STORAGE_SYM527=(Token)match(input,STORAGE_SYM,FOLLOW_STORAGE_SYM_in_partition_definition2641); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STORAGE_SYM527_tree = (CommonTree)adaptor.create(STORAGE_SYM527);
                            adaptor.addChild(root_0, STORAGE_SYM527_tree);
                            }

                            }
                            break;

                    }

                    ENGINE_SYM528=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_partition_definition2645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENGINE_SYM528_tree = (CommonTree)adaptor.create(ENGINE_SYM528);
                    adaptor.addChild(root_0, ENGINE_SYM528_tree);
                    }
                    // SQLParser2.g:171:29: ( EQ_SYM )?
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==EQ_SYM) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            // SQLParser2.g:171:30: EQ_SYM
                            {
                            EQ_SYM529=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition2648); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM529_tree = (CommonTree)adaptor.create(EQ_SYM529);
                            adaptor.addChild(root_0, EQ_SYM529_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_engine_name_in_partition_definition2652);
                    engine_name530=gMySQL.engine_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name530.getTree());

                    }
                    break;

            }

            // SQLParser2.g:172:2: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==COMMENT_SYM) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    // SQLParser2.g:172:3: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
                    {
                    COMMENT_SYM531=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_partition_definition2658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMENT_SYM531_tree = (CommonTree)adaptor.create(COMMENT_SYM531);
                    adaptor.addChild(root_0, COMMENT_SYM531_tree);
                    }
                    // SQLParser2.g:172:15: ( EQ_SYM )?
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==EQ_SYM) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            // SQLParser2.g:172:16: EQ_SYM
                            {
                            EQ_SYM532=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition2661); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM532_tree = (CommonTree)adaptor.create(EQ_SYM532);
                            adaptor.addChild(root_0, EQ_SYM532_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING533=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition2665); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING533_tree = (CommonTree)adaptor.create(TEXT_STRING533);
                    adaptor.addChild(root_0, TEXT_STRING533_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:173:2: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==DATA_SYM) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // SQLParser2.g:173:3: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
                    {
                    DATA_SYM534=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_partition_definition2672); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DATA_SYM534_tree = (CommonTree)adaptor.create(DATA_SYM534);
                    adaptor.addChild(root_0, DATA_SYM534_tree);
                    }
                    DIRECTORY_SYM535=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_partition_definition2674); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIRECTORY_SYM535_tree = (CommonTree)adaptor.create(DIRECTORY_SYM535);
                    adaptor.addChild(root_0, DIRECTORY_SYM535_tree);
                    }
                    // SQLParser2.g:173:26: ( EQ_SYM )?
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==EQ_SYM) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            // SQLParser2.g:173:27: EQ_SYM
                            {
                            EQ_SYM536=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition2677); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM536_tree = (CommonTree)adaptor.create(EQ_SYM536);
                            adaptor.addChild(root_0, EQ_SYM536_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING537=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition2681); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING537_tree = (CommonTree)adaptor.create(TEXT_STRING537);
                    adaptor.addChild(root_0, TEXT_STRING537_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:174:2: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==INDEX_SYM) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // SQLParser2.g:174:3: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
                    {
                    INDEX_SYM538=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_partition_definition2687); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX_SYM538_tree = (CommonTree)adaptor.create(INDEX_SYM538);
                    adaptor.addChild(root_0, INDEX_SYM538_tree);
                    }
                    DIRECTORY_SYM539=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_partition_definition2689); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIRECTORY_SYM539_tree = (CommonTree)adaptor.create(DIRECTORY_SYM539);
                    adaptor.addChild(root_0, DIRECTORY_SYM539_tree);
                    }
                    // SQLParser2.g:174:27: ( EQ_SYM )?
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==EQ_SYM) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            // SQLParser2.g:174:28: EQ_SYM
                            {
                            EQ_SYM540=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition2692); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM540_tree = (CommonTree)adaptor.create(EQ_SYM540);
                            adaptor.addChild(root_0, EQ_SYM540_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING541=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition2696); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING541_tree = (CommonTree)adaptor.create(TEXT_STRING541);
                    adaptor.addChild(root_0, TEXT_STRING541_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:175:2: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==MAX_ROWS) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // SQLParser2.g:175:3: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
                    {
                    MAX_ROWS542=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_partition_definition2702); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX_ROWS542_tree = (CommonTree)adaptor.create(MAX_ROWS542);
                    adaptor.addChild(root_0, MAX_ROWS542_tree);
                    }
                    // SQLParser2.g:175:12: ( EQ_SYM )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==EQ_SYM) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // SQLParser2.g:175:13: EQ_SYM
                            {
                            EQ_SYM543=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition2705); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM543_tree = (CommonTree)adaptor.create(EQ_SYM543);
                            adaptor.addChild(root_0, EQ_SYM543_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM544=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_definition2709); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM544_tree = (CommonTree)adaptor.create(INTEGER_NUM544);
                    adaptor.addChild(root_0, INTEGER_NUM544_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:176:2: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==MIN_ROWS) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    // SQLParser2.g:176:3: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
                    {
                    MIN_ROWS545=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_partition_definition2715); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN_ROWS545_tree = (CommonTree)adaptor.create(MIN_ROWS545);
                    adaptor.addChild(root_0, MIN_ROWS545_tree);
                    }
                    // SQLParser2.g:176:12: ( EQ_SYM )?
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==EQ_SYM) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            // SQLParser2.g:176:13: EQ_SYM
                            {
                            EQ_SYM546=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition2718); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM546_tree = (CommonTree)adaptor.create(EQ_SYM546);
                            adaptor.addChild(root_0, EQ_SYM546_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM547=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_definition2722); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM547_tree = (CommonTree)adaptor.create(INTEGER_NUM547);
                    adaptor.addChild(root_0, INTEGER_NUM547_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:177:2: ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==LPAREN) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // SQLParser2.g:177:3: LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN
                    {
                    LPAREN548=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_definition2728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN548_tree = (CommonTree)adaptor.create(LPAREN548);
                    adaptor.addChild(root_0, LPAREN548_tree);
                    }
                    pushFollow(FOLLOW_subpartition_definition_in_partition_definition2730);
                    subpartition_definition549=subpartition_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subpartition_definition549.getTree());
                    // SQLParser2.g:177:34: ( COMMA subpartition_definition )*
                    loop228:
                    do {
                        int alt228=2;
                        int LA228_0 = input.LA(1);

                        if ( (LA228_0==COMMA) ) {
                            alt228=1;
                        }


                        switch (alt228) {
                    	case 1 :
                    	    // SQLParser2.g:177:35: COMMA subpartition_definition
                    	    {
                    	    COMMA550=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_definition2733); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA550_tree = (CommonTree)adaptor.create(COMMA550);
                    	    adaptor.addChild(root_0, COMMA550_tree);
                    	    }
                    	    pushFollow(FOLLOW_subpartition_definition_in_partition_definition2736);
                    	    subpartition_definition551=subpartition_definition();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, subpartition_definition551.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop228;
                        }
                    } while (true);

                    RPAREN552=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_definition2740); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN552_tree = (CommonTree)adaptor.create(RPAREN552);
                    adaptor.addChild(root_0, RPAREN552_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 265, partition_definition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "partition_definition"

    public static class subpartition_definition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subpartition_definition"
    // SQLParser2.g:180:1: subpartition_definition : SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ;
    public final MySQL_SQLParser2.subpartition_definition_return subpartition_definition() throws RecognitionException {
        MySQL_SQLParser2.subpartition_definition_return retval = new MySQL_SQLParser2.subpartition_definition_return();
        retval.start = input.LT(1);
        int subpartition_definition_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUBPARTITION_SYM553=null;
        Token STORAGE_SYM555=null;
        Token ENGINE_SYM556=null;
        Token EQ_SYM557=null;
        Token COMMENT_SYM559=null;
        Token EQ_SYM560=null;
        Token TEXT_STRING561=null;
        Token DATA_SYM562=null;
        Token DIRECTORY_SYM563=null;
        Token EQ_SYM564=null;
        Token TEXT_STRING565=null;
        Token INDEX_SYM566=null;
        Token DIRECTORY_SYM567=null;
        Token EQ_SYM568=null;
        Token TEXT_STRING569=null;
        Token MAX_ROWS570=null;
        Token EQ_SYM571=null;
        Token INTEGER_NUM572=null;
        Token MIN_ROWS573=null;
        Token EQ_SYM574=null;
        Token INTEGER_NUM575=null;
        MySQLParser.partition_logical_name_return partition_logical_name554 = null;

        MySQLParser.engine_name_return engine_name558 = null;


        CommonTree SUBPARTITION_SYM553_tree=null;
        CommonTree STORAGE_SYM555_tree=null;
        CommonTree ENGINE_SYM556_tree=null;
        CommonTree EQ_SYM557_tree=null;
        CommonTree COMMENT_SYM559_tree=null;
        CommonTree EQ_SYM560_tree=null;
        CommonTree TEXT_STRING561_tree=null;
        CommonTree DATA_SYM562_tree=null;
        CommonTree DIRECTORY_SYM563_tree=null;
        CommonTree EQ_SYM564_tree=null;
        CommonTree TEXT_STRING565_tree=null;
        CommonTree INDEX_SYM566_tree=null;
        CommonTree DIRECTORY_SYM567_tree=null;
        CommonTree EQ_SYM568_tree=null;
        CommonTree TEXT_STRING569_tree=null;
        CommonTree MAX_ROWS570_tree=null;
        CommonTree EQ_SYM571_tree=null;
        CommonTree INTEGER_NUM572_tree=null;
        CommonTree MIN_ROWS573_tree=null;
        CommonTree EQ_SYM574_tree=null;
        CommonTree INTEGER_NUM575_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }
            // SQLParser2.g:180:24: ( SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? )
            // SQLParser2.g:181:2: SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SUBPARTITION_SYM553=(Token)match(input,SUBPARTITION_SYM,FOLLOW_SUBPARTITION_SYM_in_subpartition_definition2751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUBPARTITION_SYM553_tree = (CommonTree)adaptor.create(SUBPARTITION_SYM553);
            adaptor.addChild(root_0, SUBPARTITION_SYM553_tree);
            }
            pushFollow(FOLLOW_partition_logical_name_in_subpartition_definition2753);
            partition_logical_name554=gMySQL.partition_logical_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_logical_name554.getTree());
            // SQLParser2.g:182:2: ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )?
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==ENGINE_SYM||LA232_0==STORAGE_SYM) ) {
                alt232=1;
            }
            switch (alt232) {
                case 1 :
                    // SQLParser2.g:182:3: ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name
                    {
                    // SQLParser2.g:182:3: ( STORAGE_SYM )?
                    int alt230=2;
                    int LA230_0 = input.LA(1);

                    if ( (LA230_0==STORAGE_SYM) ) {
                        alt230=1;
                    }
                    switch (alt230) {
                        case 1 :
                            // SQLParser2.g:182:4: STORAGE_SYM
                            {
                            STORAGE_SYM555=(Token)match(input,STORAGE_SYM,FOLLOW_STORAGE_SYM_in_subpartition_definition2758); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STORAGE_SYM555_tree = (CommonTree)adaptor.create(STORAGE_SYM555);
                            adaptor.addChild(root_0, STORAGE_SYM555_tree);
                            }

                            }
                            break;

                    }

                    ENGINE_SYM556=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_subpartition_definition2762); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENGINE_SYM556_tree = (CommonTree)adaptor.create(ENGINE_SYM556);
                    adaptor.addChild(root_0, ENGINE_SYM556_tree);
                    }
                    // SQLParser2.g:182:29: ( EQ_SYM )?
                    int alt231=2;
                    int LA231_0 = input.LA(1);

                    if ( (LA231_0==EQ_SYM) ) {
                        alt231=1;
                    }
                    switch (alt231) {
                        case 1 :
                            // SQLParser2.g:182:30: EQ_SYM
                            {
                            EQ_SYM557=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition2765); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM557_tree = (CommonTree)adaptor.create(EQ_SYM557);
                            adaptor.addChild(root_0, EQ_SYM557_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_engine_name_in_subpartition_definition2769);
                    engine_name558=gMySQL.engine_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name558.getTree());

                    }
                    break;

            }

            // SQLParser2.g:183:2: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==COMMENT_SYM) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // SQLParser2.g:183:3: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
                    {
                    COMMENT_SYM559=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_subpartition_definition2775); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMENT_SYM559_tree = (CommonTree)adaptor.create(COMMENT_SYM559);
                    adaptor.addChild(root_0, COMMENT_SYM559_tree);
                    }
                    // SQLParser2.g:183:15: ( EQ_SYM )?
                    int alt233=2;
                    int LA233_0 = input.LA(1);

                    if ( (LA233_0==EQ_SYM) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            // SQLParser2.g:183:16: EQ_SYM
                            {
                            EQ_SYM560=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition2778); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM560_tree = (CommonTree)adaptor.create(EQ_SYM560);
                            adaptor.addChild(root_0, EQ_SYM560_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING561=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition2782); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING561_tree = (CommonTree)adaptor.create(TEXT_STRING561);
                    adaptor.addChild(root_0, TEXT_STRING561_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:184:2: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==DATA_SYM) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    // SQLParser2.g:184:3: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
                    {
                    DATA_SYM562=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_subpartition_definition2789); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DATA_SYM562_tree = (CommonTree)adaptor.create(DATA_SYM562);
                    adaptor.addChild(root_0, DATA_SYM562_tree);
                    }
                    DIRECTORY_SYM563=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_subpartition_definition2791); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIRECTORY_SYM563_tree = (CommonTree)adaptor.create(DIRECTORY_SYM563);
                    adaptor.addChild(root_0, DIRECTORY_SYM563_tree);
                    }
                    // SQLParser2.g:184:26: ( EQ_SYM )?
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==EQ_SYM) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            // SQLParser2.g:184:27: EQ_SYM
                            {
                            EQ_SYM564=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition2794); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM564_tree = (CommonTree)adaptor.create(EQ_SYM564);
                            adaptor.addChild(root_0, EQ_SYM564_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING565=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition2798); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING565_tree = (CommonTree)adaptor.create(TEXT_STRING565);
                    adaptor.addChild(root_0, TEXT_STRING565_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:185:2: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==INDEX_SYM) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // SQLParser2.g:185:3: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
                    {
                    INDEX_SYM566=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_subpartition_definition2804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX_SYM566_tree = (CommonTree)adaptor.create(INDEX_SYM566);
                    adaptor.addChild(root_0, INDEX_SYM566_tree);
                    }
                    DIRECTORY_SYM567=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_subpartition_definition2806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIRECTORY_SYM567_tree = (CommonTree)adaptor.create(DIRECTORY_SYM567);
                    adaptor.addChild(root_0, DIRECTORY_SYM567_tree);
                    }
                    // SQLParser2.g:185:27: ( EQ_SYM )?
                    int alt237=2;
                    int LA237_0 = input.LA(1);

                    if ( (LA237_0==EQ_SYM) ) {
                        alt237=1;
                    }
                    switch (alt237) {
                        case 1 :
                            // SQLParser2.g:185:28: EQ_SYM
                            {
                            EQ_SYM568=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition2809); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM568_tree = (CommonTree)adaptor.create(EQ_SYM568);
                            adaptor.addChild(root_0, EQ_SYM568_tree);
                            }

                            }
                            break;

                    }

                    TEXT_STRING569=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition2813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING569_tree = (CommonTree)adaptor.create(TEXT_STRING569);
                    adaptor.addChild(root_0, TEXT_STRING569_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:186:2: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==MAX_ROWS) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    // SQLParser2.g:186:3: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
                    {
                    MAX_ROWS570=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_subpartition_definition2819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX_ROWS570_tree = (CommonTree)adaptor.create(MAX_ROWS570);
                    adaptor.addChild(root_0, MAX_ROWS570_tree);
                    }
                    // SQLParser2.g:186:12: ( EQ_SYM )?
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==EQ_SYM) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            // SQLParser2.g:186:13: EQ_SYM
                            {
                            EQ_SYM571=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition2822); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM571_tree = (CommonTree)adaptor.create(EQ_SYM571);
                            adaptor.addChild(root_0, EQ_SYM571_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM572=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_subpartition_definition2826); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM572_tree = (CommonTree)adaptor.create(INTEGER_NUM572);
                    adaptor.addChild(root_0, INTEGER_NUM572_tree);
                    }

                    }
                    break;

            }

            // SQLParser2.g:187:2: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==MIN_ROWS) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    // SQLParser2.g:187:3: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
                    {
                    MIN_ROWS573=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_subpartition_definition2832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN_ROWS573_tree = (CommonTree)adaptor.create(MIN_ROWS573);
                    adaptor.addChild(root_0, MIN_ROWS573_tree);
                    }
                    // SQLParser2.g:187:12: ( EQ_SYM )?
                    int alt241=2;
                    int LA241_0 = input.LA(1);

                    if ( (LA241_0==EQ_SYM) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            // SQLParser2.g:187:13: EQ_SYM
                            {
                            EQ_SYM574=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition2835); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM574_tree = (CommonTree)adaptor.create(EQ_SYM574);
                            adaptor.addChild(root_0, EQ_SYM574_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM575=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_subpartition_definition2839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM575_tree = (CommonTree)adaptor.create(INTEGER_NUM575);
                    adaptor.addChild(root_0, INTEGER_NUM575_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 266, subpartition_definition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subpartition_definition"

    public static class length_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "length"
    // SQLParser2.g:190:1: length : INTEGER_NUM ;
    public final MySQL_SQLParser2.length_return length() throws RecognitionException {
        MySQL_SQLParser2.length_return retval = new MySQL_SQLParser2.length_return();
        retval.start = input.LT(1);
        int length_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTEGER_NUM576=null;

        CommonTree INTEGER_NUM576_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }
            // SQLParser2.g:190:8: ( INTEGER_NUM )
            // SQLParser2.g:190:10: INTEGER_NUM
            {
            root_0 = (CommonTree)adaptor.nil();

            INTEGER_NUM576=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_length2850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER_NUM576_tree = (CommonTree)adaptor.create(INTEGER_NUM576);
            adaptor.addChild(root_0, INTEGER_NUM576_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 267, length_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "length"

    public static class alter_table_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alter_table_statement"
    // SQLParser2.g:193:1: alter_table_statement : ALTER alter_table_expression -> ^( TN_ALTER alter_table_expression ) ;
    public final MySQL_SQLParser2.alter_table_statement_return alter_table_statement() throws RecognitionException {
        MySQL_SQLParser2.alter_table_statement_return retval = new MySQL_SQLParser2.alter_table_statement_return();
        retval.start = input.LT(1);
        int alter_table_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALTER577=null;
        MySQL_SQLParser2.alter_table_expression_return alter_table_expression578 = null;


        CommonTree ALTER577_tree=null;
        RewriteRuleTokenStream stream_ALTER=new RewriteRuleTokenStream(adaptor,"token ALTER");
        RewriteRuleSubtreeStream stream_alter_table_expression=new RewriteRuleSubtreeStream(adaptor,"rule alter_table_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }
            // SQLParser2.g:193:22: ( ALTER alter_table_expression -> ^( TN_ALTER alter_table_expression ) )
            // SQLParser2.g:194:2: ALTER alter_table_expression
            {
            ALTER577=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_table_statement2859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ALTER.add(ALTER577);

            pushFollow(FOLLOW_alter_table_expression_in_alter_table_statement2861);
            alter_table_expression578=alter_table_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alter_table_expression.add(alter_table_expression578.getTree());


            // AST REWRITE
            // elements: alter_table_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 194:31: -> ^( TN_ALTER alter_table_expression )
            {
                // SQLParser2.g:194:34: ^( TN_ALTER alter_table_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TN_ALTER, "TN_ALTER"), root_1);

                adaptor.addChild(root_1, stream_alter_table_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 268, alter_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alter_table_statement"

    public static class alter_table_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alter_table_expression"
    // SQLParser2.g:196:1: alter_table_expression : ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )? ;
    public final MySQL_SQLParser2.alter_table_expression_return alter_table_expression() throws RecognitionException {
        MySQL_SQLParser2.alter_table_expression_return retval = new MySQL_SQLParser2.alter_table_expression_return();
        retval.start = input.LT(1);
        int alter_table_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IGNORE_SYM579=null;
        Token TABLE580=null;
        Token COMMA583=null;
        MySQLParser.table_name_return table_name581 = null;

        MySQL_SQLParser2.alter_table_specification_return alter_table_specification582 = null;

        MySQL_SQLParser2.alter_table_specification_return alter_table_specification584 = null;

        MySQL_SQLParser2.partition_options_return partition_options585 = null;


        CommonTree IGNORE_SYM579_tree=null;
        CommonTree TABLE580_tree=null;
        CommonTree COMMA583_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }
            // SQLParser2.g:196:23: ( ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )? )
            // SQLParser2.g:197:2: ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // SQLParser2.g:197:2: ( IGNORE_SYM )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==IGNORE_SYM) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // SQLParser2.g:197:3: IGNORE_SYM
                    {
                    IGNORE_SYM579=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_alter_table_expression2878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IGNORE_SYM579_tree = (CommonTree)adaptor.create(IGNORE_SYM579);
                    adaptor.addChild(root_0, IGNORE_SYM579_tree);
                    }

                    }
                    break;

            }

            TABLE580=(Token)match(input,TABLE,FOLLOW_TABLE_in_alter_table_expression2882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE580_tree = (CommonTree)adaptor.create(TABLE580);
            adaptor.addChild(root_0, TABLE580_tree);
            }
            pushFollow(FOLLOW_table_name_in_alter_table_expression2884);
            table_name581=gMySQL.table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name581.getTree());
            // SQLParser2.g:198:2: ( alter_table_specification ( COMMA alter_table_specification )* )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==ADD_SYM||LA245_0==ALGORITHM_SYM||(LA245_0>=ALTER && LA245_0<=ANALYZE_SYM)||LA245_0==AUTO_INCREMENT||LA245_0==AVG_ROW_LENGTH||LA245_0==CHANGE||(LA245_0>=CHARACTER_SYM && LA245_0<=CHECKSUM_SYM)||LA245_0==COALESCE||LA245_0==COLLATE_SYM||LA245_0==COMMENT_SYM||LA245_0==CONNECTION_SYM||LA245_0==CONVERT_SYM||LA245_0==DATA_SYM||LA245_0==DEFAULT||LA245_0==DELAY_KEY_WRITE_SYM||(LA245_0>=DISABLE_SYM && LA245_0<=DISCARD)||LA245_0==DROP||LA245_0==ENABLE_SYM||LA245_0==ENGINE_SYM||LA245_0==EXCHANGE_SYM||LA245_0==FORCE_SYM||LA245_0==IMPORT||LA245_0==INDEX_SYM||LA245_0==INSERT_METHOD||LA245_0==KEY_BLOCK_SIZE||LA245_0==LOCK||LA245_0==MAX_ROWS||LA245_0==MIN_ROWS||LA245_0==MODIFY_SYM||LA245_0==OPTIMIZE||LA245_0==ORDER_SYM||LA245_0==PACK_KEYS_SYM||LA245_0==PASSWORD||LA245_0==REBUILD_SYM||(LA245_0>=REMOVE_SYM && LA245_0<=REPAIR)||LA245_0==ROW_FORMAT_SYM||(LA245_0>=STATS_AUTO_RECALC && LA245_0<=STATS_PERSISTENT)||LA245_0==TRUNCATE||LA245_0==UNION_SYM) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // SQLParser2.g:198:4: alter_table_specification ( COMMA alter_table_specification )*
                    {
                    pushFollow(FOLLOW_alter_table_specification_in_alter_table_expression2889);
                    alter_table_specification582=alter_table_specification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_specification582.getTree());
                    // SQLParser2.g:198:30: ( COMMA alter_table_specification )*
                    loop244:
                    do {
                        int alt244=2;
                        int LA244_0 = input.LA(1);

                        if ( (LA244_0==COMMA) ) {
                            alt244=1;
                        }


                        switch (alt244) {
                    	case 1 :
                    	    // SQLParser2.g:198:31: COMMA alter_table_specification
                    	    {
                    	    COMMA583=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_expression2892); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA583_tree = (CommonTree)adaptor.create(COMMA583);
                    	    adaptor.addChild(root_0, COMMA583_tree);
                    	    }
                    	    pushFollow(FOLLOW_alter_table_specification_in_alter_table_expression2894);
                    	    alter_table_specification584=alter_table_specification();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_specification584.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop244;
                        }
                    } while (true);


                    }
                    break;

            }

            // SQLParser2.g:199:2: ( partition_options )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==PARTITION_SYM) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // SQLParser2.g:199:4: partition_options
                    {
                    pushFollow(FOLLOW_partition_options_in_alter_table_expression2904);
                    partition_options585=partition_options();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options585.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 269, alter_table_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alter_table_expression"

    public static class alter_table_specification_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alter_table_specification"
    // SQLParser2.g:201:1: alter_table_specification : ( table_options | ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? ) | ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN ) | ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition ) | ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ) | ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) ) | ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ) | ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( DROP ( COLUMN_SYM )? column_name ) | ( DROP PRIMARY_SYM KEY_SYM ) | ( DROP ( INDEX_SYM | KEY_SYM ) index_name ) | ( DROP FOREIGN KEY_SYM foreign_key_symbol_name ) | ( DISABLE_SYM KEYS ) | ( ENABLE_SYM KEYS ) | ( RENAME ( TO_SYM | AS_SYM )? table_name ) | ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* ) | ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) | ( DISCARD TABLESPACE ) | ( IMPORT TABLESPACE ) | ( FORCE_SYM ) | ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN ) | ( DROP PARTITION_SYM partition_names ) | ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) ) | ( COALESCE PARTITION_SYM INTEGER_NUM ) | ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN ) | ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name ) | ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) ) | ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( REPAIR PARTITION_SYM ( partition_names | ALL ) ) | ( REMOVE_SYM PARTITIONING_SYM ) );
    public final MySQL_SQLParser2.alter_table_specification_return alter_table_specification() throws RecognitionException {
        MySQL_SQLParser2.alter_table_specification_return retval = new MySQL_SQLParser2.alter_table_specification_return();
        retval.start = input.LT(1);
        int alter_table_specification_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ADD_SYM587=null;
        Token COLUMN_SYM588=null;
        Token set591=null;
        Token ADD_SYM593=null;
        Token COLUMN_SYM594=null;
        Token LPAREN595=null;
        Token RPAREN597=null;
        Token ADD_SYM598=null;
        Token set599=null;
        Token LPAREN602=null;
        Token RPAREN604=null;
        Token ADD_SYM606=null;
        Token CONSTRAINT607=null;
        Token PRIMARY_SYM609=null;
        Token KEY_SYM610=null;
        Token LPAREN612=null;
        Token RPAREN614=null;
        Token ADD_SYM616=null;
        Token CONSTRAINT617=null;
        Token UNIQUE_SYM619=null;
        Token set620=null;
        Token LPAREN623=null;
        Token COMMA625=null;
        Token RPAREN627=null;
        Token ADD_SYM629=null;
        Token FULLTEXT_SYM630=null;
        Token set631=null;
        Token LPAREN633=null;
        Token RPAREN635=null;
        Token ADD_SYM637=null;
        Token SPATIAL_SYM638=null;
        Token set639=null;
        Token LPAREN641=null;
        Token RPAREN643=null;
        Token ADD_SYM645=null;
        Token CONSTRAINT646=null;
        Token FOREIGN648=null;
        Token KEY_SYM649=null;
        Token LPAREN651=null;
        Token RPAREN653=null;
        Token ALGORITHM_SYM655=null;
        Token EQ_SYM656=null;
        Token set657=null;
        Token ALTER658=null;
        Token COLUMN_SYM659=null;
        Token SET_SYM661=null;
        Token DEFAULT662=null;
        Token DROP664=null;
        Token DEFAULT665=null;
        Token CHANGE666=null;
        Token COLUMN_SYM667=null;
        Token FIRST_SYM671=null;
        Token AFTER_SYM672=null;
        Token LOCK674=null;
        Token EQ_SYM675=null;
        Token set676=null;
        Token MODIFY_SYM677=null;
        Token COLUMN_SYM678=null;
        Token FIRST_SYM681=null;
        Token AFTER_SYM682=null;
        Token DROP684=null;
        Token COLUMN_SYM685=null;
        Token DROP687=null;
        Token PRIMARY_SYM688=null;
        Token KEY_SYM689=null;
        Token DROP690=null;
        Token set691=null;
        Token DROP693=null;
        Token FOREIGN694=null;
        Token KEY_SYM695=null;
        Token DISABLE_SYM697=null;
        Token KEYS698=null;
        Token ENABLE_SYM699=null;
        Token KEYS700=null;
        Token RENAME701=null;
        Token set702=null;
        Token ORDER_SYM704=null;
        Token BY_SYM705=null;
        Token COMMA707=null;
        Token CONVERT_SYM709=null;
        Token TO_SYM710=null;
        Token CHARACTER_SYM711=null;
        Token SET_SYM712=null;
        Token COLLATE_SYM714=null;
        Token DEFAULT716=null;
        Token CHARACTER_SYM717=null;
        Token SET_SYM718=null;
        Token EQ_SYM719=null;
        Token COLLATE_SYM721=null;
        Token EQ_SYM722=null;
        Token DISCARD724=null;
        Token TABLESPACE725=null;
        Token IMPORT726=null;
        Token TABLESPACE727=null;
        Token FORCE_SYM728=null;
        Token ADD_SYM729=null;
        Token PARTITION_SYM730=null;
        Token LPAREN731=null;
        Token RPAREN733=null;
        Token DROP734=null;
        Token PARTITION_SYM735=null;
        Token TRUNCATE737=null;
        Token PARTITION_SYM738=null;
        Token ALL740=null;
        Token COALESCE741=null;
        Token PARTITION_SYM742=null;
        Token INTEGER_NUM743=null;
        Token REORGANIZE_SYM744=null;
        Token PARTITION_SYM745=null;
        Token INTO747=null;
        Token LPAREN748=null;
        Token COMMA750=null;
        Token RPAREN752=null;
        Token EXCHANGE_SYM753=null;
        Token PARTITION_SYM754=null;
        Token WITH756=null;
        Token TABLE757=null;
        Token ANALYZE_SYM759=null;
        Token PARTITION_SYM760=null;
        Token ALL762=null;
        Token CHECK_SYM763=null;
        Token PARTITION_SYM764=null;
        Token ALL766=null;
        Token OPTIMIZE767=null;
        Token PARTITION_SYM768=null;
        Token ALL770=null;
        Token REBUILD_SYM771=null;
        Token PARTITION_SYM772=null;
        Token ALL774=null;
        Token REPAIR775=null;
        Token PARTITION_SYM776=null;
        Token ALL778=null;
        Token REMOVE_SYM779=null;
        Token PARTITIONING_SYM780=null;
        MySQL_SQLParser2.table_options_return table_options586 = null;

        MySQLParser.column_name_return column_name589 = null;

        MySQL_SQLParser2.column_definition_return column_definition590 = null;

        MySQLParser.column_name_return column_name592 = null;

        MySQL_SQLParser2.column_definitions_return column_definitions596 = null;

        MySQLParser.index_name_return index_name600 = null;

        MySQL_SQLParser2.index_type_return index_type601 = null;

        MySQL_SQLParser2.index_column_names_return index_column_names603 = null;

        MySQL_SQLParser2.index_option_return index_option605 = null;

        MySQLParser.constraint_symbol_name_return constraint_symbol_name608 = null;

        MySQL_SQLParser2.index_type_return index_type611 = null;

        MySQL_SQLParser2.index_column_names_return index_column_names613 = null;

        MySQL_SQLParser2.index_option_return index_option615 = null;

        MySQLParser.constraint_symbol_name_return constraint_symbol_name618 = null;

        MySQLParser.index_name_return index_name621 = null;

        MySQL_SQLParser2.index_type_return index_type622 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name624 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name626 = null;

        MySQL_SQLParser2.index_option_return index_option628 = null;

        MySQLParser.index_name_return index_name632 = null;

        MySQL_SQLParser2.index_column_names_return index_column_names634 = null;

        MySQL_SQLParser2.index_option_return index_option636 = null;

        MySQLParser.index_name_return index_name640 = null;

        MySQL_SQLParser2.index_column_names_return index_column_names642 = null;

        MySQL_SQLParser2.index_option_return index_option644 = null;

        MySQLParser.constraint_symbol_name_return constraint_symbol_name647 = null;

        MySQLParser.index_name_return index_name650 = null;

        MySQL_SQLParser2.index_column_names_return index_column_names652 = null;

        MySQL_SQLParser2.reference_definition_return reference_definition654 = null;

        MySQLParser.column_name_return column_name660 = null;

        MySQLParser.literal_value_return literal_value663 = null;

        MySQLParser.column_name_return column_name668 = null;

        MySQLParser.column_name_return column_name669 = null;

        MySQL_SQLParser2.column_definition_return column_definition670 = null;

        MySQLParser.column_name_return column_name673 = null;

        MySQLParser.column_name_return column_name679 = null;

        MySQL_SQLParser2.column_definition_return column_definition680 = null;

        MySQLParser.column_name_return column_name683 = null;

        MySQLParser.column_name_return column_name686 = null;

        MySQLParser.index_name_return index_name692 = null;

        MySQLParser.foreign_key_symbol_name_return foreign_key_symbol_name696 = null;

        MySQLParser.table_name_return table_name703 = null;

        MySQLParser.column_name_return column_name706 = null;

        MySQLParser.column_name_return column_name708 = null;

        MySQLParser.charset_name_return charset_name713 = null;

        MySQLParser.collation_name_return collation_name715 = null;

        MySQLParser.charset_name_return charset_name720 = null;

        MySQLParser.collation_name_return collation_name723 = null;

        MySQL_SQLParser2.partition_definition_return partition_definition732 = null;

        MySQLParser.partition_names_return partition_names736 = null;

        MySQLParser.partition_names_return partition_names739 = null;

        MySQLParser.partition_names_return partition_names746 = null;

        MySQL_SQLParser2.partition_definition_return partition_definition749 = null;

        MySQL_SQLParser2.partition_definition_return partition_definition751 = null;

        MySQLParser.partition_name_return partition_name755 = null;

        MySQLParser.table_name_return table_name758 = null;

        MySQLParser.partition_names_return partition_names761 = null;

        MySQLParser.partition_names_return partition_names765 = null;

        MySQLParser.partition_names_return partition_names769 = null;

        MySQLParser.partition_names_return partition_names773 = null;

        MySQLParser.partition_names_return partition_names777 = null;


        CommonTree ADD_SYM587_tree=null;
        CommonTree COLUMN_SYM588_tree=null;
        CommonTree set591_tree=null;
        CommonTree ADD_SYM593_tree=null;
        CommonTree COLUMN_SYM594_tree=null;
        CommonTree LPAREN595_tree=null;
        CommonTree RPAREN597_tree=null;
        CommonTree ADD_SYM598_tree=null;
        CommonTree set599_tree=null;
        CommonTree LPAREN602_tree=null;
        CommonTree RPAREN604_tree=null;
        CommonTree ADD_SYM606_tree=null;
        CommonTree CONSTRAINT607_tree=null;
        CommonTree PRIMARY_SYM609_tree=null;
        CommonTree KEY_SYM610_tree=null;
        CommonTree LPAREN612_tree=null;
        CommonTree RPAREN614_tree=null;
        CommonTree ADD_SYM616_tree=null;
        CommonTree CONSTRAINT617_tree=null;
        CommonTree UNIQUE_SYM619_tree=null;
        CommonTree set620_tree=null;
        CommonTree LPAREN623_tree=null;
        CommonTree COMMA625_tree=null;
        CommonTree RPAREN627_tree=null;
        CommonTree ADD_SYM629_tree=null;
        CommonTree FULLTEXT_SYM630_tree=null;
        CommonTree set631_tree=null;
        CommonTree LPAREN633_tree=null;
        CommonTree RPAREN635_tree=null;
        CommonTree ADD_SYM637_tree=null;
        CommonTree SPATIAL_SYM638_tree=null;
        CommonTree set639_tree=null;
        CommonTree LPAREN641_tree=null;
        CommonTree RPAREN643_tree=null;
        CommonTree ADD_SYM645_tree=null;
        CommonTree CONSTRAINT646_tree=null;
        CommonTree FOREIGN648_tree=null;
        CommonTree KEY_SYM649_tree=null;
        CommonTree LPAREN651_tree=null;
        CommonTree RPAREN653_tree=null;
        CommonTree ALGORITHM_SYM655_tree=null;
        CommonTree EQ_SYM656_tree=null;
        CommonTree set657_tree=null;
        CommonTree ALTER658_tree=null;
        CommonTree COLUMN_SYM659_tree=null;
        CommonTree SET_SYM661_tree=null;
        CommonTree DEFAULT662_tree=null;
        CommonTree DROP664_tree=null;
        CommonTree DEFAULT665_tree=null;
        CommonTree CHANGE666_tree=null;
        CommonTree COLUMN_SYM667_tree=null;
        CommonTree FIRST_SYM671_tree=null;
        CommonTree AFTER_SYM672_tree=null;
        CommonTree LOCK674_tree=null;
        CommonTree EQ_SYM675_tree=null;
        CommonTree set676_tree=null;
        CommonTree MODIFY_SYM677_tree=null;
        CommonTree COLUMN_SYM678_tree=null;
        CommonTree FIRST_SYM681_tree=null;
        CommonTree AFTER_SYM682_tree=null;
        CommonTree DROP684_tree=null;
        CommonTree COLUMN_SYM685_tree=null;
        CommonTree DROP687_tree=null;
        CommonTree PRIMARY_SYM688_tree=null;
        CommonTree KEY_SYM689_tree=null;
        CommonTree DROP690_tree=null;
        CommonTree set691_tree=null;
        CommonTree DROP693_tree=null;
        CommonTree FOREIGN694_tree=null;
        CommonTree KEY_SYM695_tree=null;
        CommonTree DISABLE_SYM697_tree=null;
        CommonTree KEYS698_tree=null;
        CommonTree ENABLE_SYM699_tree=null;
        CommonTree KEYS700_tree=null;
        CommonTree RENAME701_tree=null;
        CommonTree set702_tree=null;
        CommonTree ORDER_SYM704_tree=null;
        CommonTree BY_SYM705_tree=null;
        CommonTree COMMA707_tree=null;
        CommonTree CONVERT_SYM709_tree=null;
        CommonTree TO_SYM710_tree=null;
        CommonTree CHARACTER_SYM711_tree=null;
        CommonTree SET_SYM712_tree=null;
        CommonTree COLLATE_SYM714_tree=null;
        CommonTree DEFAULT716_tree=null;
        CommonTree CHARACTER_SYM717_tree=null;
        CommonTree SET_SYM718_tree=null;
        CommonTree EQ_SYM719_tree=null;
        CommonTree COLLATE_SYM721_tree=null;
        CommonTree EQ_SYM722_tree=null;
        CommonTree DISCARD724_tree=null;
        CommonTree TABLESPACE725_tree=null;
        CommonTree IMPORT726_tree=null;
        CommonTree TABLESPACE727_tree=null;
        CommonTree FORCE_SYM728_tree=null;
        CommonTree ADD_SYM729_tree=null;
        CommonTree PARTITION_SYM730_tree=null;
        CommonTree LPAREN731_tree=null;
        CommonTree RPAREN733_tree=null;
        CommonTree DROP734_tree=null;
        CommonTree PARTITION_SYM735_tree=null;
        CommonTree TRUNCATE737_tree=null;
        CommonTree PARTITION_SYM738_tree=null;
        CommonTree ALL740_tree=null;
        CommonTree COALESCE741_tree=null;
        CommonTree PARTITION_SYM742_tree=null;
        CommonTree INTEGER_NUM743_tree=null;
        CommonTree REORGANIZE_SYM744_tree=null;
        CommonTree PARTITION_SYM745_tree=null;
        CommonTree INTO747_tree=null;
        CommonTree LPAREN748_tree=null;
        CommonTree COMMA750_tree=null;
        CommonTree RPAREN752_tree=null;
        CommonTree EXCHANGE_SYM753_tree=null;
        CommonTree PARTITION_SYM754_tree=null;
        CommonTree WITH756_tree=null;
        CommonTree TABLE757_tree=null;
        CommonTree ANALYZE_SYM759_tree=null;
        CommonTree PARTITION_SYM760_tree=null;
        CommonTree ALL762_tree=null;
        CommonTree CHECK_SYM763_tree=null;
        CommonTree PARTITION_SYM764_tree=null;
        CommonTree ALL766_tree=null;
        CommonTree OPTIMIZE767_tree=null;
        CommonTree PARTITION_SYM768_tree=null;
        CommonTree ALL770_tree=null;
        CommonTree REBUILD_SYM771_tree=null;
        CommonTree PARTITION_SYM772_tree=null;
        CommonTree ALL774_tree=null;
        CommonTree REPAIR775_tree=null;
        CommonTree PARTITION_SYM776_tree=null;
        CommonTree ALL778_tree=null;
        CommonTree REMOVE_SYM779_tree=null;
        CommonTree PARTITIONING_SYM780_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }
            // SQLParser2.g:201:26: ( table_options | ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? ) | ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN ) | ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition ) | ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ) | ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) ) | ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ) | ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( DROP ( COLUMN_SYM )? column_name ) | ( DROP PRIMARY_SYM KEY_SYM ) | ( DROP ( INDEX_SYM | KEY_SYM ) index_name ) | ( DROP FOREIGN KEY_SYM foreign_key_symbol_name ) | ( DISABLE_SYM KEYS ) | ( ENABLE_SYM KEYS ) | ( RENAME ( TO_SYM | AS_SYM )? table_name ) | ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* ) | ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) | ( DISCARD TABLESPACE ) | ( IMPORT TABLESPACE ) | ( FORCE_SYM ) | ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN ) | ( DROP PARTITION_SYM partition_names ) | ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) ) | ( COALESCE PARTITION_SYM INTEGER_NUM ) | ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN ) | ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name ) | ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) ) | ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( REPAIR PARTITION_SYM ( partition_names | ALL ) ) | ( REMOVE_SYM PARTITIONING_SYM ) )
            int alt296=39;
            alt296 = dfa296.predict(input);
            switch (alt296) {
                case 1 :
                    // SQLParser2.g:202:4: table_options
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_table_options_in_alter_table_specification2918);
                    table_options586=table_options();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options586.getTree());

                    }
                    break;
                case 2 :
                    // SQLParser2.g:203:4: ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:203:4: ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? )
                    // SQLParser2.g:203:6: ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )?
                    {
                    ADD_SYM587=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification2925); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADD_SYM587_tree = (CommonTree)adaptor.create(ADD_SYM587);
                    adaptor.addChild(root_0, ADD_SYM587_tree);
                    }
                    // SQLParser2.g:203:14: ( COLUMN_SYM )?
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==COLUMN_SYM) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            // SQLParser2.g:203:15: COLUMN_SYM
                            {
                            COLUMN_SYM588=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification2928); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLUMN_SYM588_tree = (CommonTree)adaptor.create(COLUMN_SYM588);
                            adaptor.addChild(root_0, COLUMN_SYM588_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_column_name_in_alter_table_specification2932);
                    column_name589=gMySQL.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name589.getTree());
                    pushFollow(FOLLOW_column_definition_in_alter_table_specification2934);
                    column_definition590=column_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition590.getTree());
                    // SQLParser2.g:203:58: ( ( FIRST_SYM | AFTER_SYM ) column_name )?
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==AFTER_SYM||LA248_0==FIRST_SYM) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            // SQLParser2.g:203:60: ( FIRST_SYM | AFTER_SYM ) column_name
                            {
                            set591=(Token)input.LT(1);
                            if ( input.LA(1)==AFTER_SYM||input.LA(1)==FIRST_SYM ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set591));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }

                            pushFollow(FOLLOW_column_name_in_alter_table_specification2944);
                            column_name592=gMySQL.column_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name592.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // SQLParser2.g:204:4: ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:204:4: ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN )
                    // SQLParser2.g:204:6: ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN
                    {
                    ADD_SYM593=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification2956); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADD_SYM593_tree = (CommonTree)adaptor.create(ADD_SYM593);
                    adaptor.addChild(root_0, ADD_SYM593_tree);
                    }
                    // SQLParser2.g:204:14: ( COLUMN_SYM )?
                    int alt249=2;
                    int LA249_0 = input.LA(1);

                    if ( (LA249_0==COLUMN_SYM) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            // SQLParser2.g:204:15: COLUMN_SYM
                            {
                            COLUMN_SYM594=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification2959); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLUMN_SYM594_tree = (CommonTree)adaptor.create(COLUMN_SYM594);
                            adaptor.addChild(root_0, COLUMN_SYM594_tree);
                            }

                            }
                            break;

                    }

                    LPAREN595=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification2963); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN595_tree = (CommonTree)adaptor.create(LPAREN595);
                    adaptor.addChild(root_0, LPAREN595_tree);
                    }
                    pushFollow(FOLLOW_column_definitions_in_alter_table_specification2965);
                    column_definitions596=column_definitions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definitions596.getTree());
                    RPAREN597=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification2967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN597_tree = (CommonTree)adaptor.create(RPAREN597);
                    adaptor.addChild(root_0, RPAREN597_tree);
                    }

                    }


                    }
                    break;
                case 4 :
                    // SQLParser2.g:205:4: ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:205:4: ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
                    // SQLParser2.g:205:6: ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )*
                    {
                    ADD_SYM598=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification2976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADD_SYM598_tree = (CommonTree)adaptor.create(ADD_SYM598);
                    adaptor.addChild(root_0, ADD_SYM598_tree);
                    }
                    set599=(Token)input.LT(1);
                    if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set599));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // SQLParser2.g:205:34: ( index_name )?
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==ID) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            // SQLParser2.g:205:35: index_name
                            {
                            pushFollow(FOLLOW_index_name_in_alter_table_specification2985);
                            index_name600=gMySQL.index_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name600.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:205:48: ( index_type )?
                    int alt251=2;
                    int LA251_0 = input.LA(1);

                    if ( (LA251_0==USING_SYM) ) {
                        alt251=1;
                    }
                    switch (alt251) {
                        case 1 :
                            // SQLParser2.g:205:49: index_type
                            {
                            pushFollow(FOLLOW_index_type_in_alter_table_specification2990);
                            index_type601=index_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type601.getTree());

                            }
                            break;

                    }

                    LPAREN602=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification2994); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN602_tree = (CommonTree)adaptor.create(LPAREN602);
                    adaptor.addChild(root_0, LPAREN602_tree);
                    }
                    pushFollow(FOLLOW_index_column_names_in_alter_table_specification2996);
                    index_column_names603=index_column_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names603.getTree());
                    RPAREN604=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification2998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN604_tree = (CommonTree)adaptor.create(RPAREN604);
                    adaptor.addChild(root_0, RPAREN604_tree);
                    }
                    // SQLParser2.g:205:95: ( index_option )*
                    loop252:
                    do {
                        int alt252=2;
                        int LA252_0 = input.LA(1);

                        if ( (LA252_0==COMMENT_SYM||LA252_0==KEY_BLOCK_SIZE||LA252_0==USING_SYM||LA252_0==WITH) ) {
                            alt252=1;
                        }


                        switch (alt252) {
                    	case 1 :
                    	    // SQLParser2.g:205:96: index_option
                    	    {
                    	    pushFollow(FOLLOW_index_option_in_alter_table_specification3001);
                    	    index_option605=index_option();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option605.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop252;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 5 :
                    // SQLParser2.g:206:4: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:206:4: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
                    // SQLParser2.g:206:6: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )*
                    {
                    ADD_SYM606=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification3012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADD_SYM606_tree = (CommonTree)adaptor.create(ADD_SYM606);
                    adaptor.addChild(root_0, ADD_SYM606_tree);
                    }
                    // SQLParser2.g:206:14: ( CONSTRAINT ( constraint_symbol_name )? )?
                    int alt254=2;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==CONSTRAINT) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            // SQLParser2.g:206:15: CONSTRAINT ( constraint_symbol_name )?
                            {
                            CONSTRAINT607=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification3015); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CONSTRAINT607_tree = (CommonTree)adaptor.create(CONSTRAINT607);
                            adaptor.addChild(root_0, CONSTRAINT607_tree);
                            }
                            // SQLParser2.g:206:26: ( constraint_symbol_name )?
                            int alt253=2;
                            int LA253_0 = input.LA(1);

                            if ( (LA253_0==ID) ) {
                                alt253=1;
                            }
                            switch (alt253) {
                                case 1 :
                                    // SQLParser2.g:206:27: constraint_symbol_name
                                    {
                                    pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification3018);
                                    constraint_symbol_name608=gMySQL.constraint_symbol_name();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name608.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    PRIMARY_SYM609=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_alter_table_specification3024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIMARY_SYM609_tree = (CommonTree)adaptor.create(PRIMARY_SYM609);
                    adaptor.addChild(root_0, PRIMARY_SYM609_tree);
                    }
                    KEY_SYM610=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification3026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEY_SYM610_tree = (CommonTree)adaptor.create(KEY_SYM610);
                    adaptor.addChild(root_0, KEY_SYM610_tree);
                    }
                    // SQLParser2.g:206:74: ( index_type )?
                    int alt255=2;
                    int LA255_0 = input.LA(1);

                    if ( (LA255_0==USING_SYM) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            // SQLParser2.g:206:75: index_type
                            {
                            pushFollow(FOLLOW_index_type_in_alter_table_specification3029);
                            index_type611=index_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type611.getTree());

                            }
                            break;

                    }

                    LPAREN612=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification3033); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN612_tree = (CommonTree)adaptor.create(LPAREN612);
                    adaptor.addChild(root_0, LPAREN612_tree);
                    }
                    pushFollow(FOLLOW_index_column_names_in_alter_table_specification3035);
                    index_column_names613=index_column_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names613.getTree());
                    RPAREN614=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification3037); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN614_tree = (CommonTree)adaptor.create(RPAREN614);
                    adaptor.addChild(root_0, RPAREN614_tree);
                    }
                    // SQLParser2.g:206:121: ( index_option )*
                    loop256:
                    do {
                        int alt256=2;
                        int LA256_0 = input.LA(1);

                        if ( (LA256_0==COMMENT_SYM||LA256_0==KEY_BLOCK_SIZE||LA256_0==USING_SYM||LA256_0==WITH) ) {
                            alt256=1;
                        }


                        switch (alt256) {
                    	case 1 :
                    	    // SQLParser2.g:206:122: index_option
                    	    {
                    	    pushFollow(FOLLOW_index_option_in_alter_table_specification3040);
                    	    index_option615=index_option();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option615.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop256;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 6 :
                    // SQLParser2.g:208:3: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:208:3: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
                    // SQLParser2.g:209:3: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
                    {
                    ADD_SYM616=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification3057); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADD_SYM616_tree = (CommonTree)adaptor.create(ADD_SYM616);
                    adaptor.addChild(root_0, ADD_SYM616_tree);
                    }
                    // SQLParser2.g:209:11: ( CONSTRAINT ( constraint_symbol_name )? )?
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==CONSTRAINT) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            // SQLParser2.g:209:12: CONSTRAINT ( constraint_symbol_name )?
                            {
                            CONSTRAINT617=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification3060); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CONSTRAINT617_tree = (CommonTree)adaptor.create(CONSTRAINT617);
                            adaptor.addChild(root_0, CONSTRAINT617_tree);
                            }
                            // SQLParser2.g:209:23: ( constraint_symbol_name )?
                            int alt257=2;
                            int LA257_0 = input.LA(1);

                            if ( (LA257_0==ID) ) {
                                alt257=1;
                            }
                            switch (alt257) {
                                case 1 :
                                    // SQLParser2.g:209:24: constraint_symbol_name
                                    {
                                    pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification3063);
                                    constraint_symbol_name618=gMySQL.constraint_symbol_name();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name618.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    UNIQUE_SYM619=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_alter_table_specification3069); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIQUE_SYM619_tree = (CommonTree)adaptor.create(UNIQUE_SYM619);
                    adaptor.addChild(root_0, UNIQUE_SYM619_tree);
                    }
                    // SQLParser2.g:209:62: ( INDEX_SYM | KEY_SYM )?
                    int alt259=2;
                    int LA259_0 = input.LA(1);

                    if ( (LA259_0==INDEX_SYM||LA259_0==KEY_SYM) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            // SQLParser2.g:
                            {
                            set620=(Token)input.LT(1);
                            if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set620));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    // SQLParser2.g:209:83: ( index_name )?
                    int alt260=2;
                    int LA260_0 = input.LA(1);

                    if ( (LA260_0==ID) ) {
                        alt260=1;
                    }
                    switch (alt260) {
                        case 1 :
                            // SQLParser2.g:209:84: index_name
                            {
                            pushFollow(FOLLOW_index_name_in_alter_table_specification3079);
                            index_name621=gMySQL.index_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name621.getTree());

                            }
                            break;

                    }

                    // SQLParser2.g:210:3: ( index_type )?
                    int alt261=2;
                    int LA261_0 = input.LA(1);

                    if ( (LA261_0==USING_SYM) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            // SQLParser2.g:210:4: index_type
                            {
                            pushFollow(FOLLOW_index_type_in_alter_table_specification3087);
                            index_type622=index_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type622.getTree());

                            }
                            break;

                    }

                    LPAREN623=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification3091); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN623_tree = (CommonTree)adaptor.create(LPAREN623);
                    adaptor.addChild(root_0, LPAREN623_tree);
                    }
                    pushFollow(FOLLOW_index_column_name_in_alter_table_specification3093);
                    index_column_name624=index_column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name624.getTree());
                    // SQLParser2.g:210:42: ( COMMA index_column_name )*
                    loop262:
                    do {
                        int alt262=2;
                        int LA262_0 = input.LA(1);

                        if ( (LA262_0==COMMA) ) {
                            alt262=1;
                        }


                        switch (alt262) {
                    	case 1 :
                    	    // SQLParser2.g:210:43: COMMA index_column_name
                    	    {
                    	    COMMA625=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification3096); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA625_tree = (CommonTree)adaptor.create(COMMA625);
                    	    adaptor.addChild(root_0, COMMA625_tree);
                    	    }
                    	    pushFollow(FOLLOW_index_column_name_in_alter_table_specification3098);
                    	    index_column_name626=index_column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name626.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop262;
                        }
                    } while (true);

                    RPAREN627=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification3102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN627_tree = (CommonTree)adaptor.create(RPAREN627);
                    adaptor.addChild(root_0, RPAREN627_tree);
                    }
                    // SQLParser2.g:210:76: ( index_option )*
                    loop263:
                    do {
                        int alt263=2;
                        int LA263_0 = input.LA(1);

                        if ( (LA263_0==COMMENT_SYM||LA263_0==KEY_BLOCK_SIZE||LA263_0==USING_SYM||LA263_0==WITH) ) {
                            alt263=1;
                        }


                        switch (alt263) {
                    	case 1 :
                    	    // SQLParser2.g:210:77: index_option
                    	    {
                    	    pushFollow(FOLLOW_index_option_in_alter_table_specification3105);
                    	    index_option628=index_option();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option628.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop263;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 7 :
                    // SQLParser2.g:212:4: ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:212:4: ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
                    // SQLParser2.g:212:6: ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )*
                    {
                    ADD_SYM629=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification3118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADD_SYM629_tree = (CommonTree)adaptor.create(ADD_SYM629);
                    adaptor.addChild(root_0, ADD_SYM629_tree);
                    }
                    FULLTEXT_SYM630=(Token)match(input,FULLTEXT_SYM,FOLLOW_FULLTEXT_SYM_in_alter_table_specification3120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULLTEXT_SYM630_tree = (CommonTree)adaptor.create(FULLTEXT_SYM630);
                    adaptor.addChild(root_0, FULLTEXT_SYM630_tree);
                    }
                    // SQLParser2.g:212:27: ( INDEX_SYM | KEY_SYM )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==INDEX_SYM||LA264_0==KEY_SYM) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            // SQLParser2.g:
                            {
                            set631=(Token)input.LT(1);
                            if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set631));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    // SQLParser2.g:212:48: ( index_name )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==ID) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // SQLParser2.g:212:49: index_name
                            {
                            pushFollow(FOLLOW_index_name_in_alter_table_specification3130);
                            index_name632=gMySQL.index_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name632.getTree());

                            }
                            break;

                    }

                    LPAREN633=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification3134); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN633_tree = (CommonTree)adaptor.create(LPAREN633);
                    adaptor.addChild(root_0, LPAREN633_tree);
                    }
                    pushFollow(FOLLOW_index_column_names_in_alter_table_specification3136);
                    index_column_names634=index_column_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names634.getTree());
                    RPAREN635=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification3138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN635_tree = (CommonTree)adaptor.create(RPAREN635);
                    adaptor.addChild(root_0, RPAREN635_tree);
                    }
                    // SQLParser2.g:212:95: ( index_option )*
                    loop266:
                    do {
                        int alt266=2;
                        int LA266_0 = input.LA(1);

                        if ( (LA266_0==COMMENT_SYM||LA266_0==KEY_BLOCK_SIZE||LA266_0==USING_SYM||LA266_0==WITH) ) {
                            alt266=1;
                        }


                        switch (alt266) {
                    	case 1 :
                    	    // SQLParser2.g:212:96: index_option
                    	    {
                    	    pushFollow(FOLLOW_index_option_in_alter_table_specification3141);
                    	    index_option636=index_option();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option636.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop266;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 8 :
                    // SQLParser2.g:213:4: ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:213:4: ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
                    // SQLParser2.g:213:6: ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )*
                    {
                    ADD_SYM637=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification3152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADD_SYM637_tree = (CommonTree)adaptor.create(ADD_SYM637);
                    adaptor.addChild(root_0, ADD_SYM637_tree);
                    }
                    SPATIAL_SYM638=(Token)match(input,SPATIAL_SYM,FOLLOW_SPATIAL_SYM_in_alter_table_specification3154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPATIAL_SYM638_tree = (CommonTree)adaptor.create(SPATIAL_SYM638);
                    adaptor.addChild(root_0, SPATIAL_SYM638_tree);
                    }
                    // SQLParser2.g:213:26: ( INDEX_SYM | KEY_SYM )?
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==INDEX_SYM||LA267_0==KEY_SYM) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            // SQLParser2.g:
                            {
                            set639=(Token)input.LT(1);
                            if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set639));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    // SQLParser2.g:213:47: ( index_name )?
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==ID) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            // SQLParser2.g:213:48: index_name
                            {
                            pushFollow(FOLLOW_index_name_in_alter_table_specification3164);
                            index_name640=gMySQL.index_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name640.getTree());

                            }
                            break;

                    }

                    LPAREN641=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification3168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN641_tree = (CommonTree)adaptor.create(LPAREN641);
                    adaptor.addChild(root_0, LPAREN641_tree);
                    }
                    pushFollow(FOLLOW_index_column_names_in_alter_table_specification3170);
                    index_column_names642=index_column_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names642.getTree());
                    RPAREN643=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification3172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN643_tree = (CommonTree)adaptor.create(RPAREN643);
                    adaptor.addChild(root_0, RPAREN643_tree);
                    }
                    // SQLParser2.g:213:94: ( index_option )*
                    loop269:
                    do {
                        int alt269=2;
                        int LA269_0 = input.LA(1);

                        if ( (LA269_0==COMMENT_SYM||LA269_0==KEY_BLOCK_SIZE||LA269_0==USING_SYM||LA269_0==WITH) ) {
                            alt269=1;
                        }


                        switch (alt269) {
                    	case 1 :
                    	    // SQLParser2.g:213:95: index_option
                    	    {
                    	    pushFollow(FOLLOW_index_option_in_alter_table_specification3175);
                    	    index_option644=index_option();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option644.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop269;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 9 :
                    // SQLParser2.g:214:4: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:214:4: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition )
                    // SQLParser2.g:214:6: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition
                    {
                    ADD_SYM645=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification3186); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADD_SYM645_tree = (CommonTree)adaptor.create(ADD_SYM645);
                    adaptor.addChild(root_0, ADD_SYM645_tree);
                    }
                    // SQLParser2.g:214:14: ( CONSTRAINT ( constraint_symbol_name )? )?
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==CONSTRAINT) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            // SQLParser2.g:214:15: CONSTRAINT ( constraint_symbol_name )?
                            {
                            CONSTRAINT646=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification3189); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CONSTRAINT646_tree = (CommonTree)adaptor.create(CONSTRAINT646);
                            adaptor.addChild(root_0, CONSTRAINT646_tree);
                            }
                            // SQLParser2.g:214:26: ( constraint_symbol_name )?
                            int alt270=2;
                            int LA270_0 = input.LA(1);

                            if ( (LA270_0==ID) ) {
                                alt270=1;
                            }
                            switch (alt270) {
                                case 1 :
                                    // SQLParser2.g:214:27: constraint_symbol_name
                                    {
                                    pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification3192);
                                    constraint_symbol_name647=gMySQL.constraint_symbol_name();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name647.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    FOREIGN648=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_alter_table_specification3198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREIGN648_tree = (CommonTree)adaptor.create(FOREIGN648);
                    adaptor.addChild(root_0, FOREIGN648_tree);
                    }
                    KEY_SYM649=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification3200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEY_SYM649_tree = (CommonTree)adaptor.create(KEY_SYM649);
                    adaptor.addChild(root_0, KEY_SYM649_tree);
                    }
                    // SQLParser2.g:214:70: ( index_name )?
                    int alt272=2;
                    int LA272_0 = input.LA(1);

                    if ( (LA272_0==ID) ) {
                        alt272=1;
                    }
                    switch (alt272) {
                        case 1 :
                            // SQLParser2.g:214:71: index_name
                            {
                            pushFollow(FOLLOW_index_name_in_alter_table_specification3203);
                            index_name650=gMySQL.index_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name650.getTree());

                            }
                            break;

                    }

                    LPAREN651=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification3207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN651_tree = (CommonTree)adaptor.create(LPAREN651);
                    adaptor.addChild(root_0, LPAREN651_tree);
                    }
                    pushFollow(FOLLOW_index_column_names_in_alter_table_specification3209);
                    index_column_names652=index_column_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names652.getTree());
                    RPAREN653=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification3211); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN653_tree = (CommonTree)adaptor.create(RPAREN653);
                    adaptor.addChild(root_0, RPAREN653_tree);
                    }
                    pushFollow(FOLLOW_reference_definition_in_alter_table_specification3213);
                    reference_definition654=reference_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition654.getTree());

                    }


                    }
                    break;
                case 10 :
                    // SQLParser2.g:215:4: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:215:4: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
                    // SQLParser2.g:215:6: ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM )
                    {
                    ALGORITHM_SYM655=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_alter_table_specification3222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALGORITHM_SYM655_tree = (CommonTree)adaptor.create(ALGORITHM_SYM655);
                    adaptor.addChild(root_0, ALGORITHM_SYM655_tree);
                    }
                    // SQLParser2.g:215:20: ( EQ_SYM )?
                    int alt273=2;
                    int LA273_0 = input.LA(1);

                    if ( (LA273_0==EQ_SYM) ) {
                        alt273=1;
                    }
                    switch (alt273) {
                        case 1 :
                            // SQLParser2.g:215:21: EQ_SYM
                            {
                            EQ_SYM656=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification3225); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM656_tree = (CommonTree)adaptor.create(EQ_SYM656);
                            adaptor.addChild(root_0, EQ_SYM656_tree);
                            }

                            }
                            break;

                    }

                    set657=(Token)input.LT(1);
                    if ( input.LA(1)==COPY_SYM||input.LA(1)==DEFAULT||input.LA(1)==INPLACE_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set657));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }


                    }
                    break;
                case 11 :
                    // SQLParser2.g:216:4: ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:216:4: ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) )
                    // SQLParser2.g:216:6: ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) )
                    {
                    ALTER658=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_table_specification3244); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALTER658_tree = (CommonTree)adaptor.create(ALTER658);
                    adaptor.addChild(root_0, ALTER658_tree);
                    }
                    // SQLParser2.g:216:12: ( COLUMN_SYM )?
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==COLUMN_SYM) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            // SQLParser2.g:216:13: COLUMN_SYM
                            {
                            COLUMN_SYM659=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification3247); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLUMN_SYM659_tree = (CommonTree)adaptor.create(COLUMN_SYM659);
                            adaptor.addChild(root_0, COLUMN_SYM659_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_column_name_in_alter_table_specification3251);
                    column_name660=gMySQL.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name660.getTree());
                    // SQLParser2.g:216:38: ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) )
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==SET_SYM) ) {
                        alt275=1;
                    }
                    else if ( (LA275_0==DROP) ) {
                        alt275=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 275, 0, input);

                        throw nvae;
                    }
                    switch (alt275) {
                        case 1 :
                            // SQLParser2.g:216:39: ( SET_SYM DEFAULT literal_value )
                            {
                            // SQLParser2.g:216:39: ( SET_SYM DEFAULT literal_value )
                            // SQLParser2.g:216:40: SET_SYM DEFAULT literal_value
                            {
                            SET_SYM661=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification3255); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SET_SYM661_tree = (CommonTree)adaptor.create(SET_SYM661);
                            adaptor.addChild(root_0, SET_SYM661_tree);
                            }
                            DEFAULT662=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification3257); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT662_tree = (CommonTree)adaptor.create(DEFAULT662);
                            adaptor.addChild(root_0, DEFAULT662_tree);
                            }
                            pushFollow(FOLLOW_literal_value_in_alter_table_specification3259);
                            literal_value663=gMySQL.literal_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_value663.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // SQLParser2.g:216:73: ( DROP DEFAULT )
                            {
                            // SQLParser2.g:216:73: ( DROP DEFAULT )
                            // SQLParser2.g:216:74: DROP DEFAULT
                            {
                            DROP664=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification3265); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DROP664_tree = (CommonTree)adaptor.create(DROP664);
                            adaptor.addChild(root_0, DROP664_tree);
                            }
                            DEFAULT665=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification3267); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT665_tree = (CommonTree)adaptor.create(DEFAULT665);
                            adaptor.addChild(root_0, DEFAULT665_tree);
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 12 :
                    // SQLParser2.g:217:4: ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:217:4: ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
                    // SQLParser2.g:217:6: CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )?
                    {
                    CHANGE666=(Token)match(input,CHANGE,FOLLOW_CHANGE_in_alter_table_specification3278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHANGE666_tree = (CommonTree)adaptor.create(CHANGE666);
                    adaptor.addChild(root_0, CHANGE666_tree);
                    }
                    // SQLParser2.g:217:13: ( COLUMN_SYM )?
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==COLUMN_SYM) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            // SQLParser2.g:217:14: COLUMN_SYM
                            {
                            COLUMN_SYM667=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification3281); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLUMN_SYM667_tree = (CommonTree)adaptor.create(COLUMN_SYM667);
                            adaptor.addChild(root_0, COLUMN_SYM667_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_column_name_in_alter_table_specification3285);
                    column_name668=gMySQL.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name668.getTree());
                    pushFollow(FOLLOW_column_name_in_alter_table_specification3287);
                    column_name669=gMySQL.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name669.getTree());
                    pushFollow(FOLLOW_column_definition_in_alter_table_specification3289);
                    column_definition670=column_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition670.getTree());
                    // SQLParser2.g:217:69: ( FIRST_SYM | AFTER_SYM column_name )?
                    int alt277=3;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==FIRST_SYM) ) {
                        alt277=1;
                    }
                    else if ( (LA277_0==AFTER_SYM) ) {
                        alt277=2;
                    }
                    switch (alt277) {
                        case 1 :
                            // SQLParser2.g:217:70: FIRST_SYM
                            {
                            FIRST_SYM671=(Token)match(input,FIRST_SYM,FOLLOW_FIRST_SYM_in_alter_table_specification3292); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            FIRST_SYM671_tree = (CommonTree)adaptor.create(FIRST_SYM671);
                            adaptor.addChild(root_0, FIRST_SYM671_tree);
                            }

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:217:80: AFTER_SYM column_name
                            {
                            AFTER_SYM672=(Token)match(input,AFTER_SYM,FOLLOW_AFTER_SYM_in_alter_table_specification3294); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AFTER_SYM672_tree = (CommonTree)adaptor.create(AFTER_SYM672);
                            adaptor.addChild(root_0, AFTER_SYM672_tree);
                            }
                            pushFollow(FOLLOW_column_name_in_alter_table_specification3296);
                            column_name673=gMySQL.column_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name673.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 13 :
                    // SQLParser2.g:218:4: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:218:4: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
                    // SQLParser2.g:218:6: LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM )
                    {
                    LOCK674=(Token)match(input,LOCK,FOLLOW_LOCK_in_alter_table_specification3307); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOCK674_tree = (CommonTree)adaptor.create(LOCK674);
                    adaptor.addChild(root_0, LOCK674_tree);
                    }
                    // SQLParser2.g:218:11: ( EQ_SYM )?
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( (LA278_0==EQ_SYM) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            // SQLParser2.g:218:12: EQ_SYM
                            {
                            EQ_SYM675=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification3310); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM675_tree = (CommonTree)adaptor.create(EQ_SYM675);
                            adaptor.addChild(root_0, EQ_SYM675_tree);
                            }

                            }
                            break;

                    }

                    set676=(Token)input.LT(1);
                    if ( input.LA(1)==DEFAULT||input.LA(1)==EXCLUSIVE_SYM||input.LA(1)==NONE_SYM||input.LA(1)==SHARED_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set676));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }


                    }
                    break;
                case 14 :
                    // SQLParser2.g:219:4: ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:219:4: ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
                    // SQLParser2.g:219:6: MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )?
                    {
                    MODIFY_SYM677=(Token)match(input,MODIFY_SYM,FOLLOW_MODIFY_SYM_in_alter_table_specification3331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MODIFY_SYM677_tree = (CommonTree)adaptor.create(MODIFY_SYM677);
                    adaptor.addChild(root_0, MODIFY_SYM677_tree);
                    }
                    // SQLParser2.g:219:17: ( COLUMN_SYM )?
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==COLUMN_SYM) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            // SQLParser2.g:219:18: COLUMN_SYM
                            {
                            COLUMN_SYM678=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification3334); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLUMN_SYM678_tree = (CommonTree)adaptor.create(COLUMN_SYM678);
                            adaptor.addChild(root_0, COLUMN_SYM678_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_column_name_in_alter_table_specification3338);
                    column_name679=gMySQL.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name679.getTree());
                    pushFollow(FOLLOW_column_definition_in_alter_table_specification3340);
                    column_definition680=column_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition680.getTree());
                    // SQLParser2.g:219:61: ( FIRST_SYM | AFTER_SYM column_name )?
                    int alt280=3;
                    int LA280_0 = input.LA(1);

                    if ( (LA280_0==FIRST_SYM) ) {
                        alt280=1;
                    }
                    else if ( (LA280_0==AFTER_SYM) ) {
                        alt280=2;
                    }
                    switch (alt280) {
                        case 1 :
                            // SQLParser2.g:219:62: FIRST_SYM
                            {
                            FIRST_SYM681=(Token)match(input,FIRST_SYM,FOLLOW_FIRST_SYM_in_alter_table_specification3343); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            FIRST_SYM681_tree = (CommonTree)adaptor.create(FIRST_SYM681);
                            adaptor.addChild(root_0, FIRST_SYM681_tree);
                            }

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:219:74: AFTER_SYM column_name
                            {
                            AFTER_SYM682=(Token)match(input,AFTER_SYM,FOLLOW_AFTER_SYM_in_alter_table_specification3347); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AFTER_SYM682_tree = (CommonTree)adaptor.create(AFTER_SYM682);
                            adaptor.addChild(root_0, AFTER_SYM682_tree);
                            }
                            pushFollow(FOLLOW_column_name_in_alter_table_specification3349);
                            column_name683=gMySQL.column_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name683.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 15 :
                    // SQLParser2.g:220:4: ( DROP ( COLUMN_SYM )? column_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:220:4: ( DROP ( COLUMN_SYM )? column_name )
                    // SQLParser2.g:220:6: DROP ( COLUMN_SYM )? column_name
                    {
                    DROP684=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification3360); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DROP684_tree = (CommonTree)adaptor.create(DROP684);
                    adaptor.addChild(root_0, DROP684_tree);
                    }
                    // SQLParser2.g:220:11: ( COLUMN_SYM )?
                    int alt281=2;
                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==COLUMN_SYM) ) {
                        alt281=1;
                    }
                    switch (alt281) {
                        case 1 :
                            // SQLParser2.g:220:12: COLUMN_SYM
                            {
                            COLUMN_SYM685=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification3363); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLUMN_SYM685_tree = (CommonTree)adaptor.create(COLUMN_SYM685);
                            adaptor.addChild(root_0, COLUMN_SYM685_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_column_name_in_alter_table_specification3367);
                    column_name686=gMySQL.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name686.getTree());

                    }


                    }
                    break;
                case 16 :
                    // SQLParser2.g:221:4: ( DROP PRIMARY_SYM KEY_SYM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:221:4: ( DROP PRIMARY_SYM KEY_SYM )
                    // SQLParser2.g:221:6: DROP PRIMARY_SYM KEY_SYM
                    {
                    DROP687=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification3376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DROP687_tree = (CommonTree)adaptor.create(DROP687);
                    adaptor.addChild(root_0, DROP687_tree);
                    }
                    PRIMARY_SYM688=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_alter_table_specification3378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIMARY_SYM688_tree = (CommonTree)adaptor.create(PRIMARY_SYM688);
                    adaptor.addChild(root_0, PRIMARY_SYM688_tree);
                    }
                    KEY_SYM689=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification3380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEY_SYM689_tree = (CommonTree)adaptor.create(KEY_SYM689);
                    adaptor.addChild(root_0, KEY_SYM689_tree);
                    }

                    }


                    }
                    break;
                case 17 :
                    // SQLParser2.g:222:4: ( DROP ( INDEX_SYM | KEY_SYM ) index_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:222:4: ( DROP ( INDEX_SYM | KEY_SYM ) index_name )
                    // SQLParser2.g:222:6: DROP ( INDEX_SYM | KEY_SYM ) index_name
                    {
                    DROP690=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification3389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DROP690_tree = (CommonTree)adaptor.create(DROP690);
                    adaptor.addChild(root_0, DROP690_tree);
                    }
                    set691=(Token)input.LT(1);
                    if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set691));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    pushFollow(FOLLOW_index_name_in_alter_table_specification3397);
                    index_name692=gMySQL.index_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name692.getTree());

                    }


                    }
                    break;
                case 18 :
                    // SQLParser2.g:223:4: ( DROP FOREIGN KEY_SYM foreign_key_symbol_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:223:4: ( DROP FOREIGN KEY_SYM foreign_key_symbol_name )
                    // SQLParser2.g:223:6: DROP FOREIGN KEY_SYM foreign_key_symbol_name
                    {
                    DROP693=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification3406); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DROP693_tree = (CommonTree)adaptor.create(DROP693);
                    adaptor.addChild(root_0, DROP693_tree);
                    }
                    FOREIGN694=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_alter_table_specification3408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREIGN694_tree = (CommonTree)adaptor.create(FOREIGN694);
                    adaptor.addChild(root_0, FOREIGN694_tree);
                    }
                    KEY_SYM695=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification3410); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEY_SYM695_tree = (CommonTree)adaptor.create(KEY_SYM695);
                    adaptor.addChild(root_0, KEY_SYM695_tree);
                    }
                    pushFollow(FOLLOW_foreign_key_symbol_name_in_alter_table_specification3412);
                    foreign_key_symbol_name696=gMySQL.foreign_key_symbol_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreign_key_symbol_name696.getTree());

                    }


                    }
                    break;
                case 19 :
                    // SQLParser2.g:224:4: ( DISABLE_SYM KEYS )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:224:4: ( DISABLE_SYM KEYS )
                    // SQLParser2.g:224:6: DISABLE_SYM KEYS
                    {
                    DISABLE_SYM697=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_alter_table_specification3421); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISABLE_SYM697_tree = (CommonTree)adaptor.create(DISABLE_SYM697);
                    adaptor.addChild(root_0, DISABLE_SYM697_tree);
                    }
                    KEYS698=(Token)match(input,KEYS,FOLLOW_KEYS_in_alter_table_specification3423); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEYS698_tree = (CommonTree)adaptor.create(KEYS698);
                    adaptor.addChild(root_0, KEYS698_tree);
                    }

                    }


                    }
                    break;
                case 20 :
                    // SQLParser2.g:225:4: ( ENABLE_SYM KEYS )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:225:4: ( ENABLE_SYM KEYS )
                    // SQLParser2.g:225:6: ENABLE_SYM KEYS
                    {
                    ENABLE_SYM699=(Token)match(input,ENABLE_SYM,FOLLOW_ENABLE_SYM_in_alter_table_specification3432); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENABLE_SYM699_tree = (CommonTree)adaptor.create(ENABLE_SYM699);
                    adaptor.addChild(root_0, ENABLE_SYM699_tree);
                    }
                    KEYS700=(Token)match(input,KEYS,FOLLOW_KEYS_in_alter_table_specification3434); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEYS700_tree = (CommonTree)adaptor.create(KEYS700);
                    adaptor.addChild(root_0, KEYS700_tree);
                    }

                    }


                    }
                    break;
                case 21 :
                    // SQLParser2.g:226:4: ( RENAME ( TO_SYM | AS_SYM )? table_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:226:4: ( RENAME ( TO_SYM | AS_SYM )? table_name )
                    // SQLParser2.g:226:6: RENAME ( TO_SYM | AS_SYM )? table_name
                    {
                    RENAME701=(Token)match(input,RENAME,FOLLOW_RENAME_in_alter_table_specification3443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RENAME701_tree = (CommonTree)adaptor.create(RENAME701);
                    adaptor.addChild(root_0, RENAME701_tree);
                    }
                    // SQLParser2.g:226:13: ( TO_SYM | AS_SYM )?
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==AS_SYM||LA282_0==TO_SYM) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            // SQLParser2.g:
                            {
                            set702=(Token)input.LT(1);
                            if ( input.LA(1)==AS_SYM||input.LA(1)==TO_SYM ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set702));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_table_name_in_alter_table_specification3452);
                    table_name703=gMySQL.table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name703.getTree());

                    }


                    }
                    break;
                case 22 :
                    // SQLParser2.g:227:4: ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:227:4: ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* )
                    // SQLParser2.g:227:6: ORDER_SYM BY_SYM column_name ( COMMA column_name )*
                    {
                    ORDER_SYM704=(Token)match(input,ORDER_SYM,FOLLOW_ORDER_SYM_in_alter_table_specification3461); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER_SYM704_tree = (CommonTree)adaptor.create(ORDER_SYM704);
                    adaptor.addChild(root_0, ORDER_SYM704_tree);
                    }
                    BY_SYM705=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_alter_table_specification3463); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_SYM705_tree = (CommonTree)adaptor.create(BY_SYM705);
                    adaptor.addChild(root_0, BY_SYM705_tree);
                    }
                    pushFollow(FOLLOW_column_name_in_alter_table_specification3465);
                    column_name706=gMySQL.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name706.getTree());
                    // SQLParser2.g:227:35: ( COMMA column_name )*
                    loop283:
                    do {
                        int alt283=2;
                        int LA283_0 = input.LA(1);

                        if ( (LA283_0==COMMA) ) {
                            int LA283_1 = input.LA(2);

                            if ( (LA283_1==ID) ) {
                                alt283=1;
                            }


                        }


                        switch (alt283) {
                    	case 1 :
                    	    // SQLParser2.g:227:36: COMMA column_name
                    	    {
                    	    COMMA707=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification3468); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA707_tree = (CommonTree)adaptor.create(COMMA707);
                    	    adaptor.addChild(root_0, COMMA707_tree);
                    	    }
                    	    pushFollow(FOLLOW_column_name_in_alter_table_specification3470);
                    	    column_name708=gMySQL.column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name708.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop283;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 23 :
                    // SQLParser2.g:228:4: ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:228:4: ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? )
                    // SQLParser2.g:228:6: CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )?
                    {
                    CONVERT_SYM709=(Token)match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_alter_table_specification3481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONVERT_SYM709_tree = (CommonTree)adaptor.create(CONVERT_SYM709);
                    adaptor.addChild(root_0, CONVERT_SYM709_tree);
                    }
                    TO_SYM710=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_alter_table_specification3483); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TO_SYM710_tree = (CommonTree)adaptor.create(TO_SYM710);
                    adaptor.addChild(root_0, TO_SYM710_tree);
                    }
                    CHARACTER_SYM711=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_table_specification3485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARACTER_SYM711_tree = (CommonTree)adaptor.create(CHARACTER_SYM711);
                    adaptor.addChild(root_0, CHARACTER_SYM711_tree);
                    }
                    SET_SYM712=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification3487); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SET_SYM712_tree = (CommonTree)adaptor.create(SET_SYM712);
                    adaptor.addChild(root_0, SET_SYM712_tree);
                    }
                    pushFollow(FOLLOW_charset_name_in_alter_table_specification3489);
                    charset_name713=gMySQL.charset_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name713.getTree());
                    // SQLParser2.g:228:60: ( COLLATE_SYM collation_name )?
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==COLLATE_SYM) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            // SQLParser2.g:228:61: COLLATE_SYM collation_name
                            {
                            COLLATE_SYM714=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_table_specification3492); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLLATE_SYM714_tree = (CommonTree)adaptor.create(COLLATE_SYM714);
                            adaptor.addChild(root_0, COLLATE_SYM714_tree);
                            }
                            pushFollow(FOLLOW_collation_name_in_alter_table_specification3494);
                            collation_name715=gMySQL.collation_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name715.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 24 :
                    // SQLParser2.g:229:4: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:229:4: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
                    // SQLParser2.g:229:6: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )?
                    {
                    // SQLParser2.g:229:6: ( DEFAULT )?
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==DEFAULT) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            // SQLParser2.g:229:7: DEFAULT
                            {
                            DEFAULT716=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification3506); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DEFAULT716_tree = (CommonTree)adaptor.create(DEFAULT716);
                            adaptor.addChild(root_0, DEFAULT716_tree);
                            }

                            }
                            break;

                    }

                    CHARACTER_SYM717=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_table_specification3510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARACTER_SYM717_tree = (CommonTree)adaptor.create(CHARACTER_SYM717);
                    adaptor.addChild(root_0, CHARACTER_SYM717_tree);
                    }
                    SET_SYM718=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification3512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SET_SYM718_tree = (CommonTree)adaptor.create(SET_SYM718);
                    adaptor.addChild(root_0, SET_SYM718_tree);
                    }
                    // SQLParser2.g:229:39: ( EQ_SYM )?
                    int alt286=2;
                    int LA286_0 = input.LA(1);

                    if ( (LA286_0==EQ_SYM) ) {
                        alt286=1;
                    }
                    switch (alt286) {
                        case 1 :
                            // SQLParser2.g:229:40: EQ_SYM
                            {
                            EQ_SYM719=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification3515); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM719_tree = (CommonTree)adaptor.create(EQ_SYM719);
                            adaptor.addChild(root_0, EQ_SYM719_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_charset_name_in_alter_table_specification3519);
                    charset_name720=gMySQL.charset_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name720.getTree());
                    // SQLParser2.g:229:62: ( COLLATE_SYM ( EQ_SYM )? collation_name )?
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==COLLATE_SYM) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            // SQLParser2.g:229:63: COLLATE_SYM ( EQ_SYM )? collation_name
                            {
                            COLLATE_SYM721=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_table_specification3522); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLLATE_SYM721_tree = (CommonTree)adaptor.create(COLLATE_SYM721);
                            adaptor.addChild(root_0, COLLATE_SYM721_tree);
                            }
                            // SQLParser2.g:229:75: ( EQ_SYM )?
                            int alt287=2;
                            int LA287_0 = input.LA(1);

                            if ( (LA287_0==EQ_SYM) ) {
                                alt287=1;
                            }
                            switch (alt287) {
                                case 1 :
                                    // SQLParser2.g:229:76: EQ_SYM
                                    {
                                    EQ_SYM722=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification3525); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    EQ_SYM722_tree = (CommonTree)adaptor.create(EQ_SYM722);
                                    adaptor.addChild(root_0, EQ_SYM722_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_collation_name_in_alter_table_specification3529);
                            collation_name723=gMySQL.collation_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name723.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 25 :
                    // SQLParser2.g:230:4: ( DISCARD TABLESPACE )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:230:4: ( DISCARD TABLESPACE )
                    // SQLParser2.g:230:6: DISCARD TABLESPACE
                    {
                    DISCARD724=(Token)match(input,DISCARD,FOLLOW_DISCARD_in_alter_table_specification3540); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISCARD724_tree = (CommonTree)adaptor.create(DISCARD724);
                    adaptor.addChild(root_0, DISCARD724_tree);
                    }
                    TABLESPACE725=(Token)match(input,TABLESPACE,FOLLOW_TABLESPACE_in_alter_table_specification3542); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLESPACE725_tree = (CommonTree)adaptor.create(TABLESPACE725);
                    adaptor.addChild(root_0, TABLESPACE725_tree);
                    }

                    }


                    }
                    break;
                case 26 :
                    // SQLParser2.g:231:4: ( IMPORT TABLESPACE )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:231:4: ( IMPORT TABLESPACE )
                    // SQLParser2.g:231:6: IMPORT TABLESPACE
                    {
                    IMPORT726=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_alter_table_specification3551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT726_tree = (CommonTree)adaptor.create(IMPORT726);
                    adaptor.addChild(root_0, IMPORT726_tree);
                    }
                    TABLESPACE727=(Token)match(input,TABLESPACE,FOLLOW_TABLESPACE_in_alter_table_specification3553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLESPACE727_tree = (CommonTree)adaptor.create(TABLESPACE727);
                    adaptor.addChild(root_0, TABLESPACE727_tree);
                    }

                    }


                    }
                    break;
                case 27 :
                    // SQLParser2.g:232:4: ( FORCE_SYM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:232:4: ( FORCE_SYM )
                    // SQLParser2.g:232:6: FORCE_SYM
                    {
                    FORCE_SYM728=(Token)match(input,FORCE_SYM,FOLLOW_FORCE_SYM_in_alter_table_specification3562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FORCE_SYM728_tree = (CommonTree)adaptor.create(FORCE_SYM728);
                    adaptor.addChild(root_0, FORCE_SYM728_tree);
                    }

                    }


                    }
                    break;
                case 28 :
                    // SQLParser2.g:233:4: ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:233:4: ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN )
                    // SQLParser2.g:233:6: ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN
                    {
                    ADD_SYM729=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification3571); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADD_SYM729_tree = (CommonTree)adaptor.create(ADD_SYM729);
                    adaptor.addChild(root_0, ADD_SYM729_tree);
                    }
                    PARTITION_SYM730=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM730_tree = (CommonTree)adaptor.create(PARTITION_SYM730);
                    adaptor.addChild(root_0, PARTITION_SYM730_tree);
                    }
                    LPAREN731=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification3575); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN731_tree = (CommonTree)adaptor.create(LPAREN731);
                    adaptor.addChild(root_0, LPAREN731_tree);
                    }
                    pushFollow(FOLLOW_partition_definition_in_alter_table_specification3577);
                    partition_definition732=partition_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition732.getTree());
                    RPAREN733=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification3579); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN733_tree = (CommonTree)adaptor.create(RPAREN733);
                    adaptor.addChild(root_0, RPAREN733_tree);
                    }

                    }


                    }
                    break;
                case 29 :
                    // SQLParser2.g:234:4: ( DROP PARTITION_SYM partition_names )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:234:4: ( DROP PARTITION_SYM partition_names )
                    // SQLParser2.g:234:6: DROP PARTITION_SYM partition_names
                    {
                    DROP734=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification3588); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DROP734_tree = (CommonTree)adaptor.create(DROP734);
                    adaptor.addChild(root_0, DROP734_tree);
                    }
                    PARTITION_SYM735=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM735_tree = (CommonTree)adaptor.create(PARTITION_SYM735);
                    adaptor.addChild(root_0, PARTITION_SYM735_tree);
                    }
                    pushFollow(FOLLOW_partition_names_in_alter_table_specification3592);
                    partition_names736=gMySQL.partition_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names736.getTree());

                    }


                    }
                    break;
                case 30 :
                    // SQLParser2.g:235:4: ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:235:4: ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) )
                    // SQLParser2.g:235:6: TRUNCATE PARTITION_SYM ( partition_names | ALL )
                    {
                    TRUNCATE737=(Token)match(input,TRUNCATE,FOLLOW_TRUNCATE_in_alter_table_specification3601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUNCATE737_tree = (CommonTree)adaptor.create(TRUNCATE737);
                    adaptor.addChild(root_0, TRUNCATE737_tree);
                    }
                    PARTITION_SYM738=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM738_tree = (CommonTree)adaptor.create(PARTITION_SYM738);
                    adaptor.addChild(root_0, PARTITION_SYM738_tree);
                    }
                    // SQLParser2.g:235:29: ( partition_names | ALL )
                    int alt289=2;
                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==ID) ) {
                        alt289=1;
                    }
                    else if ( (LA289_0==ALL) ) {
                        alt289=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 289, 0, input);

                        throw nvae;
                    }
                    switch (alt289) {
                        case 1 :
                            // SQLParser2.g:235:30: partition_names
                            {
                            pushFollow(FOLLOW_partition_names_in_alter_table_specification3606);
                            partition_names739=gMySQL.partition_names();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names739.getTree());

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:235:48: ALL
                            {
                            ALL740=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification3610); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ALL740_tree = (CommonTree)adaptor.create(ALL740);
                            adaptor.addChild(root_0, ALL740_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 31 :
                    // SQLParser2.g:236:4: ( COALESCE PARTITION_SYM INTEGER_NUM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:236:4: ( COALESCE PARTITION_SYM INTEGER_NUM )
                    // SQLParser2.g:236:6: COALESCE PARTITION_SYM INTEGER_NUM
                    {
                    COALESCE741=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_alter_table_specification3620); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE741_tree = (CommonTree)adaptor.create(COALESCE741);
                    adaptor.addChild(root_0, COALESCE741_tree);
                    }
                    PARTITION_SYM742=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3622); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM742_tree = (CommonTree)adaptor.create(PARTITION_SYM742);
                    adaptor.addChild(root_0, PARTITION_SYM742_tree);
                    }
                    INTEGER_NUM743=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_alter_table_specification3624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM743_tree = (CommonTree)adaptor.create(INTEGER_NUM743);
                    adaptor.addChild(root_0, INTEGER_NUM743_tree);
                    }

                    }


                    }
                    break;
                case 32 :
                    // SQLParser2.g:237:4: ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:237:4: ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN )
                    // SQLParser2.g:237:6: REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN
                    {
                    REORGANIZE_SYM744=(Token)match(input,REORGANIZE_SYM,FOLLOW_REORGANIZE_SYM_in_alter_table_specification3633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REORGANIZE_SYM744_tree = (CommonTree)adaptor.create(REORGANIZE_SYM744);
                    adaptor.addChild(root_0, REORGANIZE_SYM744_tree);
                    }
                    PARTITION_SYM745=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM745_tree = (CommonTree)adaptor.create(PARTITION_SYM745);
                    adaptor.addChild(root_0, PARTITION_SYM745_tree);
                    }
                    pushFollow(FOLLOW_partition_names_in_alter_table_specification3637);
                    partition_names746=gMySQL.partition_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names746.getTree());
                    INTO747=(Token)match(input,INTO,FOLLOW_INTO_in_alter_table_specification3639); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO747_tree = (CommonTree)adaptor.create(INTO747);
                    adaptor.addChild(root_0, INTO747_tree);
                    }
                    LPAREN748=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification3641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN748_tree = (CommonTree)adaptor.create(LPAREN748);
                    adaptor.addChild(root_0, LPAREN748_tree);
                    }
                    pushFollow(FOLLOW_partition_definition_in_alter_table_specification3643);
                    partition_definition749=partition_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition749.getTree());
                    // SQLParser2.g:237:84: ( COMMA partition_definition )*
                    loop290:
                    do {
                        int alt290=2;
                        int LA290_0 = input.LA(1);

                        if ( (LA290_0==COMMA) ) {
                            alt290=1;
                        }


                        switch (alt290) {
                    	case 1 :
                    	    // SQLParser2.g:237:85: COMMA partition_definition
                    	    {
                    	    COMMA750=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification3646); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA750_tree = (CommonTree)adaptor.create(COMMA750);
                    	    adaptor.addChild(root_0, COMMA750_tree);
                    	    }
                    	    pushFollow(FOLLOW_partition_definition_in_alter_table_specification3648);
                    	    partition_definition751=partition_definition();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition751.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop290;
                        }
                    } while (true);

                    RPAREN752=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification3652); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN752_tree = (CommonTree)adaptor.create(RPAREN752);
                    adaptor.addChild(root_0, RPAREN752_tree);
                    }

                    }


                    }
                    break;
                case 33 :
                    // SQLParser2.g:238:4: ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:238:4: ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name )
                    // SQLParser2.g:238:6: EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name
                    {
                    EXCHANGE_SYM753=(Token)match(input,EXCHANGE_SYM,FOLLOW_EXCHANGE_SYM_in_alter_table_specification3661); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCHANGE_SYM753_tree = (CommonTree)adaptor.create(EXCHANGE_SYM753);
                    adaptor.addChild(root_0, EXCHANGE_SYM753_tree);
                    }
                    PARTITION_SYM754=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3663); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM754_tree = (CommonTree)adaptor.create(PARTITION_SYM754);
                    adaptor.addChild(root_0, PARTITION_SYM754_tree);
                    }
                    pushFollow(FOLLOW_partition_name_in_alter_table_specification3665);
                    partition_name755=gMySQL.partition_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name755.getTree());
                    WITH756=(Token)match(input,WITH,FOLLOW_WITH_in_alter_table_specification3667); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH756_tree = (CommonTree)adaptor.create(WITH756);
                    adaptor.addChild(root_0, WITH756_tree);
                    }
                    TABLE757=(Token)match(input,TABLE,FOLLOW_TABLE_in_alter_table_specification3669); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE757_tree = (CommonTree)adaptor.create(TABLE757);
                    adaptor.addChild(root_0, TABLE757_tree);
                    }
                    pushFollow(FOLLOW_table_name_in_alter_table_specification3671);
                    table_name758=gMySQL.table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name758.getTree());

                    }


                    }
                    break;
                case 34 :
                    // SQLParser2.g:239:4: ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:239:4: ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) )
                    // SQLParser2.g:239:6: ANALYZE_SYM PARTITION_SYM ( partition_names | ALL )
                    {
                    ANALYZE_SYM759=(Token)match(input,ANALYZE_SYM,FOLLOW_ANALYZE_SYM_in_alter_table_specification3680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANALYZE_SYM759_tree = (CommonTree)adaptor.create(ANALYZE_SYM759);
                    adaptor.addChild(root_0, ANALYZE_SYM759_tree);
                    }
                    PARTITION_SYM760=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3682); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM760_tree = (CommonTree)adaptor.create(PARTITION_SYM760);
                    adaptor.addChild(root_0, PARTITION_SYM760_tree);
                    }
                    // SQLParser2.g:239:32: ( partition_names | ALL )
                    int alt291=2;
                    int LA291_0 = input.LA(1);

                    if ( (LA291_0==ID) ) {
                        alt291=1;
                    }
                    else if ( (LA291_0==ALL) ) {
                        alt291=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 291, 0, input);

                        throw nvae;
                    }
                    switch (alt291) {
                        case 1 :
                            // SQLParser2.g:239:33: partition_names
                            {
                            pushFollow(FOLLOW_partition_names_in_alter_table_specification3685);
                            partition_names761=gMySQL.partition_names();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names761.getTree());

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:239:51: ALL
                            {
                            ALL762=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification3689); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ALL762_tree = (CommonTree)adaptor.create(ALL762);
                            adaptor.addChild(root_0, ALL762_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 35 :
                    // SQLParser2.g:240:4: ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:240:4: ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) )
                    // SQLParser2.g:240:6: CHECK_SYM PARTITION_SYM ( partition_names | ALL )
                    {
                    CHECK_SYM763=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_alter_table_specification3699); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHECK_SYM763_tree = (CommonTree)adaptor.create(CHECK_SYM763);
                    adaptor.addChild(root_0, CHECK_SYM763_tree);
                    }
                    PARTITION_SYM764=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3701); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM764_tree = (CommonTree)adaptor.create(PARTITION_SYM764);
                    adaptor.addChild(root_0, PARTITION_SYM764_tree);
                    }
                    // SQLParser2.g:240:30: ( partition_names | ALL )
                    int alt292=2;
                    int LA292_0 = input.LA(1);

                    if ( (LA292_0==ID) ) {
                        alt292=1;
                    }
                    else if ( (LA292_0==ALL) ) {
                        alt292=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 292, 0, input);

                        throw nvae;
                    }
                    switch (alt292) {
                        case 1 :
                            // SQLParser2.g:240:31: partition_names
                            {
                            pushFollow(FOLLOW_partition_names_in_alter_table_specification3704);
                            partition_names765=gMySQL.partition_names();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names765.getTree());

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:240:49: ALL
                            {
                            ALL766=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification3708); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ALL766_tree = (CommonTree)adaptor.create(ALL766);
                            adaptor.addChild(root_0, ALL766_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 36 :
                    // SQLParser2.g:241:4: ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:241:4: ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) )
                    // SQLParser2.g:241:6: OPTIMIZE PARTITION_SYM ( partition_names | ALL )
                    {
                    OPTIMIZE767=(Token)match(input,OPTIMIZE,FOLLOW_OPTIMIZE_in_alter_table_specification3718); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OPTIMIZE767_tree = (CommonTree)adaptor.create(OPTIMIZE767);
                    adaptor.addChild(root_0, OPTIMIZE767_tree);
                    }
                    PARTITION_SYM768=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM768_tree = (CommonTree)adaptor.create(PARTITION_SYM768);
                    adaptor.addChild(root_0, PARTITION_SYM768_tree);
                    }
                    // SQLParser2.g:241:29: ( partition_names | ALL )
                    int alt293=2;
                    int LA293_0 = input.LA(1);

                    if ( (LA293_0==ID) ) {
                        alt293=1;
                    }
                    else if ( (LA293_0==ALL) ) {
                        alt293=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 293, 0, input);

                        throw nvae;
                    }
                    switch (alt293) {
                        case 1 :
                            // SQLParser2.g:241:30: partition_names
                            {
                            pushFollow(FOLLOW_partition_names_in_alter_table_specification3723);
                            partition_names769=gMySQL.partition_names();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names769.getTree());

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:241:48: ALL
                            {
                            ALL770=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification3727); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ALL770_tree = (CommonTree)adaptor.create(ALL770);
                            adaptor.addChild(root_0, ALL770_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 37 :
                    // SQLParser2.g:242:4: ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:242:4: ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) )
                    // SQLParser2.g:242:6: REBUILD_SYM PARTITION_SYM ( partition_names | ALL )
                    {
                    REBUILD_SYM771=(Token)match(input,REBUILD_SYM,FOLLOW_REBUILD_SYM_in_alter_table_specification3737); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REBUILD_SYM771_tree = (CommonTree)adaptor.create(REBUILD_SYM771);
                    adaptor.addChild(root_0, REBUILD_SYM771_tree);
                    }
                    PARTITION_SYM772=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3739); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM772_tree = (CommonTree)adaptor.create(PARTITION_SYM772);
                    adaptor.addChild(root_0, PARTITION_SYM772_tree);
                    }
                    // SQLParser2.g:242:32: ( partition_names | ALL )
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==ID) ) {
                        alt294=1;
                    }
                    else if ( (LA294_0==ALL) ) {
                        alt294=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 294, 0, input);

                        throw nvae;
                    }
                    switch (alt294) {
                        case 1 :
                            // SQLParser2.g:242:33: partition_names
                            {
                            pushFollow(FOLLOW_partition_names_in_alter_table_specification3742);
                            partition_names773=gMySQL.partition_names();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names773.getTree());

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:242:51: ALL
                            {
                            ALL774=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification3746); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ALL774_tree = (CommonTree)adaptor.create(ALL774);
                            adaptor.addChild(root_0, ALL774_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 38 :
                    // SQLParser2.g:243:4: ( REPAIR PARTITION_SYM ( partition_names | ALL ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:243:4: ( REPAIR PARTITION_SYM ( partition_names | ALL ) )
                    // SQLParser2.g:243:6: REPAIR PARTITION_SYM ( partition_names | ALL )
                    {
                    REPAIR775=(Token)match(input,REPAIR,FOLLOW_REPAIR_in_alter_table_specification3756); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPAIR775_tree = (CommonTree)adaptor.create(REPAIR775);
                    adaptor.addChild(root_0, REPAIR775_tree);
                    }
                    PARTITION_SYM776=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification3758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION_SYM776_tree = (CommonTree)adaptor.create(PARTITION_SYM776);
                    adaptor.addChild(root_0, PARTITION_SYM776_tree);
                    }
                    // SQLParser2.g:243:27: ( partition_names | ALL )
                    int alt295=2;
                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==ID) ) {
                        alt295=1;
                    }
                    else if ( (LA295_0==ALL) ) {
                        alt295=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 295, 0, input);

                        throw nvae;
                    }
                    switch (alt295) {
                        case 1 :
                            // SQLParser2.g:243:28: partition_names
                            {
                            pushFollow(FOLLOW_partition_names_in_alter_table_specification3761);
                            partition_names777=gMySQL.partition_names();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names777.getTree());

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:243:46: ALL
                            {
                            ALL778=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification3765); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ALL778_tree = (CommonTree)adaptor.create(ALL778);
                            adaptor.addChild(root_0, ALL778_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 39 :
                    // SQLParser2.g:244:4: ( REMOVE_SYM PARTITIONING_SYM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:244:4: ( REMOVE_SYM PARTITIONING_SYM )
                    // SQLParser2.g:244:6: REMOVE_SYM PARTITIONING_SYM
                    {
                    REMOVE_SYM779=(Token)match(input,REMOVE_SYM,FOLLOW_REMOVE_SYM_in_alter_table_specification3775); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REMOVE_SYM779_tree = (CommonTree)adaptor.create(REMOVE_SYM779);
                    adaptor.addChild(root_0, REMOVE_SYM779_tree);
                    }
                    PARTITIONING_SYM780=(Token)match(input,PARTITIONING_SYM,FOLLOW_PARTITIONING_SYM_in_alter_table_specification3777); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITIONING_SYM780_tree = (CommonTree)adaptor.create(PARTITIONING_SYM780);
                    adaptor.addChild(root_0, PARTITIONING_SYM780_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 270, alter_table_specification_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alter_table_specification"

    public static class index_column_names_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index_column_names"
    // SQLParser2.g:247:1: index_column_names : index_column_name ( COMMA index_column_name )* ;
    public final MySQL_SQLParser2.index_column_names_return index_column_names() throws RecognitionException {
        MySQL_SQLParser2.index_column_names_return retval = new MySQL_SQLParser2.index_column_names_return();
        retval.start = input.LT(1);
        int index_column_names_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA782=null;
        MySQL_SQLParser2.index_column_name_return index_column_name781 = null;

        MySQL_SQLParser2.index_column_name_return index_column_name783 = null;


        CommonTree COMMA782_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }
            // SQLParser2.g:247:19: ( index_column_name ( COMMA index_column_name )* )
            // SQLParser2.g:248:2: index_column_name ( COMMA index_column_name )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_index_column_name_in_index_column_names3788);
            index_column_name781=index_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name781.getTree());
            // SQLParser2.g:248:20: ( COMMA index_column_name )*
            loop297:
            do {
                int alt297=2;
                int LA297_0 = input.LA(1);

                if ( (LA297_0==COMMA) ) {
                    alt297=1;
                }


                switch (alt297) {
            	case 1 :
            	    // SQLParser2.g:248:21: COMMA index_column_name
            	    {
            	    COMMA782=(Token)match(input,COMMA,FOLLOW_COMMA_in_index_column_names3791); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA782_tree = (CommonTree)adaptor.create(COMMA782);
            	    adaptor.addChild(root_0, COMMA782_tree);
            	    }
            	    pushFollow(FOLLOW_index_column_name_in_index_column_names3793);
            	    index_column_name783=index_column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name783.getTree());

            	    }
            	    break;

            	default :
            	    break loop297;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 271, index_column_names_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index_column_names"

    public static class index_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index_type"
    // SQLParser2.g:249:1: index_type : USING_SYM ( BTREE_SYM | HASH_SYM ) ;
    public final MySQL_SQLParser2.index_type_return index_type() throws RecognitionException {
        MySQL_SQLParser2.index_type_return retval = new MySQL_SQLParser2.index_type_return();
        retval.start = input.LT(1);
        int index_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token USING_SYM784=null;
        Token set785=null;

        CommonTree USING_SYM784_tree=null;
        CommonTree set785_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }
            // SQLParser2.g:249:11: ( USING_SYM ( BTREE_SYM | HASH_SYM ) )
            // SQLParser2.g:250:2: USING_SYM ( BTREE_SYM | HASH_SYM )
            {
            root_0 = (CommonTree)adaptor.nil();

            USING_SYM784=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_index_type3802); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USING_SYM784_tree = (CommonTree)adaptor.create(USING_SYM784);
            adaptor.addChild(root_0, USING_SYM784_tree);
            }
            set785=(Token)input.LT(1);
            if ( input.LA(1)==BTREE_SYM||input.LA(1)==HASH_SYM ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set785));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 272, index_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index_type"

    public static class index_option_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index_option"
    // SQLParser2.g:252:1: index_option : ( ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | index_type | ( WITH PARSER_SYM parser_name ) | ( COMMENT_SYM TEXT_STRING ) );
    public final MySQL_SQLParser2.index_option_return index_option() throws RecognitionException {
        MySQL_SQLParser2.index_option_return retval = new MySQL_SQLParser2.index_option_return();
        retval.start = input.LT(1);
        int index_option_StartIndex = input.index();
        CommonTree root_0 = null;

        Token KEY_BLOCK_SIZE786=null;
        Token EQ_SYM787=null;
        Token INTEGER_NUM788=null;
        Token WITH790=null;
        Token PARSER_SYM791=null;
        Token COMMENT_SYM793=null;
        Token TEXT_STRING794=null;
        MySQL_SQLParser2.index_type_return index_type789 = null;

        MySQLParser.parser_name_return parser_name792 = null;


        CommonTree KEY_BLOCK_SIZE786_tree=null;
        CommonTree EQ_SYM787_tree=null;
        CommonTree INTEGER_NUM788_tree=null;
        CommonTree WITH790_tree=null;
        CommonTree PARSER_SYM791_tree=null;
        CommonTree COMMENT_SYM793_tree=null;
        CommonTree TEXT_STRING794_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }
            // SQLParser2.g:252:13: ( ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | index_type | ( WITH PARSER_SYM parser_name ) | ( COMMENT_SYM TEXT_STRING ) )
            int alt299=4;
            switch ( input.LA(1) ) {
            case KEY_BLOCK_SIZE:
                {
                alt299=1;
                }
                break;
            case USING_SYM:
                {
                alt299=2;
                }
                break;
            case WITH:
                {
                alt299=3;
                }
                break;
            case COMMENT_SYM:
                {
                alt299=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 299, 0, input);

                throw nvae;
            }

            switch (alt299) {
                case 1 :
                    // SQLParser2.g:253:4: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:253:4: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
                    // SQLParser2.g:253:6: KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM
                    {
                    KEY_BLOCK_SIZE786=(Token)match(input,KEY_BLOCK_SIZE,FOLLOW_KEY_BLOCK_SIZE_in_index_option3822); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEY_BLOCK_SIZE786_tree = (CommonTree)adaptor.create(KEY_BLOCK_SIZE786);
                    adaptor.addChild(root_0, KEY_BLOCK_SIZE786_tree);
                    }
                    // SQLParser2.g:253:21: ( EQ_SYM )?
                    int alt298=2;
                    int LA298_0 = input.LA(1);

                    if ( (LA298_0==EQ_SYM) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            // SQLParser2.g:253:22: EQ_SYM
                            {
                            EQ_SYM787=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_index_option3825); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ_SYM787_tree = (CommonTree)adaptor.create(EQ_SYM787);
                            adaptor.addChild(root_0, EQ_SYM787_tree);
                            }

                            }
                            break;

                    }

                    INTEGER_NUM788=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_index_option3829); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER_NUM788_tree = (CommonTree)adaptor.create(INTEGER_NUM788);
                    adaptor.addChild(root_0, INTEGER_NUM788_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // SQLParser2.g:254:4: index_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_index_type_in_index_option3836);
                    index_type789=index_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type789.getTree());

                    }
                    break;
                case 3 :
                    // SQLParser2.g:255:4: ( WITH PARSER_SYM parser_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:255:4: ( WITH PARSER_SYM parser_name )
                    // SQLParser2.g:255:6: WITH PARSER_SYM parser_name
                    {
                    WITH790=(Token)match(input,WITH,FOLLOW_WITH_in_index_option3843); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH790_tree = (CommonTree)adaptor.create(WITH790);
                    adaptor.addChild(root_0, WITH790_tree);
                    }
                    PARSER_SYM791=(Token)match(input,PARSER_SYM,FOLLOW_PARSER_SYM_in_index_option3845); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARSER_SYM791_tree = (CommonTree)adaptor.create(PARSER_SYM791);
                    adaptor.addChild(root_0, PARSER_SYM791_tree);
                    }
                    pushFollow(FOLLOW_parser_name_in_index_option3847);
                    parser_name792=gMySQL.parser_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parser_name792.getTree());

                    }


                    }
                    break;
                case 4 :
                    // SQLParser2.g:256:4: ( COMMENT_SYM TEXT_STRING )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // SQLParser2.g:256:4: ( COMMENT_SYM TEXT_STRING )
                    // SQLParser2.g:256:6: COMMENT_SYM TEXT_STRING
                    {
                    COMMENT_SYM793=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_index_option3856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMENT_SYM793_tree = (CommonTree)adaptor.create(COMMENT_SYM793);
                    adaptor.addChild(root_0, COMMENT_SYM793_tree);
                    }
                    TEXT_STRING794=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_index_option3858); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEXT_STRING794_tree = (CommonTree)adaptor.create(TEXT_STRING794);
                    adaptor.addChild(root_0, TEXT_STRING794_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 273, index_option_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index_option"

    public static class column_definitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "column_definitions"
    // SQLParser2.g:258:1: column_definitions : column_name column_definition ( COMMA column_name column_definition )* ;
    public final MySQL_SQLParser2.column_definitions_return column_definitions() throws RecognitionException {
        MySQL_SQLParser2.column_definitions_return retval = new MySQL_SQLParser2.column_definitions_return();
        retval.start = input.LT(1);
        int column_definitions_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA797=null;
        MySQLParser.column_name_return column_name795 = null;

        MySQL_SQLParser2.column_definition_return column_definition796 = null;

        MySQLParser.column_name_return column_name798 = null;

        MySQL_SQLParser2.column_definition_return column_definition799 = null;


        CommonTree COMMA797_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }
            // SQLParser2.g:258:19: ( column_name column_definition ( COMMA column_name column_definition )* )
            // SQLParser2.g:259:2: column_name column_definition ( COMMA column_name column_definition )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_column_name_in_column_definitions3868);
            column_name795=gMySQL.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name795.getTree());
            pushFollow(FOLLOW_column_definition_in_column_definitions3870);
            column_definition796=column_definition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition796.getTree());
            // SQLParser2.g:259:32: ( COMMA column_name column_definition )*
            loop300:
            do {
                int alt300=2;
                int LA300_0 = input.LA(1);

                if ( (LA300_0==COMMA) ) {
                    alt300=1;
                }


                switch (alt300) {
            	case 1 :
            	    // SQLParser2.g:259:33: COMMA column_name column_definition
            	    {
            	    COMMA797=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_definitions3873); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA797_tree = (CommonTree)adaptor.create(COMMA797);
            	    adaptor.addChild(root_0, COMMA797_tree);
            	    }
            	    pushFollow(FOLLOW_column_name_in_column_definitions3875);
            	    column_name798=gMySQL.column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name798.getTree());
            	    pushFollow(FOLLOW_column_definition_in_column_definitions3877);
            	    column_definition799=column_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition799.getTree());

            	    }
            	    break;

            	default :
            	    break loop300;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 274, column_definitions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "column_definitions"

    public static class rename_table_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rename_table_statement"
    // SQLParser2.g:263:1: rename_table_statement : RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )* ;
    public final MySQL_SQLParser2.rename_table_statement_return rename_table_statement() throws RecognitionException {
        MySQL_SQLParser2.rename_table_statement_return retval = new MySQL_SQLParser2.rename_table_statement_return();
        retval.start = input.LT(1);
        int rename_table_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RENAME800=null;
        Token TABLE801=null;
        Token TO_SYM803=null;
        Token COMMA805=null;
        Token TO_SYM807=null;
        MySQLParser.table_name_return table_name802 = null;

        MySQLParser.table_name_return table_name804 = null;

        MySQLParser.table_name_return table_name806 = null;

        MySQLParser.table_name_return table_name808 = null;


        CommonTree RENAME800_tree=null;
        CommonTree TABLE801_tree=null;
        CommonTree TO_SYM803_tree=null;
        CommonTree COMMA805_tree=null;
        CommonTree TO_SYM807_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }
            // SQLParser2.g:263:23: ( RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )* )
            // SQLParser2.g:264:2: RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )*
            {
            root_0 = (CommonTree)adaptor.nil();

            RENAME800=(Token)match(input,RENAME,FOLLOW_RENAME_in_rename_table_statement3889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RENAME800_tree = (CommonTree)adaptor.create(RENAME800);
            adaptor.addChild(root_0, RENAME800_tree);
            }
            TABLE801=(Token)match(input,TABLE,FOLLOW_TABLE_in_rename_table_statement3891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE801_tree = (CommonTree)adaptor.create(TABLE801);
            adaptor.addChild(root_0, TABLE801_tree);
            }
            pushFollow(FOLLOW_table_name_in_rename_table_statement3895);
            table_name802=gMySQL.table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name802.getTree());
            TO_SYM803=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_rename_table_statement3897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_SYM803_tree = (CommonTree)adaptor.create(TO_SYM803);
            adaptor.addChild(root_0, TO_SYM803_tree);
            }
            pushFollow(FOLLOW_table_name_in_rename_table_statement3899);
            table_name804=gMySQL.table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name804.getTree());
            // SQLParser2.g:266:2: ( COMMA table_name TO_SYM table_name )*
            loop301:
            do {
                int alt301=2;
                int LA301_0 = input.LA(1);

                if ( (LA301_0==COMMA) ) {
                    alt301=1;
                }


                switch (alt301) {
            	case 1 :
            	    // SQLParser2.g:266:3: COMMA table_name TO_SYM table_name
            	    {
            	    COMMA805=(Token)match(input,COMMA,FOLLOW_COMMA_in_rename_table_statement3903); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA805_tree = (CommonTree)adaptor.create(COMMA805);
            	    adaptor.addChild(root_0, COMMA805_tree);
            	    }
            	    pushFollow(FOLLOW_table_name_in_rename_table_statement3905);
            	    table_name806=gMySQL.table_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name806.getTree());
            	    TO_SYM807=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_rename_table_statement3907); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    TO_SYM807_tree = (CommonTree)adaptor.create(TO_SYM807);
            	    adaptor.addChild(root_0, TO_SYM807_tree);
            	    }
            	    pushFollow(FOLLOW_table_name_in_rename_table_statement3909);
            	    table_name808=gMySQL.table_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name808.getTree());

            	    }
            	    break;

            	default :
            	    break loop301;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 275, rename_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rename_table_statement"

    public static class drop_table_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "drop_table_statement"
    // SQLParser2.g:271:1: drop_table_statement : DROP drop_table_expression -> ^( TN_DROP drop_table_expression ) ;
    public final MySQL_SQLParser2.drop_table_statement_return drop_table_statement() throws RecognitionException {
        MySQL_SQLParser2.drop_table_statement_return retval = new MySQL_SQLParser2.drop_table_statement_return();
        retval.start = input.LT(1);
        int drop_table_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DROP809=null;
        MySQL_SQLParser2.drop_table_expression_return drop_table_expression810 = null;


        CommonTree DROP809_tree=null;
        RewriteRuleTokenStream stream_DROP=new RewriteRuleTokenStream(adaptor,"token DROP");
        RewriteRuleSubtreeStream stream_drop_table_expression=new RewriteRuleSubtreeStream(adaptor,"rule drop_table_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }
            // SQLParser2.g:271:21: ( DROP drop_table_expression -> ^( TN_DROP drop_table_expression ) )
            // SQLParser2.g:272:2: DROP drop_table_expression
            {
            DROP809=(Token)match(input,DROP,FOLLOW_DROP_in_drop_table_statement3922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DROP.add(DROP809);

            pushFollow(FOLLOW_drop_table_expression_in_drop_table_statement3924);
            drop_table_expression810=drop_table_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_drop_table_expression.add(drop_table_expression810.getTree());


            // AST REWRITE
            // elements: drop_table_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 272:29: -> ^( TN_DROP drop_table_expression )
            {
                // SQLParser2.g:272:32: ^( TN_DROP drop_table_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TN_DROP, "TN_DROP"), root_1);

                adaptor.addChild(root_1, stream_drop_table_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 276, drop_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "drop_table_statement"

    public static class drop_table_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "drop_table_expression"
    // SQLParser2.g:275:1: drop_table_expression : ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )? ;
    public final MySQL_SQLParser2.drop_table_expression_return drop_table_expression() throws RecognitionException {
        MySQL_SQLParser2.drop_table_expression_return retval = new MySQL_SQLParser2.drop_table_expression_return();
        retval.start = input.LT(1);
        int drop_table_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TEMPORARY811=null;
        Token TABLE812=null;
        Token IF813=null;
        Token EXISTS814=null;
        Token COMMA816=null;
        Token set818=null;
        MySQLParser.table_name_return table_name815 = null;

        MySQLParser.table_name_return table_name817 = null;


        CommonTree TEMPORARY811_tree=null;
        CommonTree TABLE812_tree=null;
        CommonTree IF813_tree=null;
        CommonTree EXISTS814_tree=null;
        CommonTree COMMA816_tree=null;
        CommonTree set818_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }
            // SQLParser2.g:275:22: ( ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )? )
            // SQLParser2.g:276:2: ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // SQLParser2.g:276:2: ( TEMPORARY )?
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==TEMPORARY) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    // SQLParser2.g:276:3: TEMPORARY
                    {
                    TEMPORARY811=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_drop_table_expression3942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TEMPORARY811_tree = (CommonTree)adaptor.create(TEMPORARY811);
                    adaptor.addChild(root_0, TEMPORARY811_tree);
                    }

                    }
                    break;

            }

            TABLE812=(Token)match(input,TABLE,FOLLOW_TABLE_in_drop_table_expression3946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE812_tree = (CommonTree)adaptor.create(TABLE812);
            adaptor.addChild(root_0, TABLE812_tree);
            }
            // SQLParser2.g:276:21: ( IF EXISTS )?
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==IF) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    // SQLParser2.g:276:22: IF EXISTS
                    {
                    IF813=(Token)match(input,IF,FOLLOW_IF_in_drop_table_expression3949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF813_tree = (CommonTree)adaptor.create(IF813);
                    adaptor.addChild(root_0, IF813_tree);
                    }
                    EXISTS814=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_table_expression3951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS814_tree = (CommonTree)adaptor.create(EXISTS814);
                    adaptor.addChild(root_0, EXISTS814_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_drop_table_expression3956);
            table_name815=gMySQL.table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name815.getTree());
            // SQLParser2.g:277:13: ( COMMA table_name )*
            loop304:
            do {
                int alt304=2;
                int LA304_0 = input.LA(1);

                if ( (LA304_0==COMMA) ) {
                    alt304=1;
                }


                switch (alt304) {
            	case 1 :
            	    // SQLParser2.g:277:14: COMMA table_name
            	    {
            	    COMMA816=(Token)match(input,COMMA,FOLLOW_COMMA_in_drop_table_expression3959); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA816_tree = (CommonTree)adaptor.create(COMMA816);
            	    adaptor.addChild(root_0, COMMA816_tree);
            	    }
            	    pushFollow(FOLLOW_table_name_in_drop_table_expression3961);
            	    table_name817=gMySQL.table_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name817.getTree());

            	    }
            	    break;

            	default :
            	    break loop304;
                }
            } while (true);

            // SQLParser2.g:278:2: ( RESTRICT | CASCADE )?
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( (LA305_0==CASCADE||LA305_0==RESTRICT) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    // SQLParser2.g:
                    {
                    set818=(Token)input.LT(1);
                    if ( input.LA(1)==CASCADE||input.LA(1)==RESTRICT ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set818));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 277, drop_table_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "drop_table_expression"

    public static class truncate_table_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "truncate_table_statement"
    // SQLParser2.g:282:1: truncate_table_statement : TRUNCATE ( TABLE )? table_name -> ^( TN_TRUNCATE table_name ) ;
    public final MySQL_SQLParser2.truncate_table_statement_return truncate_table_statement() throws RecognitionException {
        MySQL_SQLParser2.truncate_table_statement_return retval = new MySQL_SQLParser2.truncate_table_statement_return();
        retval.start = input.LT(1);
        int truncate_table_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TRUNCATE819=null;
        Token TABLE820=null;
        MySQLParser.table_name_return table_name821 = null;


        CommonTree TRUNCATE819_tree=null;
        CommonTree TABLE820_tree=null;
        RewriteRuleTokenStream stream_TABLE=new RewriteRuleTokenStream(adaptor,"token TABLE");
        RewriteRuleTokenStream stream_TRUNCATE=new RewriteRuleTokenStream(adaptor,"token TRUNCATE");
        RewriteRuleSubtreeStream stream_table_name=new RewriteRuleSubtreeStream(adaptor,"rule table_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }
            // SQLParser2.g:282:25: ( TRUNCATE ( TABLE )? table_name -> ^( TN_TRUNCATE table_name ) )
            // SQLParser2.g:283:2: TRUNCATE ( TABLE )? table_name
            {
            TRUNCATE819=(Token)match(input,TRUNCATE,FOLLOW_TRUNCATE_in_truncate_table_statement3984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TRUNCATE.add(TRUNCATE819);

            // SQLParser2.g:283:11: ( TABLE )?
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==TABLE) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    // SQLParser2.g:283:12: TABLE
                    {
                    TABLE820=(Token)match(input,TABLE,FOLLOW_TABLE_in_truncate_table_statement3987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TABLE.add(TABLE820);


                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_truncate_table_statement3991);
            table_name821=gMySQL.table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_name.add(table_name821.getTree());


            // AST REWRITE
            // elements: table_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 283:31: -> ^( TN_TRUNCATE table_name )
            {
                // SQLParser2.g:283:34: ^( TN_TRUNCATE table_name )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TN_TRUNCATE, "TN_TRUNCATE"), root_1);

                adaptor.addChild(root_1, stream_table_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 278, truncate_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "truncate_table_statement"

    public static class create_view_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_view_statement"
    // SQLParser2.g:287:1: create_view_statement : CREATE create_view_expression -> ^( TN_CREATE create_view_expression ) ;
    public final MySQL_SQLParser2.create_view_statement_return create_view_statement() throws RecognitionException {
        MySQL_SQLParser2.create_view_statement_return retval = new MySQL_SQLParser2.create_view_statement_return();
        retval.start = input.LT(1);
        int create_view_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CREATE822=null;
        MySQL_SQLParser2.create_view_expression_return create_view_expression823 = null;


        CommonTree CREATE822_tree=null;
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_create_view_expression=new RewriteRuleSubtreeStream(adaptor,"rule create_view_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }
            // SQLParser2.g:287:22: ( CREATE create_view_expression -> ^( TN_CREATE create_view_expression ) )
            // SQLParser2.g:288:2: CREATE create_view_expression
            {
            CREATE822=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_view_statement4009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE822);

            pushFollow(FOLLOW_create_view_expression_in_create_view_statement4011);
            create_view_expression823=create_view_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_create_view_expression.add(create_view_expression823.getTree());


            // AST REWRITE
            // elements: create_view_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 288:32: -> ^( TN_CREATE create_view_expression )
            {
                // SQLParser2.g:288:35: ^( TN_CREATE create_view_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TN_CREATE, "TN_CREATE"), root_1);

                adaptor.addChild(root_1, stream_create_view_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 279, create_view_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_view_statement"

    public static class create_view_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_view_expression"
    // SQLParser2.g:290:1: create_view_expression : ( OR_SYM REPLACE )? create_view_body ;
    public final MySQL_SQLParser2.create_view_expression_return create_view_expression() throws RecognitionException {
        MySQL_SQLParser2.create_view_expression_return retval = new MySQL_SQLParser2.create_view_expression_return();
        retval.start = input.LT(1);
        int create_view_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR_SYM824=null;
        Token REPLACE825=null;
        MySQL_SQLParser2.create_view_body_return create_view_body826 = null;


        CommonTree OR_SYM824_tree=null;
        CommonTree REPLACE825_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }
            // SQLParser2.g:290:23: ( ( OR_SYM REPLACE )? create_view_body )
            // SQLParser2.g:291:2: ( OR_SYM REPLACE )? create_view_body
            {
            root_0 = (CommonTree)adaptor.nil();

            // SQLParser2.g:291:2: ( OR_SYM REPLACE )?
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( (LA307_0==OR_SYM) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    // SQLParser2.g:291:3: OR_SYM REPLACE
                    {
                    OR_SYM824=(Token)match(input,OR_SYM,FOLLOW_OR_SYM_in_create_view_expression4028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_SYM824_tree = (CommonTree)adaptor.create(OR_SYM824);
                    adaptor.addChild(root_0, OR_SYM824_tree);
                    }
                    REPLACE825=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_create_view_expression4030); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE825_tree = (CommonTree)adaptor.create(REPLACE825);
                    adaptor.addChild(root_0, REPLACE825_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_create_view_body_in_create_view_expression4035);
            create_view_body826=create_view_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view_body826.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 280, create_view_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_view_expression"

    public static class create_view_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_view_body"
    // SQLParser2.g:294:1: create_view_body : ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )? ;
    public final MySQL_SQLParser2.create_view_body_return create_view_body() throws RecognitionException {
        MySQL_SQLParser2.create_view_body_return retval = new MySQL_SQLParser2.create_view_body_return();
        retval.start = input.LT(1);
        int create_view_body_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALGORITHM_SYM827=null;
        Token EQ_SYM828=null;
        Token set829=null;
        Token DEFINER830=null;
        Token EQ_SYM831=null;
        Token CURRENT_USER833=null;
        Token SQL_SYM834=null;
        Token SECURITY_SYM835=null;
        Token set836=null;
        Token VIEW_SYM837=null;
        Token LPAREN839=null;
        Token RPAREN841=null;
        Token AS_SYM842=null;
        Token WITH844=null;
        Token set845=null;
        Token CHECK_SYM846=null;
        Token OPTION847=null;
        MySQLParser.user_name_return user_name832 = null;

        MySQLParser.view_name_return view_name838 = null;

        MySQLParser.column_list_return column_list840 = null;

        MySQLParser.select_statement_return select_statement843 = null;


        CommonTree ALGORITHM_SYM827_tree=null;
        CommonTree EQ_SYM828_tree=null;
        CommonTree set829_tree=null;
        CommonTree DEFINER830_tree=null;
        CommonTree EQ_SYM831_tree=null;
        CommonTree CURRENT_USER833_tree=null;
        CommonTree SQL_SYM834_tree=null;
        CommonTree SECURITY_SYM835_tree=null;
        CommonTree set836_tree=null;
        CommonTree VIEW_SYM837_tree=null;
        CommonTree LPAREN839_tree=null;
        CommonTree RPAREN841_tree=null;
        CommonTree AS_SYM842_tree=null;
        CommonTree WITH844_tree=null;
        CommonTree set845_tree=null;
        CommonTree CHECK_SYM846_tree=null;
        CommonTree OPTION847_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }
            // SQLParser2.g:294:17: ( ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )? )
            // SQLParser2.g:295:2: ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // SQLParser2.g:295:2: ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )?
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==ALGORITHM_SYM) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    // SQLParser2.g:295:3: ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM )
                    {
                    ALGORITHM_SYM827=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_create_view_body4044); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALGORITHM_SYM827_tree = (CommonTree)adaptor.create(ALGORITHM_SYM827);
                    adaptor.addChild(root_0, ALGORITHM_SYM827_tree);
                    }
                    EQ_SYM828=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_view_body4046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQ_SYM828_tree = (CommonTree)adaptor.create(EQ_SYM828);
                    adaptor.addChild(root_0, EQ_SYM828_tree);
                    }
                    set829=(Token)input.LT(1);
                    if ( input.LA(1)==MERGE_SYM||input.LA(1)==TEMPTABLE_SYM||input.LA(1)==UNDEFINED_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set829));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // SQLParser2.g:296:2: ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )?
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==DEFINER) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    // SQLParser2.g:296:3: DEFINER EQ_SYM ( user_name | CURRENT_USER )
                    {
                    DEFINER830=(Token)match(input,DEFINER,FOLLOW_DEFINER_in_create_view_body4064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINER830_tree = (CommonTree)adaptor.create(DEFINER830);
                    adaptor.addChild(root_0, DEFINER830_tree);
                    }
                    EQ_SYM831=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_view_body4066); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQ_SYM831_tree = (CommonTree)adaptor.create(EQ_SYM831);
                    adaptor.addChild(root_0, EQ_SYM831_tree);
                    }
                    // SQLParser2.g:296:18: ( user_name | CURRENT_USER )
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==ID) ) {
                        alt309=1;
                    }
                    else if ( (LA309_0==CURRENT_USER) ) {
                        alt309=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 309, 0, input);

                        throw nvae;
                    }
                    switch (alt309) {
                        case 1 :
                            // SQLParser2.g:296:19: user_name
                            {
                            pushFollow(FOLLOW_user_name_in_create_view_body4069);
                            user_name832=gMySQL.user_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, user_name832.getTree());

                            }
                            break;
                        case 2 :
                            // SQLParser2.g:296:31: CURRENT_USER
                            {
                            CURRENT_USER833=(Token)match(input,CURRENT_USER,FOLLOW_CURRENT_USER_in_create_view_body4073); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CURRENT_USER833_tree = (CommonTree)adaptor.create(CURRENT_USER833);
                            adaptor.addChild(root_0, CURRENT_USER833_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            // SQLParser2.g:297:2: ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )?
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==SQL_SYM) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    // SQLParser2.g:297:3: SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM )
                    {
                    SQL_SYM834=(Token)match(input,SQL_SYM,FOLLOW_SQL_SYM_in_create_view_body4081); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL_SYM834_tree = (CommonTree)adaptor.create(SQL_SYM834);
                    adaptor.addChild(root_0, SQL_SYM834_tree);
                    }
                    SECURITY_SYM835=(Token)match(input,SECURITY_SYM,FOLLOW_SECURITY_SYM_in_create_view_body4083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SECURITY_SYM835_tree = (CommonTree)adaptor.create(SECURITY_SYM835);
                    adaptor.addChild(root_0, SECURITY_SYM835_tree);
                    }
                    set836=(Token)input.LT(1);
                    if ( input.LA(1)==DEFINER||input.LA(1)==INVOKER_SYM ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set836));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            VIEW_SYM837=(Token)match(input,VIEW_SYM,FOLLOW_VIEW_SYM_in_create_view_body4098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VIEW_SYM837_tree = (CommonTree)adaptor.create(VIEW_SYM837);
            adaptor.addChild(root_0, VIEW_SYM837_tree);
            }
            pushFollow(FOLLOW_view_name_in_create_view_body4100);
            view_name838=gMySQL.view_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name838.getTree());
            // SQLParser2.g:298:21: ( LPAREN column_list RPAREN )?
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==LPAREN) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    // SQLParser2.g:298:22: LPAREN column_list RPAREN
                    {
                    LPAREN839=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_view_body4103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN839_tree = (CommonTree)adaptor.create(LPAREN839);
                    adaptor.addChild(root_0, LPAREN839_tree);
                    }
                    pushFollow(FOLLOW_column_list_in_create_view_body4105);
                    column_list840=gMySQL.column_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list840.getTree());
                    RPAREN841=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_view_body4107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN841_tree = (CommonTree)adaptor.create(RPAREN841);
                    adaptor.addChild(root_0, RPAREN841_tree);
                    }

                    }
                    break;

            }

            AS_SYM842=(Token)match(input,AS_SYM,FOLLOW_AS_SYM_in_create_view_body4112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS_SYM842_tree = (CommonTree)adaptor.create(AS_SYM842);
            adaptor.addChild(root_0, AS_SYM842_tree);
            }
            pushFollow(FOLLOW_select_statement_in_create_view_body4114);
            select_statement843=gMySQL.select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement843.getTree());
            // SQLParser2.g:300:2: ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )?
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==WITH) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    // SQLParser2.g:300:3: WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION
                    {
                    WITH844=(Token)match(input,WITH,FOLLOW_WITH_in_create_view_body4118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH844_tree = (CommonTree)adaptor.create(WITH844);
                    adaptor.addChild(root_0, WITH844_tree);
                    }
                    // SQLParser2.g:300:8: ( CASCADED | LOCAL_SYM )?
                    int alt313=2;
                    int LA313_0 = input.LA(1);

                    if ( (LA313_0==CASCADED||LA313_0==LOCAL_SYM) ) {
                        alt313=1;
                    }
                    switch (alt313) {
                        case 1 :
                            // SQLParser2.g:
                            {
                            set845=(Token)input.LT(1);
                            if ( input.LA(1)==CASCADED||input.LA(1)==LOCAL_SYM ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set845));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    CHECK_SYM846=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_create_view_body4129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHECK_SYM846_tree = (CommonTree)adaptor.create(CHECK_SYM846);
                    adaptor.addChild(root_0, CHECK_SYM846_tree);
                    }
                    OPTION847=(Token)match(input,OPTION,FOLLOW_OPTION_in_create_view_body4131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OPTION847_tree = (CommonTree)adaptor.create(OPTION847);
                    adaptor.addChild(root_0, OPTION847_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 281, create_view_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_view_body"

    public static class alter_view_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alter_view_statement"
    // SQLParser2.g:305:1: alter_view_statement : ALTER create_view_body -> ^( TN_ALTER create_view_body ) ;
    public final MySQL_SQLParser2.alter_view_statement_return alter_view_statement() throws RecognitionException {
        MySQL_SQLParser2.alter_view_statement_return retval = new MySQL_SQLParser2.alter_view_statement_return();
        retval.start = input.LT(1);
        int alter_view_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALTER848=null;
        MySQL_SQLParser2.create_view_body_return create_view_body849 = null;


        CommonTree ALTER848_tree=null;
        RewriteRuleTokenStream stream_ALTER=new RewriteRuleTokenStream(adaptor,"token ALTER");
        RewriteRuleSubtreeStream stream_create_view_body=new RewriteRuleSubtreeStream(adaptor,"rule create_view_body");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }
            // SQLParser2.g:305:21: ( ALTER create_view_body -> ^( TN_ALTER create_view_body ) )
            // SQLParser2.g:306:2: ALTER create_view_body
            {
            ALTER848=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_view_statement4144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ALTER.add(ALTER848);

            pushFollow(FOLLOW_create_view_body_in_alter_view_statement4146);
            create_view_body849=create_view_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_create_view_body.add(create_view_body849.getTree());


            // AST REWRITE
            // elements: create_view_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 306:25: -> ^( TN_ALTER create_view_body )
            {
                // SQLParser2.g:306:28: ^( TN_ALTER create_view_body )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TN_ALTER, "TN_ALTER"), root_1);

                adaptor.addChild(root_1, stream_create_view_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 282, alter_view_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alter_view_statement"

    public static class drop_view_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "drop_view_statement"
    // SQLParser2.g:311:1: drop_view_statement : DROP drop_view_expression -> ^( TN_DROP drop_view_expression ) ;
    public final MySQL_SQLParser2.drop_view_statement_return drop_view_statement() throws RecognitionException {
        MySQL_SQLParser2.drop_view_statement_return retval = new MySQL_SQLParser2.drop_view_statement_return();
        retval.start = input.LT(1);
        int drop_view_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DROP850=null;
        MySQL_SQLParser2.drop_view_expression_return drop_view_expression851 = null;


        CommonTree DROP850_tree=null;
        RewriteRuleTokenStream stream_DROP=new RewriteRuleTokenStream(adaptor,"token DROP");
        RewriteRuleSubtreeStream stream_drop_view_expression=new RewriteRuleSubtreeStream(adaptor,"rule drop_view_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }
            // SQLParser2.g:311:20: ( DROP drop_view_expression -> ^( TN_DROP drop_view_expression ) )
            // SQLParser2.g:312:2: DROP drop_view_expression
            {
            DROP850=(Token)match(input,DROP,FOLLOW_DROP_in_drop_view_statement4165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DROP.add(DROP850);

            pushFollow(FOLLOW_drop_view_expression_in_drop_view_statement4167);
            drop_view_expression851=drop_view_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_drop_view_expression.add(drop_view_expression851.getTree());


            // AST REWRITE
            // elements: drop_view_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 312:28: -> ^( TN_DROP drop_view_expression )
            {
                // SQLParser2.g:312:31: ^( TN_DROP drop_view_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TN_DROP, "TN_DROP"), root_1);

                adaptor.addChild(root_1, stream_drop_view_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 283, drop_view_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "drop_view_statement"

    public static class drop_view_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "drop_view_expression"
    // SQLParser2.g:314:1: drop_view_expression : VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )? ;
    public final MySQL_SQLParser2.drop_view_expression_return drop_view_expression() throws RecognitionException {
        MySQL_SQLParser2.drop_view_expression_return retval = new MySQL_SQLParser2.drop_view_expression_return();
        retval.start = input.LT(1);
        int drop_view_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token VIEW_SYM852=null;
        Token IF853=null;
        Token EXISTS854=null;
        Token COMMA856=null;
        Token set858=null;
        MySQLParser.view_name_return view_name855 = null;

        MySQLParser.view_name_return view_name857 = null;


        CommonTree VIEW_SYM852_tree=null;
        CommonTree IF853_tree=null;
        CommonTree EXISTS854_tree=null;
        CommonTree COMMA856_tree=null;
        CommonTree set858_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }
            // SQLParser2.g:314:21: ( VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )? )
            // SQLParser2.g:315:2: VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )?
            {
            root_0 = (CommonTree)adaptor.nil();

            VIEW_SYM852=(Token)match(input,VIEW_SYM,FOLLOW_VIEW_SYM_in_drop_view_expression4183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VIEW_SYM852_tree = (CommonTree)adaptor.create(VIEW_SYM852);
            adaptor.addChild(root_0, VIEW_SYM852_tree);
            }
            // SQLParser2.g:315:11: ( IF EXISTS )?
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==IF) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    // SQLParser2.g:315:12: IF EXISTS
                    {
                    IF853=(Token)match(input,IF,FOLLOW_IF_in_drop_view_expression4186); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF853_tree = (CommonTree)adaptor.create(IF853);
                    adaptor.addChild(root_0, IF853_tree);
                    }
                    EXISTS854=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_view_expression4188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS854_tree = (CommonTree)adaptor.create(EXISTS854);
                    adaptor.addChild(root_0, EXISTS854_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_view_name_in_drop_view_expression4193);
            view_name855=gMySQL.view_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name855.getTree());
            // SQLParser2.g:316:12: ( COMMA view_name )*
            loop316:
            do {
                int alt316=2;
                int LA316_0 = input.LA(1);

                if ( (LA316_0==COMMA) ) {
                    alt316=1;
                }


                switch (alt316) {
            	case 1 :
            	    // SQLParser2.g:316:13: COMMA view_name
            	    {
            	    COMMA856=(Token)match(input,COMMA,FOLLOW_COMMA_in_drop_view_expression4196); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA856_tree = (CommonTree)adaptor.create(COMMA856);
            	    adaptor.addChild(root_0, COMMA856_tree);
            	    }
            	    pushFollow(FOLLOW_view_name_in_drop_view_expression4198);
            	    view_name857=gMySQL.view_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name857.getTree());

            	    }
            	    break;

            	default :
            	    break loop316;
                }
            } while (true);

            // SQLParser2.g:317:2: ( RESTRICT | CASCADE )?
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( (LA317_0==CASCADE||LA317_0==RESTRICT) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    // SQLParser2.g:
                    {
                    set858=(Token)input.LT(1);
                    if ( input.LA(1)==CASCADE||input.LA(1)==RESTRICT ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set858));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 284, drop_view_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "drop_view_expression"

    // $ANTLR start synpred231_SQLParser2
    public final void synpred231_SQLParser2_fragment() throws RecognitionException {   
        // SQLParser2.g:117:16: ( ( COMMA )? table_option )
        // SQLParser2.g:117:16: ( COMMA )? table_option
        {
        // SQLParser2.g:117:16: ( COMMA )?
        int alt460=2;
        int LA460_0 = input.LA(1);

        if ( (LA460_0==COMMA) ) {
            alt460=1;
        }
        switch (alt460) {
            case 1 :
                // SQLParser2.g:117:18: COMMA
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred231_SQLParser21900); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_table_option_in_synpred231_SQLParser21905);
        table_option();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_SQLParser2

    // $ANTLR start synpred337_SQLParser2
    public final void synpred337_SQLParser2_fragment() throws RecognitionException {   
        // SQLParser2.g:202:4: ( table_options )
        // SQLParser2.g:202:4: table_options
        {
        pushFollow(FOLLOW_table_options_in_synpred337_SQLParser22918);
        table_options();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_SQLParser2

    // $ANTLR start synpred416_SQLParser2
    public final void synpred416_SQLParser2_fragment() throws RecognitionException {   
        // SQLParser2.g:229:4: ( ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) )
        // SQLParser2.g:229:4: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
        {
        // SQLParser2.g:229:4: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
        // SQLParser2.g:229:6: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )?
        {
        // SQLParser2.g:229:6: ( DEFAULT )?
        int alt554=2;
        int LA554_0 = input.LA(1);

        if ( (LA554_0==DEFAULT) ) {
            alt554=1;
        }
        switch (alt554) {
            case 1 :
                // SQLParser2.g:229:7: DEFAULT
                {
                match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred416_SQLParser23506); if (state.failed) return ;

                }
                break;

        }

        match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_synpred416_SQLParser23510); if (state.failed) return ;
        match(input,SET_SYM,FOLLOW_SET_SYM_in_synpred416_SQLParser23512); if (state.failed) return ;
        // SQLParser2.g:229:39: ( EQ_SYM )?
        int alt555=2;
        int LA555_0 = input.LA(1);

        if ( (LA555_0==EQ_SYM) ) {
            alt555=1;
        }
        switch (alt555) {
            case 1 :
                // SQLParser2.g:229:40: EQ_SYM
                {
                match(input,EQ_SYM,FOLLOW_EQ_SYM_in_synpred416_SQLParser23515); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_charset_name_in_synpred416_SQLParser23519);
        gMySQL.charset_name();

        state._fsp--;
        if (state.failed) return ;
        // SQLParser2.g:229:62: ( COLLATE_SYM ( EQ_SYM )? collation_name )?
        int alt557=2;
        int LA557_0 = input.LA(1);

        if ( (LA557_0==COLLATE_SYM) ) {
            alt557=1;
        }
        switch (alt557) {
            case 1 :
                // SQLParser2.g:229:63: COLLATE_SYM ( EQ_SYM )? collation_name
                {
                match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_synpred416_SQLParser23522); if (state.failed) return ;
                // SQLParser2.g:229:75: ( EQ_SYM )?
                int alt556=2;
                int LA556_0 = input.LA(1);

                if ( (LA556_0==EQ_SYM) ) {
                    alt556=1;
                }
                switch (alt556) {
                    case 1 :
                        // SQLParser2.g:229:76: EQ_SYM
                        {
                        match(input,EQ_SYM,FOLLOW_EQ_SYM_in_synpred416_SQLParser23525); if (state.failed) return ;

                        }
                        break;

                }

                pushFollow(FOLLOW_collation_name_in_synpred416_SQLParser23529);
                gMySQL.collation_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred416_SQLParser2

    // Delegated rules

    public final boolean synpred416_SQLParser2() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_SQLParser2_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_SQLParser2() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_SQLParser2_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_SQLParser2() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_SQLParser2_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA198 dfa198 = new DFA198(this);
    protected DFA296 dfa296 = new DFA296(this);
    static final String DFA1_eotS =
        "\14\uffff";
    static final String DFA1_eofS =
        "\14\uffff";
    static final String DFA1_minS =
        "\1\174\2\u01be\1\u00ea\1\u0148\1\65\1\u00bc\1\uffff\1\124\1\uffff"+
        "\1\u022c\1\uffff";
    static final String DFA1_maxS =
        "\1\174\1\u01c1\1\u01be\1\u022c\1\u0148\1\u0204\1\u00bc\1\uffff"+
        "\1\u022c\1\uffff\1\u022c\1\uffff";
    static final String DFA1_acceptS =
        "\7\uffff\1\3\1\uffff\1\2\1\uffff\1\1";
    static final String DFA1_specialS =
        "\14\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\1",
            "\1\3\2\uffff\1\2",
            "\1\3",
            "\1\4\u0141\uffff\1\5",
            "\1\6",
            "\1\11\1\uffff\1\11\32\uffff\2\11\1\uffff\1\11\5\uffff\1\11"+
            "\4\uffff\1\11\11\uffff\1\11\31\uffff\1\11\22\uffff\1\11\2\uffff"+
            "\1\11\27\uffff\1\11\74\uffff\1\11\6\uffff\1\11\12\uffff\1\11"+
            "\22\uffff\1\7\33\uffff\1\11\11\uffff\1\11\37\uffff\1\11\2\uffff"+
            "\1\11\2\uffff\1\11\43\uffff\1\11\12\uffff\1\11\33\uffff\2\11"+
            "\61\uffff\1\11\45\uffff\1\10",
            "\1\12",
            "",
            "\1\13\26\uffff\1\13\140\uffff\1\13\7\uffff\1\13\32\uffff\1"+
            "\13\22\uffff\1\13\21\uffff\1\7\124\uffff\1\13\67\uffff\1\13"+
            "\75\uffff\1\13\114\uffff\1\13",
            "",
            "\1\5",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "10:1: create_table_statement : ( create_table_statement1 | create_table_statement2 | create_table_statement3 );";
        }
    }
    static final String DFA39_eotS =
        "\12\uffff";
    static final String DFA39_eofS =
        "\12\uffff";
    static final String DFA39_minS =
        "\1\124\1\uffff\1\u00cc\6\uffff\1\u00cc";
    static final String DFA39_maxS =
        "\1\u022c\1\uffff\1\u022c\6\uffff\1\u01df";
    static final String DFA39_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff";
    static final String DFA39_specialS =
        "\12\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\10\26\uffff\1\2\140\uffff\1\7\7\uffff\1\6\32\uffff\1\4\22"+
            "\uffff\1\4\146\uffff\1\3\67\uffff\1\6\75\uffff\1\5\114\uffff"+
            "\1\1",
            "",
            "\1\7\u009c\uffff\1\3\165\uffff\1\5\114\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\7\u009c\uffff\1\3\165\uffff\1\5"
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "46:1: create_definition : ( ( column_name column_definition ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition ) | ( CHECK_SYM LPAREN expression RPAREN ) );";
        }
    }
    static final String DFA172_eotS =
        "\116\uffff";
    static final String DFA172_eofS =
        "\1\1\115\uffff";
    static final String DFA172_minS =
        "\1\65\1\uffff\1\41\1\uffff\3\u020e\1\122\1\u0192\1\55\4\u020e\1"+
        "\u00a0\1\u020e\1\u00a0\1\u00c6\3\u020e\1\u0097\1\u020e\1\142\2\u0097"+
        "\1\u0204\1\u022c\1\0\1\u0226\1\0\1\u0226\1\0\2\55\1\0\1\u0226\1"+
        "\0\1\u022c\1\0\1\u022b\1\0\1\u022b\1\0\1\u020e\1\u0226\1\0\1\u020e"+
        "\1\u00c6\1\0\1\u0226\1\0\1\u0226\1\0\1\u0226\1\0\1\u0097\1\0\1\u022b"+
        "\1\0\1\142\1\0\1\u0097\1\0\1\u0097\1\0\1\u0204\1\u022c\1\55\1\0"+
        "\1\u022b\1\0\1\u022b\1\0\1\u0219\1\u022c\1\0\1\u0219";
    static final String DFA172_maxS =
        "\1\u0219\1\uffff\1\u01de\1\uffff\1\u022c\2\u0226\1\133\1\u0192"+
        "\1\u020e\1\u0226\1\u022c\2\u022b\1\u00a0\1\u0226\1\u00a0\1\u020e"+
        "\4\u0226\1\u022b\1\u020e\2\u0226\1\u020e\1\u022c\1\0\1\u0226\1\0"+
        "\1\u0226\1\0\1\u020e\1\u01eb\1\0\1\u0226\1\0\1\u022c\1\0\1\u022b"+
        "\1\0\1\u022b\1\0\1\u022b\1\u0226\1\0\1\u022b\1\u0146\1\0\1\u0226"+
        "\1\0\1\u0226\1\0\1\u0226\1\0\1\u0226\1\0\1\u022b\1\0\1\u0174\1\0"+
        "\1\u0226\1\0\1\u0226\1\0\1\u0204\1\u022c\1\u01eb\1\0\1\u022b\1\0"+
        "\1\u022b\1\0\1\u021b\1\u022c\1\0\1\u021b";
    static final String DFA172_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\112\uffff";
    static final String DFA172_specialS =
        "\34\uffff\1\15\1\uffff\1\20\1\uffff\1\1\2\uffff\1\13\1\uffff\1"+
        "\7\1\uffff\1\4\1\uffff\1\2\1\uffff\1\14\2\uffff\1\6\2\uffff\1\23"+
        "\1\uffff\1\10\1\uffff\1\11\1\uffff\1\3\1\uffff\1\21\1\uffff\1\12"+
        "\1\uffff\1\0\1\uffff\1\17\1\uffff\1\5\3\uffff\1\16\1\uffff\1\25"+
        "\1\uffff\1\22\2\uffff\1\24\1\uffff}>";
    static final String[] DFA172_transitionS = {
            "\1\3\1\uffff\1\3\32\uffff\2\3\1\uffff\1\3\5\uffff\1\3\4\uffff"+
            "\1\3\11\uffff\1\3\31\uffff\1\3\22\uffff\1\3\2\uffff\1\3\27\uffff"+
            "\1\3\74\uffff\1\3\6\uffff\1\3\12\uffff\1\3\56\uffff\1\3\11\uffff"+
            "\1\3\37\uffff\1\3\2\uffff\1\1\2\uffff\1\3\43\uffff\1\3\12\uffff"+
            "\1\1\33\uffff\2\3\61\uffff\1\3\67\uffff\1\1\2\uffff\1\2",
            "",
            "\1\1\6\uffff\1\1\1\uffff\2\1\11\uffff\1\5\1\uffff\1\6\27\uffff"+
            "\1\1\2\uffff\1\10\1\11\1\1\1\12\2\uffff\1\1\2\uffff\1\13\4\uffff"+
            "\1\14\11\uffff\1\15\2\uffff\1\1\26\uffff\1\16\22\uffff\1\7\2"+
            "\uffff\1\17\6\uffff\2\1\4\uffff\1\1\4\uffff\1\1\5\uffff\1\4"+
            "\7\uffff\1\1\20\uffff\1\1\41\uffff\1\1\1\uffff\1\20\6\uffff"+
            "\1\21\12\uffff\1\22\34\uffff\1\1\21\uffff\1\23\11\uffff\1\24"+
            "\5\uffff\1\1\21\uffff\1\1\4\uffff\1\1\2\uffff\1\25\5\uffff\1"+
            "\26\22\uffff\1\1\4\uffff\4\1\10\uffff\1\27\46\uffff\1\30\1\31"+
            "\54\uffff\1\1\4\uffff\1\32",
            "",
            "\1\33\35\uffff\1\34",
            "\1\35\27\uffff\1\36",
            "\1\37\27\uffff\1\40",
            "\1\10\1\11\7\uffff\1\13",
            "\1\41",
            "\1\43\2\uffff\1\43\11\uffff\1\43\2\uffff\1\43\65\uffff\10"+
            "\43\31\uffff\1\43\41\uffff\2\43\35\uffff\3\43\2\uffff\1\43\5"+
            "\uffff\1\43\7\uffff\1\43\32\uffff\1\43\1\uffff\2\43\6\uffff"+
            "\4\43\27\uffff\2\43\157\uffff\1\43\41\uffff\1\43\25\uffff\1"+
            "\43\10\uffff\2\43\17\uffff\1\43\42\uffff\1\42",
            "\1\44\27\uffff\1\45",
            "\1\46\35\uffff\1\47",
            "\1\50\34\uffff\1\51",
            "\1\52\34\uffff\1\53",
            "\1\54",
            "\1\55\27\uffff\1\56",
            "\1\57",
            "\1\61\103\uffff\1\61\73\uffff\1\61\u00c7\uffff\1\60",
            "\1\62\27\uffff\1\63",
            "\1\64\27\uffff\1\65",
            "\1\66\27\uffff\1\67",
            "\1\71\u0176\uffff\1\70\27\uffff\1\71",
            "\1\72\34\uffff\1\73",
            "\1\75\2\uffff\1\75\61\uffff\1\75\21\uffff\1\75\35\uffff\1"+
            "\75\u00ac\uffff\1\75\u0099\uffff\1\74",
            "\1\77\u0176\uffff\1\76\27\uffff\1\77",
            "\1\101\u0176\uffff\1\100\27\uffff\1\101",
            "\1\103\11\uffff\1\102",
            "\1\34",
            "\1\uffff",
            "\1\36",
            "\1\uffff",
            "\1\40",
            "\1\uffff",
            "\1\105\2\uffff\1\105\11\uffff\1\105\2\uffff\1\105\65\uffff"+
            "\10\105\31\uffff\1\105\41\uffff\2\105\35\uffff\3\105\2\uffff"+
            "\1\105\5\uffff\1\105\7\uffff\1\105\32\uffff\1\105\1\uffff\2"+
            "\105\6\uffff\4\105\27\uffff\2\105\157\uffff\1\105\41\uffff\1"+
            "\105\25\uffff\1\105\10\uffff\2\105\17\uffff\1\105\42\uffff\1"+
            "\104",
            "\1\43\2\uffff\1\43\11\uffff\1\43\2\uffff\1\43\65\uffff\10"+
            "\43\31\uffff\1\43\41\uffff\2\43\35\uffff\3\43\2\uffff\1\43\5"+
            "\uffff\1\43\7\uffff\1\43\32\uffff\1\43\1\uffff\2\43\6\uffff"+
            "\4\43\27\uffff\2\43\157\uffff\1\43\41\uffff\1\43\25\uffff\1"+
            "\43\10\uffff\2\43\17\uffff\1\43",
            "\1\uffff",
            "\1\45",
            "\1\uffff",
            "\1\47",
            "\1\uffff",
            "\1\51",
            "\1\uffff",
            "\1\53",
            "\1\uffff",
            "\1\106\34\uffff\1\107",
            "\1\56",
            "\1\uffff",
            "\1\110\34\uffff\1\111",
            "\1\61\103\uffff\1\61\73\uffff\1\61",
            "\1\uffff",
            "\1\63",
            "\1\uffff",
            "\1\65",
            "\1\uffff",
            "\1\67",
            "\1\uffff",
            "\1\71\u018e\uffff\1\71",
            "\1\uffff",
            "\1\73",
            "\1\uffff",
            "\1\75\2\uffff\1\75\61\uffff\1\75\21\uffff\1\75\35\uffff\1"+
            "\75\u00ac\uffff\1\75",
            "\1\uffff",
            "\1\77\u018e\uffff\1\77",
            "\1\uffff",
            "\1\101\u018e\uffff\1\101",
            "\1\uffff",
            "\1\103",
            "\1\112",
            "\1\105\2\uffff\1\105\11\uffff\1\105\2\uffff\1\105\65\uffff"+
            "\10\105\31\uffff\1\105\41\uffff\2\105\35\uffff\3\105\2\uffff"+
            "\1\105\5\uffff\1\105\7\uffff\1\105\32\uffff\1\105\1\uffff\2"+
            "\105\6\uffff\4\105\27\uffff\2\105\157\uffff\1\105\41\uffff\1"+
            "\105\25\uffff\1\105\10\uffff\2\105\17\uffff\1\105",
            "\1\uffff",
            "\1\107",
            "\1\uffff",
            "\1\111",
            "\1\uffff",
            "\1\113\1\uffff\1\114",
            "\1\115",
            "\1\uffff",
            "\1\113\1\uffff\1\114"
    };

    static final short[] DFA172_eot = DFA.unpackEncodedString(DFA172_eotS);
    static final short[] DFA172_eof = DFA.unpackEncodedString(DFA172_eofS);
    static final char[] DFA172_min = DFA.unpackEncodedStringToUnsignedChars(DFA172_minS);
    static final char[] DFA172_max = DFA.unpackEncodedStringToUnsignedChars(DFA172_maxS);
    static final short[] DFA172_accept = DFA.unpackEncodedString(DFA172_acceptS);
    static final short[] DFA172_special = DFA.unpackEncodedString(DFA172_specialS);
    static final short[][] DFA172_transition;

    static {
        int numStates = DFA172_transitionS.length;
        DFA172_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA172_transition[i] = DFA.unpackEncodedString(DFA172_transitionS[i]);
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = DFA172_eot;
            this.eof = DFA172_eof;
            this.min = DFA172_min;
            this.max = DFA172_max;
            this.accept = DFA172_accept;
            this.special = DFA172_special;
            this.transition = DFA172_transition;
        }
        public String getDescription() {
            return "()* loopback of 117:15: ( ( COMMA )? table_option )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA172_61 = input.LA(1);

                         
                        int index172_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_61);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA172_32 = input.LA(1);

                         
                        int index172_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_32);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA172_41 = input.LA(1);

                         
                        int index172_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA172_55 = input.LA(1);

                         
                        int index172_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_55);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA172_39 = input.LA(1);

                         
                        int index172_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_39);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA172_65 = input.LA(1);

                         
                        int index172_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_65);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA172_46 = input.LA(1);

                         
                        int index172_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA172_37 = input.LA(1);

                         
                        int index172_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_37);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA172_51 = input.LA(1);

                         
                        int index172_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_51);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA172_53 = input.LA(1);

                         
                        int index172_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_53);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA172_59 = input.LA(1);

                         
                        int index172_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_59);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA172_35 = input.LA(1);

                         
                        int index172_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_35);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA172_43 = input.LA(1);

                         
                        int index172_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_43);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA172_28 = input.LA(1);

                         
                        int index172_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_28);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA172_69 = input.LA(1);

                         
                        int index172_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_69);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA172_63 = input.LA(1);

                         
                        int index172_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_63);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA172_30 = input.LA(1);

                         
                        int index172_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_30);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA172_57 = input.LA(1);

                         
                        int index172_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_57);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA172_73 = input.LA(1);

                         
                        int index172_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_73);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA172_49 = input.LA(1);

                         
                        int index172_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_49);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA172_76 = input.LA(1);

                         
                        int index172_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_76);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA172_71 = input.LA(1);

                         
                        int index172_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SQLParser2()) ) {s = 3;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index172_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 172, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA198_eotS =
        "\27\uffff";
    static final String DFA198_eofS =
        "\27\uffff";
    static final String DFA198_minS =
        "\1\65\3\uffff\1\122\22\uffff";
    static final String DFA198_maxS =
        "\1\u01de\3\uffff\1\133\22\uffff";
    static final String DFA198_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25";
    static final String DFA198_specialS =
        "\27\uffff}>";
    static final String[] DFA198_transitionS = {
            "\1\2\1\uffff\1\3\32\uffff\2\5\1\uffff\1\6\5\uffff\1\7\4\uffff"+
            "\1\10\11\uffff\1\11\31\uffff\1\12\22\uffff\1\4\2\uffff\1\13"+
            "\27\uffff\1\1\74\uffff\1\14\6\uffff\1\15\12\uffff\1\16\56\uffff"+
            "\1\17\11\uffff\1\20\37\uffff\1\21\5\uffff\1\22\43\uffff\1\23"+
            "\46\uffff\1\24\1\25\61\uffff\1\26",
            "",
            "",
            "",
            "\2\5\7\uffff\1\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_eotS);
    static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_eofS);
    static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_minS);
    static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_maxS);
    static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_acceptS);
    static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_specialS);
    static final short[][] DFA198_transition;

    static {
        int numStates = DFA198_transitionS.length;
        DFA198_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA198_transition[i] = DFA.unpackEncodedString(DFA198_transitionS[i]);
        }
    }

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = DFA198_eot;
            this.eof = DFA198_eof;
            this.min = DFA198_min;
            this.max = DFA198_max;
            this.accept = DFA198_accept;
            this.special = DFA198_special;
            this.transition = DFA198_transition;
        }
        public String getDescription() {
            return "120:1: table_option : ( ( ENGINE_SYM ( EQ_SYM )? engine_name ) | ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM ) | ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? ( CHARACTER_SYM SET_SYM | CHARSET ) ( EQ_SYM )? charset_name ) | ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name ) | ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING ) | ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING ) | ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM ) | ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) ) | ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) ) | ( PASSWORD ( EQ_SYM )? TEXT_STRING ) | ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) ) | ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN ) );";
        }
    }
    static final String DFA296_eotS =
        "\62\uffff";
    static final String DFA296_eofS =
        "\62\uffff";
    static final String DFA296_minS =
        "\1\41\1\uffff\1\122\1\u0192\1\136\5\uffff\1\136\22\uffff\1\55\4"+
        "\uffff\1\u0204\1\uffff\1\u00cc\11\uffff\1\55\1\0\1\u00cc\1\uffff";
    static final String DFA296_maxS =
        "\1\u01de\1\uffff\1\133\1\u0192\1\u022c\5\uffff\1\u022c\22\uffff"+
        "\1\u020e\4\uffff\1\u022c\1\uffff\1\u022c\11\uffff\1\u01eb\1\0\1"+
        "\u01df\1\uffff";
    static final String DFA296_acceptS =
        "\1\uffff\1\1\3\uffff\1\12\1\13\1\14\1\15\1\16\1\uffff\1\23\1\24"+
        "\1\25\1\26\1\27\1\31\1\32\1\33\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
        "\1\45\1\46\1\47\1\uffff\1\4\1\7\1\10\1\34\1\uffff\1\3\1\uffff\1"+
        "\11\1\5\1\6\1\2\1\20\1\21\1\22\1\35\1\17\3\uffff\1\30";
    static final String DFA296_specialS =
        "\57\uffff\1\0\2\uffff}>";
    static final String[] DFA296_transitionS = {
            "\1\4\6\uffff\1\5\1\uffff\1\6\1\27\11\uffff\1\1\1\uffff\1\1"+
            "\27\uffff\1\7\2\uffff\1\3\1\1\1\30\1\1\2\uffff\1\24\2\uffff"+
            "\1\1\4\uffff\1\1\11\uffff\1\1\2\uffff\1\17\26\uffff\1\1\22\uffff"+
            "\1\2\2\uffff\1\1\6\uffff\1\13\1\20\4\uffff\1\12\4\uffff\1\14"+
            "\5\uffff\1\1\7\uffff\1\26\20\uffff\1\22\41\uffff\1\21\1\uffff"+
            "\1\1\6\uffff\1\1\12\uffff\1\1\34\uffff\1\10\21\uffff\1\1\11"+
            "\uffff\1\1\5\uffff\1\11\21\uffff\1\31\4\uffff\1\16\2\uffff\1"+
            "\1\5\uffff\1\1\22\uffff\1\32\4\uffff\1\34\1\15\1\25\1\33\10"+
            "\uffff\1\1\46\uffff\2\1\54\uffff\1\23\4\uffff\1\1",
            "",
            "\1\3\1\1\7\uffff\1\1",
            "\1\35",
            "\1\42\14\uffff\1\44\140\uffff\1\45\7\uffff\1\37\32\uffff\1"+
            "\36\22\uffff\1\36\132\uffff\1\41\13\uffff\1\46\67\uffff\1\40"+
            "\75\uffff\1\47\44\uffff\1\43\47\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "\1\55\155\uffff\1\53\42\uffff\1\52\22\uffff\1\52\132\uffff"+
            "\1\54\13\uffff\1\51\u00c2\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\2\uffff\1\57\11\uffff\1\57\2\uffff\1\57\65\uffff\10"+
            "\57\31\uffff\1\57\41\uffff\2\57\35\uffff\3\57\2\uffff\1\57\5"+
            "\uffff\1\57\7\uffff\1\57\32\uffff\1\57\1\uffff\2\57\6\uffff"+
            "\4\57\27\uffff\2\57\157\uffff\1\57\41\uffff\1\57\25\uffff\1"+
            "\57\10\uffff\2\57\17\uffff\1\57\42\uffff\1\56",
            "",
            "",
            "",
            "",
            "\1\43\47\uffff\1\50",
            "",
            "\1\45\u009c\uffff\1\46\165\uffff\1\47\114\uffff\1\60",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\2\uffff\1\57\11\uffff\1\57\2\uffff\1\57\65\uffff\10"+
            "\57\31\uffff\1\57\41\uffff\2\57\35\uffff\3\57\2\uffff\1\57\5"+
            "\uffff\1\57\7\uffff\1\57\32\uffff\1\57\1\uffff\2\57\6\uffff"+
            "\4\57\27\uffff\2\57\157\uffff\1\57\41\uffff\1\57\25\uffff\1"+
            "\57\10\uffff\2\57\17\uffff\1\57",
            "\1\uffff",
            "\1\45\u009c\uffff\1\46\165\uffff\1\47",
            ""
    };

    static final short[] DFA296_eot = DFA.unpackEncodedString(DFA296_eotS);
    static final short[] DFA296_eof = DFA.unpackEncodedString(DFA296_eofS);
    static final char[] DFA296_min = DFA.unpackEncodedStringToUnsignedChars(DFA296_minS);
    static final char[] DFA296_max = DFA.unpackEncodedStringToUnsignedChars(DFA296_maxS);
    static final short[] DFA296_accept = DFA.unpackEncodedString(DFA296_acceptS);
    static final short[] DFA296_special = DFA.unpackEncodedString(DFA296_specialS);
    static final short[][] DFA296_transition;

    static {
        int numStates = DFA296_transitionS.length;
        DFA296_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA296_transition[i] = DFA.unpackEncodedString(DFA296_transitionS[i]);
        }
    }

    class DFA296 extends DFA {

        public DFA296(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 296;
            this.eot = DFA296_eot;
            this.eof = DFA296_eof;
            this.min = DFA296_min;
            this.max = DFA296_max;
            this.accept = DFA296_accept;
            this.special = DFA296_special;
            this.transition = DFA296_transition;
        }
        public String getDescription() {
            return "201:1: alter_table_specification : ( table_options | ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? ) | ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN ) | ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition ) | ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ) | ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) ) | ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ) | ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( DROP ( COLUMN_SYM )? column_name ) | ( DROP PRIMARY_SYM KEY_SYM ) | ( DROP ( INDEX_SYM | KEY_SYM ) index_name ) | ( DROP FOREIGN KEY_SYM foreign_key_symbol_name ) | ( DISABLE_SYM KEYS ) | ( ENABLE_SYM KEYS ) | ( RENAME ( TO_SYM | AS_SYM )? table_name ) | ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* ) | ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) | ( DISCARD TABLESPACE ) | ( IMPORT TABLESPACE ) | ( FORCE_SYM ) | ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN ) | ( DROP PARTITION_SYM partition_names ) | ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) ) | ( COALESCE PARTITION_SYM INTEGER_NUM ) | ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN ) | ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name ) | ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) ) | ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( REPAIR PARTITION_SYM ( partition_names | ALL ) ) | ( REMOVE_SYM PARTITIONING_SYM ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA296_47 = input.LA(1);

                         
                        int index296_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_SQLParser2()) ) {s = 1;}

                        else if ( (synpred416_SQLParser2()) ) {s = 49;}

                         
                        input.seek(index296_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 296, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_create_table_statement1_in_create_table_statement19 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_table_statement2_in_create_table_statement23 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_table_statement3_in_create_table_statement27 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_create_table_statement137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_create_table_expression1_in_create_table_statement139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEMPORARY_in_create_table_expression157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_TABLE_in_create_table_expression161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IF_in_create_table_expression164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_NOT_SYM_in_create_table_expression166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_create_table_expression168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_create_table_expression172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_create_table_expression175 = new BitSet(new long[]{0x0000000000000000L,0x0000080000100000L,0x0000000000000000L,0x0000800000101000L,0x0000000000000004L,0x0000020000000000L,0x0000000200000000L,0x0000000080000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_create_definition_in_create_table_expression177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_create_table_expression180 = new BitSet(new long[]{0x0000000000000000L,0x0000080000100000L,0x0000000000000000L,0x0000800000101000L,0x0000000000000004L,0x0000020000000000L,0x0000000200000000L,0x0000000080000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_create_definition_in_create_table_expression182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_create_table_expression186 = new BitSet(new long[]{0x00A0000000000002L,0x00000401082C0000L,0x0004000004800010L,0x0040800000000000L,0x0401000000000002L,0x0000000124000000L,0x0000180000008010L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_options_in_create_table_expression190 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_partition_options_in_create_table_expression196 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_select_statement_in_create_table_expression1102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_create_table_statement2114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_create_table_expression2_in_create_table_statement2116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEMPORARY_in_create_table_expression2134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_TABLE_in_create_table_expression2138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IF_in_create_table_expression2141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_NOT_SYM_in_create_table_expression2143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_create_table_expression2145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_create_table_expression2149 = new BitSet(new long[]{0x00A0000000000000L,0x00000401082C0000L,0x0004000004800010L,0x0040800000000000L,0x0401000000000002L,0x0000000124000000L,0x0000180000008010L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_options_in_create_table_expression2153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_partition_options_in_create_table_expression2159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_select_statement_in_create_table_expression2164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_create_table_statement3174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_create_table_expression3_in_create_table_statement3176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEMPORARY_in_create_table_expression3194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_TABLE_in_create_table_expression3198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IF_in_create_table_expression3201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_NOT_SYM_in_create_table_expression3203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_create_table_expression3205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_create_table_expression3209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LIKE_SYM_in_create_table_expression3215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_create_table_expression3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_create_table_expression3223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LIKE_SYM_in_create_table_expression3225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_create_table_expression3227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_create_table_expression3229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_create_definition247 = new BitSet(new long[]{0x2800000010000000L,0x000000000001000AL,0x0008004000200500L,0x0300000000000100L,0x0038000C00000000L,0x0004000000000800L,0x0000000010040000L,0x000600000001C910L});
    public static final BitSet FOLLOW_column_definition_in_create_definition249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRAINT_in_create_definition261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_PRIMARY_SYM_in_create_definition270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KEY_SYM_in_create_definition272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_index_type_in_create_definition275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_create_definition279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_create_definition281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_create_definition284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_create_definition286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_create_definition290 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_index_option_in_create_definition293 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_set_in_create_definition306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_index_name_in_create_definition313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_index_type_in_create_definition318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_create_definition322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_create_definition324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_create_definition327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_create_definition329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_create_definition333 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_index_option_in_create_definition336 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_CONSTRAINT_in_create_definition350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_UNIQUE_SYM_in_create_definition359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_set_in_create_definition361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_index_name_in_create_definition369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_index_type_in_create_definition374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_create_definition378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_create_definition380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_create_definition383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_create_definition385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_create_definition389 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_index_option_in_create_definition392 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_set_in_create_definition405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_set_in_create_definition411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_index_name_in_create_definition419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_create_definition423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_create_definition425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_create_definition428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_create_definition430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_create_definition434 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_index_option_in_create_definition437 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_CONSTRAINT_in_create_definition451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOREIGN_in_create_definition460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KEY_SYM_in_create_definition462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_index_name_in_create_definition465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_create_definition469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_create_definition471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_create_definition474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_create_definition476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_create_definition480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_reference_definition_in_create_definition482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECK_SYM_in_create_definition493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_create_definition495 = new BitSet(new long[]{0xF15B003CC0000000L,0x880772C0140B7805L,0xB000C80062CF0BEEL,0xA4A30C120B07622BL,0x4B84FCE3AA060300L,0x3080E46F0040570EL,0x3795E20149221DABL,0x0F31D751239C3F81L,0x00021F41C00000B0L});
    public static final BitSet FOLLOW_expression_in_create_definition497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_create_definition499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_data_type_header_in_column_definition511 = new BitSet(new long[]{0x0020000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020020000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_AUTO_INCREMENT_in_column_definition515 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020020000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_UNIQUE_SYM_in_column_definition522 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0020000000000000L});
    public static final BitSet FOLLOW_KEY_SYM_in_column_definition525 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_PRIMARY_SYM_in_column_definition533 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0020000000000000L});
    public static final BitSet FOLLOW_KEY_SYM_in_column_definition536 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMENT_SYM_in_column_definition546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_column_definition548 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COLUMN_FORMAT_in_column_definition554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000800000L,0x0000000000000080L});
    public static final BitSet FOLLOW_set_in_column_definition556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_reference_definition_in_column_definition568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_SYM_in_null_or_notnull580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NULL_SYM_in_null_or_notnull582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_SYM_in_null_or_notnull587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SYM_in_column_data_type_header601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header612 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_bit_literal_in_column_data_type_header619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TINYINT_in_column_data_type_header632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header653 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLINT_in_column_data_type_header673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header694 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIUMINT_in_column_data_type_header714 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header725 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header730 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_SYM_in_column_data_type_header755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header776 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000C40C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_SYM_in_column_data_type_header800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header816 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIGINT_in_column_data_type_header841 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header847 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header852 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header857 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header862 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_in_column_data_type_header882 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_column_data_type_header888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header897 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header902 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header907 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_SYM_in_column_data_type_header927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_column_data_type_header933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header937 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header952 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_SYM_in_column_data_type_header972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_column_data_type_header978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header982 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header992 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header1004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_SYM_in_column_data_type_header1017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header1019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header1021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_column_data_type_header1024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header1026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header1030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header1035 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header1040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1045 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header1052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMERIC_SYM_in_column_data_type_header1065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header1067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header1069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_column_data_type_header1072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header1074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header1078 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header1083 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header1088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1093 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x00000440C0000000L});
    public static final BitSet FOLLOW_number_literal_in_column_data_type_header1100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATE_SYM_in_column_data_type_header1113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_column_data_type_header1123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIME_SYM_in_column_data_type_header1140 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1143 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_column_data_type_header1150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_in_column_data_type_header1167 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1170 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_column_data_type_header1177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATETIME_in_column_data_type_header1196 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1199 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_column_data_type_header1206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Y__in_column_data_type_header1225 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_E__in_column_data_type_header1227 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_A__in_column_data_type_header1229 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_R__in_column_data_type_header1231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1234 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_column_data_type_header1241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_column_data_type_header1254 = new BitSet(new long[]{0x0000000000000002L,0x0000000008040000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header1259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header1261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header1263 = new BitSet(new long[]{0x0000000000000002L,0x0000000008040000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header1268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header1270 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_column_data_type_header1272 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header1277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_column_data_type_header1279 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_column_data_type_header1291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARCHAR_in_column_data_type_header1308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header1310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header1312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header1314 = new BitSet(new long[]{0x0000000000000002L,0x0000000008040000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header1319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header1321 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_column_data_type_header1323 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header1328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_column_data_type_header1330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_column_data_type_header1342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_in_column_data_type_header1359 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header1364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header1366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header1368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1373 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_column_data_type_header1380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARBINARY_in_column_data_type_header1397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header1399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_length_in_column_data_type_header1401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header1403 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_column_data_type_header1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TINYBLOB_in_column_data_type_header1430 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLOB_SYM_in_column_data_type_header1446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIUMBLOB_in_column_data_type_header1462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGBLOB_in_column_data_type_header1478 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TINYTEXT_in_column_data_type_header1494 = new BitSet(new long[]{0x2000000000000002L,0x0000000008040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_BINARY_in_column_data_type_header1499 = new BitSet(new long[]{0x0000000000000002L,0x0000000008040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header1504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header1506 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_column_data_type_header1508 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header1513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_column_data_type_header1515 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_SYM_in_column_data_type_header1533 = new BitSet(new long[]{0x2000000000000002L,0x0000000008040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_BINARY_in_column_data_type_header1538 = new BitSet(new long[]{0x0000000000000002L,0x0000000008040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header1543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header1545 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_column_data_type_header1547 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header1552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_column_data_type_header1554 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIUMTEXT_in_column_data_type_header1572 = new BitSet(new long[]{0x2000000000000002L,0x0000000008040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_BINARY_in_column_data_type_header1575 = new BitSet(new long[]{0x0000000000000002L,0x0000000008040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header1580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header1582 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_column_data_type_header1584 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header1589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_column_data_type_header1591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGTEXT_in_column_data_type_header1609 = new BitSet(new long[]{0x2000000000000002L,0x0000000008040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_BINARY_in_column_data_type_header1614 = new BitSet(new long[]{0x0000000000000002L,0x0000000008040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header1619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header1621 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_column_data_type_header1623 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header1628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_column_data_type_header1630 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_column_data_type_header1648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header1653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header1655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_column_data_type_header1658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header1660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header1664 = new BitSet(new long[]{0x0000000000000002L,0x0000000008040000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header1667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header1669 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_column_data_type_header1671 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header1676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_column_data_type_header1678 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1683 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_column_data_type_header1690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header1707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_column_data_type_header1709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header1711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_column_data_type_header1714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header1716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_column_data_type_header1720 = new BitSet(new long[]{0x0000000000000002L,0x0000000008040000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header1723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header1725 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_column_data_type_header1727 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header1732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_column_data_type_header1734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header1739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header1744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_column_data_type_header1746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_index_column_name1764 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_index_column_name1767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_index_column_name1769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_index_column_name1771 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_set_in_index_column_name1775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REFERENCES_in_reference_definition1791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_reference_definition1793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_reference_definition1795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_reference_definition1797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_reference_definition1800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_reference_definition1802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_reference_definition1806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_MATCH_in_reference_definition1812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_FULL_in_reference_definition1814 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_MATCH_in_reference_definition1820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PARTIAL_in_reference_definition1822 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_MATCH_in_reference_definition1828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SIMPLE_SYM_in_reference_definition1830 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_ON_in_reference_definition1838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_DELETE_SYM_in_reference_definition1840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000040L,0x0000000000040000L});
    public static final BitSet FOLLOW_reference_option_in_reference_definition1842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_ON_in_reference_definition1848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_UPDATE_in_reference_definition1850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000040L,0x0000000000040000L});
    public static final BitSet FOLLOW_reference_option_in_reference_definition1852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RESTRICT_in_reference_option1863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASCADE_in_reference_option1869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_SYM_in_reference_option1875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NULL_SYM_in_reference_option1877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_SYM_in_reference_option1883 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ACTION_in_reference_option1885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_option_in_table_options1895 = new BitSet(new long[]{0x00A0000000000002L,0x00000401082C0000L,0x0004000004800010L,0x0040800000000000L,0x0401000000000002L,0x0000000104000000L,0x0000180000000010L,0x0000000040000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_table_options1900 = new BitSet(new long[]{0x00A0000000000000L,0x00000401082C0000L,0x0004000004800010L,0x0040800000000000L,0x0401000000000002L,0x0000000104000000L,0x0000180000000010L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_option_in_table_options1905 = new BitSet(new long[]{0x00A0000000000002L,0x00000401082C0000L,0x0004000004800010L,0x0040800000000000L,0x0401000000000002L,0x0000000104000000L,0x0000180000000010L,0x0000000040000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_ENGINE_SYM_in_table_option1921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option1924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000004000L});
    public static final BitSet FOLLOW_engine_name_in_table_option1928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUTO_INCREMENT_in_table_option1939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option1942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_table_option1946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_ROW_LENGTH_in_table_option1957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option1960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_table_option1964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_table_option1976 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_table_option1981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_table_option1983 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L,0x0000000000004000L});
    public static final BitSet FOLLOW_CHARSET_in_table_option1987 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option1991 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_table_option1995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECKSUM_SYM_in_table_option2006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_table_option2013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_table_option2025 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_table_option2029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_table_option2036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_SYM_in_table_option2047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_table_option2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONNECTION_SYM_in_table_option2065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_table_option2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATA_SYM_in_table_option2083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DIRECTORY_SYM_in_table_option2085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_table_option2092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELAY_KEY_WRITE_SYM_in_table_option2103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_table_option2110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_SYM_in_table_option2121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DIRECTORY_SYM_in_table_option2123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_table_option2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_METHOD_in_table_option2141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000400L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000400L,0x0000000000000040L});
    public static final BitSet FOLLOW_set_in_table_option2148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KEY_BLOCK_SIZE_in_table_option2171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_table_option2178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_ROWS_in_table_option2189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_table_option2196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_ROWS_in_table_option2207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_table_option2214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACK_KEYS_SYM_in_table_option2225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_set_in_table_option2232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PASSWORD_in_table_option2249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_table_option2256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROW_FORMAT_SYM_in_table_option2267 = new BitSet(new long[]{0x0000000000000000L,0x0000002400000000L,0x0000020000800000L,0x0000000000000080L,0x0000000000000000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2270 = new BitSet(new long[]{0x0000000000000000L,0x0000002400000000L,0x0000020000800000L,0x0000000000000080L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_set_in_table_option2274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATS_AUTO_RECALC_in_table_option2297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_set_in_table_option2304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATS_PERSISTENT_in_table_option2321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_set_in_table_option2328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_SYM_in_table_option2345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004010L});
    public static final BitSet FOLLOW_EQ_SYM_in_table_option2348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_table_option2352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_table_option2354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_table_option2357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_table_option2359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_table_option2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_partition_options2375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BY_SYM_in_partition_options2377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000001400004L,0x0001000000000000L});
    public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options2390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_HASH_SYM_in_partition_options2394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_partition_options2396 = new BitSet(new long[]{0xF15B003CC0000000L,0x880772C0140B7805L,0xB000C80062CF0BEEL,0xA4A30C120B07622BL,0x4B84FCE3AA060300L,0x3080E46F0040570EL,0x3795E20149221DABL,0x0F31D751239C3F81L,0x00021F41C00000B0L});
    public static final BitSet FOLLOW_expression_in_partition_options2398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_partition_options2400 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options2411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KEY_SYM_in_partition_options2415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_partition_options2417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_column_list_in_partition_options2419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_partition_options2421 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_RANGE_SYM_in_partition_options2431 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_partition_options2433 = new BitSet(new long[]{0xF15B003CC0000000L,0x880772C0140B7805L,0xB000C80062CF0BEEL,0xA4A30C120B07622BL,0x4B84FCE3AA060300L,0x3080E46F0040570EL,0x3795E20149221DABL,0x0F31D751239C3F81L,0x00021F41C00000B0L});
    public static final BitSet FOLLOW_expression_in_partition_options2435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_partition_options2437 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLUMNS_SYM_in_partition_options2441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_partition_options2443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_column_list_in_partition_options2445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_partition_options2447 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LIST_SYM_in_partition_options2458 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_partition_options2460 = new BitSet(new long[]{0xF15B003CC0000000L,0x880772C0140B7805L,0xB000C80062CF0BEEL,0xA4A30C120B07622BL,0x4B84FCE3AA060300L,0x3080E46F0040570EL,0x3795E20149221DABL,0x0F31D751239C3F81L,0x00021F41C00000B0L});
    public static final BitSet FOLLOW_expression_in_partition_options2462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_partition_options2464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLUMNS_SYM_in_partition_options2468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_partition_options2470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_column_list_in_partition_options2472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_partition_options2474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_PARTITIONS_SYM_in_partition_options2484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_partition_options2486 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_SUBPARTITION_SYM_in_partition_options2495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BY_SYM_in_partition_options2497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000400004L});
    public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options2506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_HASH_SYM_in_partition_options2510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_partition_options2512 = new BitSet(new long[]{0xF15B003CC0000000L,0x880772C0140B7805L,0xB000C80062CF0BEEL,0xA4A30C120B07622BL,0x4B84FCE3AA060300L,0x3080E46F0040570EL,0x3795E20149221DABL,0x0F31D751239C3F81L,0x00021F41C00000B0L});
    public static final BitSet FOLLOW_expression_in_partition_options2514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_partition_options2516 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options2525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KEY_SYM_in_partition_options2529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_partition_options2531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_column_list_in_partition_options2533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_partition_options2535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_SUBPARTITIONS_SYM_in_partition_options2544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_partition_options2546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_partition_options2556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_partition_definition_in_partition_options2558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_partition_options2562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_partition_definition_in_partition_options2565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_partition_options2569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_partition_definition2580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_name_in_partition_definition2582 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0004000000000010L,0x0000800000000000L,0x0401000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000400000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_VALUES_in_partition_definition2589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LESS_SYM_in_partition_definition2600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_THAN_SYM_in_partition_definition2602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_expression_list_in_partition_definition2606 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0004000000000010L,0x0000800000000000L,0x0401000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_MAXVALUE_SYM_in_partition_definition2610 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0004000000000010L,0x0000800000000000L,0x0401000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IN_SYM_in_partition_definition2625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_expression_list_in_partition_definition2627 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0004000000000010L,0x0000800000000000L,0x0401000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_STORAGE_SYM_in_partition_definition2641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_ENGINE_SYM_in_partition_definition2645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_partition_definition2648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000004000L});
    public static final BitSet FOLLOW_engine_name_in_partition_definition2652 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000010L,0x0000800000000000L,0x0401000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMENT_SYM_in_partition_definition2658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_partition_definition2661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition2665 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L,0x0000800000000000L,0x0401000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DATA_SYM_in_partition_definition2672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DIRECTORY_SYM_in_partition_definition2674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_partition_definition2677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition2681 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0401000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_INDEX_SYM_in_partition_definition2687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DIRECTORY_SYM_in_partition_definition2689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_partition_definition2692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition2696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0401000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_MAX_ROWS_in_partition_definition2702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_partition_definition2705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_partition_definition2709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_MIN_ROWS_in_partition_definition2715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_partition_definition2718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_partition_definition2722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_partition_definition2728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_subpartition_definition_in_partition_definition2730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_partition_definition2733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_subpartition_definition_in_partition_definition2736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_partition_definition2740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBPARTITION_SYM_in_subpartition_definition2751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_logical_name_in_subpartition_definition2753 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0004000000000010L,0x0000800000000000L,0x0401000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_STORAGE_SYM_in_subpartition_definition2758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_ENGINE_SYM_in_subpartition_definition2762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition2765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000004000L});
    public static final BitSet FOLLOW_engine_name_in_subpartition_definition2769 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000010L,0x0000800000000000L,0x0401000000000000L});
    public static final BitSet FOLLOW_COMMENT_SYM_in_subpartition_definition2775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition2778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition2782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L,0x0000800000000000L,0x0401000000000000L});
    public static final BitSet FOLLOW_DATA_SYM_in_subpartition_definition2789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DIRECTORY_SYM_in_subpartition_definition2791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition2794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition2798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0401000000000000L});
    public static final BitSet FOLLOW_INDEX_SYM_in_subpartition_definition2804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DIRECTORY_SYM_in_subpartition_definition2806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition2809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition2813 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0401000000000000L});
    public static final BitSet FOLLOW_MAX_ROWS_in_subpartition_definition2819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition2822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_subpartition_definition2826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MIN_ROWS_in_subpartition_definition2832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition2835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_subpartition_definition2839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_length2850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALTER_in_alter_table_statement2859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_alter_table_expression_in_alter_table_statement2861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IGNORE_SYM_in_alter_table_expression2878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_TABLE_in_alter_table_expression2882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_alter_table_expression2884 = new BitSet(new long[]{0x00A00D0200000002L,0x00002401093C8000L,0x0404108604800010L,0x0040A00000000800L,0x0401000040000002L,0x0F08000124840001L,0x0000180000000010L,0x0000000042000000L});
    public static final BitSet FOLLOW_alter_table_specification_in_alter_table_expression2889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_alter_table_expression2892 = new BitSet(new long[]{0x00A00D0200000000L,0x00002401093C8000L,0x0404108604800010L,0x0040A00000000800L,0x0401000040000002L,0x0F08000104840001L,0x0000180000000010L,0x0000000042000000L});
    public static final BitSet FOLLOW_alter_table_specification_in_alter_table_expression2894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_partition_options_in_alter_table_expression2904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_options_in_alter_table_specification2918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification2925 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification2928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification2932 = new BitSet(new long[]{0x2800000010000000L,0x000000000001000AL,0x0008004000200500L,0x0300000000000100L,0x0038000C00000000L,0x0004000000000800L,0x0000000010040000L,0x000600000001C910L});
    public static final BitSet FOLLOW_column_definition_in_alter_table_specification2934 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_set_in_alter_table_specification2938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification2944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification2956 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification2959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_alter_table_specification2963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_definitions_in_alter_table_specification2965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_alter_table_specification2967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification2976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_alter_table_specification2978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_index_name_in_alter_table_specification2985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_index_type_in_alter_table_specification2990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_alter_table_specification2994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_names_in_alter_table_specification2996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_alter_table_specification2998 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_index_option_in_alter_table_specification3001 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification3012 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification3015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification3018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_PRIMARY_SYM_in_alter_table_specification3024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification3026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_index_type_in_alter_table_specification3029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_alter_table_specification3033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_names_in_alter_table_specification3035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_alter_table_specification3037 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_index_option_in_alter_table_specification3040 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification3057 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification3060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification3063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_UNIQUE_SYM_in_alter_table_specification3069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_set_in_alter_table_specification3071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_index_name_in_alter_table_specification3079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_index_type_in_alter_table_specification3087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_alter_table_specification3091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_alter_table_specification3093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_alter_table_specification3096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_alter_table_specification3098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_alter_table_specification3102 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_index_option_in_alter_table_specification3105 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification3118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_FULLTEXT_SYM_in_alter_table_specification3120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_set_in_alter_table_specification3122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_index_name_in_alter_table_specification3130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_alter_table_specification3134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_names_in_alter_table_specification3136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_alter_table_specification3138 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_index_option_in_alter_table_specification3141 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification3152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SPATIAL_SYM_in_alter_table_specification3154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_set_in_alter_table_specification3156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_index_name_in_alter_table_specification3164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_alter_table_specification3168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_names_in_alter_table_specification3170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_alter_table_specification3172 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_index_option_in_alter_table_specification3175 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000008000000000L});
    public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification3186 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification3189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification3192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOREIGN_in_alter_table_specification3198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification3200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000010L});
    public static final BitSet FOLLOW_index_name_in_alter_table_specification3203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_alter_table_specification3207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_names_in_alter_table_specification3209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_alter_table_specification3211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_reference_definition_in_alter_table_specification3213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALGORITHM_SYM_in_alter_table_specification3222 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000000800000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification3225 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000000800000L,0x0010000000000000L});
    public static final BitSet FOLLOW_set_in_alter_table_specification3229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALTER_in_alter_table_specification3244 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification3247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification3251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification3255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification3257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000001000000L,0x00000F40C0000000L});
    public static final BitSet FOLLOW_literal_value_in_alter_table_specification3259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_alter_table_specification3265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification3267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHANGE_in_alter_table_specification3278 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification3281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification3285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification3287 = new BitSet(new long[]{0x2800000010000000L,0x000000000001000AL,0x0008004000200500L,0x0300000000000100L,0x0038000C00000000L,0x0004000000000800L,0x0000000010040000L,0x000600000001C910L});
    public static final BitSet FOLLOW_column_definition_in_alter_table_specification3289 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_FIRST_SYM_in_alter_table_specification3292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_SYM_in_alter_table_specification3294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification3296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCK_in_alter_table_specification3307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000080000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification3310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000080000L});
    public static final BitSet FOLLOW_set_in_alter_table_specification3314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODIFY_SYM_in_alter_table_specification3331 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification3334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification3338 = new BitSet(new long[]{0x2800000010000000L,0x000000000001000AL,0x0008004000200500L,0x0300000000000100L,0x0038000C00000000L,0x0004000000000800L,0x0000000010040000L,0x000600000001C910L});
    public static final BitSet FOLLOW_column_definition_in_alter_table_specification3340 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_FIRST_SYM_in_alter_table_specification3343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_SYM_in_alter_table_specification3347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_alter_table_specification3360 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification3363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification3367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_alter_table_specification3376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_PRIMARY_SYM_in_alter_table_specification3378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification3380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_alter_table_specification3389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_alter_table_specification3391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_name_in_alter_table_specification3397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_alter_table_specification3406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOREIGN_in_alter_table_specification3408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification3410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_foreign_key_symbol_name_in_alter_table_specification3412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISABLE_SYM_in_alter_table_specification3421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KEYS_in_alter_table_specification3423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENABLE_SYM_in_alter_table_specification3432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KEYS_in_alter_table_specification3434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RENAME_in_alter_table_specification3443 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000100000000000L});
    public static final BitSet FOLLOW_set_in_alter_table_specification3445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_alter_table_specification3452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_SYM_in_alter_table_specification3461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BY_SYM_in_alter_table_specification3463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification3465 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_alter_table_specification3468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_alter_table_specification3470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_CONVERT_SYM_in_alter_table_specification3481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_TO_SYM_in_alter_table_specification3483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_table_specification3485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification3487 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_alter_table_specification3489 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_alter_table_specification3492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_alter_table_specification3494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification3506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_table_specification3510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification3512 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification3515 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_alter_table_specification3519 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_alter_table_specification3522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification3525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_alter_table_specification3529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISCARD_in_alter_table_specification3540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_TABLESPACE_in_alter_table_specification3542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_alter_table_specification3551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_TABLESPACE_in_alter_table_specification3553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORCE_SYM_in_alter_table_specification3562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification3571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_alter_table_specification3575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_partition_definition_in_alter_table_specification3577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_alter_table_specification3579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_alter_table_specification3588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_names_in_alter_table_specification3592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUNCATE_in_alter_table_specification3601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3603 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_names_in_alter_table_specification3606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_alter_table_specification3610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_alter_table_specification3620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_alter_table_specification3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REORGANIZE_SYM_in_alter_table_specification3633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_names_in_alter_table_specification3637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_INTO_in_alter_table_specification3639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_alter_table_specification3641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_partition_definition_in_alter_table_specification3643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_COMMA_in_alter_table_specification3646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_partition_definition_in_alter_table_specification3648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_RPAREN_in_alter_table_specification3652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCHANGE_SYM_in_alter_table_specification3661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_name_in_alter_table_specification3665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_WITH_in_alter_table_specification3667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_TABLE_in_alter_table_specification3669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_alter_table_specification3671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANALYZE_SYM_in_alter_table_specification3680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3682 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_names_in_alter_table_specification3685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_alter_table_specification3689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECK_SYM_in_alter_table_specification3699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3701 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_names_in_alter_table_specification3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_alter_table_specification3708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTIMIZE_in_alter_table_specification3718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3720 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_names_in_alter_table_specification3723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_alter_table_specification3727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REBUILD_SYM_in_alter_table_specification3737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3739 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_names_in_alter_table_specification3742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_alter_table_specification3746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPAIR_in_alter_table_specification3756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification3758 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_partition_names_in_alter_table_specification3761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_alter_table_specification3765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMOVE_SYM_in_alter_table_specification3775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_PARTITIONING_SYM_in_alter_table_specification3777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_column_name_in_index_column_names3788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_index_column_names3791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_index_column_name_in_index_column_names3793 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_USING_SYM_in_index_type3802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_set_in_index_type3804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KEY_BLOCK_SIZE_in_index_option3822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_index_option3825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTEGER_NUM_in_index_option3829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_type_in_index_option3836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_index_option3843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_PARSER_SYM_in_index_option3845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_parser_name_in_index_option3847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_SYM_in_index_option3856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_TEXT_STRING_in_index_option3858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_column_definitions3868 = new BitSet(new long[]{0x2800000010000000L,0x000000000001000AL,0x0008004000200500L,0x0300000000000100L,0x0038000C00000000L,0x0004000000000800L,0x0000000010040000L,0x000600000001C910L});
    public static final BitSet FOLLOW_column_definition_in_column_definitions3870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_column_definitions3873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_column_name_in_column_definitions3875 = new BitSet(new long[]{0x2800000010000000L,0x000000000001000AL,0x0008004000200500L,0x0300000000000100L,0x0038000C00000000L,0x0004000000000800L,0x0000000010040000L,0x000600000001C910L});
    public static final BitSet FOLLOW_column_definition_in_column_definitions3877 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RENAME_in_rename_table_statement3889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_TABLE_in_rename_table_statement3891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_rename_table_statement3895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_TO_SYM_in_rename_table_statement3897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_rename_table_statement3899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_rename_table_statement3903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_rename_table_statement3905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_TO_SYM_in_rename_table_statement3907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_rename_table_statement3909 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DROP_in_drop_table_statement3922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_drop_table_expression_in_drop_table_statement3924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEMPORARY_in_drop_table_expression3942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_TABLE_in_drop_table_expression3946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IF_in_drop_table_expression3949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_drop_table_expression3951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_drop_table_expression3956 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_drop_table_expression3959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_drop_table_expression3961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_set_in_drop_table_expression3966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUNCATE_in_truncate_table_statement3984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_TABLE_in_truncate_table_statement3987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_table_name_in_truncate_table_statement3991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_create_view_statement4009 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_create_view_expression_in_create_view_statement4011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_SYM_in_create_view_expression4028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_REPLACE_in_create_view_expression4030 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_create_view_body_in_create_view_expression4035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALGORITHM_SYM_in_create_view_body4044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_create_view_body4046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000004L});
    public static final BitSet FOLLOW_set_in_create_view_body4048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_DEFINER_in_create_view_body4064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_create_view_body4066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_user_name_in_create_view_body4069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_CURRENT_USER_in_create_view_body4073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SQL_SYM_in_create_view_body4081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SECURITY_SYM_in_create_view_body4083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_set_in_create_view_body4085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_VIEW_SYM_in_create_view_body4098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_view_name_in_create_view_body4100 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_create_view_body4103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_column_list_in_create_view_body4105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_create_view_body4107 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_AS_SYM_in_create_view_body4112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_select_statement_in_create_view_body4114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_WITH_in_create_view_body4118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100400L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_set_in_create_view_body4120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_CHECK_SYM_in_create_view_body4129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPTION_in_create_view_body4131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALTER_in_alter_view_statement4144 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_create_view_body_in_alter_view_statement4146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_drop_view_statement4165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_drop_view_expression_in_drop_view_statement4167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIEW_SYM_in_drop_view_expression4183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IF_in_drop_view_expression4186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_drop_view_expression4188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_view_name_in_drop_view_expression4193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_drop_view_expression4196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_view_name_in_drop_view_expression4198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_set_in_drop_view_expression4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred231_SQLParser21900 = new BitSet(new long[]{0x00A0000000000000L,0x00000401082C0000L,0x0004000004800010L,0x0040800000000000L,0x0401000000000002L,0x0000000104000000L,0x0000180000000010L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_option_in_synpred231_SQLParser21905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_options_in_synpred337_SQLParser22918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_synpred416_SQLParser23506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_CHARACTER_SYM_in_synpred416_SQLParser23510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_SYM_in_synpred416_SQLParser23512 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_synpred416_SQLParser23515 = new BitSet(new long[]{0x2401200000000000L,0x07F8000000000000L,0x00C0000000100000L,0x0000010104E00000L,0x000003000001E068L,0x0000000000000000L,0x0800000002000000L,0x000008000C020000L});
    public static final BitSet FOLLOW_charset_name_in_synpred416_SQLParser23519 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_COLLATE_SYM_in_synpred416_SQLParser23522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000004000L});
    public static final BitSet FOLLOW_EQ_SYM_in_synpred416_SQLParser23525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_collation_name_in_synpred416_SQLParser23529 = new BitSet(new long[]{0x0000000000000002L});

}