// $ANTLR 3.1.3 Mar 17, 2009 19:23:44 OracleParser.g 2013-11-19 14:17:23
package com.lenovo.lps.farseer.priest2.platform.util.antlr;

import java.util.HashMap;
import java.util.Stack;

import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.DFA;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.FailedPredicateException;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.runtime.tree.RewriteEarlyExitException;
import org.antlr.runtime.tree.RewriteRuleSubtreeStream;
import org.antlr.runtime.tree.RewriteRuleTokenStream;
import org.antlr.runtime.tree.TreeAdaptor;

@SuppressWarnings("unused")
public class OracleParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", "MINUS_SIGN", "DOUBLE_PERIOD", "UNDERSCORE", "A_", "B_", "C_", "D_", "E_", "F_", "G_", "H_", "I_", "J_", "K_", "L_", "M_", "N_", "O_", "P_", "Q_", "R_", "S_", "T_", "U_", "V_", "W_", "X_", "Y_", "Z_", "FOR_NOTATION", "NEWLINE", "NATIONAL_CHAR_STRING_LIT", "SEPARATOR", "BIT_STRING_LIT", "HEX_STRING_LIT", "PERIOD", "EXACT_NUM_LIT", "CHAR_STRING", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_PAREN", "QS_OTHER", "CHAR_STRING_PERL", "QUOTE", "QS_OTHER_CH", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", "ASSIGN_OP", "COLON", "SIMPLE_LETTER", "QUESTION_MARK", "BINDVAR", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", "COMMENT", "SPACE", "PROMPT", "SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", "SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "PLSQL_RESERVED_CLUSTERS", "PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "SQL92_RESERVED_CONNECT", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_RESERVED_CRASH", "SQL92_RESERVED_CREATE", "SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", "SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", "SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", "SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", "PLSQL_RESERVED_EXCLUSIVE", "SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", "SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", "SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", "SQL92_RESERVED_IN", "PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", "SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", "PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "SQL92_RESERVED_NOT", "PLSQL_RESERVED_NOWAIT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", "SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_PROCEDURE", "SQL92_RESERVED_PUBLIC", "PLSQL_RESERVED_RESOURCE", "SQL92_RESERVED_REVOKE", "SQL92_RESERVED_SELECT", "PLSQL_RESERVED_SHARE", "SQL92_RESERVED_SIZE", "PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "SQL92_RESERVED_TABLE", "SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", "SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", "SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "PLSQL_RESERVED_VIEWS", "SQL92_RESERVED_WHEN", "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "PLSQL_NON_RESERVED_USING", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_ELSIF", "PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", "JOIN", "LEFT", "RIGHT", "FULL", "OUTER", "CROSS", "NATURAL", "INNER", "REGULAR_ID", "ZV", "DEBUG_VK", "REUSE_VK", "REPLACE_VK", "DETERMINISTIC_VK", "RESULT_CACHE_VK", "PIPELINED_VK", "AGGREGATE_VK", "RELIES_ON_VK", "AUTHID_VK", "DEFINER_VK", "CURRENT_USER_VK", "CLUSTER_VK", "PACKAGE_VK", "BODY_VK", "PARALLEL_ENABLE_VK", "SPECIFICATION_VK", "RANGE_VK", "HASH_VK", "EXTERNAL_VK", "CALL_VK", "DDL_VK", "ENABLE_VK", "DATABASE_VK", "DISABLE_VK", "BEFORE_VK", "REFERENCING_VK", "LOGON_VK", "AFTER_VK", "SCHEMA_VK", "TRUNCATE_VK", "STARTUP_VK", "STATISTICS_VK", "NOAUDIT_VK", "SUSPEND_VK", "AUDIT_VK", "DISASSOCIATE_VK", "SHUTDOWN_VK", "COMPOUND_VK", "SERVERERROR_VK", "PARENT_VK", "FOLLOWS_VK", "NESTED_VK", "OLD_VK", "DB_ROLE_CHANGE_VK", "LOGOFF_VK", "ANALYZE_VK", "INSTEAD_VK", "ASSOCIATE_VK", "NEW_VK", "RENAME_VK", "COMMENT_VK", "FORCE_VK", "VALIDATE_VK", "TYPE_VK", "COMPILE_VK", "EXCEPTIONS_VK", "LIMIT_VK", "INSTANTIABLE_VK", "FINAL_VK", "ADD_VK", "MODIFY_VK", "INCLUDING_VK", "CASCADE_VK", "INVALIDATE_VK", "CONVERT_VK", "LANGUAGE_VK", "JAVA_VK", "OVERRIDING_VK", "C_VK", "LIBRARY_VK", "CONTEXT_VK", "OUT_VK", "INOUT_VK", "PARAMETERS_VK", "AGENT_VK", "NOCOPY_VK", "PRAGMA_VK", "CUSTOMDATUM_VK", "ORADATA_VK", "CONSTRUCTOR_VK", "SQLDATA_VK", "MEMBER_VK", "SELF_VK", "OBJECT_VK", "STATIC_VK", "UNDER_VK", "MAP_VK", "CONSTANT_VK", "EXCEPTION_INIT_VK", "PERCENT_NOTFOUND_VK", "PERCENT_FOUND_VK", "PERCENT_ISOPEN_VK", "PERCENT_ROWCOUNT_VK", "PERCENT_ROWTYPE_VK", "PERCENT_TYPE_VK", "SERIALLY_REUSABLE_VK", "AUTONOMOUS_TRANSACTION_VK", "INLINE_VK", "RESTRICT_REFERENCES_VK", "EXIT_VK", "RETURN_VK", "RAISE_VK", "LOOP_VK", "FORALL_VK", "CONTINUE_VK", "REVERSE_VK", "OFF_VK", "EXECUTE_VK", "IMMEDIATE_VK", "COMMIT_VK", "WORK_VK", "BULK_VK", "COMMITTED_VK", "ISOLATION_VK", "SERIALIZABLE_VK", "WRITE_VK", "WAIT_VK", "CORRUPT_XID_ALL_VK", "CORRUPT_XID_VK", "BATCH_VK", "DEFERRED_VK", "ROLLBACK_VK", "OPEN_VK", "SAVEPOINT_VK", "CLOSE_VK", "READ_VK", "ONLY_VK", "REF_VK", "PLS_INTEGER_VK", "SUBPARTITION_VK", "PARTITION_VK", "TIMESTAMP_TZ_UNCONSTRAINED_VK", "UROWID_VK", "POSITIVEN_VK", "TIMEZONE_ABBR_VK", "BINARY_DOUBLE_VK", "BFILE_VK", "TIMEZONE_REGION_VK", "TIMESTAMP_LTZ_UNCONSTRAINED_VK", "NATURALN_VK", "SIMPLE_INTEGER_VK", "BYTE_VK", "BINARY_FLOAT_VK", "NCLOB_VK", "CLOB_VK", "DSINTERVAL_UNCONSTRAINED_VK", "YMINTERVAL_UNCONSTRAINED_VK", "ROWID_VK", "TIMESTAMP_UNCONSTRAINED_VK", "SIGNTYPE_VK", "BLOB_VK", "NVARCHAR2_VK", "STRING_VK", "MAXVALUE_VK", "MINVALUE_VK", "DBTIMEZONE_VK", "SESSIONTIMEZONE_VK", "RAW_VK", "NUMBER_VK", "VARCHAR2_VK", "BOOLEAN_VK", "POSITIVE_VK", "MLSLABEL_VK", "BINARY_INTEGER_VK", "LONG_VK", "CHARACTER_VK", "CHAR_VK", "VARCHAR_VK", "NCHAR_VK", "BIT_VK", "FLOAT_VK", "REAL_VK", "DOUBLE_VK", "PRECISION_VK", "TIME_VK", "TIMESTAMP_VK", "NUMERIC_VK", "DECIMAL_VK", "DEC_VK", "INTEGER_VK", "INT_VK", "SMALLINT_VK", "NATURAL_VK", "SECOND_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", "LOCAL_VK", "YEAR_VK", "MONTH_VK", "DAY_VK", "HOUR_VK", "MINUTE_VK", "MERGE_VK", "REJECT_VK", "LOG_VK", "UNLIMITED_VK", "FIRST_VK", "NOCYCLE_VK", "BLOCK_VK", "XML_VK", "PIVOT_VK", "SEQUENTIAL_VK", "SINGLE_VK", "SKIP_VK", "UPDATED_VK", "EXCLUDE_VK", "REFERENCE_VK", "UNTIL_VK", "SEED_VK", "SIBLINGS_VK", "CUBE_VK", "NULLS_VK", "DIMENSION_VK", "SCN_VK", "UNPIVOT_VK", "KEEP_VK", "MEASURES_VK", "SAMPLE_VK", "UPSERT_VK", "VERSIONS_VK", "RULES_VK", "ITERATE_VK", "ROLLUP_VK", "NAV_VK", "AUTOMATIC_VK", "LAST_VK", "GROUPING_VK", "INCLUDE_VK", "IGNORE_VK", "RESPECT_VK", "SUBMULTISET_VK", "LIKEC_VK", "LIKE2_VK", "LIKE4_VK", "ROW_VK", "SET_VK", "SOME_VK", "FULL_VK", "CROSS_VK", "LEFT_VK", "RIGHT_VK", "INNER_VK", "VALUE_VK", "INCREMENT_VK", "DECREMENT_VK", "AT_VK", "DENSE_RANK_VK", "NAME_VK", "COLLECT_VK", "ROWS_VK", "NCHAR_CS_VK", "DECOMPOSE_VK", "FOLLOWING_VK", "FIRST_VALUE_VK", "PRECEDING_VK", "WITHIN_VK", "CANONICAL_VK", "COMPATIBILITY_VK", "OVER_VK", "LAST_VALUE_VK", "CURRENT_VK", "UNBOUNDED_VK", "COST_VK", "CHAR_CS_VK", "AUTO_VK", "TREAT_VK", "CONTENT_VK", "XMLPARSE_VK", "XMLELEMENT_VK", "ENTITYESCAPING_VK", "STANDALONE_VK", "WELLFORMED_VK", "XMLEXISTS_VK", "VERSION_VK", "XMLCAST_VK", "YES_VK", "NO_VK", "EVALNAME_VK", "XMLPI_VK", "XMLCOLATTVAL_VK", "DOCUMENT_VK", "XMLFOREST_VK", "PASSING_VK", "INDENT_VK", "HIDE_VK", "XMLAGG_VK", "XMLNAMESPACES_VK", "NOSCHEMACHECK_VK", "NOENTITYESCAPING_VK", "XMLQUERY_VK", "XMLTABLE_VK", "XMLROOT_VK", "SCHEMACHECK_VK", "XMLATTRIBUTES_VK", "ENCODING_VK", "SHOW_VK", "XMLSERIALIZE_VK", "ORDINALITY_VK", "DEFAULTS_VK", "CHR_VK", "COUNT_VK", "CAST_VK", "TRANSLATE_VK", "TRIM_VK", "LEADING_VK", "TRAILING_VK", "BOTH_VK", "EXTRACT_VK", "SEQUENCE_VK", "NOORDER_VK", "CYCLE_VK", "CACHE_VK", "NOCACHE_VK", "NOMAXVALUE_VK", "NOMINVALUE_VK", "SEARCH_VK", "DEPTH_VK", "BREADTH_VK", "FUNC_NAME", "ALIAS", "EXPR", "ARGUMENTS", "ARGUMENT", "PARAMETER_NAME", "ATTRIBUTE_NAME", "SAVEPOINT_NAME", "ROLLBACK_SEGMENT_NAME", "TABLE_VAR_NAME", "SCHEMA_NAME", "ROUTINE_NAME", "PACKAGE_NAME", "IMPLEMENTATION_TYPE_NAME", "REFERENCE_MODEL_NAME", "MAIN_MODEL_NAME", "QUERY_NAME", "CONSTRAINT_NAME", "LABEL_NAME", "TYPE_NAME", "SEQUENCE_NAME", "EXCEPTION_NAME", "FUNCTION_NAME", "PROCEDURE_NAME", "TRIGGER_NAME", "INDEX_NAME", "CURSOR_NAME", "RECORD_NAME", "COLLECTION_NAME", "LINK_NAME", "COLUMN_NAME", "TABLEVIEW_NAME", "CHAR_SET_NAME", "ID", "VARIABLE_NAME", "HOSTED_VARIABLE_NAME", "CUSTOM_TYPE", "NATIVE_DATATYPE", "INTERVAL_DATATYPE", "PRECISION", "CASCATED_ELEMENT", "HOSTED_VARIABLE_ROUTINE_CALL", "HOSTED_VARIABLE", "ROUTINE_CALL", "ANY_ELEMENT", "COST_CLASS_NAME", "XML_COLUMN_NAME", "WHERE_CLAUSE", "EXPLAIN_STATEMENT", "SELECT_STATEMENT", "UPDATE_STATEMENT", "DELETE_STATEMENT", "INSERT_STATEMENT", "LOCK_TABLE_STATEMENT", "MERGE_STATEMENT", "FACTORING", "SUBQUERY", "SELECT_OPTIONS", "SELECT_LIST", "SELECT_ITEM", "FROM_CLAUSE", "DOT_ASTERISK", "TABLE_REF", "TABLE_REF_ELEMENT", "JOIN_DEF", "JOIN_QUALIFIER", "JOIN_ON_PART", "LOGIC_EXPR", "SELECTED_TABLEVIEW", "TABLE_EXPRESSION", "COLLECTION_MODE", "SELECT_MODE", "DIRECT_MODE", "PIVOT_ELEMENT", "ANY_MODE", "ELEMENTS_MODE", "PIVOT_IN_ELEMENT", "UNPIVOT_IN_ELEMENT", "HIERARCHICAL", "GROUP_BY_CLAUSE", "GROUP_BY_ELEMENT", "HAVING_CLAUSE", "GROUPIN_SET", "MAIN_MODEL", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_RULES", "MODEL_RULE", "ASSIGN", "ORDER_BY_CLAUSE", "ORDER_BY_ELEMENTS", "ORDER_BY_ELEMENT", "SINGLE_TABLE_MODE", "MULTI_TABLE_MODE", "TABLE_ELEMENT", "CONDITIONAL_INSERT", "COLUMNS", "MERGE_UPDATE", "MERGE_INSERT", "LOCK_TABLE_ELEMENT", "STATIC_RETURNING", "EXPR_LIST", "IS_NOT_NULL", "IS_NULL", "IS_NOT_NAN", "IS_NAN", "IS_NOT_PRESENT", "IS_PRESENT", "IS_NOT_INFINITE", "IS_INFINITE", "IS_NOT_A_SET", "IS_A_SET", "IS_NOT_EMPTY", "IS_EMPTY", "IS_NOT_OF_TYPE", "IS_OF_TYPE", "NOT_IN", "NOT_BETWEEN", "NOT_LIKE", "UNARY_OPERATOR", "STANDARD_FUNCTION", "MODEL_EXPRESSION", "FOR_SINGLE_COLUMN", "FOR_MULTI_COLUMN", "SIMPLE_CASE", "SEARCHED_CASE", "VECTOR_EXPR", "FUNCTION_ENABLING_OVER", "FUNCTION_ENABLING_USING", "FUNCTION_ENABLING_WITHIN_OR_OVER", "PREDICTION_FUNCTION", "ELEMENT", "XML_COLUMN", "XML_ALIAS", "PIVOT_ALIAS", "DATETIME_OP", "XML_ELEMENT", "SPECIAL_FUNC"
    };
    public static final int SQL92_RESERVED_DECLARE=107;
    public static final int D_=12;
    public static final int BIT_VK=357;
    public static final int PARAMETERS_VK=261;
    public static final int SIGNTYPE_VK=337;
    public static final int DOUBLE_ASTERISK=57;
    public static final int DEBUG_VK=188;
    public static final int COMMENT_VK=238;
    public static final int NESTED_VK=229;
    public static final int PRECISION=626;
    public static final int JAVA_VK=254;
    public static final int CURRENT_USER_VK=198;
    public static final int SEARCH_VK=503;
    public static final int COMPATIBILITY_VK=445;
    public static final int SERVERERROR_VK=226;
    public static final int XMLQUERY_VK=477;
    public static final int SELECT_STATEMENT=663;
    public static final int E_=13;
    public static final int TABLE_EXPRESSION=683;
    public static final int PERCENT_ROWCOUNT_VK=280;
    public static final int PARALLEL_ENABLE_VK=202;
    public static final int VERTICAL_BAR=78;
    public static final int DIMENSION_VK=400;
    public static final int EXECUTE_VK=295;
    public static final int QUESTION_MARK=66;
    public static final int ELEMENT=745;
    public static final int SAVEPOINT_NAME=594;
    public static final int BLOB_VK=338;
    public static final int LINK_NAME=616;
    public static final int SQL92_RESERVED_EXISTS=117;
    public static final int IS_NOT_A_SET=724;
    public static final int CHAR_CS_VK=451;
    public static final int AT_VK=433;
    public static final int PLSQL_RESERVED_VIEWS=169;
    public static final int F_=14;
    public static final int POSITIVEN_VK=321;
    public static final int EXIT_VK=287;
    public static final int PARAMETER_NAME=592;
    public static final int CARRET_OPERATOR_PART=73;
    public static final int LOGIC_EXPR=681;
    public static final int SQL92_RESERVED_HAVING=125;
    public static final int UNDERSCORE=8;
    public static final int SUBMULTISET_VK=418;
    public static final int PLSQL_NON_RESERVED_MODEL=174;
    public static final int IS_OF_TYPE=729;
    public static final int SEED_VK=396;
    public static final int CALL_VK=207;
    public static final int VALIDATE_VK=240;
    public static final int C_VK=256;
    public static final int NUMERIC_VK=364;
    public static final int REJECT_VK=381;
    public static final int ATTRIBUTE_NAME=593;
    public static final int BOOLEAN_VK=348;
    public static final int RULES_VK=408;
    public static final int HOSTED_VARIABLE=629;
    public static final int HASH_VK=205;
    public static final int ROUTINE_CALL=630;
    public static final int SQL92_RESERVED_DELETE=109;
    public static final int QS_ANGLE=44;
    public static final int G_=15;
    public static final int XMLFOREST_VK=469;
    public static final int SUBPARTITION_VK=317;
    public static final int SQL92_RESERVED_UNIQUE=165;
    public static final int SIMPLE_INTEGER_VK=328;
    public static final int LIKE2_VK=420;
    public static final int SELECT_LIST=672;
    public static final int DETERMINISTIC_VK=191;
    public static final int UPDATE_STATEMENT=664;
    public static final int ALIAS=588;
    public static final int SEQUENCE_NAME=607;
    public static final int EVALNAME_VK=465;
    public static final int SQL92_RESERVED_ORDER=147;
    public static final int NATURALN_VK=327;
    public static final int MONTH_VK=376;
    public static final int FUNC_NAME=506;
    public static final int ORDINALITY_VK=485;
    public static final int SQL92_RESERVED_THEN=161;
    public static final int SELECT_OPTIONS=671;
    public static final int SUSPEND_VK=221;
    public static final int ORADATA_VK=266;
    public static final int XML_VK=387;
    public static final int COMMIT_VK=297;
    public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=319;
    public static final int MEASURES_VK=404;
    public static final int REAL_VK=359;
    public static final int SQLDATA_VK=268;
    public static final int LEFT_BRACKET=80;
    public static final int NOSCHEMACHECK_VK=475;
    public static final int ROW_VK=422;
    public static final int WORK_VK=298;
    public static final int TREAT_VK=453;
    public static final int PREDICTION_FUNCTION=744;
    public static final int LAST_VK=413;
    public static final int EXCLUDE_VK=393;
    public static final int AUTHID_VK=196;
    public static final int SUBQUERY=670;
    public static final int WHERE_CLAUSE=634;
    public static final int RIGHT_PAREN=56;
    public static final int SESSIONTIMEZONE_VK=344;
    public static final int HAVING_CLAUSE=695;
    public static final int COMPILE_VK=242;
    public static final int SPECIFICATION_VK=203;
    public static final int LEFT=179;
    public static final int DOT_ASTERISK=675;
    public static final int A_=9;
    public static final int ARGUMENT=591;
    public static final int SQL92_RESERVED_WITH=172;
    public static final int SQL92_RESERVED_DESC=110;
    public static final int BEFORE_VK=212;
    public static final int OPEN_VK=310;
    public static final int PLSQL_RESERVED_IF=127;
    public static final int CASCATED_ELEMENT=627;
    public static final int FIRST_VK=384;
    public static final int CUSTOMDATUM_VK=265;
    public static final int AUTOMATIC_VK=412;
    public static final int NOORDER_VK=497;
    public static final int PLSQL_NON_RESERVED_PIVOT=176;
    public static final int TIMEZONE_MINUTE_VK=373;
    public static final int DAY_VK=377;
    public static final int OBJECT_VK=271;
    public static final int FLOAT_VK=358;
    public static final int OUTER=182;
    public static final int SQL92_RESERVED_VIEW=168;
    public static final int FOLLOWS_VK=228;
    public static final int NAV_VK=411;
    public static final int SQL92_RESERVED_ALL=86;
    public static final int B_=10;
    public static final int SQL92_RESERVED_GOTO=122;
    public static final int SKIP_VK=391;
    public static final int STARTUP_VK=218;
    public static final int AMPERSAND=54;
    public static final int BIT_STRING_LIT=39;
    public static final int CYCLE_VK=498;
    public static final int SQL92_RESERVED_TRUE=163;
    public static final int XMLCAST_VK=462;
    public static final int BINDVAR=67;
    public static final int RIGHT=180;
    public static final int SQL92_RESERVED_PROCEDURE=150;
    public static final int DISABLE_VK=211;
    public static final int INDEX_NAME=612;
    public static final int CLOSE_VK=312;
    public static final int SOLIDUS=61;
    public static final int PLSQL_RESERVED_START=157;
    public static final int DB_ROLE_CHANGE_VK=231;
    public static final int FACTORING=669;
    public static final int COLON=64;
    public static final int COLUMNS=710;
    public static final int SELECT_MODE=685;
    public static final int SQL92_RESERVED_GROUP=124;
    public static final int PLSQL_RESERVED_MODE=138;
    public static final int UNPIVOT_VK=402;
    public static final int MERGE_VK=380;
    public static final int C_=11;
    public static final int TABLE_ELEMENT=708;
    public static final int QS_OTHER_CH=51;
    public static final int PERCENT_ROWTYPE_VK=281;
    public static final int NATURAL=184;
    public static final int IGNORE_VK=416;
    public static final int UNARY_OPERATOR=733;
    public static final int UNBOUNDED_VK=449;
    public static final int INT_VK=368;
    public static final int OVER_VK=446;
    public static final int LAST_VALUE_VK=447;
    public static final int HIERARCHICAL=692;
    public static final int LEFT_VK=427;
    public static final int VERSION_VK=461;
    public static final int SAMPLE_VK=405;
    public static final int XMLCOLATTVAL_VK=467;
    public static final int OUT_VK=259;
    public static final int FULL_VK=425;
    public static final int PLSQL_NON_RESERVED_ELSIF=175;
    public static final int SQL92_RESERVED_LIKE=135;
    public static final int LIMIT_VK=244;
    public static final int CLUSTER_VK=199;
    public static final int FORCE_VK=239;
    public static final int SQL92_RESERVED_DISTINCT=111;
    public static final int RESPECT_VK=417;
    public static final int L_=20;
    public static final int CHAR_SET_NAME=619;
    public static final int PLSQL_RESERVED_EXCLUSIVE=116;
    public static final int QUOTE=50;
    public static final int LABEL_NAME=605;
    public static final int SQL92_RESERVED_OVERLAPS=148;
    public static final int PLSQL_RESERVED_RESOURCE=152;
    public static final int CONCATENATION_OP=77;
    public static final int MULTI_TABLE_MODE=707;
    public static final int LESS_THAN_OR_EQUALS_OP=69;
    public static final int WRITE_VK=303;
    public static final int LANGUAGE_VK=253;
    public static final int AUTONOMOUS_TRANSACTION_VK=284;
    public static final int COMMENT=83;
    public static final int SPECIAL_FUNC=751;
    public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=326;
    public static final int M_=21;
    public static final int REGULAR_ID=186;
    public static final int UNPIVOT_IN_ELEMENT=691;
    public static final int TIMEZONE_HOUR_VK=372;
    public static final int SQL92_RESERVED_PRIOR=149;
    public static final int EXCLAMATION_OPERATOR_PART=75;
    public static final int TILDE_OPERATOR_PART=74;
    public static final int PERIOD=41;
    public static final int MODIFY_VK=248;
    public static final int NATIONAL_CHAR_STRING_LIT=37;
    public static final int SQL92_RESERVED_VALUES=167;
    public static final int STANDARD_FUNCTION=734;
    public static final int SEQUENCE_VK=496;
    public static final int PRECEDING_VK=442;
    public static final int N_=22;
    public static final int BLOCK_VK=386;
    public static final int SQL92_RESERVED_DATE=106;
    public static final int SQL92_RESERVED_CREATE=103;
    public static final int SCHEMA_VK=216;
    public static final int ELEMENTS_MODE=689;
    public static final int WITHIN_VK=443;
    public static final int RESULT_CACHE_VK=192;
    public static final int XML_ALIAS=747;
    public static final int PERCENT_TYPE_VK=282;
    public static final int SQL92_RESERVED_INSERT=131;
    public static final int NOMAXVALUE_VK=501;
    public static final int XMLNAMESPACES_VK=474;
    public static final int INVALIDATE_VK=251;
    public static final int XML_COLUMN=746;
    public static final int SQL92_RESERVED_FROM=121;
    public static final int REFERENCE_MODEL_NAME=601;
    public static final int O_=23;
    public static final int CONTENT_VK=454;
    public static final int MAP_VK=274;
    public static final int SQL92_RESERVED_CURSOR=105;
    public static final int CURRENT_VK=448;
    public static final int CONDITIONAL_INSERT=709;
    public static final int HOSTED_VARIABLE_ROUTINE_CALL=628;
    public static final int PASSING_VK=470;
    public static final int UNTIL_VK=395;
    public static final int DIRECT_MODE=686;
    public static final int JOIN_ON_PART=680;
    public static final int SIBLINGS_VK=397;
    public static final int SQL92_RESERVED_THE=160;
    public static final int H_=16;
    public static final int INTRODUCER=82;
    public static final int ENABLE_VK=209;
    public static final int CURSOR_NAME=613;
    public static final int PROCEDURE_NAME=610;
    public static final int ID=620;
    public static final int SPACE=84;
    public static final int FROM_CLAUSE=674;
    public static final int CROSS=183;
    public static final int CROSS_VK=426;
    public static final int SQL92_RESERVED_TABLE=159;
    public static final int INCLUDING_VK=249;
    public static final int FOR_SINGLE_COLUMN=736;
    public static final int EXCEPTIONS_VK=243;
    public static final int EXPR_LIST=715;
    public static final int EXTRACT_VK=495;
    public static final int NOENTITYESCAPING_VK=476;
    public static final int EXPR=589;
    public static final int AFTER_VK=215;
    public static final int DISASSOCIATE_VK=223;
    public static final int TABLE_VAR_NAME=596;
    public static final int TIMESTAMP_UNCONSTRAINED_VK=336;
    public static final int ENCODING_VK=482;
    public static final int COMMA=60;
    public static final int SOME_VK=424;
    public static final int SEQUENTIAL_VK=389;
    public static final int FIRST_VALUE_VK=441;
    public static final int SIMPLE_CASE=738;
    public static final int HOSTED_VARIABLE_NAME=622;
    public static final int TYPE_NAME=606;
    public static final int SQL92_RESERVED_UPDATE=166;
    public static final int GROUPING_VK=414;
    public static final int IS_INFINITE=723;
    public static final int SQL92_RESERVED_BY=94;
    public static final int SECOND_VK=371;
    public static final int QUERY_NAME=603;
    public static final int I_=17;
    public static final int NOCOPY_VK=263;
    public static final int NOCACHE_VK=500;
    public static final int CORRUPT_XID_ALL_VK=305;
    public static final int HEX_STRING_LIT=40;
    public static final int AGGREGATE_VK=194;
    public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=743;
    public static final int CUBE_VK=398;
    public static final int PLSQL_RESERVED_IDENTIFIED=126;
    public static final int MODEL_EXPRESSION=735;
    public static final int DOUBLE_PERIOD=7;
    public static final int PLUS_SIGN=59;
    public static final int INCREMENT_VK=431;
    public static final int SCN_VK=401;
    public static final int COUNT_VK=488;
    public static final int PLSQL_RESERVED_SHARE=155;
    public static final int NOT_BETWEEN=731;
    public static final int J_=18;
    public static final int CHARACTER_VK=353;
    public static final int PLSQL_RESERVED_INDEXES=130;
    public static final int SQL92_RESERVED_AS=90;
    public static final int LOGOFF_VK=232;
    public static final int RANGE_VK=204;
    public static final int DELIMITED_ID=52;
    public static final int PLSQL_NON_RESERVED_UNPIVOT=177;
    public static final int OFF_VK=294;
    public static final int PACKAGE_NAME=599;
    public static final int MAXVALUE_VK=341;
    public static final int VERSIONS_VK=407;
    public static final int TRIM_VK=491;
    public static final int BINARY_FLOAT_VK=330;
    public static final int TIMEZONE_ABBR_VK=322;
    public static final int ASSIGN=702;
    public static final int TABLEVIEW_NAME=618;
    public static final int TIMESTAMP_VK=363;
    public static final int SQL92_RESERVED_OPTION=145;
    public static final int K_=19;
    public static final int TRUNCATE_VK=217;
    public static final int WELLFORMED_VK=459;
    public static final int GREATER_THAN_OP=76;
    public static final int PERCENT_NOTFOUND_VK=277;
    public static final int ROWID_VK=335;
    public static final int SQL92_RESERVED_REVOKE=153;
    public static final int ONLY_VK=314;
    public static final int MEMBER_VK=269;
    public static final int STRING_VK=340;
    public static final int XMLATTRIBUTES_VK=481;
    public static final int PIPELINED_VK=193;
    public static final int XMLTABLE_VK=478;
    public static final int QS_OTHER=48;
    public static final int PLSQL_RESERVED_CRASH=102;
    public static final int PARTITION_VK=318;
    public static final int GROUP_BY_ELEMENT=694;
    public static final int MINUTE_VK=379;
    public static final int IS_NOT_PRESENT=720;
    public static final int XMLSERIALIZE_VK=484;
    public static final int PERCENT_FOUND_VK=278;
    public static final int U_=29;
    public static final int SEPARATOR=38;
    public static final int JOIN_DEF=678;
    public static final int ROWS_VK=437;
    public static final int EOF=-1;
    public static final int DEFINER_VK=197;
    public static final int IS_PRESENT=721;
    public static final int EXCEPTION_INIT_VK=276;
    public static final int SQL92_RESERVED_SIZE=156;
    public static final int INTEGER_VK=367;
    public static final int TIMEZONE_REGION_VK=325;
    public static final int ASSIGN_OP=63;
    public static final int DEFAULTS_VK=486;
    public static final int SIMPLE_LETTER=65;
    public static final int IS_NULL=717;
    public static final int SHOW_VK=483;
    public static final int FUNCTION_ENABLING_USING=742;
    public static final int SQL92_RESERVED_PUBLIC=151;
    public static final int PLSQL_RESERVED_NOWAIT=141;
    public static final int CONVERT_VK=252;
    public static final int SET_VK=423;
    public static final int NOAUDIT_VK=220;
    public static final int CONTEXT_VK=258;
    public static final int PLSQL_RESERVED_NOCOMPRESS=139;
    public static final int INTERVAL_DATATYPE=625;
    public static final int RIGHT_BRACKET=81;
    public static final int LIBRARY_VK=257;
    public static final int STANDALONE_VK=458;
    public static final int MAIN_MODEL=697;
    public static final int EXPLAIN_STATEMENT=662;
    public static final int T_=28;
    public static final int ADD_VK=247;
    public static final int ANALYZE_VK=233;
    public static final int UPSERT_VK=406;
    public static final int SINGLE_VK=390;
    public static final int DECIMAL_VK=365;
    public static final int SMALLINT_VK=369;
    public static final int COMPOUND_VK=225;
    public static final int ROLLBACK_VK=309;
    public static final int AT_SIGN=62;
    public static final int W_=31;
    public static final int SEMICOLON=68;
    public static final int CONTINUE_VK=292;
    public static final int SQL92_RESERVED_ELSE=113;
    public static final int SQL92_RESERVED_GRANT=123;
    public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=101;
    public static final int SQL92_RESERVED_FETCH=119;
    public static final int REVERSE_VK=293;
    public static final int PIVOT_IN_ELEMENT=690;
    public static final int LEADING_VK=492;
    public static final int EXTERNAL_VK=206;
    public static final int ROLLBACK_SEGMENT_NAME=595;
    public static final int RIGHT_VK=428;
    public static final int IS_NOT_INFINITE=722;
    public static final int TABLE_REF=676;
    public static final int PERCENT_ISOPEN_VK=279;
    public static final int ORDER_BY_CLAUSE=703;
    public static final int PIVOT_ELEMENT=687;
    public static final int MINVALUE_VK=342;
    public static final int V_=30;
    public static final int LIKEC_VK=419;
    public static final int LEFT_PAREN=55;
    public static final int SQL92_RESERVED_ALTER=87;
    public static final int ROLLUP_VK=410;
    public static final int COLUMN_NAME=617;
    public static final int XMLPI_VK=466;
    public static final int PLSQL_RESERVED_COLAUTH=98;
    public static final int LOCK_TABLE_ELEMENT=713;
    public static final int INSTANTIABLE_VK=245;
    public static final int FOR_MULTI_COLUMN=737;
    public static final int CLOB_VK=332;
    public static final int PLS_INTEGER_VK=316;
    public static final int SAVEPOINT_VK=311;
    public static final int MAIN_MODEL_NAME=602;
    public static final int COLLECT_VK=436;
    public static final int DENSE_RANK_VK=434;
    public static final int XMLEXISTS_VK=460;
    public static final int Q_=25;
    public static final int BYTE_VK=329;
    public static final int ORDER_BY_ELEMENT=705;
    public static final int SQL92_RESERVED_INTERSECT=132;
    public static final int ASTERISK=58;
    public static final int PLSQL_RESERVED_LOCK=136;
    public static final int UNSIGNED_INTEGER=4;
    public static final int RECORD_NAME=614;
    public static final int AUDIT_VK=222;
    public static final int DEC_VK=366;
    public static final int CHAR_STRING_PERL=49;
    public static final int IS_NOT_NAN=718;
    public static final int MINUS_SIGN=6;
    public static final int OLD_VK=230;
    public static final int GREATER_THAN_OR_EQUALS_OP=71;
    public static final int SQL92_RESERVED_WHEN=170;
    public static final int NEW_VK=236;
    public static final int BULK_VK=299;
    public static final int P_=24;
    public static final int CACHE_VK=499;
    public static final int INNER_VK=429;
    public static final int REFERENCING_VK=213;
    public static final int ROUTINE_NAME=598;
    public static final int RESTRICT_REFERENCES_VK=286;
    public static final int MERGE_UPDATE=711;
    public static final int LOOP_VK=290;
    public static final int UNDER_VK=273;
    public static final int SCHEMA_NAME=597;
    public static final int TRAILING_VK=493;
    public static final int JOIN_QUALIFIER=679;
    public static final int MERGE_INSERT=712;
    public static final int IS_NOT_NULL=716;
    public static final int NCLOB_VK=331;
    public static final int NCHAR_CS_VK=438;
    public static final int S_=27;
    public static final int MLSLABEL_VK=350;
    public static final int UPDATED_VK=392;
    public static final int VARCHAR_VK=355;
    public static final int BODY_VK=201;
    public static final int YES_VK=463;
    public static final int LOCAL_VK=374;
    public static final int LIKE4_VK=421;
    public static final int SQL92_RESERVED_FALSE=118;
    public static final int REPLACE_VK=190;
    public static final int FUNCTION_NAME=609;
    public static final int SQL92_RESERVED_IN=128;
    public static final int NATIVE_DATATYPE=624;
    public static final int SQL92_RESERVED_IS=134;
    public static final int SQL92_RESERVED_WHERE=171;
    public static final int R_=26;
    public static final int IS_NAN=719;
    public static final int CHAR_STRING=43;
    public static final int QS_PAREN=47;
    public static final int NVARCHAR2_VK=339;
    public static final int BOTH_VK=494;
    public static final int CONSTRUCTOR_VK=267;
    public static final int XML_COLUMN_NAME=633;
    public static final int CONSTRAINT_NAME=604;
    public static final int SQL92_RESERVED_CONNECT=100;
    public static final int TRANSLATE_VK=490;
    public static final int DELETE_STATEMENT=665;
    public static final int CAST_VK=489;
    public static final int NOCYCLE_VK=385;
    public static final int SQL92_RESERVED_ON=144;
    public static final int GROUPIN_SET=696;
    public static final int WAIT_VK=304;
    public static final int OVERRIDING_VK=255;
    public static final int BFILE_VK=324;
    public static final int XMLROOT_VK=479;
    public static final int CHR_VK=487;
    public static final int SQL92_RESERVED_OF=143;
    public static final int SHUTDOWN_VK=224;
    public static final int IS_EMPTY=727;
    public static final int RAW_VK=345;
    public static final int NOT_EQUAL_OP=72;
    public static final int SELECT_ITEM=673;
    public static final int IS_NOT_OF_TYPE=728;
    public static final int SQL92_RESERVED_DROP=112;
    public static final int TABLE_REF_ELEMENT=677;
    public static final int FULL=181;
    public static final int PLSQL_NON_RESERVED_USING=173;
    public static final int CONSTANT_VK=275;
    public static final int SQL92_RESERVED_CHECK=96;
    public static final int SINGLE_TABLE_MODE=706;
    public static final int SQL92_RESERVED_NULL=142;
    public static final int PARENT_VK=227;
    public static final int PROMPT=85;
    public static final int BINARY_DOUBLE_VK=323;
    public static final int AGENT_VK=262;
    public static final int YEAR_VK=375;
    public static final int SQL92_RESERVED_OR=146;
    public static final int DSINTERVAL_UNCONSTRAINED_VK=333;
    public static final int UROWID_VK=320;
    public static final int BREADTH_VK=505;
    public static final int APPROXIMATE_NUM_LIT=5;
    public static final int DECREMENT_VK=432;
    public static final int IS_NOT_EMPTY=726;
    public static final int KEEP_VK=403;
    public static final int COLLECTION_NAME=615;
    public static final int XMLPARSE_VK=455;
    public static final int SERIALIZABLE_VK=302;
    public static final int SQL92_RESERVED_BETWEEN=93;
    public static final int ISOLATION_VK=301;
    public static final int PLSQL_RESERVED_INDEX=129;
    public static final int QS_BRACE=45;
    public static final int POSITIVE_VK=349;
    public static final int PRECISION_VK=361;
    public static final int XML_ELEMENT=750;
    public static final int ARGUMENTS=590;
    public static final int CUSTOM_TYPE=623;
    public static final int PIVOT_VK=388;
    public static final int PLSQL_RESERVED_TABAUTH=158;
    public static final int DATABASE_VK=210;
    public static final int VARCHAR2_VK=347;
    public static final int PLSQL_RESERVED_COMPRESS=99;
    public static final int SQL92_RESERVED_AND=88;
    public static final int QS_BRACK=46;
    public static final int SELF_VK=270;
    public static final int EQUALS_OP=79;
    public static final int SQL92_RESERVED_CASE=95;
    public static final int INLINE_VK=285;
    public static final int ANY_ELEMENT=631;
    public static final int NO_VK=464;
    public static final int TIME_VK=362;
    public static final int UNLIMITED_VK=383;
    public static final int GROUP_BY_CLAUSE=693;
    public static final int RAISE_VK=289;
    public static final int CHAR_VK=354;
    public static final int VECTOR_EXPR=740;
    public static final int NOT_IN=730;
    public static final int MERGE_STATEMENT=668;
    public static final int DDL_VK=208;
    public static final int FUNCTION_ENABLING_OVER=741;
    public static final int MODEL_RULE=701;
    public static final int SERIALLY_REUSABLE_VK=283;
    public static final int IMMEDIATE_VK=296;
    public static final int EXACT_NUM_LIT=42;
    public static final int DBTIMEZONE_VK=343;
    public static final int CANONICAL_VK=444;
    public static final int SQL92_RESERVED_ANY=89;
    public static final int INCLUDE_VK=415;
    public static final int DATETIME_OP=749;
    public static final int SELECTED_TABLEVIEW=682;
    public static final int NCHAR_VK=356;
    public static final int Y_=33;
    public static final int NULLS_VK=399;
    public static final int INNER=185;
    public static final int COLLECTION_MODE=684;
    public static final int RETURN_VK=288;
    public static final int TRIGGER_NAME=611;
    public static final int RELIES_ON_VK=195;
    public static final int PLSQL_RESERVED_MINUS=137;
    public static final int SQL92_RESERVED_DEFAULT=108;
    public static final int DEPTH_VK=504;
    public static final int SQL92_RESERVED_FOR=120;
    public static final int LOGON_VK=214;
    public static final int INDENT_VK=471;
    public static final int INSTEAD_VK=234;
    public static final int ITERATE_VK=409;
    public static final int PRAGMA_VK=264;
    public static final int ZV=187;
    public static final int DECOMPOSE_VK=439;
    public static final int HOUR_VK=378;
    public static final int X_=32;
    public static final int MODEL_COLUMN=698;
    public static final int VARIABLE_NAME=621;
    public static final int IS_A_SET=725;
    public static final int XMLAGG_VK=473;
    public static final int MODEL_COLUMNS=699;
    public static final int COST_VK=450;
    public static final int REFERENCE_VK=394;
    public static final int NOMINVALUE_VK=502;
    public static final int SQL92_RESERVED_INTO=133;
    public static final int CORRUPT_XID_VK=306;
    public static final int REUSE_VK=189;
    public static final int COMMITTED_VK=300;
    public static final int NATURAL_VK=370;
    public static final int NUMBER_VK=346;
    public static final int LOCK_TABLE_STATEMENT=667;
    public static final int REF_VK=315;
    public static final int LESS_THAN_OP=70;
    public static final int FOR_NOTATION=35;
    public static final int SEARCHED_CASE=739;
    public static final int XMLELEMENT_VK=456;
    public static final int SQL92_RESERVED_TO=162;
    public static final int LONG_VK=352;
    public static final int FOLLOWING_VK=440;
    public static final int ORDER_BY_ELEMENTS=704;
    public static final int CASCADE_VK=250;
    public static final int NAME_VK=435;
    public static final int PERCENT=53;
    public static final int PACKAGE_VK=200;
    public static final int VALUE_VK=430;
    public static final int SQL92_RESERVED_UNION=164;
    public static final int INSERT_STATEMENT=666;
    public static final int MODEL_RULES=700;
    public static final int LOG_VK=382;
    public static final int ENTITYESCAPING_VK=457;
    public static final int YMINTERVAL_UNCONSTRAINED_VK=334;
    public static final int NOT_LIKE=732;
    public static final int SQL92_RESERVED_END=114;
    public static final int COST_CLASS_NAME=632;
    public static final int AUTO_VK=452;
    public static final int DEFERRED_VK=308;
    public static final int EXCEPTION_NAME=608;
    public static final int DOUBLE_VK=360;
    public static final int PLSQL_RESERVED_CLUSTERS=97;
    public static final int IMPLEMENTATION_TYPE_NAME=600;
    public static final int SQL92_RESERVED_CURRENT=104;
    public static final int JOIN=178;
    public static final int SQL92_RESERVED_EXCEPTION=115;
    public static final int STATIC_VK=272;
    public static final int READ_VK=313;
    public static final int FORALL_VK=291;
    public static final int ANY_MODE=688;
    public static final int NEWLINE=36;
    public static final int Z_=34;
    public static final int RENAME_VK=237;
    public static final int SQL92_RESERVED_SELECT=154;
    public static final int INOUT_VK=260;
    public static final int SQL92_RESERVED_ASC=91;
    public static final int ASSOCIATE_VK=235;
    public static final int BINARY_INTEGER_VK=351;
    public static final int PIVOT_ALIAS=748;
    public static final int DOCUMENT_VK=468;
    public static final int HIDE_VK=472;
    public static final int BATCH_VK=307;
    public static final int SQL92_RESERVED_NOT=140;
    public static final int TYPE_VK=241;
    public static final int STATIC_RETURNING=714;
    public static final int FINAL_VK=246;
    public static final int SQL92_RESERVED_BEGIN=92;
    public static final int SCHEMACHECK_VK=480;
    public static final int STATISTICS_VK=219;

    // delegates
    public OracleParser_Keys gKeys;
    public OracleParser_Commons gCommons;
    // delegators


        public OracleParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public OracleParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[1428+1];
             
            gKeys = new OracleParser_Keys(input, state, this);
            gCommons = new OracleParser_Commons(input, state, this);         
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
        gKeys.setTreeAdaptor(this.adaptor);gCommons.setTreeAdaptor(this.adaptor);
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return OracleParser.tokenNames; }
    public String getGrammarFileName() { return "OracleParser.g"; }


        private boolean isTableAlias() {
            String lt1 = input.LT(1).getText().toLowerCase();
            String lt2 = "";
            if (input.LT(2).getText() != null){
                lt2 = input.LT(2).getText().toLowerCase();
            }

            if ((lt1.equals("partition") && lt2.equals("by")) || lt1.equals("cross")
                    || lt1.equals("natural") || lt1.equals("inner")
                    || lt1.equals("join")
                    || ((lt1.equals("full") || lt1.equals("left") || lt1.equals("right")) && (lt2.equals("outer") || lt2.equals("join")))) {
                return false;
            }
            return true;
        }

        private boolean isStandardPredictionFunction(String originalFunctionName) {
            String functionName = originalFunctionName.toLowerCase();
            if (functionName.equals("prediction")
                    || functionName.equals("prediction_bounds")
                    || functionName.equals("prediction_cost")
                    || functionName.equals("prediction_details")
                    || functionName.equals("prediction_probability")
                    || functionName.equals("prediction_set")) {
                return true;
            }
            return false;
        }

        private boolean enablesWithinOrOverClause(String originalFunctionName) {
            String functionName = originalFunctionName.toLowerCase();
            if (functionName.equals("cume_dist")
                    || functionName.equals("dense_rank")
                    || functionName.equals("listagg")
                    || functionName.equals("percent_rank")
                    || functionName.equals("percentile_cont")
                    || functionName.equals("percentile_disc")
                    || functionName.equals("rank")) {
                return true;
            }
            return false;
        }

        private boolean enablesUsingClause(String originalFunctionName) {
            String functionName = originalFunctionName.toLowerCase();
            if (functionName.startsWith("cluster_")
                    || functionName.startsWith("feature_")) {
                return true;
            }
            return false;
        }

        private boolean enablesOverClause(String originalFunctionName) {
            String functionName = originalFunctionName.toLowerCase();
            if (functionName.equals("avg") || functionName.equals("corr")
                    || functionName.equals("lag") || functionName.equals("lead")
                    || functionName.equals("max") || functionName.equals("median")
                    || functionName.equals("min") || functionName.equals("ntile")
                    || functionName.equals("ratio_to_report")
                    || functionName.equals("row_number")
                    || functionName.equals("sum")
                    || functionName.equals("variance")
                    || functionName.startsWith("regr_")
                    || functionName.startsWith("stddev")
                    || functionName.startsWith("var_")
                    || functionName.startsWith("covar_")) {
                return true;
            }
            return false;
        }


    public static class seq_of_statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "seq_of_statements"
    // OracleParser.g:187:1: seq_of_statements : ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement );
    public final OracleParser.seq_of_statements_return seq_of_statements() throws RecognitionException {
        OracleParser.seq_of_statements_return retval = new OracleParser.seq_of_statements_return();
        retval.start = input.LT(1);
        int seq_of_statements_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.select_statement_return select_statement1 = null;

        OracleParser.update_statement_return update_statement2 = null;

        OracleParser.delete_statement_return delete_statement3 = null;

        OracleParser.insert_statement_return insert_statement4 = null;

        OracleParser.lock_table_statement_return lock_table_statement5 = null;

        OracleParser.merge_statement_return merge_statement6 = null;

        OracleParser.explain_statement_return explain_statement7 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 790) ) { return retval; }
            // OracleParser.g:188:5: ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement )
            int alt1=7;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==LEFT_PAREN||LA1_0==SQL92_RESERVED_SELECT||LA1_0==SQL92_RESERVED_WITH) ) {
                alt1=1;
            }
            else if ( (LA1_0==SQL92_RESERVED_UPDATE) ) {
                alt1=2;
            }
            else if ( (LA1_0==SQL92_RESERVED_DELETE) ) {
                alt1=3;
            }
            else if ( (LA1_0==SQL92_RESERVED_INSERT) ) {
                alt1=4;
            }
            else if ( (LA1_0==PLSQL_RESERVED_LOCK) ) {
                alt1=5;
            }
            else if ( (LA1_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("explain")))) {
                int LA1_6 = input.LA(2);

                if ( (LA1_6==SQL92_RESERVED_INTO) && ((input.LT(1).getText().equalsIgnoreCase("merge")))) {
                    alt1=6;
                }
                else if ( (LA1_6==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("explain")))) {
                    alt1=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 1, 6, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }
            switch (alt1) {
                case 1 :
                    // OracleParser.g:188:10: select_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_select_statement_in_seq_of_statements683);
                    select_statement1=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement1.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:189:10: update_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_update_statement_in_seq_of_statements694);
                    update_statement2=update_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statement2.getTree());

                    }
                    break;
                case 3 :
                    // OracleParser.g:190:10: delete_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_delete_statement_in_seq_of_statements705);
                    delete_statement3=delete_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statement3.getTree());

                    }
                    break;
                case 4 :
                    // OracleParser.g:191:10: insert_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_insert_statement_in_seq_of_statements716);
                    insert_statement4=insert_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement4.getTree());

                    }
                    break;
                case 5 :
                    // OracleParser.g:192:10: lock_table_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lock_table_statement_in_seq_of_statements727);
                    lock_table_statement5=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement5.getTree());

                    }
                    break;
                case 6 :
                    // OracleParser.g:193:10: merge_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_merge_statement_in_seq_of_statements738);
                    merge_statement6=merge_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, merge_statement6.getTree());

                    }
                    break;
                case 7 :
                    // OracleParser.g:194:10: explain_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_explain_statement_in_seq_of_statements749);
                    explain_statement7=explain_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explain_statement7.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 790, seq_of_statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "seq_of_statements"

    public static class explain_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explain_statement"
    // OracleParser.g:197:1: explain_statement : explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement ) -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? ) ;
    public final OracleParser.explain_statement_return explain_statement() throws RecognitionException {
        OracleParser.explain_statement_return retval = new OracleParser.explain_statement_return();
        retval.start = input.LT(1);
        int explain_statement_StartIndex = input.index();
        Object root_0 = null;

        Token EQUALS_OP12=null;
        OracleParser_Keys.explain_key_return explain_key8 = null;

        OracleParser_Keys.plan_key_return plan_key9 = null;

        OracleParser_Keys.set_key_return set_key10 = null;

        OracleParser_Keys.statement_id_key_return statement_id_key11 = null;

        OracleParser_Commons.quoted_string_return quoted_string13 = null;

        OracleParser_Keys.into_key_return into_key14 = null;

        OracleParser_Commons.tableview_name_return tableview_name15 = null;

        OracleParser_Keys.for_key_return for_key16 = null;

        OracleParser.select_statement_return select_statement17 = null;

        OracleParser.update_statement_return update_statement18 = null;

        OracleParser.delete_statement_return delete_statement19 = null;

        OracleParser.insert_statement_return insert_statement20 = null;

        OracleParser.merge_statement_return merge_statement21 = null;


        Object EQUALS_OP12_tree=null;
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_update_statement=new RewriteRuleSubtreeStream(adaptor,"rule update_statement");
        RewriteRuleSubtreeStream stream_insert_statement=new RewriteRuleSubtreeStream(adaptor,"rule insert_statement");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        RewriteRuleSubtreeStream stream_delete_statement=new RewriteRuleSubtreeStream(adaptor,"rule delete_statement");
        RewriteRuleSubtreeStream stream_plan_key=new RewriteRuleSubtreeStream(adaptor,"rule plan_key");
        RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
        RewriteRuleSubtreeStream stream_into_key=new RewriteRuleSubtreeStream(adaptor,"rule into_key");
        RewriteRuleSubtreeStream stream_explain_key=new RewriteRuleSubtreeStream(adaptor,"rule explain_key");
        RewriteRuleSubtreeStream stream_statement_id_key=new RewriteRuleSubtreeStream(adaptor,"rule statement_id_key");
        RewriteRuleSubtreeStream stream_merge_statement=new RewriteRuleSubtreeStream(adaptor,"rule merge_statement");
        RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 791) ) { return retval; }
            // OracleParser.g:198:5: ( explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement ) -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? ) )
            // OracleParser.g:198:10: explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement )
            {
            pushFollow(FOLLOW_explain_key_in_explain_statement769);
            explain_key8=explain_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_explain_key.add(explain_key8.getTree());
            pushFollow(FOLLOW_plan_key_in_explain_statement771);
            plan_key9=plan_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_plan_key.add(plan_key9.getTree());
            // OracleParser.g:199:10: ( set_key statement_id_key EQUALS_OP quoted_string )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // OracleParser.g:199:11: set_key statement_id_key EQUALS_OP quoted_string
                    {
                    pushFollow(FOLLOW_set_key_in_explain_statement783);
                    set_key10=set_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_set_key.add(set_key10.getTree());
                    pushFollow(FOLLOW_statement_id_key_in_explain_statement785);
                    statement_id_key11=statement_id_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement_id_key.add(statement_id_key11.getTree());
                    EQUALS_OP12=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_explain_statement787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP12);

                    pushFollow(FOLLOW_quoted_string_in_explain_statement789);
                    quoted_string13=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string13.getTree());

                    }
                    break;

            }

            // OracleParser.g:200:10: ( into_key tableview_name )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SQL92_RESERVED_INTO) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // OracleParser.g:200:11: into_key tableview_name
                    {
                    pushFollow(FOLLOW_into_key_in_explain_statement803);
                    into_key14=into_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_into_key.add(into_key14.getTree());
                    pushFollow(FOLLOW_tableview_name_in_explain_statement805);
                    tableview_name15=tableview_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name15.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_for_key_in_explain_statement818);
            for_key16=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key16.getTree());
            // OracleParser.g:202:10: ( select_statement | update_statement | delete_statement | insert_statement | merge_statement )
            int alt4=5;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LEFT_PAREN||LA4_0==SQL92_RESERVED_SELECT||LA4_0==SQL92_RESERVED_WITH) ) {
                alt4=1;
            }
            else if ( (LA4_0==SQL92_RESERVED_UPDATE) ) {
                alt4=2;
            }
            else if ( (LA4_0==SQL92_RESERVED_DELETE) ) {
                alt4=3;
            }
            else if ( (LA4_0==SQL92_RESERVED_INSERT) ) {
                alt4=4;
            }
            else if ( (LA4_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("merge")))) {
                alt4=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // OracleParser.g:202:12: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_explain_statement831);
                    select_statement17=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_statement.add(select_statement17.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:203:12: update_statement
                    {
                    pushFollow(FOLLOW_update_statement_in_explain_statement844);
                    update_statement18=update_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_update_statement.add(update_statement18.getTree());

                    }
                    break;
                case 3 :
                    // OracleParser.g:204:12: delete_statement
                    {
                    pushFollow(FOLLOW_delete_statement_in_explain_statement857);
                    delete_statement19=delete_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delete_statement.add(delete_statement19.getTree());

                    }
                    break;
                case 4 :
                    // OracleParser.g:205:12: insert_statement
                    {
                    pushFollow(FOLLOW_insert_statement_in_explain_statement870);
                    insert_statement20=insert_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insert_statement.add(insert_statement20.getTree());

                    }
                    break;
                case 5 :
                    // OracleParser.g:206:12: merge_statement
                    {
                    pushFollow(FOLLOW_merge_statement_in_explain_statement883);
                    merge_statement21=merge_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_merge_statement.add(merge_statement21.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: delete_statement, merge_statement, select_statement, insert_statement, update_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 208:10: -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? )
            {
                // OracleParser.g:208:13: ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLAIN_STATEMENT, "EXPLAIN_STATEMENT"), root_1);

                // OracleParser.g:208:33: ( select_statement )?
                if ( stream_select_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_select_statement.nextTree());

                }
                stream_select_statement.reset();
                // OracleParser.g:208:51: ( update_statement )?
                if ( stream_update_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_update_statement.nextTree());

                }
                stream_update_statement.reset();
                // OracleParser.g:208:69: ( delete_statement )?
                if ( stream_delete_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_delete_statement.nextTree());

                }
                stream_delete_statement.reset();
                // OracleParser.g:208:87: ( insert_statement )?
                if ( stream_insert_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_insert_statement.nextTree());

                }
                stream_insert_statement.reset();
                // OracleParser.g:208:105: ( merge_statement )?
                if ( stream_merge_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_merge_statement.nextTree());

                }
                stream_merge_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 791, explain_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explain_statement"

    public static class select_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_statement"
    // OracleParser.g:211:1: select_statement : ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )* -> ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) ;
    public final OracleParser.select_statement_return select_statement() throws RecognitionException {
        OracleParser.select_statement_return retval = new OracleParser.select_statement_return();
        retval.start = input.LT(1);
        int select_statement_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.subquery_factoring_clause_return subquery_factoring_clause22 = null;

        OracleParser.subquery_return subquery23 = null;

        OracleParser.for_update_clause_return for_update_clause24 = null;

        OracleParser.order_by_clause_return order_by_clause25 = null;


        RewriteRuleSubtreeStream stream_subquery_factoring_clause=new RewriteRuleSubtreeStream(adaptor,"rule subquery_factoring_clause");
        RewriteRuleSubtreeStream stream_order_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule order_by_clause");
        RewriteRuleSubtreeStream stream_for_update_clause=new RewriteRuleSubtreeStream(adaptor,"rule for_update_clause");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 792) ) { return retval; }
            // OracleParser.g:212:5: ( ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )* -> ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) )
            // OracleParser.g:212:10: ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )*
            {
            // OracleParser.g:212:10: ( subquery_factoring_clause )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==SQL92_RESERVED_WITH) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // OracleParser.g:0:0: subquery_factoring_clause
                    {
                    pushFollow(FOLLOW_subquery_factoring_clause_in_select_statement944);
                    subquery_factoring_clause22=subquery_factoring_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery_factoring_clause.add(subquery_factoring_clause22.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_subquery_in_select_statement955);
            subquery23=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subquery.add(subquery23.getTree());
            // OracleParser.g:214:9: ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )*
            loop6:
            do {
                int alt6=3;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==SQL92_RESERVED_FOR) ) {
                    alt6=1;
                }
                else if ( (LA6_0==SQL92_RESERVED_ORDER) && (synpred16_OracleParser())) {
                    alt6=2;
                }


                switch (alt6) {
            	case 1 :
            	    // OracleParser.g:214:10: for_update_clause
            	    {
            	    pushFollow(FOLLOW_for_update_clause_in_select_statement966);
            	    for_update_clause24=for_update_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_for_update_clause.add(for_update_clause24.getTree());

            	    }
            	    break;
            	case 2 :
            	    // OracleParser.g:214:28: ( order_key ( siblings_key )? by_key )=> order_by_clause
            	    {
            	    pushFollow(FOLLOW_order_by_clause_in_select_statement978);
            	    order_by_clause25=order_by_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_order_by_clause.add(order_by_clause25.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);



            // AST REWRITE
            // elements: subquery, for_update_clause, order_by_clause, subquery_factoring_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 215:9: -> ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
            {
                // OracleParser.g:215:12: ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

                // OracleParser.g:215:31: ( subquery_factoring_clause )?
                if ( stream_subquery_factoring_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_subquery_factoring_clause.nextTree());

                }
                stream_subquery_factoring_clause.reset();
                adaptor.addChild(root_1, stream_subquery.nextTree());
                // OracleParser.g:215:67: ( for_update_clause )*
                while ( stream_for_update_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_update_clause.nextTree());

                }
                stream_for_update_clause.reset();
                // OracleParser.g:215:86: ( order_by_clause )*
                while ( stream_order_by_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_order_by_clause.nextTree());

                }
                stream_order_by_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 792, select_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_statement"

    public static class subquery_factoring_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subquery_factoring_clause"
    // OracleParser.g:219:1: subquery_factoring_clause : with_key factoring_element ( COMMA factoring_element )* ;
    public final OracleParser.subquery_factoring_clause_return subquery_factoring_clause() throws RecognitionException {
        OracleParser.subquery_factoring_clause_return retval = new OracleParser.subquery_factoring_clause_return();
        retval.start = input.LT(1);
        int subquery_factoring_clause_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA28=null;
        OracleParser_Keys.with_key_return with_key26 = null;

        OracleParser.factoring_element_return factoring_element27 = null;

        OracleParser.factoring_element_return factoring_element29 = null;


        Object COMMA28_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 793) ) { return retval; }
            // OracleParser.g:220:5: ( with_key factoring_element ( COMMA factoring_element )* )
            // OracleParser.g:220:10: with_key factoring_element ( COMMA factoring_element )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_with_key_in_subquery_factoring_clause1028);
            with_key26=with_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(with_key26.getTree(), root_0);
            pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause1031);
            factoring_element27=factoring_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, factoring_element27.getTree());
            // OracleParser.g:220:38: ( COMMA factoring_element )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // OracleParser.g:220:39: COMMA factoring_element
            	    {
            	    COMMA28=(Token)match(input,COMMA,FOLLOW_COMMA_in_subquery_factoring_clause1034); if (state.failed) return retval;
            	    pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause1037);
            	    factoring_element29=factoring_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, factoring_element29.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 793, subquery_factoring_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subquery_factoring_clause"

    public static class factoring_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "factoring_element"
    // OracleParser.g:223:1: factoring_element : query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )? -> ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? ) ;
    public final OracleParser.factoring_element_return factoring_element() throws RecognitionException {
        OracleParser.factoring_element_return retval = new OracleParser.factoring_element_return();
        retval.start = input.LT(1);
        int factoring_element_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN31=null;
        Token COMMA33=null;
        Token RIGHT_PAREN35=null;
        Token LEFT_PAREN37=null;
        Token RIGHT_PAREN40=null;
        OracleParser_Commons.query_name_return query_name30 = null;

        OracleParser_Commons.column_name_return column_name32 = null;

        OracleParser_Commons.column_name_return column_name34 = null;

        OracleParser_Keys.as_key_return as_key36 = null;

        OracleParser.subquery_return subquery38 = null;

        OracleParser.order_by_clause_return order_by_clause39 = null;

        OracleParser.search_clause_return search_clause41 = null;

        OracleParser.cycle_clause_return cycle_clause42 = null;


        Object LEFT_PAREN31_tree=null;
        Object COMMA33_tree=null;
        Object RIGHT_PAREN35_tree=null;
        Object LEFT_PAREN37_tree=null;
        Object RIGHT_PAREN40_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_order_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule order_by_clause");
        RewriteRuleSubtreeStream stream_cycle_clause=new RewriteRuleSubtreeStream(adaptor,"rule cycle_clause");
        RewriteRuleSubtreeStream stream_search_clause=new RewriteRuleSubtreeStream(adaptor,"rule search_clause");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_query_name=new RewriteRuleSubtreeStream(adaptor,"rule query_name");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 794) ) { return retval; }
            // OracleParser.g:224:5: ( query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )? -> ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? ) )
            // OracleParser.g:224:10: query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )?
            {
            pushFollow(FOLLOW_query_name_in_factoring_element1059);
            query_name30=query_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_name.add(query_name30.getTree());
            // OracleParser.g:224:21: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==LEFT_PAREN) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // OracleParser.g:224:22: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN31=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_factoring_element1062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN31);

                    pushFollow(FOLLOW_column_name_in_factoring_element1064);
                    column_name32=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name32.getTree());
                    // OracleParser.g:224:45: ( COMMA column_name )*
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==COMMA) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // OracleParser.g:224:46: COMMA column_name
                    	    {
                    	    COMMA33=(Token)match(input,COMMA,FOLLOW_COMMA_in_factoring_element1067); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA33);

                    	    pushFollow(FOLLOW_column_name_in_factoring_element1069);
                    	    column_name34=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name34.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop8;
                        }
                    } while (true);

                    RIGHT_PAREN35=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_factoring_element1073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN35);


                    }
                    break;

            }

            pushFollow(FOLLOW_as_key_in_factoring_element1077);
            as_key36=as_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_as_key.add(as_key36.getTree());
            LEFT_PAREN37=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_factoring_element1079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN37);

            pushFollow(FOLLOW_subquery_in_factoring_element1081);
            subquery38=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subquery.add(subquery38.getTree());
            // OracleParser.g:224:107: ( order_by_clause )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==SQL92_RESERVED_ORDER) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // OracleParser.g:0:0: order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_factoring_element1083);
                    order_by_clause39=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_order_by_clause.add(order_by_clause39.getTree());

                    }
                    break;

            }

            RIGHT_PAREN40=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_factoring_element1086); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN40);

            // OracleParser.g:225:10: ( search_clause )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==REGULAR_ID) ) {
                int LA11_1 = input.LA(2);

                if ( (LA11_1==REGULAR_ID) ) {
                    int LA11_3 = input.LA(3);

                    if ( (LA11_3==REGULAR_ID) ) {
                        int LA11_4 = input.LA(4);

                        if ( (LA11_4==SQL92_RESERVED_BY) ) {
                            alt11=1;
                        }
                    }
                }
            }
            switch (alt11) {
                case 1 :
                    // OracleParser.g:0:0: search_clause
                    {
                    pushFollow(FOLLOW_search_clause_in_factoring_element1097);
                    search_clause41=search_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_search_clause.add(search_clause41.getTree());

                    }
                    break;

            }

            // OracleParser.g:226:10: ( cycle_clause )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==REGULAR_ID) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // OracleParser.g:0:0: cycle_clause
                    {
                    pushFollow(FOLLOW_cycle_clause_in_factoring_element1109);
                    cycle_clause42=cycle_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cycle_clause.add(cycle_clause42.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: subquery, cycle_clause, search_clause, query_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 227:9: -> ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? )
            {
                // OracleParser.g:227:12: ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FACTORING, "FACTORING"), root_1);

                adaptor.addChild(root_1, stream_query_name.nextTree());
                adaptor.addChild(root_1, stream_subquery.nextTree());
                // OracleParser.g:227:44: ( search_clause )?
                if ( stream_search_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_search_clause.nextTree());

                }
                stream_search_clause.reset();
                // OracleParser.g:227:59: ( cycle_clause )?
                if ( stream_cycle_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_cycle_clause.nextTree());

                }
                stream_cycle_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 794, factoring_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "factoring_element"

    public static class search_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "search_clause"
    // OracleParser.g:230:1: search_clause : search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name ;
    public final OracleParser.search_clause_return search_clause() throws RecognitionException {
        OracleParser.search_clause_return retval = new OracleParser.search_clause_return();
        retval.start = input.LT(1);
        int search_clause_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA55=null;
        OracleParser_Keys.search_key_return search_key43 = null;

        OracleParser_Keys.depth_key_return depth_key44 = null;

        OracleParser_Keys.breadth_key_return breadth_key45 = null;

        OracleParser_Keys.first_key_return first_key46 = null;

        OracleParser_Keys.by_key_return by_key47 = null;

        OracleParser_Commons.column_name_return column_name48 = null;

        OracleParser_Keys.asc_key_return asc_key49 = null;

        OracleParser_Keys.desc_key_return desc_key50 = null;

        OracleParser_Keys.nulls_key_return nulls_key51 = null;

        OracleParser_Keys.first_key_return first_key52 = null;

        OracleParser_Keys.nulls_key_return nulls_key53 = null;

        OracleParser_Keys.last_key_return last_key54 = null;

        OracleParser_Commons.column_name_return column_name56 = null;

        OracleParser_Keys.asc_key_return asc_key57 = null;

        OracleParser_Keys.desc_key_return desc_key58 = null;

        OracleParser_Keys.nulls_key_return nulls_key59 = null;

        OracleParser_Keys.first_key_return first_key60 = null;

        OracleParser_Keys.nulls_key_return nulls_key61 = null;

        OracleParser_Keys.last_key_return last_key62 = null;

        OracleParser_Keys.set_key_return set_key63 = null;

        OracleParser_Commons.column_name_return column_name64 = null;


        Object COMMA55_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 795) ) { return retval; }
            // OracleParser.g:231:5: ( search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name )
            // OracleParser.g:231:10: search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_search_key_in_search_clause1154);
            search_key43=search_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, search_key43.getTree());
            // OracleParser.g:231:21: ( depth_key | breadth_key )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==REGULAR_ID) ) {
                int LA13_1 = input.LA(2);

                if ( ((synpred23_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("depth")))) ) {
                    alt13=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("breadth"))) ) {
                    alt13=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // OracleParser.g:231:23: depth_key
                    {
                    pushFollow(FOLLOW_depth_key_in_search_clause1158);
                    depth_key44=depth_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, depth_key44.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:231:35: breadth_key
                    {
                    pushFollow(FOLLOW_breadth_key_in_search_clause1162);
                    breadth_key45=breadth_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, breadth_key45.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_first_key_in_search_clause1166);
            first_key46=first_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, first_key46.getTree());
            pushFollow(FOLLOW_by_key_in_search_clause1168);
            by_key47=by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, by_key47.getTree());
            pushFollow(FOLLOW_column_name_in_search_clause1183);
            column_name48=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name48.getTree());
            // OracleParser.g:232:26: ( asc_key )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==SQL92_RESERVED_ASC) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // OracleParser.g:0:0: asc_key
                    {
                    pushFollow(FOLLOW_asc_key_in_search_clause1185);
                    asc_key49=asc_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asc_key49.getTree());

                    }
                    break;

            }

            // OracleParser.g:232:36: ( desc_key )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==SQL92_RESERVED_DESC) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // OracleParser.g:0:0: desc_key
                    {
                    pushFollow(FOLLOW_desc_key_in_search_clause1189);
                    desc_key50=desc_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, desc_key50.getTree());

                    }
                    break;

            }

            // OracleParser.g:232:47: ( nulls_key first_key )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
                int LA16_1 = input.LA(2);

                if ( (LA16_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
                    int LA16_3 = input.LA(3);

                    if ( ((synpred26_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("nulls")))) ) {
                        alt16=1;
                    }
                }
            }
            switch (alt16) {
                case 1 :
                    // OracleParser.g:232:48: nulls_key first_key
                    {
                    pushFollow(FOLLOW_nulls_key_in_search_clause1194);
                    nulls_key51=nulls_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nulls_key51.getTree());
                    pushFollow(FOLLOW_first_key_in_search_clause1196);
                    first_key52=first_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, first_key52.getTree());

                    }
                    break;

            }

            // OracleParser.g:232:70: ( nulls_key last_key )?
            int alt17=2;
            alt17 = dfa17.predict(input);
            switch (alt17) {
                case 1 :
                    // OracleParser.g:232:71: nulls_key last_key
                    {
                    pushFollow(FOLLOW_nulls_key_in_search_clause1201);
                    nulls_key53=nulls_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nulls_key53.getTree());
                    pushFollow(FOLLOW_last_key_in_search_clause1203);
                    last_key54=last_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, last_key54.getTree());

                    }
                    break;

            }

            // OracleParser.g:233:14: ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==COMMA) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // OracleParser.g:233:15: COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )?
            	    {
            	    COMMA55=(Token)match(input,COMMA,FOLLOW_COMMA_in_search_clause1221); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA55_tree = (Object)adaptor.create(COMMA55);
            	    adaptor.addChild(root_0, COMMA55_tree);
            	    }
            	    pushFollow(FOLLOW_column_name_in_search_clause1223);
            	    column_name56=column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name56.getTree());
            	    // OracleParser.g:233:33: ( asc_key )?
            	    int alt18=2;
            	    int LA18_0 = input.LA(1);

            	    if ( (LA18_0==SQL92_RESERVED_ASC) ) {
            	        alt18=1;
            	    }
            	    switch (alt18) {
            	        case 1 :
            	            // OracleParser.g:0:0: asc_key
            	            {
            	            pushFollow(FOLLOW_asc_key_in_search_clause1225);
            	            asc_key57=asc_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, asc_key57.getTree());

            	            }
            	            break;

            	    }

            	    // OracleParser.g:233:43: ( desc_key )?
            	    int alt19=2;
            	    int LA19_0 = input.LA(1);

            	    if ( (LA19_0==SQL92_RESERVED_DESC) ) {
            	        alt19=1;
            	    }
            	    switch (alt19) {
            	        case 1 :
            	            // OracleParser.g:0:0: desc_key
            	            {
            	            pushFollow(FOLLOW_desc_key_in_search_clause1229);
            	            desc_key58=desc_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, desc_key58.getTree());

            	            }
            	            break;

            	    }

            	    // OracleParser.g:233:54: ( nulls_key first_key )?
            	    int alt20=2;
            	    int LA20_0 = input.LA(1);

            	    if ( (LA20_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
            	        int LA20_1 = input.LA(2);

            	        if ( (LA20_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
            	            int LA20_3 = input.LA(3);

            	            if ( ((synpred30_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("nulls")))) ) {
            	                alt20=1;
            	            }
            	        }
            	    }
            	    switch (alt20) {
            	        case 1 :
            	            // OracleParser.g:233:55: nulls_key first_key
            	            {
            	            pushFollow(FOLLOW_nulls_key_in_search_clause1234);
            	            nulls_key59=nulls_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nulls_key59.getTree());
            	            pushFollow(FOLLOW_first_key_in_search_clause1236);
            	            first_key60=first_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, first_key60.getTree());

            	            }
            	            break;

            	    }

            	    // OracleParser.g:233:77: ( nulls_key last_key )?
            	    int alt21=2;
            	    alt21 = dfa21.predict(input);
            	    switch (alt21) {
            	        case 1 :
            	            // OracleParser.g:233:78: nulls_key last_key
            	            {
            	            pushFollow(FOLLOW_nulls_key_in_search_clause1241);
            	            nulls_key61=nulls_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nulls_key61.getTree());
            	            pushFollow(FOLLOW_last_key_in_search_clause1243);
            	            last_key62=last_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, last_key62.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            pushFollow(FOLLOW_set_key_in_search_clause1263);
            set_key63=set_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, set_key63.getTree());
            pushFollow(FOLLOW_column_name_in_search_clause1265);
            column_name64=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name64.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 795, search_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "search_clause"

    public static class cycle_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycle_clause"
    // OracleParser.g:237:1: cycle_clause : cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression ;
    public final OracleParser.cycle_clause_return cycle_clause() throws RecognitionException {
        OracleParser.cycle_clause_return retval = new OracleParser.cycle_clause_return();
        retval.start = input.LT(1);
        int cycle_clause_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA67=null;
        OracleParser_Keys.cycle_key_return cycle_key65 = null;

        OracleParser_Commons.column_name_return column_name66 = null;

        OracleParser_Commons.column_name_return column_name68 = null;

        OracleParser_Keys.set_key_return set_key69 = null;

        OracleParser_Commons.column_name_return column_name70 = null;

        OracleParser_Keys.to_key_return to_key71 = null;

        OracleParser.expression_return expression72 = null;

        OracleParser_Keys.default_key_return default_key73 = null;

        OracleParser.expression_return expression74 = null;


        Object COMMA67_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 796) ) { return retval; }
            // OracleParser.g:238:5: ( cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression )
            // OracleParser.g:238:10: cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cycle_key_in_cycle_clause1285);
            cycle_key65=cycle_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cycle_key65.getTree());
            pushFollow(FOLLOW_column_name_in_cycle_clause1287);
            column_name66=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name66.getTree());
            // OracleParser.g:238:32: ( COMMA column_name )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==COMMA) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // OracleParser.g:238:34: COMMA column_name
            	    {
            	    COMMA67=(Token)match(input,COMMA,FOLLOW_COMMA_in_cycle_clause1291); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA67_tree = (Object)adaptor.create(COMMA67);
            	    adaptor.addChild(root_0, COMMA67_tree);
            	    }
            	    pushFollow(FOLLOW_column_name_in_cycle_clause1293);
            	    column_name68=column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name68.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);

            pushFollow(FOLLOW_set_key_in_cycle_clause1297);
            set_key69=set_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, set_key69.getTree());
            pushFollow(FOLLOW_column_name_in_cycle_clause1299);
            column_name70=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name70.getTree());
            pushFollow(FOLLOW_to_key_in_cycle_clause1301);
            to_key71=to_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, to_key71.getTree());
            pushFollow(FOLLOW_expression_in_cycle_clause1303);
            expression72=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression72.getTree());
            pushFollow(FOLLOW_default_key_in_cycle_clause1305);
            default_key73=default_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, default_key73.getTree());
            pushFollow(FOLLOW_expression_in_cycle_clause1307);
            expression74=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression74.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 796, cycle_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycle_clause"

    public static class subquery_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subquery"
    // OracleParser.g:241:1: subquery : subquery_basic_elements ( subquery_operation_part )* -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) ;
    public final OracleParser.subquery_return subquery() throws RecognitionException {
        OracleParser.subquery_return retval = new OracleParser.subquery_return();
        retval.start = input.LT(1);
        int subquery_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.subquery_basic_elements_return subquery_basic_elements75 = null;

        OracleParser.subquery_operation_part_return subquery_operation_part76 = null;


        RewriteRuleSubtreeStream stream_subquery_operation_part=new RewriteRuleSubtreeStream(adaptor,"rule subquery_operation_part");
        RewriteRuleSubtreeStream stream_subquery_basic_elements=new RewriteRuleSubtreeStream(adaptor,"rule subquery_basic_elements");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 797) ) { return retval; }
            // OracleParser.g:242:5: ( subquery_basic_elements ( subquery_operation_part )* -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) )
            // OracleParser.g:242:10: subquery_basic_elements ( subquery_operation_part )*
            {
            pushFollow(FOLLOW_subquery_basic_elements_in_subquery1327);
            subquery_basic_elements75=subquery_basic_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subquery_basic_elements.add(subquery_basic_elements75.getTree());
            // OracleParser.g:242:34: ( subquery_operation_part )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==SQL92_RESERVED_INTERSECT||LA24_0==PLSQL_RESERVED_MINUS||LA24_0==SQL92_RESERVED_UNION) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // OracleParser.g:0:0: subquery_operation_part
            	    {
            	    pushFollow(FOLLOW_subquery_operation_part_in_subquery1329);
            	    subquery_operation_part76=subquery_operation_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_subquery_operation_part.add(subquery_operation_part76.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);



            // AST REWRITE
            // elements: subquery_operation_part, subquery_basic_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 243:9: -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
            {
                // OracleParser.g:243:12: ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SUBQUERY, "SUBQUERY"), root_1);

                adaptor.addChild(root_1, stream_subquery_basic_elements.nextTree());
                // OracleParser.g:243:47: ( subquery_operation_part )*
                while ( stream_subquery_operation_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_subquery_operation_part.nextTree());

                }
                stream_subquery_operation_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 797, subquery_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subquery"

    public static class subquery_operation_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subquery_operation_part"
    // OracleParser.g:246:1: subquery_operation_part : ( union_key ( all_key )? | intersect_key | minus_key ) subquery_basic_elements ;
    public final OracleParser.subquery_operation_part_return subquery_operation_part() throws RecognitionException {
        OracleParser.subquery_operation_part_return retval = new OracleParser.subquery_operation_part_return();
        retval.start = input.LT(1);
        int subquery_operation_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.union_key_return union_key77 = null;

        OracleParser_Keys.all_key_return all_key78 = null;

        OracleParser_Keys.intersect_key_return intersect_key79 = null;

        OracleParser_Keys.minus_key_return minus_key80 = null;

        OracleParser.subquery_basic_elements_return subquery_basic_elements81 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 798) ) { return retval; }
            // OracleParser.g:247:5: ( ( union_key ( all_key )? | intersect_key | minus_key ) subquery_basic_elements )
            // OracleParser.g:247:10: ( union_key ( all_key )? | intersect_key | minus_key ) subquery_basic_elements
            {
            root_0 = (Object)adaptor.nil();

            // OracleParser.g:247:10: ( union_key ( all_key )? | intersect_key | minus_key )
            int alt26=3;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_UNION:
                {
                alt26=1;
                }
                break;
            case SQL92_RESERVED_INTERSECT:
                {
                alt26=2;
                }
                break;
            case PLSQL_RESERVED_MINUS:
                {
                alt26=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // OracleParser.g:247:11: union_key ( all_key )?
                    {
                    pushFollow(FOLLOW_union_key_in_subquery_operation_part1370);
                    union_key77=union_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(union_key77.getTree(), root_0);
                    // OracleParser.g:247:22: ( all_key )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==SQL92_RESERVED_ALL) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // OracleParser.g:0:0: all_key
                            {
                            pushFollow(FOLLOW_all_key_in_subquery_operation_part1373);
                            all_key78=all_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, all_key78.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // OracleParser.g:247:31: intersect_key
                    {
                    pushFollow(FOLLOW_intersect_key_in_subquery_operation_part1376);
                    intersect_key79=intersect_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(intersect_key79.getTree(), root_0);

                    }
                    break;
                case 3 :
                    // OracleParser.g:247:46: minus_key
                    {
                    pushFollow(FOLLOW_minus_key_in_subquery_operation_part1379);
                    minus_key80=minus_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(minus_key80.getTree(), root_0);

                    }
                    break;

            }

            pushFollow(FOLLOW_subquery_basic_elements_in_subquery_operation_part1383);
            subquery_basic_elements81=subquery_basic_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery_basic_elements81.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 798, subquery_operation_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subquery_operation_part"

    public static class subquery_basic_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subquery_basic_elements"
    // OracleParser.g:250:1: subquery_basic_elements : ( query_block | LEFT_PAREN subquery RIGHT_PAREN );
    public final OracleParser.subquery_basic_elements_return subquery_basic_elements() throws RecognitionException {
        OracleParser.subquery_basic_elements_return retval = new OracleParser.subquery_basic_elements_return();
        retval.start = input.LT(1);
        int subquery_basic_elements_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN83=null;
        Token RIGHT_PAREN85=null;
        OracleParser.query_block_return query_block82 = null;

        OracleParser.subquery_return subquery84 = null;


        Object LEFT_PAREN83_tree=null;
        Object RIGHT_PAREN85_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 799) ) { return retval; }
            // OracleParser.g:251:5: ( query_block | LEFT_PAREN subquery RIGHT_PAREN )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==SQL92_RESERVED_SELECT) ) {
                alt27=1;
            }
            else if ( (LA27_0==LEFT_PAREN) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // OracleParser.g:251:10: query_block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_query_block_in_subquery_basic_elements1403);
                    query_block82=query_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_block82.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:252:10: LEFT_PAREN subquery RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN83=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_subquery_basic_elements1414); if (state.failed) return retval;
                    pushFollow(FOLLOW_subquery_in_subquery_basic_elements1417);
                    subquery84=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery84.getTree());
                    RIGHT_PAREN85=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1419); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 799, subquery_basic_elements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subquery_basic_elements"

    public static class query_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_block"
    // OracleParser.g:255:1: query_block : select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? -> {mode == 1}? ^( select_key from_clause ^( SELECT_OPTIONS ( distinct_key )? ( unique_key )? ( all_key )? ) ^( SELECT_LIST ASTERISK ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> ^( select_key from_clause ^( SELECT_OPTIONS ( distinct_key )? ( unique_key )? ( all_key )? ) ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) ;
    public final OracleParser.query_block_return query_block() throws RecognitionException {
        OracleParser.query_block_return retval = new OracleParser.query_block_return();
        retval.start = input.LT(1);
        int query_block_StartIndex = input.index();
        Object root_0 = null;

        Token ASTERISK90=null;
        Token COMMA92=null;
        OracleParser_Keys.select_key_return select_key86 = null;

        OracleParser_Keys.distinct_key_return distinct_key87 = null;

        OracleParser_Keys.unique_key_return unique_key88 = null;

        OracleParser_Keys.all_key_return all_key89 = null;

        OracleParser.selected_element_return selected_element91 = null;

        OracleParser.selected_element_return selected_element93 = null;

        OracleParser_Commons.into_clause_return into_clause94 = null;

        OracleParser.from_clause_return from_clause95 = null;

        OracleParser_Commons.where_clause_return where_clause96 = null;

        OracleParser.hierarchical_query_clause_return hierarchical_query_clause97 = null;

        OracleParser.group_by_clause_return group_by_clause98 = null;

        OracleParser.model_clause_return model_clause99 = null;


        Object ASTERISK90_tree=null;
        Object COMMA92_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
        RewriteRuleSubtreeStream stream_distinct_key=new RewriteRuleSubtreeStream(adaptor,"rule distinct_key");
        RewriteRuleSubtreeStream stream_group_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule group_by_clause");
        RewriteRuleSubtreeStream stream_selected_element=new RewriteRuleSubtreeStream(adaptor,"rule selected_element");
        RewriteRuleSubtreeStream stream_unique_key=new RewriteRuleSubtreeStream(adaptor,"rule unique_key");
        RewriteRuleSubtreeStream stream_model_clause=new RewriteRuleSubtreeStream(adaptor,"rule model_clause");
        RewriteRuleSubtreeStream stream_select_key=new RewriteRuleSubtreeStream(adaptor,"rule select_key");
        RewriteRuleSubtreeStream stream_hierarchical_query_clause=new RewriteRuleSubtreeStream(adaptor,"rule hierarchical_query_clause");
            int mode = 0;    
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 800) ) { return retval; }
            // OracleParser.g:257:5: ( select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? -> {mode == 1}? ^( select_key from_clause ^( SELECT_OPTIONS ( distinct_key )? ( unique_key )? ( all_key )? ) ^( SELECT_LIST ASTERISK ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> ^( select_key from_clause ^( SELECT_OPTIONS ( distinct_key )? ( unique_key )? ( all_key )? ) ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) )
            // OracleParser.g:257:10: select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )?
            {
            pushFollow(FOLLOW_select_key_in_query_block1448);
            select_key86=select_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_select_key.add(select_key86.getTree());
            // OracleParser.g:258:9: ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )?
            int alt29=2;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // OracleParser.g:258:10: ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key )
                    {
                    // OracleParser.g:258:46: ( distinct_key | unique_key | all_key )
                    int alt28=3;
                    switch ( input.LA(1) ) {
                    case SQL92_RESERVED_DISTINCT:
                        {
                        alt28=1;
                        }
                        break;
                    case SQL92_RESERVED_UNIQUE:
                        {
                        alt28=2;
                        }
                        break;
                    case SQL92_RESERVED_ALL:
                        {
                        alt28=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 28, 0, input);

                        throw nvae;
                    }

                    switch (alt28) {
                        case 1 :
                            // OracleParser.g:258:47: distinct_key
                            {
                            pushFollow(FOLLOW_distinct_key_in_query_block1469);
                            distinct_key87=distinct_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinct_key.add(distinct_key87.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:258:60: unique_key
                            {
                            pushFollow(FOLLOW_unique_key_in_query_block1471);
                            unique_key88=unique_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_unique_key.add(unique_key88.getTree());

                            }
                            break;
                        case 3 :
                            // OracleParser.g:258:71: all_key
                            {
                            pushFollow(FOLLOW_all_key_in_query_block1473);
                            all_key89=all_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_all_key.add(all_key89.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // OracleParser.g:259:9: ( ASTERISK | selected_element ( COMMA selected_element )* )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==ASTERISK) ) {
                alt31=1;
            }
            else if ( ((LA31_0>=UNSIGNED_INTEGER && LA31_0<=MINUS_SIGN)||LA31_0==NATIONAL_CHAR_STRING_LIT||(LA31_0>=EXACT_NUM_LIT && LA31_0<=CHAR_STRING)||LA31_0==CHAR_STRING_PERL||LA31_0==DELIMITED_ID||LA31_0==LEFT_PAREN||LA31_0==PLUS_SIGN||LA31_0==COLON||LA31_0==BINDVAR||LA31_0==INTRODUCER||LA31_0==SQL92_RESERVED_ALL||LA31_0==SQL92_RESERVED_ANY||LA31_0==SQL92_RESERVED_CASE||LA31_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA31_0>=SQL92_RESERVED_CURSOR && LA31_0<=SQL92_RESERVED_DATE)||LA31_0==SQL92_RESERVED_DEFAULT||LA31_0==SQL92_RESERVED_DISTINCT||(LA31_0>=SQL92_RESERVED_EXISTS && LA31_0<=SQL92_RESERVED_FALSE)||LA31_0==SQL92_RESERVED_NOT||LA31_0==SQL92_RESERVED_NULL||LA31_0==SQL92_RESERVED_PRIOR||LA31_0==SQL92_RESERVED_TRUE||LA31_0==REGULAR_ID) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // OracleParser.g:259:10: ASTERISK
                    {
                    ASTERISK90=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_query_block1487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASTERISK.add(ASTERISK90);

                    if ( state.backtracking==0 ) {
                      mode = 1;
                    }

                    }
                    break;
                case 2 :
                    // OracleParser.g:259:32: selected_element ( COMMA selected_element )*
                    {
                    pushFollow(FOLLOW_selected_element_in_query_block1492);
                    selected_element91=selected_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selected_element.add(selected_element91.getTree());
                    // OracleParser.g:259:49: ( COMMA selected_element )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==COMMA) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                    	case 1 :
                    	    // OracleParser.g:259:50: COMMA selected_element
                    	    {
                    	    COMMA92=(Token)match(input,COMMA,FOLLOW_COMMA_in_query_block1495); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA92);

                    	    pushFollow(FOLLOW_selected_element_in_query_block1497);
                    	    selected_element93=selected_element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_selected_element.add(selected_element93.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);


                    }
                    break;

            }

            // OracleParser.g:260:9: ( into_clause )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==SQL92_RESERVED_INTO||LA32_0==REGULAR_ID) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // OracleParser.g:0:0: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_query_block1510);
                    into_clause94=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_into_clause.add(into_clause94.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_from_clause_in_query_block1521);
            from_clause95=from_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_from_clause.add(from_clause95.getTree());
            // OracleParser.g:262:9: ( where_clause )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==SQL92_RESERVED_WHERE) ) {
                int LA33_1 = input.LA(2);

                if ( (synpred47_OracleParser()) ) {
                    alt33=1;
                }
            }
            switch (alt33) {
                case 1 :
                    // OracleParser.g:0:0: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_query_block1532);
                    where_clause96=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause96.getTree());

                    }
                    break;

            }

            // OracleParser.g:263:9: ( hierarchical_query_clause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==SQL92_RESERVED_CONNECT) ) {
                int LA34_1 = input.LA(2);

                if ( (synpred48_OracleParser()) ) {
                    alt34=1;
                }
            }
            else if ( (LA34_0==PLSQL_RESERVED_START) ) {
                int LA34_2 = input.LA(2);

                if ( (synpred48_OracleParser()) ) {
                    alt34=1;
                }
            }
            switch (alt34) {
                case 1 :
                    // OracleParser.g:0:0: hierarchical_query_clause
                    {
                    pushFollow(FOLLOW_hierarchical_query_clause_in_query_block1544);
                    hierarchical_query_clause97=hierarchical_query_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hierarchical_query_clause.add(hierarchical_query_clause97.getTree());

                    }
                    break;

            }

            // OracleParser.g:264:9: ( group_by_clause )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==SQL92_RESERVED_GROUP) ) {
                int LA35_1 = input.LA(2);

                if ( (synpred49_OracleParser()) ) {
                    alt35=1;
                }
            }
            else if ( (LA35_0==SQL92_RESERVED_HAVING) ) {
                int LA35_2 = input.LA(2);

                if ( (synpred49_OracleParser()) ) {
                    alt35=1;
                }
            }
            switch (alt35) {
                case 1 :
                    // OracleParser.g:0:0: group_by_clause
                    {
                    pushFollow(FOLLOW_group_by_clause_in_query_block1556);
                    group_by_clause98=group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_group_by_clause.add(group_by_clause98.getTree());

                    }
                    break;

            }

            // OracleParser.g:265:9: ( model_clause )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==PLSQL_NON_RESERVED_MODEL) ) {
                int LA36_1 = input.LA(2);

                if ( (synpred50_OracleParser()) ) {
                    alt36=1;
                }
            }
            switch (alt36) {
                case 1 :
                    // OracleParser.g:0:0: model_clause
                    {
                    pushFollow(FOLLOW_model_clause_in_query_block1567);
                    model_clause99=model_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_model_clause.add(model_clause99.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: distinct_key, model_clause, distinct_key, from_clause, hierarchical_query_clause, from_clause, select_key, select_key, all_key, where_clause, unique_key, group_by_clause, into_clause, group_by_clause, model_clause, selected_element, unique_key, where_clause, all_key, into_clause, hierarchical_query_clause, ASTERISK
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 266:9: -> {mode == 1}? ^( select_key from_clause ^( SELECT_OPTIONS ( distinct_key )? ( unique_key )? ( all_key )? ) ^( SELECT_LIST ASTERISK ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            if (mode == 1) {
                // OracleParser.g:266:25: ^( select_key from_clause ^( SELECT_OPTIONS ( distinct_key )? ( unique_key )? ( all_key )? ) ^( SELECT_LIST ASTERISK ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_select_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_from_clause.nextTree());
                // OracleParser.g:266:50: ^( SELECT_OPTIONS ( distinct_key )? ( unique_key )? ( all_key )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECT_OPTIONS, "SELECT_OPTIONS"), root_2);

                // OracleParser.g:266:67: ( distinct_key )?
                if ( stream_distinct_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_distinct_key.nextTree());

                }
                stream_distinct_key.reset();
                // OracleParser.g:266:81: ( unique_key )?
                if ( stream_unique_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_unique_key.nextTree());

                }
                stream_unique_key.reset();
                // OracleParser.g:266:93: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_all_key.nextTree());

                }
                stream_all_key.reset();

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:266:103: ^( SELECT_LIST ASTERISK )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECT_LIST, "SELECT_LIST"), root_2);

                adaptor.addChild(root_2, stream_ASTERISK.nextNode());

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:267:17: ( into_clause )?
                if ( stream_into_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_into_clause.nextTree());

                }
                stream_into_clause.reset();
                // OracleParser.g:267:30: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();
                // OracleParser.g:267:44: ( hierarchical_query_clause )?
                if ( stream_hierarchical_query_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_hierarchical_query_clause.nextTree());

                }
                stream_hierarchical_query_clause.reset();
                // OracleParser.g:267:71: ( group_by_clause )?
                if ( stream_group_by_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_group_by_clause.nextTree());

                }
                stream_group_by_clause.reset();
                // OracleParser.g:267:88: ( model_clause )?
                if ( stream_model_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_clause.nextTree());

                }
                stream_model_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 268:9: -> ^( select_key from_clause ^( SELECT_OPTIONS ( distinct_key )? ( unique_key )? ( all_key )? ) ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            {
                // OracleParser.g:268:12: ^( select_key from_clause ^( SELECT_OPTIONS ( distinct_key )? ( unique_key )? ( all_key )? ) ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_select_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_from_clause.nextTree());
                // OracleParser.g:268:37: ^( SELECT_OPTIONS ( distinct_key )? ( unique_key )? ( all_key )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECT_OPTIONS, "SELECT_OPTIONS"), root_2);

                // OracleParser.g:268:54: ( distinct_key )?
                if ( stream_distinct_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_distinct_key.nextTree());

                }
                stream_distinct_key.reset();
                // OracleParser.g:268:68: ( unique_key )?
                if ( stream_unique_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_unique_key.nextTree());

                }
                stream_unique_key.reset();
                // OracleParser.g:268:80: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_all_key.nextTree());

                }
                stream_all_key.reset();

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:268:90: ^( SELECT_LIST ( selected_element )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECT_LIST, "SELECT_LIST"), root_2);

                if ( !(stream_selected_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_selected_element.hasNext() ) {
                    adaptor.addChild(root_2, stream_selected_element.nextTree());

                }
                stream_selected_element.reset();

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:269:17: ( into_clause )?
                if ( stream_into_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_into_clause.nextTree());

                }
                stream_into_clause.reset();
                // OracleParser.g:269:30: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();
                // OracleParser.g:269:44: ( hierarchical_query_clause )?
                if ( stream_hierarchical_query_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_hierarchical_query_clause.nextTree());

                }
                stream_hierarchical_query_clause.reset();
                // OracleParser.g:269:71: ( group_by_clause )?
                if ( stream_group_by_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_group_by_clause.nextTree());

                }
                stream_group_by_clause.reset();
                // OracleParser.g:269:88: ( model_clause )?
                if ( stream_model_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_clause.nextTree());

                }
                stream_model_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 800, query_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_block"

    public static class selected_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selected_element"
    // OracleParser.g:272:1: selected_element : select_list_elements ( column_alias )? -> ^( SELECT_ITEM select_list_elements ( column_alias )? ) ;
    public final OracleParser.selected_element_return selected_element() throws RecognitionException {
        OracleParser.selected_element_return retval = new OracleParser.selected_element_return();
        retval.start = input.LT(1);
        int selected_element_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.select_list_elements_return select_list_elements100 = null;

        OracleParser_Commons.column_alias_return column_alias101 = null;


        RewriteRuleSubtreeStream stream_column_alias=new RewriteRuleSubtreeStream(adaptor,"rule column_alias");
        RewriteRuleSubtreeStream stream_select_list_elements=new RewriteRuleSubtreeStream(adaptor,"rule select_list_elements");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 801) ) { return retval; }
            // OracleParser.g:273:5: ( select_list_elements ( column_alias )? -> ^( SELECT_ITEM select_list_elements ( column_alias )? ) )
            // OracleParser.g:273:10: select_list_elements ( column_alias )?
            {
            pushFollow(FOLLOW_select_list_elements_in_selected_element1723);
            select_list_elements100=select_list_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_select_list_elements.add(select_list_elements100.getTree());
            // OracleParser.g:273:31: ( column_alias )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==NATIONAL_CHAR_STRING_LIT||LA37_0==CHAR_STRING||LA37_0==CHAR_STRING_PERL||LA37_0==DELIMITED_ID||LA37_0==INTRODUCER||LA37_0==SQL92_RESERVED_AS) ) {
                alt37=1;
            }
            else if ( (LA37_0==REGULAR_ID) ) {
                int LA37_2 = input.LA(2);

                if ( (LA37_2==EOF||LA37_2==COMMA||LA37_2==SQL92_RESERVED_FROM||LA37_2==SQL92_RESERVED_INTO) ) {
                    alt37=1;
                }
                else if ( (LA37_2==REGULAR_ID) ) {
                    int LA37_4 = input.LA(3);

                    if ( (LA37_4==REGULAR_ID) ) {
                        alt37=1;
                    }
                }
            }
            switch (alt37) {
                case 1 :
                    // OracleParser.g:0:0: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_selected_element1725);
                    column_alias101=column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_alias.add(column_alias101.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: column_alias, select_list_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 274:9: -> ^( SELECT_ITEM select_list_elements ( column_alias )? )
            {
                // OracleParser.g:274:12: ^( SELECT_ITEM select_list_elements ( column_alias )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECT_ITEM, "SELECT_ITEM"), root_1);

                adaptor.addChild(root_1, stream_select_list_elements.nextTree());
                // OracleParser.g:274:47: ( column_alias )?
                if ( stream_column_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_alias.nextTree());

                }
                stream_column_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 801, selected_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selected_element"

    public static class from_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "from_clause"
    // OracleParser.g:277:1: from_clause : from_key table_ref_list -> ^( FROM_CLAUSE table_ref_list ) ;
    public final OracleParser.from_clause_return from_clause() throws RecognitionException {
        OracleParser.from_clause_return retval = new OracleParser.from_clause_return();
        retval.start = input.LT(1);
        int from_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.from_key_return from_key102 = null;

        OracleParser.table_ref_list_return table_ref_list103 = null;


        RewriteRuleSubtreeStream stream_table_ref_list=new RewriteRuleSubtreeStream(adaptor,"rule table_ref_list");
        RewriteRuleSubtreeStream stream_from_key=new RewriteRuleSubtreeStream(adaptor,"rule from_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 802) ) { return retval; }
            // OracleParser.g:278:5: ( from_key table_ref_list -> ^( FROM_CLAUSE table_ref_list ) )
            // OracleParser.g:278:10: from_key table_ref_list
            {
            pushFollow(FOLLOW_from_key_in_from_clause1765);
            from_key102=from_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_from_key.add(from_key102.getTree());
            pushFollow(FOLLOW_table_ref_list_in_from_clause1767);
            table_ref_list103=table_ref_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_ref_list.add(table_ref_list103.getTree());


            // AST REWRITE
            // elements: table_ref_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 278:34: -> ^( FROM_CLAUSE table_ref_list )
            {
                // OracleParser.g:278:37: ^( FROM_CLAUSE table_ref_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FROM_CLAUSE, "FROM_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_table_ref_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 802, from_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "from_clause"

    public static class select_list_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_list_elements"
    // OracleParser.g:281:1: select_list_elements : ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) );
    public final OracleParser.select_list_elements_return select_list_elements() throws RecognitionException {
        OracleParser.select_list_elements_return retval = new OracleParser.select_list_elements_return();
        retval.start = input.LT(1);
        int select_list_elements_StartIndex = input.index();
        Object root_0 = null;

        Token PERIOD105=null;
        Token ASTERISK106=null;
        OracleParser_Commons.tableview_name_return tableview_name104 = null;

        OracleParser.expression_return expression107 = null;


        Object PERIOD105_tree=null;
        Object ASTERISK106_tree=null;
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 803) ) { return retval; }
            // OracleParser.g:282:5: ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) )
            int alt38=2;
            alt38 = dfa38.predict(input);
            switch (alt38) {
                case 1 :
                    // OracleParser.g:282:10: ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK
                    {
                    pushFollow(FOLLOW_tableview_name_in_select_list_elements1804);
                    tableview_name104=tableview_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name104.getTree());
                    PERIOD105=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_select_list_elements1806); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD105);

                    ASTERISK106=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list_elements1808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASTERISK.add(ASTERISK106);



                    // AST REWRITE
                    // elements: tableview_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 282:76: -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) )
                    {
                        // OracleParser.g:282:79: ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                        // OracleParser.g:282:86: ^( DOT_ASTERISK[$ASTERISK] tableview_name )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DOT_ASTERISK, ASTERISK106), root_2);

                        adaptor.addChild(root_2, stream_tableview_name.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:283:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_select_list_elements1834);
                    expression107=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression107.getTree());


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 283:21: -> ^( EXPR expression )
                    {
                        // OracleParser.g:283:24: ^( EXPR expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 803, select_list_elements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_list_elements"

    public static class table_ref_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_ref_list"
    // OracleParser.g:286:1: table_ref_list : table_ref ( COMMA table_ref )* ;
    public final OracleParser.table_ref_list_return table_ref_list() throws RecognitionException {
        OracleParser.table_ref_list_return retval = new OracleParser.table_ref_list_return();
        retval.start = input.LT(1);
        int table_ref_list_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA109=null;
        OracleParser.table_ref_return table_ref108 = null;

        OracleParser.table_ref_return table_ref110 = null;


        Object COMMA109_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 804) ) { return retval; }
            // OracleParser.g:287:5: ( table_ref ( COMMA table_ref )* )
            // OracleParser.g:287:10: table_ref ( COMMA table_ref )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_table_ref_in_table_ref_list1862);
            table_ref108=table_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_ref108.getTree());
            // OracleParser.g:287:20: ( COMMA table_ref )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==COMMA) ) {
                    int LA39_2 = input.LA(2);

                    if ( (synpred53_OracleParser()) ) {
                        alt39=1;
                    }


                }


                switch (alt39) {
            	case 1 :
            	    // OracleParser.g:287:21: COMMA table_ref
            	    {
            	    COMMA109=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_ref_list1865); if (state.failed) return retval;
            	    pushFollow(FOLLOW_table_ref_in_table_ref_list1868);
            	    table_ref110=table_ref();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_ref110.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 804, table_ref_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_ref_list"

    public static class table_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_ref"
    // OracleParser.g:294:1: table_ref : table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )? -> ^( TABLE_REF table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? ) ;
    public final OracleParser.table_ref_return table_ref() throws RecognitionException {
        OracleParser.table_ref_return retval = new OracleParser.table_ref_return();
        retval.start = input.LT(1);
        int table_ref_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.table_ref_aux_return table_ref_aux111 = null;

        OracleParser.join_clause_return join_clause112 = null;

        OracleParser.pivot_clause_return pivot_clause113 = null;

        OracleParser.unpivot_clause_return unpivot_clause114 = null;


        RewriteRuleSubtreeStream stream_join_clause=new RewriteRuleSubtreeStream(adaptor,"rule join_clause");
        RewriteRuleSubtreeStream stream_unpivot_clause=new RewriteRuleSubtreeStream(adaptor,"rule unpivot_clause");
        RewriteRuleSubtreeStream stream_pivot_clause=new RewriteRuleSubtreeStream(adaptor,"rule pivot_clause");
        RewriteRuleSubtreeStream stream_table_ref_aux=new RewriteRuleSubtreeStream(adaptor,"rule table_ref_aux");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 805) ) { return retval; }
            // OracleParser.g:295:5: ( table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )? -> ^( TABLE_REF table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? ) )
            // OracleParser.g:295:10: table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )?
            {
            pushFollow(FOLLOW_table_ref_aux_in_table_ref1894);
            table_ref_aux111=table_ref_aux();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_ref_aux.add(table_ref_aux111.getTree());
            // OracleParser.g:295:24: ( join_clause )*
            loop40:
            do {
                int alt40=2;
                switch ( input.LA(1) ) {
                case REGULAR_ID:
                    {
                    int LA40_1 = input.LA(2);

                    if ( ((synpred54_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("partition")))) ) {
                        alt40=1;
                    }


                    }
                    break;
                case CROSS:
                case NATURAL:
                    {
                    int LA40_3 = input.LA(2);

                    if ( (synpred54_OracleParser()) ) {
                        alt40=1;
                    }


                    }
                    break;
                case INNER:
                    {
                    int LA40_4 = input.LA(2);

                    if ( (synpred54_OracleParser()) ) {
                        alt40=1;
                    }


                    }
                    break;
                case LEFT:
                case RIGHT:
                case FULL:
                    {
                    int LA40_5 = input.LA(2);

                    if ( (synpred54_OracleParser()) ) {
                        alt40=1;
                    }


                    }
                    break;
                case JOIN:
                    {
                    int LA40_6 = input.LA(2);

                    if ( (synpred54_OracleParser()) ) {
                        alt40=1;
                    }


                    }
                    break;

                }

                switch (alt40) {
            	case 1 :
            	    // OracleParser.g:0:0: join_clause
            	    {
            	    pushFollow(FOLLOW_join_clause_in_table_ref1896);
            	    join_clause112=join_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_join_clause.add(join_clause112.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);

            // OracleParser.g:295:37: ( pivot_clause | unpivot_clause )?
            int alt41=3;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==REGULAR_ID) ) {
                int LA41_1 = input.LA(2);

                if ( ((synpred55_OracleParser()&&((input.LT(1).getText().equalsIgnoreCase("pivot"))))) ) {
                    alt41=1;
                }
                else if ( ((synpred56_OracleParser()&&((input.LT(1).getText().equalsIgnoreCase("unpivot"))))) ) {
                    alt41=2;
                }
            }
            switch (alt41) {
                case 1 :
                    // OracleParser.g:295:38: pivot_clause
                    {
                    pushFollow(FOLLOW_pivot_clause_in_table_ref1900);
                    pivot_clause113=pivot_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pivot_clause.add(pivot_clause113.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:295:51: unpivot_clause
                    {
                    pushFollow(FOLLOW_unpivot_clause_in_table_ref1902);
                    unpivot_clause114=unpivot_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unpivot_clause.add(unpivot_clause114.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: pivot_clause, table_ref_aux, join_clause, unpivot_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 296:9: -> ^( TABLE_REF table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? )
            {
                // OracleParser.g:296:12: ^( TABLE_REF table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TABLE_REF, "TABLE_REF"), root_1);

                adaptor.addChild(root_1, stream_table_ref_aux.nextTree());
                // OracleParser.g:296:38: ( join_clause )*
                while ( stream_join_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_join_clause.nextTree());

                }
                stream_join_clause.reset();
                // OracleParser.g:296:51: ( pivot_clause )?
                if ( stream_pivot_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_pivot_clause.nextTree());

                }
                stream_pivot_clause.reset();
                // OracleParser.g:296:65: ( unpivot_clause )?
                if ( stream_unpivot_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_unpivot_clause.nextTree());

                }
                stream_unpivot_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 805, table_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_ref"

    public static class table_ref_aux_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_ref_aux"
    // OracleParser.g:299:1: table_ref_aux : ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? ) ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT ( table_alias )? ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ) ;
    public final OracleParser.table_ref_aux_return table_ref_aux() throws RecognitionException {
        OracleParser.table_ref_aux_return retval = new OracleParser.table_ref_aux_return();
        retval.start = input.LT(1);
        int table_ref_aux_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN118=null;
        Token RIGHT_PAREN121=null;
        Token LEFT_PAREN125=null;
        Token RIGHT_PAREN127=null;
        OracleParser.dml_table_expression_clause_return dml_table_expression_clause115 = null;

        OracleParser.pivot_clause_return pivot_clause116 = null;

        OracleParser.unpivot_clause_return unpivot_clause117 = null;

        OracleParser.table_ref_return table_ref119 = null;

        OracleParser.subquery_operation_part_return subquery_operation_part120 = null;

        OracleParser.pivot_clause_return pivot_clause122 = null;

        OracleParser.unpivot_clause_return unpivot_clause123 = null;

        OracleParser_Keys.only_key_return only_key124 = null;

        OracleParser.dml_table_expression_clause_return dml_table_expression_clause126 = null;

        OracleParser.dml_table_expression_clause_return dml_table_expression_clause128 = null;

        OracleParser.pivot_clause_return pivot_clause129 = null;

        OracleParser.unpivot_clause_return unpivot_clause130 = null;

        OracleParser.flashback_query_clause_return flashback_query_clause131 = null;

        OracleParser_Commons.table_alias_return table_alias132 = null;


        Object LEFT_PAREN118_tree=null;
        Object RIGHT_PAREN121_tree=null;
        Object LEFT_PAREN125_tree=null;
        Object RIGHT_PAREN127_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_dml_table_expression_clause=new RewriteRuleSubtreeStream(adaptor,"rule dml_table_expression_clause");
        RewriteRuleSubtreeStream stream_subquery_operation_part=new RewriteRuleSubtreeStream(adaptor,"rule subquery_operation_part");
        RewriteRuleSubtreeStream stream_unpivot_clause=new RewriteRuleSubtreeStream(adaptor,"rule unpivot_clause");
        RewriteRuleSubtreeStream stream_table_ref=new RewriteRuleSubtreeStream(adaptor,"rule table_ref");
        RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
        RewriteRuleSubtreeStream stream_pivot_clause=new RewriteRuleSubtreeStream(adaptor,"rule pivot_clause");
        RewriteRuleSubtreeStream stream_only_key=new RewriteRuleSubtreeStream(adaptor,"rule only_key");
        RewriteRuleSubtreeStream stream_flashback_query_clause=new RewriteRuleSubtreeStream(adaptor,"rule flashback_query_clause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 806) ) { return retval; }
            // OracleParser.g:300:5: ( ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? ) ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT ( table_alias )? ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ) )
            // OracleParser.g:301:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? ) ( flashback_query_clause )* ({...}? table_alias )?
            {
            // OracleParser.g:301:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? )
            int alt46=4;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // OracleParser.g:301:10: ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )?
                    {
                    pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux1967);
                    dml_table_expression_clause115=dml_table_expression_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_table_expression_clause.add(dml_table_expression_clause115.getTree());
                    // OracleParser.g:301:76: ( pivot_clause | unpivot_clause )?
                    int alt42=3;
                    alt42 = dfa42.predict(input);
                    switch (alt42) {
                        case 1 :
                            // OracleParser.g:301:77: pivot_clause
                            {
                            pushFollow(FOLLOW_pivot_clause_in_table_ref_aux1970);
                            pivot_clause116=pivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pivot_clause.add(pivot_clause116.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:301:90: unpivot_clause
                            {
                            pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux1972);
                            unpivot_clause117=unpivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_unpivot_clause.add(unpivot_clause117.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // OracleParser.g:302:10: ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )?
                    {
                    LEFT_PAREN118=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_table_ref_aux1991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN118);

                    pushFollow(FOLLOW_table_ref_in_table_ref_aux1993);
                    table_ref119=table_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_ref.add(table_ref119.getTree());
                    // OracleParser.g:302:47: ( subquery_operation_part )*
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( (LA43_0==SQL92_RESERVED_INTERSECT||LA43_0==PLSQL_RESERVED_MINUS||LA43_0==SQL92_RESERVED_UNION) ) {
                            alt43=1;
                        }


                        switch (alt43) {
                    	case 1 :
                    	    // OracleParser.g:0:0: subquery_operation_part
                    	    {
                    	    pushFollow(FOLLOW_subquery_operation_part_in_table_ref_aux1995);
                    	    subquery_operation_part120=subquery_operation_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_subquery_operation_part.add(subquery_operation_part120.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop43;
                        }
                    } while (true);

                    RIGHT_PAREN121=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_table_ref_aux1998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN121);

                    // OracleParser.g:302:84: ( pivot_clause | unpivot_clause )?
                    int alt44=3;
                    alt44 = dfa44.predict(input);
                    switch (alt44) {
                        case 1 :
                            // OracleParser.g:302:85: pivot_clause
                            {
                            pushFollow(FOLLOW_pivot_clause_in_table_ref_aux2001);
                            pivot_clause122=pivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pivot_clause.add(pivot_clause122.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:302:98: unpivot_clause
                            {
                            pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux2003);
                            unpivot_clause123=unpivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_unpivot_clause.add(unpivot_clause123.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // OracleParser.g:303:10: ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_only_key_in_table_ref_aux2024);
                    only_key124=only_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_only_key.add(only_key124.getTree());
                    LEFT_PAREN125=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_table_ref_aux2026); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN125);

                    pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux2028);
                    dml_table_expression_clause126=dml_table_expression_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_table_expression_clause.add(dml_table_expression_clause126.getTree());
                    RIGHT_PAREN127=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_table_ref_aux2030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN127);


                    }
                    break;
                case 4 :
                    // OracleParser.g:304:10: dml_table_expression_clause ( pivot_clause | unpivot_clause )?
                    {
                    pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux2041);
                    dml_table_expression_clause128=dml_table_expression_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_table_expression_clause.add(dml_table_expression_clause128.getTree());
                    // OracleParser.g:304:38: ( pivot_clause | unpivot_clause )?
                    int alt45=3;
                    alt45 = dfa45.predict(input);
                    switch (alt45) {
                        case 1 :
                            // OracleParser.g:304:39: pivot_clause
                            {
                            pushFollow(FOLLOW_pivot_clause_in_table_ref_aux2044);
                            pivot_clause129=pivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pivot_clause.add(pivot_clause129.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:304:52: unpivot_clause
                            {
                            pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux2046);
                            unpivot_clause130=unpivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_unpivot_clause.add(unpivot_clause130.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // OracleParser.g:306:9: ( flashback_query_clause )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==REGULAR_ID) ) {
                    int LA47_2 = input.LA(2);

                    if ( ((synpred68_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("versions")))) ) {
                        alt47=1;
                    }


                }
                else if ( (LA47_0==SQL92_RESERVED_AS) ) {
                    int LA47_3 = input.LA(2);

                    if ( (synpred68_OracleParser()) ) {
                        alt47=1;
                    }


                }


                switch (alt47) {
            	case 1 :
            	    // OracleParser.g:0:0: flashback_query_clause
            	    {
            	    pushFollow(FOLLOW_flashback_query_clause_in_table_ref_aux2064);
            	    flashback_query_clause131=flashback_query_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flashback_query_clause.add(flashback_query_clause131.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);

            // OracleParser.g:307:9: ({...}? table_alias )?
            int alt48=2;
            switch ( input.LA(1) ) {
                case INTRODUCER:
                    {
                    int LA48_1 = input.LA(2);

                    if ( ((synpred69_OracleParser()&&(isTableAlias()))) ) {
                        alt48=1;
                    }
                    }
                    break;
                case REGULAR_ID:
                    {
                    int LA48_2 = input.LA(2);

                    if ( ((synpred69_OracleParser()&&(isTableAlias()))) ) {
                        alt48=1;
                    }
                    }
                    break;
                case DELIMITED_ID:
                    {
                    int LA48_3 = input.LA(2);

                    if ( ((synpred69_OracleParser()&&(isTableAlias()))) ) {
                        alt48=1;
                    }
                    }
                    break;
                case NATIONAL_CHAR_STRING_LIT:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                    {
                    int LA48_4 = input.LA(2);

                    if ( ((synpred69_OracleParser()&&(isTableAlias()))) ) {
                        alt48=1;
                    }
                    }
                    break;
            }

            switch (alt48) {
                case 1 :
                    // OracleParser.g:307:10: {...}? table_alias
                    {
                    if ( !((isTableAlias())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "table_ref_aux", "isTableAlias()");
                    }
                    pushFollow(FOLLOW_table_alias_in_table_ref_aux2078);
                    table_alias132=table_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_alias.add(table_alias132.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: unpivot_clause, subquery_operation_part, table_ref, table_alias, only_key, flashback_query_clause, dml_table_expression_clause, pivot_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 308:9: -> ^( TABLE_REF_ELEMENT ( table_alias )? ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* )
            {
                // OracleParser.g:308:12: ^( TABLE_REF_ELEMENT ( table_alias )? ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TABLE_REF_ELEMENT, "TABLE_REF_ELEMENT"), root_1);

                // OracleParser.g:308:32: ( table_alias )?
                if ( stream_table_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_alias.nextTree());

                }
                stream_table_alias.reset();
                // OracleParser.g:308:45: ( dml_table_expression_clause )?
                if ( stream_dml_table_expression_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_dml_table_expression_clause.nextTree());

                }
                stream_dml_table_expression_clause.reset();
                // OracleParser.g:308:74: ( table_ref )?
                if ( stream_table_ref.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_ref.nextTree());

                }
                stream_table_ref.reset();
                // OracleParser.g:308:85: ( subquery_operation_part )*
                while ( stream_subquery_operation_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_subquery_operation_part.nextTree());

                }
                stream_subquery_operation_part.reset();
                // OracleParser.g:308:110: ( only_key )?
                if ( stream_only_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_only_key.nextTree());

                }
                stream_only_key.reset();
                // OracleParser.g:308:120: ( pivot_clause )?
                if ( stream_pivot_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_pivot_clause.nextTree());

                }
                stream_pivot_clause.reset();
                // OracleParser.g:308:134: ( unpivot_clause )?
                if ( stream_unpivot_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_unpivot_clause.nextTree());

                }
                stream_unpivot_clause.reset();
                // OracleParser.g:308:150: ( flashback_query_clause )*
                while ( stream_flashback_query_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_flashback_query_clause.nextTree());

                }
                stream_flashback_query_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 806, table_ref_aux_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_ref_aux"

    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "join_clause"
    // OracleParser.g:311:1: join_clause : ( query_partition_clause )? ( join_qualifier1 )? ( join_qualifier2 )? JOIN table_ref_aux ( query_partition_clause )? ( join_on_part | join_using_part )* -> ^( JOIN_DEF ^( JOIN_QUALIFIER ( join_qualifier1 )? ( join_qualifier2 )? ) table_ref_aux ( query_partition_clause )* ( join_on_part )* ( join_using_part )* ) ;
    public final OracleParser.join_clause_return join_clause() throws RecognitionException {
        OracleParser.join_clause_return retval = new OracleParser.join_clause_return();
        retval.start = input.LT(1);
        int join_clause_StartIndex = input.index();
        Object root_0 = null;

        Token JOIN136=null;
        OracleParser.query_partition_clause_return query_partition_clause133 = null;

        OracleParser.join_qualifier1_return join_qualifier1134 = null;

        OracleParser.join_qualifier2_return join_qualifier2135 = null;

        OracleParser.table_ref_aux_return table_ref_aux137 = null;

        OracleParser.query_partition_clause_return query_partition_clause138 = null;

        OracleParser.join_on_part_return join_on_part139 = null;

        OracleParser.join_using_part_return join_using_part140 = null;


        Object JOIN136_tree=null;
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_join_using_part=new RewriteRuleSubtreeStream(adaptor,"rule join_using_part");
        RewriteRuleSubtreeStream stream_join_on_part=new RewriteRuleSubtreeStream(adaptor,"rule join_on_part");
        RewriteRuleSubtreeStream stream_join_qualifier1=new RewriteRuleSubtreeStream(adaptor,"rule join_qualifier1");
        RewriteRuleSubtreeStream stream_join_qualifier2=new RewriteRuleSubtreeStream(adaptor,"rule join_qualifier2");
        RewriteRuleSubtreeStream stream_query_partition_clause=new RewriteRuleSubtreeStream(adaptor,"rule query_partition_clause");
        RewriteRuleSubtreeStream stream_table_ref_aux=new RewriteRuleSubtreeStream(adaptor,"rule table_ref_aux");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 807) ) { return retval; }
            // OracleParser.g:312:5: ( ( query_partition_clause )? ( join_qualifier1 )? ( join_qualifier2 )? JOIN table_ref_aux ( query_partition_clause )? ( join_on_part | join_using_part )* -> ^( JOIN_DEF ^( JOIN_QUALIFIER ( join_qualifier1 )? ( join_qualifier2 )? ) table_ref_aux ( query_partition_clause )* ( join_on_part )* ( join_using_part )* ) )
            // OracleParser.g:312:10: ( query_partition_clause )? ( join_qualifier1 )? ( join_qualifier2 )? JOIN table_ref_aux ( query_partition_clause )? ( join_on_part | join_using_part )*
            {
            // OracleParser.g:312:10: ( query_partition_clause )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("partition")))) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // OracleParser.g:0:0: query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_join_clause2138);
                    query_partition_clause133=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_query_partition_clause.add(query_partition_clause133.getTree());

                    }
                    break;

            }

            // OracleParser.g:313:9: ( join_qualifier1 )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( ((LA50_0>=CROSS && LA50_0<=NATURAL)) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // OracleParser.g:0:0: join_qualifier1
                    {
                    pushFollow(FOLLOW_join_qualifier1_in_join_clause2149);
                    join_qualifier1134=join_qualifier1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_join_qualifier1.add(join_qualifier1134.getTree());

                    }
                    break;

            }

            // OracleParser.g:313:26: ( join_qualifier2 )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( ((LA51_0>=LEFT && LA51_0<=FULL)||LA51_0==INNER) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // OracleParser.g:0:0: join_qualifier2
                    {
                    pushFollow(FOLLOW_join_qualifier2_in_join_clause2152);
                    join_qualifier2135=join_qualifier2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_join_qualifier2.add(join_qualifier2135.getTree());

                    }
                    break;

            }

            JOIN136=(Token)match(input,JOIN,FOLLOW_JOIN_in_join_clause2155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN136);

            pushFollow(FOLLOW_table_ref_aux_in_join_clause2165);
            table_ref_aux137=table_ref_aux();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_ref_aux.add(table_ref_aux137.getTree());
            // OracleParser.g:315:9: ( query_partition_clause )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==REGULAR_ID) ) {
                int LA52_1 = input.LA(2);

                if ( ((synpred73_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("partition")))) ) {
                    alt52=1;
                }
            }
            switch (alt52) {
                case 1 :
                    // OracleParser.g:0:0: query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_join_clause2175);
                    query_partition_clause138=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_query_partition_clause.add(query_partition_clause138.getTree());

                    }
                    break;

            }

            // OracleParser.g:316:5: ( join_on_part | join_using_part )*
            loop53:
            do {
                int alt53=3;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==SQL92_RESERVED_ON) ) {
                    int LA53_2 = input.LA(2);

                    if ( (synpred74_OracleParser()) ) {
                        alt53=1;
                    }


                }
                else if ( (LA53_0==PLSQL_NON_RESERVED_USING) ) {
                    int LA53_3 = input.LA(2);

                    if ( (synpred75_OracleParser()) ) {
                        alt53=2;
                    }


                }


                switch (alt53) {
            	case 1 :
            	    // OracleParser.g:316:10: join_on_part
            	    {
            	    pushFollow(FOLLOW_join_on_part_in_join_clause2187);
            	    join_on_part139=join_on_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_join_on_part.add(join_on_part139.getTree());

            	    }
            	    break;
            	case 2 :
            	    // OracleParser.g:317:10: join_using_part
            	    {
            	    pushFollow(FOLLOW_join_using_part_in_join_clause2198);
            	    join_using_part140=join_using_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_join_using_part.add(join_using_part140.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);



            // AST REWRITE
            // elements: query_partition_clause, join_qualifier1, join_qualifier2, join_on_part, table_ref_aux, join_using_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 319:9: -> ^( JOIN_DEF ^( JOIN_QUALIFIER ( join_qualifier1 )? ( join_qualifier2 )? ) table_ref_aux ( query_partition_clause )* ( join_on_part )* ( join_using_part )* )
            {
                // OracleParser.g:319:12: ^( JOIN_DEF ^( JOIN_QUALIFIER ( join_qualifier1 )? ( join_qualifier2 )? ) table_ref_aux ( query_partition_clause )* ( join_on_part )* ( join_using_part )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(JOIN_DEF, "JOIN_DEF"), root_1);

                // OracleParser.g:319:23: ^( JOIN_QUALIFIER ( join_qualifier1 )? ( join_qualifier2 )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(JOIN_QUALIFIER, "JOIN_QUALIFIER"), root_2);

                // OracleParser.g:319:40: ( join_qualifier1 )?
                if ( stream_join_qualifier1.hasNext() ) {
                    adaptor.addChild(root_2, stream_join_qualifier1.nextTree());

                }
                stream_join_qualifier1.reset();
                // OracleParser.g:319:57: ( join_qualifier2 )?
                if ( stream_join_qualifier2.hasNext() ) {
                    adaptor.addChild(root_2, stream_join_qualifier2.nextTree());

                }
                stream_join_qualifier2.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_table_ref_aux.nextTree());
                // OracleParser.g:319:89: ( query_partition_clause )*
                while ( stream_query_partition_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_query_partition_clause.nextTree());

                }
                stream_query_partition_clause.reset();
                // OracleParser.g:319:113: ( join_on_part )*
                while ( stream_join_on_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_join_on_part.nextTree());

                }
                stream_join_on_part.reset();
                // OracleParser.g:319:127: ( join_using_part )*
                while ( stream_join_using_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_join_using_part.nextTree());

                }
                stream_join_using_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 807, join_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "join_clause"

    public static class join_qualifier1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "join_qualifier1"
    // OracleParser.g:322:1: join_qualifier1 : ( CROSS | NATURAL );
    public final OracleParser.join_qualifier1_return join_qualifier1() throws RecognitionException {
        OracleParser.join_qualifier1_return retval = new OracleParser.join_qualifier1_return();
        retval.start = input.LT(1);
        int join_qualifier1_StartIndex = input.index();
        Object root_0 = null;

        Token set141=null;

        Object set141_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 808) ) { return retval; }
            // OracleParser.g:322:16: ( CROSS | NATURAL )
            // OracleParser.g:
            {
            root_0 = (Object)adaptor.nil();

            set141=(Token)input.LT(1);
            if ( (input.LA(1)>=CROSS && input.LA(1)<=NATURAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set141));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 808, join_qualifier1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "join_qualifier1"

    public static class join_qualifier2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "join_qualifier2"
    // OracleParser.g:325:1: join_qualifier2 : ( INNER | outer_join_type );
    public final OracleParser.join_qualifier2_return join_qualifier2() throws RecognitionException {
        OracleParser.join_qualifier2_return retval = new OracleParser.join_qualifier2_return();
        retval.start = input.LT(1);
        int join_qualifier2_StartIndex = input.index();
        Object root_0 = null;

        Token INNER142=null;
        OracleParser.outer_join_type_return outer_join_type143 = null;


        Object INNER142_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 809) ) { return retval; }
            // OracleParser.g:325:16: ( INNER | outer_join_type )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==INNER) ) {
                alt54=1;
            }
            else if ( ((LA54_0>=LEFT && LA54_0<=FULL)) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    // OracleParser.g:326:5: INNER
                    {
                    root_0 = (Object)adaptor.nil();

                    INNER142=(Token)match(input,INNER,FOLLOW_INNER_in_join_qualifier22275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER142_tree = (Object)adaptor.create(INNER142);
                    adaptor.addChild(root_0, INNER142_tree);
                    }

                    }
                    break;
                case 2 :
                    // OracleParser.g:326:13: outer_join_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_outer_join_type_in_join_qualifier22279);
                    outer_join_type143=outer_join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_type143.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 809, join_qualifier2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "join_qualifier2"

    public static class join_on_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "join_on_part"
    // OracleParser.g:329:1: join_on_part : on_key condition -> ^( JOIN_ON_PART ^( LOGIC_EXPR condition ) ) ;
    public final OracleParser.join_on_part_return join_on_part() throws RecognitionException {
        OracleParser.join_on_part_return retval = new OracleParser.join_on_part_return();
        retval.start = input.LT(1);
        int join_on_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.on_key_return on_key144 = null;

        OracleParser.condition_return condition145 = null;


        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_on_key=new RewriteRuleSubtreeStream(adaptor,"rule on_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 810) ) { return retval; }
            // OracleParser.g:330:5: ( on_key condition -> ^( JOIN_ON_PART ^( LOGIC_EXPR condition ) ) )
            // OracleParser.g:330:10: on_key condition
            {
            pushFollow(FOLLOW_on_key_in_join_on_part2299);
            on_key144=on_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_on_key.add(on_key144.getTree());
            pushFollow(FOLLOW_condition_in_join_on_part2301);
            condition145=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition145.getTree());


            // AST REWRITE
            // elements: condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 331:9: -> ^( JOIN_ON_PART ^( LOGIC_EXPR condition ) )
            {
                // OracleParser.g:331:12: ^( JOIN_ON_PART ^( LOGIC_EXPR condition ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(JOIN_ON_PART, "JOIN_ON_PART"), root_1);

                // OracleParser.g:331:27: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 810, join_on_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "join_on_part"

    public static class join_using_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "join_using_part"
    // OracleParser.g:334:1: join_using_part : using_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ;
    public final OracleParser.join_using_part_return join_using_part() throws RecognitionException {
        OracleParser.join_using_part_return retval = new OracleParser.join_using_part_return();
        retval.start = input.LT(1);
        int join_using_part_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN147=null;
        Token COMMA149=null;
        Token RIGHT_PAREN151=null;
        OracleParser_Keys.using_key_return using_key146 = null;

        OracleParser_Commons.column_name_return column_name148 = null;

        OracleParser_Commons.column_name_return column_name150 = null;


        Object LEFT_PAREN147_tree=null;
        Object COMMA149_tree=null;
        Object RIGHT_PAREN151_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 811) ) { return retval; }
            // OracleParser.g:335:5: ( using_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            // OracleParser.g:335:10: using_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_using_key_in_join_using_part2342);
            using_key146=using_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(using_key146.getTree(), root_0);
            LEFT_PAREN147=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_join_using_part2345); if (state.failed) return retval;
            pushFollow(FOLLOW_column_name_in_join_using_part2348);
            column_name148=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name148.getTree());
            // OracleParser.g:335:45: ( COMMA column_name )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==COMMA) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // OracleParser.g:335:46: COMMA column_name
            	    {
            	    COMMA149=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_using_part2351); if (state.failed) return retval;
            	    pushFollow(FOLLOW_column_name_in_join_using_part2354);
            	    column_name150=column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name150.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            RIGHT_PAREN151=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_join_using_part2358); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 811, join_using_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "join_using_part"

    public static class outer_join_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outer_join_type"
    // OracleParser.g:338:1: outer_join_type : ( FULL | LEFT | RIGHT ) ( OUTER )? ;
    public final OracleParser.outer_join_type_return outer_join_type() throws RecognitionException {
        OracleParser.outer_join_type_return retval = new OracleParser.outer_join_type_return();
        retval.start = input.LT(1);
        int outer_join_type_StartIndex = input.index();
        Object root_0 = null;

        Token set152=null;
        Token OUTER153=null;

        Object set152_tree=null;
        Object OUTER153_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 812) ) { return retval; }
            // OracleParser.g:339:5: ( ( FULL | LEFT | RIGHT ) ( OUTER )? )
            // OracleParser.g:340:5: ( FULL | LEFT | RIGHT ) ( OUTER )?
            {
            root_0 = (Object)adaptor.nil();

            set152=(Token)input.LT(1);
            if ( (input.LA(1)>=LEFT && input.LA(1)<=FULL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set152));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // OracleParser.g:344:9: ( OUTER )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==OUTER) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // OracleParser.g:0:0: OUTER
                    {
                    OUTER153=(Token)match(input,OUTER,FOLLOW_OUTER_in_outer_join_type2427); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER153_tree = (Object)adaptor.create(OUTER153);
                    adaptor.addChild(root_0, OUTER153_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 812, outer_join_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "outer_join_type"

    public static class query_partition_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_partition_clause"
    // OracleParser.g:347:1: query_partition_clause : partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* ) -> ^( partition_key ( expression_list )? ( EXPR expression )* ) ;
    public final OracleParser.query_partition_clause_return query_partition_clause() throws RecognitionException {
        OracleParser.query_partition_clause_return retval = new OracleParser.query_partition_clause_return();
        retval.start = input.LT(1);
        int query_partition_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN156=null;
        Token RIGHT_PAREN158=null;
        Token COMMA161=null;
        OracleParser_Keys.partition_key_return partition_key154 = null;

        OracleParser_Keys.by_key_return by_key155 = null;

        OracleParser.subquery_return subquery157 = null;

        OracleParser.expression_list_return expression_list159 = null;

        OracleParser.expression_return expression160 = null;

        OracleParser.expression_return expression162 = null;


        Object LEFT_PAREN156_tree=null;
        Object RIGHT_PAREN158_tree=null;
        Object COMMA161_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
        RewriteRuleSubtreeStream stream_partition_key=new RewriteRuleSubtreeStream(adaptor,"rule partition_key");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 813) ) { return retval; }
            // OracleParser.g:348:5: ( partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* ) -> ^( partition_key ( expression_list )? ( EXPR expression )* ) )
            // OracleParser.g:348:10: partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )
            {
            pushFollow(FOLLOW_partition_key_in_query_partition_clause2448);
            partition_key154=partition_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_partition_key.add(partition_key154.getTree());
            pushFollow(FOLLOW_by_key_in_query_partition_clause2450);
            by_key155=by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_by_key.add(by_key155.getTree());
            // OracleParser.g:349:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )
            int alt58=3;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    // OracleParser.g:349:10: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
                    {
                    LEFT_PAREN156=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_query_partition_clause2473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN156);

                    pushFollow(FOLLOW_subquery_in_query_partition_clause2475);
                    subquery157=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery157.getTree());
                    RIGHT_PAREN158=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_query_partition_clause2477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN158);


                    }
                    break;
                case 2 :
                    // OracleParser.g:350:10: ( LEFT_PAREN )=> expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_query_partition_clause2493);
                    expression_list159=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_list.add(expression_list159.getTree());

                    }
                    break;
                case 3 :
                    // OracleParser.g:351:10: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_query_partition_clause2504);
                    expression160=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression160.getTree());
                    // OracleParser.g:351:21: ( COMMA expression )*
                    loop57:
                    do {
                        int alt57=2;
                        int LA57_0 = input.LA(1);

                        if ( (LA57_0==COMMA) ) {
                            int LA57_2 = input.LA(2);

                            if ( (synpred85_OracleParser()) ) {
                                alt57=1;
                            }


                        }


                        switch (alt57) {
                    	case 1 :
                    	    // OracleParser.g:351:22: COMMA expression
                    	    {
                    	    COMMA161=(Token)match(input,COMMA,FOLLOW_COMMA_in_query_partition_clause2507); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA161);

                    	    pushFollow(FOLLOW_expression_in_query_partition_clause2509);
                    	    expression162=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression162.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop57;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: partition_key, expression_list, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 353:9: -> ^( partition_key ( expression_list )? ( EXPR expression )* )
            {
                // OracleParser.g:353:12: ^( partition_key ( expression_list )? ( EXPR expression )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_partition_key.nextNode(), root_1);

                // OracleParser.g:353:28: ( expression_list )?
                if ( stream_expression_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression_list.nextTree());

                }
                stream_expression_list.reset();
                // OracleParser.g:353:45: ( EXPR expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, (Object)adaptor.create(EXPR, "EXPR"));
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 813, query_partition_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_partition_clause"

    public static class flashback_query_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "flashback_query_clause"
    // OracleParser.g:356:1: flashback_query_clause : ( versions_key between_key ( scn_key | timestamp_key ) expression -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) ) | as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) ) );
    public final OracleParser.flashback_query_clause_return flashback_query_clause() throws RecognitionException {
        OracleParser.flashback_query_clause_return retval = new OracleParser.flashback_query_clause_return();
        retval.start = input.LT(1);
        int flashback_query_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.versions_key_return versions_key163 = null;

        OracleParser_Keys.between_key_return between_key164 = null;

        OracleParser_Keys.scn_key_return scn_key165 = null;

        OracleParser_Keys.timestamp_key_return timestamp_key166 = null;

        OracleParser.expression_return expression167 = null;

        OracleParser_Keys.as_key_return as_key168 = null;

        OracleParser_Keys.of_key_return of_key169 = null;

        OracleParser_Keys.scn_key_return scn_key170 = null;

        OracleParser_Keys.timestamp_key_return timestamp_key171 = null;

        OracleParser_Keys.snapshot_key_return snapshot_key172 = null;

        OracleParser.expression_return expression173 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_snapshot_key=new RewriteRuleSubtreeStream(adaptor,"rule snapshot_key");
        RewriteRuleSubtreeStream stream_scn_key=new RewriteRuleSubtreeStream(adaptor,"rule scn_key");
        RewriteRuleSubtreeStream stream_versions_key=new RewriteRuleSubtreeStream(adaptor,"rule versions_key");
        RewriteRuleSubtreeStream stream_between_key=new RewriteRuleSubtreeStream(adaptor,"rule between_key");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_timestamp_key=new RewriteRuleSubtreeStream(adaptor,"rule timestamp_key");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 814) ) { return retval; }
            // OracleParser.g:357:5: ( versions_key between_key ( scn_key | timestamp_key ) expression -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) ) | as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) ) )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("versions")))) {
                alt61=1;
            }
            else if ( (LA61_0==SQL92_RESERVED_AS) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // OracleParser.g:357:10: versions_key between_key ( scn_key | timestamp_key ) expression
                    {
                    pushFollow(FOLLOW_versions_key_in_flashback_query_clause2561);
                    versions_key163=versions_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_versions_key.add(versions_key163.getTree());
                    pushFollow(FOLLOW_between_key_in_flashback_query_clause2563);
                    between_key164=between_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_between_key.add(between_key164.getTree());
                    // OracleParser.g:357:35: ( scn_key | timestamp_key )
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==REGULAR_ID) ) {
                        int LA59_1 = input.LA(2);

                        if ( ((synpred86_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("scn")))) ) {
                            alt59=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("timestamp"))) ) {
                            alt59=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 59, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 59, 0, input);

                        throw nvae;
                    }
                    switch (alt59) {
                        case 1 :
                            // OracleParser.g:357:36: scn_key
                            {
                            pushFollow(FOLLOW_scn_key_in_flashback_query_clause2566);
                            scn_key165=scn_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_scn_key.add(scn_key165.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:357:44: timestamp_key
                            {
                            pushFollow(FOLLOW_timestamp_key_in_flashback_query_clause2568);
                            timestamp_key166=timestamp_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timestamp_key.add(timestamp_key166.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_flashback_query_clause2571);
                    expression167=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression167.getTree());


                    // AST REWRITE
                    // elements: expression, timestamp_key, versions_key, scn_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 357:70: -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) )
                    {
                        // OracleParser.g:357:73: ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_versions_key.nextNode(), root_1);

                        // OracleParser.g:357:88: ( scn_key )?
                        if ( stream_scn_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_scn_key.nextTree());

                        }
                        stream_scn_key.reset();
                        // OracleParser.g:357:97: ( timestamp_key )?
                        if ( stream_timestamp_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_timestamp_key.nextTree());

                        }
                        stream_timestamp_key.reset();
                        // OracleParser.g:357:112: ^( EXPR expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:358:10: as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression
                    {
                    pushFollow(FOLLOW_as_key_in_flashback_query_clause2601);
                    as_key168=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key168.getTree());
                    pushFollow(FOLLOW_of_key_in_flashback_query_clause2603);
                    of_key169=of_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_of_key.add(of_key169.getTree());
                    // OracleParser.g:358:24: ( scn_key | timestamp_key | snapshot_key )
                    int alt60=3;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==REGULAR_ID) ) {
                        int LA60_1 = input.LA(2);

                        if ( ((synpred88_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("scn")))) ) {
                            alt60=1;
                        }
                        else if ( ((synpred89_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("timestamp")))) ) {
                            alt60=2;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("snapshot"))) ) {
                            alt60=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 60, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 60, 0, input);

                        throw nvae;
                    }
                    switch (alt60) {
                        case 1 :
                            // OracleParser.g:358:25: scn_key
                            {
                            pushFollow(FOLLOW_scn_key_in_flashback_query_clause2606);
                            scn_key170=scn_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_scn_key.add(scn_key170.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:358:33: timestamp_key
                            {
                            pushFollow(FOLLOW_timestamp_key_in_flashback_query_clause2608);
                            timestamp_key171=timestamp_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timestamp_key.add(timestamp_key171.getTree());

                            }
                            break;
                        case 3 :
                            // OracleParser.g:358:47: snapshot_key
                            {
                            pushFollow(FOLLOW_snapshot_key_in_flashback_query_clause2610);
                            snapshot_key172=snapshot_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_snapshot_key.add(snapshot_key172.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_flashback_query_clause2613);
                    expression173=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression173.getTree());


                    // AST REWRITE
                    // elements: timestamp_key, scn_key, as_key, expression, snapshot_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 358:72: -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) )
                    {
                        // OracleParser.g:358:75: ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_as_key.nextNode(), root_1);

                        // OracleParser.g:358:84: ( scn_key )?
                        if ( stream_scn_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_scn_key.nextTree());

                        }
                        stream_scn_key.reset();
                        // OracleParser.g:358:93: ( timestamp_key )?
                        if ( stream_timestamp_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_timestamp_key.nextTree());

                        }
                        stream_timestamp_key.reset();
                        // OracleParser.g:358:108: ( snapshot_key )?
                        if ( stream_snapshot_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_snapshot_key.nextTree());

                        }
                        stream_snapshot_key.reset();
                        // OracleParser.g:358:122: ^( EXPR expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 814, flashback_query_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "flashback_query_clause"

    public static class pivot_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pivot_clause"
    // OracleParser.g:361:1: pivot_clause : pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN -> ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) ;
    public final OracleParser.pivot_clause_return pivot_clause() throws RecognitionException {
        OracleParser.pivot_clause_return retval = new OracleParser.pivot_clause_return();
        retval.start = input.LT(1);
        int pivot_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN176=null;
        Token COMMA178=null;
        Token RIGHT_PAREN182=null;
        OracleParser_Keys.pivot_key_return pivot_key174 = null;

        OracleParser_Keys.xml_key_return xml_key175 = null;

        OracleParser.pivot_element_return pivot_element177 = null;

        OracleParser.pivot_element_return pivot_element179 = null;

        OracleParser.pivot_for_clause_return pivot_for_clause180 = null;

        OracleParser.pivot_in_clause_return pivot_in_clause181 = null;


        Object LEFT_PAREN176_tree=null;
        Object COMMA178_tree=null;
        Object RIGHT_PAREN182_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_pivot_in_clause=new RewriteRuleSubtreeStream(adaptor,"rule pivot_in_clause");
        RewriteRuleSubtreeStream stream_pivot_element=new RewriteRuleSubtreeStream(adaptor,"rule pivot_element");
        RewriteRuleSubtreeStream stream_pivot_key=new RewriteRuleSubtreeStream(adaptor,"rule pivot_key");
        RewriteRuleSubtreeStream stream_pivot_for_clause=new RewriteRuleSubtreeStream(adaptor,"rule pivot_for_clause");
        RewriteRuleSubtreeStream stream_xml_key=new RewriteRuleSubtreeStream(adaptor,"rule xml_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 815) ) { return retval; }
            // OracleParser.g:362:5: ( pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN -> ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) )
            // OracleParser.g:362:10: pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN
            {
            pushFollow(FOLLOW_pivot_key_in_pivot_clause2654);
            pivot_key174=pivot_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_key.add(pivot_key174.getTree());
            // OracleParser.g:362:20: ( xml_key )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("xml")))) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // OracleParser.g:0:0: xml_key
                    {
                    pushFollow(FOLLOW_xml_key_in_pivot_clause2656);
                    xml_key175=xml_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_xml_key.add(xml_key175.getTree());

                    }
                    break;

            }

            LEFT_PAREN176=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pivot_clause2667); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN176);

            pushFollow(FOLLOW_pivot_element_in_pivot_clause2681);
            pivot_element177=pivot_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_element.add(pivot_element177.getTree());
            // OracleParser.g:364:27: ( COMMA pivot_element )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // OracleParser.g:364:28: COMMA pivot_element
            	    {
            	    COMMA178=(Token)match(input,COMMA,FOLLOW_COMMA_in_pivot_clause2684); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA178);

            	    pushFollow(FOLLOW_pivot_element_in_pivot_clause2686);
            	    pivot_element179=pivot_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pivot_element.add(pivot_element179.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            pushFollow(FOLLOW_pivot_for_clause_in_pivot_clause2702);
            pivot_for_clause180=pivot_for_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_for_clause.add(pivot_for_clause180.getTree());
            pushFollow(FOLLOW_pivot_in_clause_in_pivot_clause2716);
            pivot_in_clause181=pivot_in_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_in_clause.add(pivot_in_clause181.getTree());
            RIGHT_PAREN182=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pivot_clause2728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN182);



            // AST REWRITE
            // elements: pivot_for_clause, pivot_element, pivot_key, xml_key, pivot_in_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:9: -> ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
            {
                // OracleParser.g:368:12: ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_pivot_key.nextNode(), root_1);

                // OracleParser.g:368:24: ( xml_key )?
                if ( stream_xml_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_xml_key.nextTree());

                }
                stream_xml_key.reset();
                if ( !(stream_pivot_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pivot_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_pivot_element.nextTree());

                }
                stream_pivot_element.reset();
                adaptor.addChild(root_1, stream_pivot_for_clause.nextTree());
                adaptor.addChild(root_1, stream_pivot_in_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 815, pivot_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pivot_clause"

    public static class pivot_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pivot_element"
    // OracleParser.g:371:1: pivot_element : aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )? -> ^( PIVOT_ELEMENT ( column_alias )? ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) ) ;
    public final OracleParser.pivot_element_return pivot_element() throws RecognitionException {
        OracleParser.pivot_element_return retval = new OracleParser.pivot_element_return();
        retval.start = input.LT(1);
        int pivot_element_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN184=null;
        Token RIGHT_PAREN186=null;
        OracleParser_Commons.aggregate_function_name_return aggregate_function_name183 = null;

        OracleParser.expression_return expression185 = null;

        OracleParser_Commons.column_alias_return column_alias187 = null;


        Object LEFT_PAREN184_tree=null;
        Object RIGHT_PAREN186_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_column_alias=new RewriteRuleSubtreeStream(adaptor,"rule column_alias");
        RewriteRuleSubtreeStream stream_aggregate_function_name=new RewriteRuleSubtreeStream(adaptor,"rule aggregate_function_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 816) ) { return retval; }
            // OracleParser.g:372:5: ( aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )? -> ^( PIVOT_ELEMENT ( column_alias )? ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) ) )
            // OracleParser.g:372:10: aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )?
            {
            pushFollow(FOLLOW_aggregate_function_name_in_pivot_element2772);
            aggregate_function_name183=aggregate_function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_aggregate_function_name.add(aggregate_function_name183.getTree());
            LEFT_PAREN184=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pivot_element2774); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN184);

            pushFollow(FOLLOW_expression_in_pivot_element2776);
            expression185=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression185.getTree());
            RIGHT_PAREN186=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pivot_element2778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN186);

            // OracleParser.g:372:68: ( column_alias )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==NATIONAL_CHAR_STRING_LIT||LA64_0==CHAR_STRING||LA64_0==CHAR_STRING_PERL||LA64_0==DELIMITED_ID||LA64_0==INTRODUCER||LA64_0==SQL92_RESERVED_AS||LA64_0==REGULAR_ID) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // OracleParser.g:0:0: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_pivot_element2780);
                    column_alias187=column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_alias.add(column_alias187.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: column_alias, expression, aggregate_function_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:9: -> ^( PIVOT_ELEMENT ( column_alias )? ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) )
            {
                // OracleParser.g:373:12: ^( PIVOT_ELEMENT ( column_alias )? ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PIVOT_ELEMENT, "PIVOT_ELEMENT"), root_1);

                // OracleParser.g:373:28: ( column_alias )?
                if ( stream_column_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_alias.nextTree());

                }
                stream_column_alias.reset();
                // OracleParser.g:373:42: ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                // OracleParser.g:373:49: ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(ROUTINE_CALL, "ROUTINE_CALL"), root_3);

                adaptor.addChild(root_3, stream_aggregate_function_name.nextTree());
                // OracleParser.g:373:88: ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) )
                {
                Object root_4 = (Object)adaptor.nil();
                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARGUMENTS, "ARGUMENTS"), root_4);

                // OracleParser.g:373:100: ^( ARGUMENT ^( EXPR expression ) )
                {
                Object root_5 = (Object)adaptor.nil();
                root_5 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARGUMENT, "ARGUMENT"), root_5);

                // OracleParser.g:373:111: ^( EXPR expression )
                {
                Object root_6 = (Object)adaptor.nil();
                root_6 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_6);

                adaptor.addChild(root_6, stream_expression.nextTree());

                adaptor.addChild(root_5, root_6);
                }

                adaptor.addChild(root_4, root_5);
                }

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 816, pivot_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pivot_element"

    public static class pivot_for_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pivot_for_clause"
    // OracleParser.g:376:1: pivot_for_clause : for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) -> ^( for_key ( column_name )+ ) ;
    public final OracleParser.pivot_for_clause_return pivot_for_clause() throws RecognitionException {
        OracleParser.pivot_for_clause_return retval = new OracleParser.pivot_for_clause_return();
        retval.start = input.LT(1);
        int pivot_for_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN190=null;
        Token COMMA192=null;
        Token RIGHT_PAREN194=null;
        OracleParser_Keys.for_key_return for_key188 = null;

        OracleParser_Commons.column_name_return column_name189 = null;

        OracleParser_Commons.column_name_return column_name191 = null;

        OracleParser_Commons.column_name_return column_name193 = null;


        Object LEFT_PAREN190_tree=null;
        Object COMMA192_tree=null;
        Object RIGHT_PAREN194_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 817) ) { return retval; }
            // OracleParser.g:377:5: ( for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) -> ^( for_key ( column_name )+ ) )
            // OracleParser.g:377:10: for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
            pushFollow(FOLLOW_for_key_in_pivot_for_clause2842);
            for_key188=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key188.getTree());
            // OracleParser.g:378:5: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==DELIMITED_ID||LA66_0==INTRODUCER||LA66_0==REGULAR_ID) ) {
                alt66=1;
            }
            else if ( (LA66_0==LEFT_PAREN) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // OracleParser.g:378:10: column_name
                    {
                    pushFollow(FOLLOW_column_name_in_pivot_for_clause2854);
                    column_name189=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name189.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:379:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN190=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pivot_for_clause2865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN190);

                    pushFollow(FOLLOW_column_name_in_pivot_for_clause2867);
                    column_name191=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name191.getTree());
                    // OracleParser.g:379:33: ( COMMA column_name )*
                    loop65:
                    do {
                        int alt65=2;
                        int LA65_0 = input.LA(1);

                        if ( (LA65_0==COMMA) ) {
                            alt65=1;
                        }


                        switch (alt65) {
                    	case 1 :
                    	    // OracleParser.g:379:34: COMMA column_name
                    	    {
                    	    COMMA192=(Token)match(input,COMMA,FOLLOW_COMMA_in_pivot_for_clause2870); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA192);

                    	    pushFollow(FOLLOW_column_name_in_pivot_for_clause2872);
                    	    column_name193=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name193.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop65;
                        }
                    } while (true);

                    RIGHT_PAREN194=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pivot_for_clause2876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN194);


                    }
                    break;

            }



            // AST REWRITE
            // elements: for_key, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:9: -> ^( for_key ( column_name )+ )
            {
                // OracleParser.g:381:12: ^( for_key ( column_name )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_for_key.nextNode(), root_1);

                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 817, pivot_for_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pivot_for_clause"

    public static class pivot_in_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pivot_in_clause"
    // OracleParser.g:384:1: pivot_in_clause : in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN -> {mode == 1}? ^( in_key subquery ) -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) ) -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ;
    public final OracleParser.pivot_in_clause_return pivot_in_clause() throws RecognitionException {
        OracleParser.pivot_in_clause_return retval = new OracleParser.pivot_in_clause_return();
        retval.start = input.LT(1);
        int pivot_in_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN196=null;
        Token COMMA199=null;
        Token COMMA202=null;
        Token RIGHT_PAREN204=null;
        OracleParser_Keys.in_key_return in_key195 = null;

        OracleParser.subquery_return subquery197 = null;

        OracleParser_Keys.any_key_return any_key198 = null;

        OracleParser_Keys.any_key_return any_key200 = null;

        OracleParser.pivot_in_clause_element_return pivot_in_clause_element201 = null;

        OracleParser.pivot_in_clause_element_return pivot_in_clause_element203 = null;


        Object LEFT_PAREN196_tree=null;
        Object COMMA199_tree=null;
        Object COMMA202_tree=null;
        Object RIGHT_PAREN204_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_any_key=new RewriteRuleSubtreeStream(adaptor,"rule any_key");
        RewriteRuleSubtreeStream stream_pivot_in_clause_element=new RewriteRuleSubtreeStream(adaptor,"rule pivot_in_clause_element");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
            int mode = 0;    
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 818) ) { return retval; }
            // OracleParser.g:386:5: ( in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN -> {mode == 1}? ^( in_key subquery ) -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) ) -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
            // OracleParser.g:386:10: in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN
            {
            pushFollow(FOLLOW_in_key_in_pivot_in_clause2927);
            in_key195=in_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_in_key.add(in_key195.getTree());
            LEFT_PAREN196=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pivot_in_clause2937); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN196);

            // OracleParser.g:388:13: ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* )
            int alt69=3;
            alt69 = dfa69.predict(input);
            switch (alt69) {
                case 1 :
                    // OracleParser.g:388:18: ( select_key )=> subquery
                    {
                    pushFollow(FOLLOW_subquery_in_pivot_in_clause2961);
                    subquery197=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery197.getTree());
                    if ( state.backtracking==0 ) {
                      mode = 1;
                    }

                    }
                    break;
                case 2 :
                    // OracleParser.g:389:18: ( any_key )=> any_key ( COMMA any_key )*
                    {
                    pushFollow(FOLLOW_any_key_in_pivot_in_clause2987);
                    any_key198=any_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_any_key.add(any_key198.getTree());
                    // OracleParser.g:389:38: ( COMMA any_key )*
                    loop67:
                    do {
                        int alt67=2;
                        int LA67_0 = input.LA(1);

                        if ( (LA67_0==COMMA) ) {
                            alt67=1;
                        }


                        switch (alt67) {
                    	case 1 :
                    	    // OracleParser.g:389:39: COMMA any_key
                    	    {
                    	    COMMA199=(Token)match(input,COMMA,FOLLOW_COMMA_in_pivot_in_clause2990); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA199);

                    	    pushFollow(FOLLOW_any_key_in_pivot_in_clause2992);
                    	    any_key200=any_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_any_key.add(any_key200.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      mode = 1;
                    }

                    }
                    break;
                case 3 :
                    // OracleParser.g:390:18: pivot_in_clause_element ( COMMA pivot_in_clause_element )*
                    {
                    pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause3015);
                    pivot_in_clause_element201=pivot_in_clause_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pivot_in_clause_element.add(pivot_in_clause_element201.getTree());
                    // OracleParser.g:390:42: ( COMMA pivot_in_clause_element )*
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==COMMA) ) {
                            alt68=1;
                        }


                        switch (alt68) {
                    	case 1 :
                    	    // OracleParser.g:390:43: COMMA pivot_in_clause_element
                    	    {
                    	    COMMA202=(Token)match(input,COMMA,FOLLOW_COMMA_in_pivot_in_clause3018); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA202);

                    	    pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause3020);
                    	    pivot_in_clause_element203=pivot_in_clause_element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pivot_in_clause_element.add(pivot_in_clause_element203.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_PAREN204=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pivot_in_clause3046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN204);



            // AST REWRITE
            // elements: subquery, in_key, pivot_in_clause_element, in_key, any_key, in_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 393:9: -> {mode == 1}? ^( in_key subquery )
            if (mode == 1) {
                // OracleParser.g:393:24: ^( in_key subquery )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_subquery.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 394:9: -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) )
            if (mode == 2) {
                // OracleParser.g:394:24: ^( in_key ^( ANY_MODE ( any_key )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_1);

                // OracleParser.g:394:33: ^( ANY_MODE ( any_key )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANY_MODE, "ANY_MODE"), root_2);

                if ( !(stream_any_key.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_any_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_any_key.nextTree());

                }
                stream_any_key.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 395:9: -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
            {
                // OracleParser.g:395:12: ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_1);

                // OracleParser.g:395:21: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ELEMENTS_MODE, "ELEMENTS_MODE"), root_2);

                if ( !(stream_pivot_in_clause_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pivot_in_clause_element.hasNext() ) {
                    adaptor.addChild(root_2, stream_pivot_in_clause_element.nextTree());

                }
                stream_pivot_in_clause_element.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 818, pivot_in_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pivot_in_clause"

    public static class pivot_in_clause_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pivot_in_clause_element"
    // OracleParser.g:398:1: pivot_in_clause_element : pivot_in_clause_elements ( column_alias )? -> ^( PIVOT_IN_ELEMENT ( column_alias )? pivot_in_clause_elements ) ;
    public final OracleParser.pivot_in_clause_element_return pivot_in_clause_element() throws RecognitionException {
        OracleParser.pivot_in_clause_element_return retval = new OracleParser.pivot_in_clause_element_return();
        retval.start = input.LT(1);
        int pivot_in_clause_element_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.pivot_in_clause_elements_return pivot_in_clause_elements205 = null;

        OracleParser_Commons.column_alias_return column_alias206 = null;


        RewriteRuleSubtreeStream stream_column_alias=new RewriteRuleSubtreeStream(adaptor,"rule column_alias");
        RewriteRuleSubtreeStream stream_pivot_in_clause_elements=new RewriteRuleSubtreeStream(adaptor,"rule pivot_in_clause_elements");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 819) ) { return retval; }
            // OracleParser.g:399:5: ( pivot_in_clause_elements ( column_alias )? -> ^( PIVOT_IN_ELEMENT ( column_alias )? pivot_in_clause_elements ) )
            // OracleParser.g:399:10: pivot_in_clause_elements ( column_alias )?
            {
            pushFollow(FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3126);
            pivot_in_clause_elements205=pivot_in_clause_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_in_clause_elements.add(pivot_in_clause_elements205.getTree());
            // OracleParser.g:399:35: ( column_alias )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==NATIONAL_CHAR_STRING_LIT||LA70_0==CHAR_STRING||LA70_0==CHAR_STRING_PERL||LA70_0==DELIMITED_ID||LA70_0==INTRODUCER||LA70_0==SQL92_RESERVED_AS||LA70_0==REGULAR_ID) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // OracleParser.g:0:0: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_pivot_in_clause_element3128);
                    column_alias206=column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_alias.add(column_alias206.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: column_alias, pivot_in_clause_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:9: -> ^( PIVOT_IN_ELEMENT ( column_alias )? pivot_in_clause_elements )
            {
                // OracleParser.g:400:12: ^( PIVOT_IN_ELEMENT ( column_alias )? pivot_in_clause_elements )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PIVOT_IN_ELEMENT, "PIVOT_IN_ELEMENT"), root_1);

                // OracleParser.g:400:31: ( column_alias )?
                if ( stream_column_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_alias.nextTree());

                }
                stream_column_alias.reset();
                adaptor.addChild(root_1, stream_pivot_in_clause_elements.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 819, pivot_in_clause_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pivot_in_clause_element"

    public static class pivot_in_clause_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pivot_in_clause_elements"
    // OracleParser.g:403:1: pivot_in_clause_elements : ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list );
    public final OracleParser.pivot_in_clause_elements_return pivot_in_clause_elements() throws RecognitionException {
        OracleParser.pivot_in_clause_elements_return retval = new OracleParser.pivot_in_clause_elements_return();
        retval.start = input.LT(1);
        int pivot_in_clause_elements_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.expression_return expression207 = null;

        OracleParser.expression_list_return expression_list208 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 820) ) { return retval; }
            // OracleParser.g:404:5: ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list )
            int alt71=2;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // OracleParser.g:404:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_pivot_in_clause_elements3168);
                    expression207=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression207.getTree());


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 404:21: -> ^( EXPR expression )
                    {
                        // OracleParser.g:404:24: ^( EXPR expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:405:10: ( LEFT_PAREN )=> expression_list
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_list_in_pivot_in_clause_elements3192);
                    expression_list208=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list208.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 820, pivot_in_clause_elements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pivot_in_clause_elements"

    public static class unpivot_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unpivot_clause"
    // OracleParser.g:408:1: unpivot_clause : unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause ) ;
    public final OracleParser.unpivot_clause_return unpivot_clause() throws RecognitionException {
        OracleParser.unpivot_clause_return retval = new OracleParser.unpivot_clause_return();
        retval.start = input.LT(1);
        int unpivot_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN213=null;
        Token LEFT_PAREN215=null;
        Token COMMA217=null;
        Token RIGHT_PAREN219=null;
        Token RIGHT_PAREN222=null;
        OracleParser_Keys.unpivot_key_return unpivot_key209 = null;

        OracleParser_Keys.include_key_return include_key210 = null;

        OracleParser_Keys.exclude_key_return exclude_key211 = null;

        OracleParser_Keys.nulls_key_return nulls_key212 = null;

        OracleParser_Commons.column_name_return column_name214 = null;

        OracleParser_Commons.column_name_return column_name216 = null;

        OracleParser_Commons.column_name_return column_name218 = null;

        OracleParser.pivot_for_clause_return pivot_for_clause220 = null;

        OracleParser.unpivot_in_clause_return unpivot_in_clause221 = null;


        Object LEFT_PAREN213_tree=null;
        Object LEFT_PAREN215_tree=null;
        Object COMMA217_tree=null;
        Object RIGHT_PAREN219_tree=null;
        Object RIGHT_PAREN222_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_nulls_key=new RewriteRuleSubtreeStream(adaptor,"rule nulls_key");
        RewriteRuleSubtreeStream stream_exclude_key=new RewriteRuleSubtreeStream(adaptor,"rule exclude_key");
        RewriteRuleSubtreeStream stream_include_key=new RewriteRuleSubtreeStream(adaptor,"rule include_key");
        RewriteRuleSubtreeStream stream_unpivot_key=new RewriteRuleSubtreeStream(adaptor,"rule unpivot_key");
        RewriteRuleSubtreeStream stream_pivot_for_clause=new RewriteRuleSubtreeStream(adaptor,"rule pivot_for_clause");
        RewriteRuleSubtreeStream stream_unpivot_in_clause=new RewriteRuleSubtreeStream(adaptor,"rule unpivot_in_clause");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 821) ) { return retval; }
            // OracleParser.g:409:5: ( unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause ) )
            // OracleParser.g:409:10: unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN
            {
            pushFollow(FOLLOW_unpivot_key_in_unpivot_clause3212);
            unpivot_key209=unpivot_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unpivot_key.add(unpivot_key209.getTree());
            // OracleParser.g:410:9: ( ( include_key | exclude_key ) nulls_key )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("exclude"))||(input.LT(1).getText().equalsIgnoreCase("include"))))) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // OracleParser.g:410:10: ( include_key | exclude_key ) nulls_key
                    {
                    // OracleParser.g:410:10: ( include_key | exclude_key )
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("exclude")))) {
                        int LA72_1 = input.LA(2);

                        if ( ((synpred102_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("include")))) ) {
                            alt72=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("exclude"))) ) {
                            alt72=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 72, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 72, 0, input);

                        throw nvae;
                    }
                    switch (alt72) {
                        case 1 :
                            // OracleParser.g:410:11: include_key
                            {
                            pushFollow(FOLLOW_include_key_in_unpivot_clause3225);
                            include_key210=include_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_include_key.add(include_key210.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:410:23: exclude_key
                            {
                            pushFollow(FOLLOW_exclude_key_in_unpivot_clause3227);
                            exclude_key211=exclude_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_exclude_key.add(exclude_key211.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nulls_key_in_unpivot_clause3230);
                    nulls_key212=nulls_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nulls_key.add(nulls_key212.getTree());

                    }
                    break;

            }

            LEFT_PAREN213=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unpivot_clause3242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN213);

            // OracleParser.g:412:13: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==DELIMITED_ID||LA75_0==INTRODUCER||LA75_0==REGULAR_ID) ) {
                alt75=1;
            }
            else if ( (LA75_0==LEFT_PAREN) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // OracleParser.g:412:18: column_name
                    {
                    pushFollow(FOLLOW_column_name_in_unpivot_clause3261);
                    column_name214=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name214.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:413:18: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN215=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unpivot_clause3280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN215);

                    pushFollow(FOLLOW_column_name_in_unpivot_clause3282);
                    column_name216=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name216.getTree());
                    // OracleParser.g:413:41: ( COMMA column_name )*
                    loop74:
                    do {
                        int alt74=2;
                        int LA74_0 = input.LA(1);

                        if ( (LA74_0==COMMA) ) {
                            alt74=1;
                        }


                        switch (alt74) {
                    	case 1 :
                    	    // OracleParser.g:413:42: COMMA column_name
                    	    {
                    	    COMMA217=(Token)match(input,COMMA,FOLLOW_COMMA_in_unpivot_clause3285); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA217);

                    	    pushFollow(FOLLOW_column_name_in_unpivot_clause3287);
                    	    column_name218=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name218.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop74;
                        }
                    } while (true);

                    RIGHT_PAREN219=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unpivot_clause3291); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN219);


                    }
                    break;

            }

            pushFollow(FOLLOW_pivot_for_clause_in_unpivot_clause3319);
            pivot_for_clause220=pivot_for_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_for_clause.add(pivot_for_clause220.getTree());
            pushFollow(FOLLOW_unpivot_in_clause_in_unpivot_clause3333);
            unpivot_in_clause221=unpivot_in_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unpivot_in_clause.add(unpivot_in_clause221.getTree());
            RIGHT_PAREN222=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unpivot_clause3343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN222);



            // AST REWRITE
            // elements: pivot_for_clause, exclude_key, unpivot_key, unpivot_in_clause, nulls_key, include_key, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:9: -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause )
            {
                // OracleParser.g:418:12: ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_unpivot_key.nextNode(), root_1);

                // OracleParser.g:418:26: ( include_key )?
                if ( stream_include_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_include_key.nextTree());

                }
                stream_include_key.reset();
                // OracleParser.g:418:39: ( exclude_key )?
                if ( stream_exclude_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_exclude_key.nextTree());

                }
                stream_exclude_key.reset();
                // OracleParser.g:418:52: ( nulls_key )?
                if ( stream_nulls_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_nulls_key.nextTree());

                }
                stream_nulls_key.reset();
                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_name.nextTree());

                }
                stream_column_name.reset();
                adaptor.addChild(root_1, stream_pivot_for_clause.nextTree());
                adaptor.addChild(root_1, stream_unpivot_in_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 821, unpivot_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unpivot_clause"

    public static class unpivot_in_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unpivot_in_clause"
    // OracleParser.g:421:1: unpivot_in_clause : in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ ) ;
    public final OracleParser.unpivot_in_clause_return unpivot_in_clause() throws RecognitionException {
        OracleParser.unpivot_in_clause_return retval = new OracleParser.unpivot_in_clause_return();
        retval.start = input.LT(1);
        int unpivot_in_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN224=null;
        Token COMMA226=null;
        Token RIGHT_PAREN228=null;
        OracleParser_Keys.in_key_return in_key223 = null;

        OracleParser.unpivot_in_elements_return unpivot_in_elements225 = null;

        OracleParser.unpivot_in_elements_return unpivot_in_elements227 = null;


        Object LEFT_PAREN224_tree=null;
        Object COMMA226_tree=null;
        Object RIGHT_PAREN228_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_unpivot_in_elements=new RewriteRuleSubtreeStream(adaptor,"rule unpivot_in_elements");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 822) ) { return retval; }
            // OracleParser.g:422:5: ( in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ ) )
            // OracleParser.g:422:10: in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN
            {
            pushFollow(FOLLOW_in_key_in_unpivot_in_clause3393);
            in_key223=in_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_in_key.add(in_key223.getTree());
            LEFT_PAREN224=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unpivot_in_clause3403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN224);

            pushFollow(FOLLOW_unpivot_in_elements_in_unpivot_in_clause3417);
            unpivot_in_elements225=unpivot_in_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unpivot_in_elements.add(unpivot_in_elements225.getTree());
            // OracleParser.g:424:33: ( COMMA unpivot_in_elements )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==COMMA) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // OracleParser.g:424:34: COMMA unpivot_in_elements
            	    {
            	    COMMA226=(Token)match(input,COMMA,FOLLOW_COMMA_in_unpivot_in_clause3420); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA226);

            	    pushFollow(FOLLOW_unpivot_in_elements_in_unpivot_in_clause3422);
            	    unpivot_in_elements227=unpivot_in_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_unpivot_in_elements.add(unpivot_in_elements227.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            RIGHT_PAREN228=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN228);



            // AST REWRITE
            // elements: unpivot_in_elements, in_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:9: -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ )
            {
                // OracleParser.g:426:12: ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_1);

                if ( !(stream_unpivot_in_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unpivot_in_elements.hasNext() ) {
                    // OracleParser.g:426:21: ^( UNPIVOT_IN_ELEMENT unpivot_in_elements )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNPIVOT_IN_ELEMENT, "UNPIVOT_IN_ELEMENT"), root_2);

                    adaptor.addChild(root_2, stream_unpivot_in_elements.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_unpivot_in_elements.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 822, unpivot_in_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unpivot_in_clause"

    public static class unpivot_in_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unpivot_in_elements"
    // OracleParser.g:429:1: unpivot_in_elements : ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( ( as_key )? ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )? -> ( column_name )+ ^( PIVOT_ALIAS ( constant )+ ) ;
    public final OracleParser.unpivot_in_elements_return unpivot_in_elements() throws RecognitionException {
        OracleParser.unpivot_in_elements_return retval = new OracleParser.unpivot_in_elements_return();
        retval.start = input.LT(1);
        int unpivot_in_elements_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN230=null;
        Token COMMA232=null;
        Token RIGHT_PAREN234=null;
        Token LEFT_PAREN237=null;
        Token COMMA239=null;
        Token RIGHT_PAREN241=null;
        OracleParser_Commons.column_name_return column_name229 = null;

        OracleParser_Commons.column_name_return column_name231 = null;

        OracleParser_Commons.column_name_return column_name233 = null;

        OracleParser_Keys.as_key_return as_key235 = null;

        OracleParser_Commons.constant_return constant236 = null;

        OracleParser_Commons.constant_return constant238 = null;

        OracleParser_Commons.constant_return constant240 = null;


        Object LEFT_PAREN230_tree=null;
        Object COMMA232_tree=null;
        Object RIGHT_PAREN234_tree=null;
        Object LEFT_PAREN237_tree=null;
        Object COMMA239_tree=null;
        Object RIGHT_PAREN241_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 823) ) { return retval; }
            // OracleParser.g:430:5: ( ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( ( as_key )? ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )? -> ( column_name )+ ^( PIVOT_ALIAS ( constant )+ ) )
            // OracleParser.g:430:9: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( ( as_key )? ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )?
            {
            // OracleParser.g:430:9: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==DELIMITED_ID||LA78_0==INTRODUCER||LA78_0==REGULAR_ID) ) {
                alt78=1;
            }
            else if ( (LA78_0==LEFT_PAREN) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // OracleParser.g:430:14: column_name
                    {
                    pushFollow(FOLLOW_column_name_in_unpivot_in_elements3479);
                    column_name229=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name229.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:431:14: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN230=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unpivot_in_elements3494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN230);

                    pushFollow(FOLLOW_column_name_in_unpivot_in_elements3496);
                    column_name231=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name231.getTree());
                    // OracleParser.g:431:37: ( COMMA column_name )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==COMMA) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // OracleParser.g:431:38: COMMA column_name
                    	    {
                    	    COMMA232=(Token)match(input,COMMA,FOLLOW_COMMA_in_unpivot_in_elements3499); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA232);

                    	    pushFollow(FOLLOW_column_name_in_unpivot_in_elements3501);
                    	    column_name233=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name233.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);

                    RIGHT_PAREN234=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3505); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN234);


                    }
                    break;

            }

            // OracleParser.g:433:9: ( ( as_key )? ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( ((LA82_0>=UNSIGNED_INTEGER && LA82_0<=APPROXIMATE_NUM_LIT)||LA82_0==NATIONAL_CHAR_STRING_LIT||(LA82_0>=EXACT_NUM_LIT && LA82_0<=CHAR_STRING)||LA82_0==CHAR_STRING_PERL||LA82_0==LEFT_PAREN||LA82_0==SQL92_RESERVED_AS||LA82_0==SQL92_RESERVED_DATE||LA82_0==SQL92_RESERVED_DEFAULT||LA82_0==SQL92_RESERVED_FALSE||LA82_0==SQL92_RESERVED_NULL||LA82_0==SQL92_RESERVED_TRUE||LA82_0==REGULAR_ID) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // OracleParser.g:433:14: ( as_key )? ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN )
                    {
                    // OracleParser.g:433:14: ( as_key )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==SQL92_RESERVED_AS) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // OracleParser.g:0:0: as_key
                            {
                            pushFollow(FOLLOW_as_key_in_unpivot_in_elements3530);
                            as_key235=as_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_as_key.add(as_key235.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:434:9: ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN )
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( ((LA81_0>=UNSIGNED_INTEGER && LA81_0<=APPROXIMATE_NUM_LIT)||LA81_0==NATIONAL_CHAR_STRING_LIT||(LA81_0>=EXACT_NUM_LIT && LA81_0<=CHAR_STRING)||LA81_0==CHAR_STRING_PERL||LA81_0==SQL92_RESERVED_DATE||LA81_0==SQL92_RESERVED_DEFAULT||LA81_0==SQL92_RESERVED_FALSE||LA81_0==SQL92_RESERVED_NULL||LA81_0==SQL92_RESERVED_TRUE||LA81_0==REGULAR_ID) ) {
                        alt81=1;
                    }
                    else if ( (LA81_0==LEFT_PAREN) && (synpred111_OracleParser())) {
                        alt81=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 81, 0, input);

                        throw nvae;
                    }
                    switch (alt81) {
                        case 1 :
                            // OracleParser.g:434:14: constant
                            {
                            pushFollow(FOLLOW_constant_in_unpivot_in_elements3546);
                            constant236=constant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constant.add(constant236.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:435:14: ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN
                            {
                            LEFT_PAREN237=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unpivot_in_elements3566); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN237);

                            pushFollow(FOLLOW_constant_in_unpivot_in_elements3568);
                            constant238=constant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constant.add(constant238.getTree());
                            // OracleParser.g:435:49: ( COMMA constant )*
                            loop80:
                            do {
                                int alt80=2;
                                int LA80_0 = input.LA(1);

                                if ( (LA80_0==COMMA) ) {
                                    alt80=1;
                                }


                                switch (alt80) {
                            	case 1 :
                            	    // OracleParser.g:435:50: COMMA constant
                            	    {
                            	    COMMA239=(Token)match(input,COMMA,FOLLOW_COMMA_in_unpivot_in_elements3571); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA239);

                            	    pushFollow(FOLLOW_constant_in_unpivot_in_elements3573);
                            	    constant240=constant();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_constant.add(constant240.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop80;
                                }
                            } while (true);

                            RIGHT_PAREN241=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3577); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN241);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: constant, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:9: -> ( column_name )+ ^( PIVOT_ALIAS ( constant )+ )
            {
                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_0, stream_column_name.nextTree());

                }
                stream_column_name.reset();
                // OracleParser.g:438:25: ^( PIVOT_ALIAS ( constant )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PIVOT_ALIAS, "PIVOT_ALIAS"), root_1);

                if ( !(stream_constant.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_constant.hasNext() ) {
                    adaptor.addChild(root_1, stream_constant.nextTree());

                }
                stream_constant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 823, unpivot_in_elements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unpivot_in_elements"

    public static class hierarchical_query_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hierarchical_query_clause"
    // OracleParser.g:441:1: hierarchical_query_clause : ( connect_key by_key ( nocycle_key )? condition ( start_part )? -> ^( HIERARCHICAL ( start_part )? ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) | start_part connect_key by_key ( nocycle_key )? condition -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) );
    public final OracleParser.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
        OracleParser.hierarchical_query_clause_return retval = new OracleParser.hierarchical_query_clause_return();
        retval.start = input.LT(1);
        int hierarchical_query_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.connect_key_return connect_key242 = null;

        OracleParser_Keys.by_key_return by_key243 = null;

        OracleParser_Keys.nocycle_key_return nocycle_key244 = null;

        OracleParser.condition_return condition245 = null;

        OracleParser.start_part_return start_part246 = null;

        OracleParser.start_part_return start_part247 = null;

        OracleParser_Keys.connect_key_return connect_key248 = null;

        OracleParser_Keys.by_key_return by_key249 = null;

        OracleParser_Keys.nocycle_key_return nocycle_key250 = null;

        OracleParser.condition_return condition251 = null;


        RewriteRuleSubtreeStream stream_connect_key=new RewriteRuleSubtreeStream(adaptor,"rule connect_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_start_part=new RewriteRuleSubtreeStream(adaptor,"rule start_part");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_nocycle_key=new RewriteRuleSubtreeStream(adaptor,"rule nocycle_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 824) ) { return retval; }
            // OracleParser.g:442:5: ( connect_key by_key ( nocycle_key )? condition ( start_part )? -> ^( HIERARCHICAL ( start_part )? ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) | start_part connect_key by_key ( nocycle_key )? condition -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==SQL92_RESERVED_CONNECT) ) {
                alt86=1;
            }
            else if ( (LA86_0==PLSQL_RESERVED_START) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    // OracleParser.g:442:10: connect_key by_key ( nocycle_key )? condition ( start_part )?
                    {
                    pushFollow(FOLLOW_connect_key_in_hierarchical_query_clause3638);
                    connect_key242=connect_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_connect_key.add(connect_key242.getTree());
                    pushFollow(FOLLOW_by_key_in_hierarchical_query_clause3640);
                    by_key243=by_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_by_key.add(by_key243.getTree());
                    // OracleParser.g:442:29: ( nocycle_key )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==REGULAR_ID) ) {
                        int LA83_1 = input.LA(2);

                        if ( ((synpred114_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("nocycle")))) ) {
                            alt83=1;
                        }
                    }
                    switch (alt83) {
                        case 1 :
                            // OracleParser.g:0:0: nocycle_key
                            {
                            pushFollow(FOLLOW_nocycle_key_in_hierarchical_query_clause3642);
                            nocycle_key244=nocycle_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nocycle_key.add(nocycle_key244.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_condition_in_hierarchical_query_clause3645);
                    condition245=condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition.add(condition245.getTree());
                    // OracleParser.g:442:52: ( start_part )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==PLSQL_RESERVED_START) ) {
                        int LA84_1 = input.LA(2);

                        if ( (synpred115_OracleParser()) ) {
                            alt84=1;
                        }
                    }
                    switch (alt84) {
                        case 1 :
                            // OracleParser.g:0:0: start_part
                            {
                            pushFollow(FOLLOW_start_part_in_hierarchical_query_clause3647);
                            start_part246=start_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_start_part.add(start_part246.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: start_part, connect_key, nocycle_key, condition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 443:9: -> ^( HIERARCHICAL ( start_part )? ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
                    {
                        // OracleParser.g:443:12: ^( HIERARCHICAL ( start_part )? ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(HIERARCHICAL, "HIERARCHICAL"), root_1);

                        // OracleParser.g:443:27: ( start_part )?
                        if ( stream_start_part.hasNext() ) {
                            adaptor.addChild(root_1, stream_start_part.nextTree());

                        }
                        stream_start_part.reset();
                        // OracleParser.g:443:39: ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(stream_connect_key.nextNode(), root_2);

                        // OracleParser.g:443:53: ( nocycle_key )?
                        if ( stream_nocycle_key.hasNext() ) {
                            adaptor.addChild(root_2, stream_nocycle_key.nextTree());

                        }
                        stream_nocycle_key.reset();
                        // OracleParser.g:443:66: ^( LOGIC_EXPR condition )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);

                        adaptor.addChild(root_3, stream_condition.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:444:10: start_part connect_key by_key ( nocycle_key )? condition
                    {
                    pushFollow(FOLLOW_start_part_in_hierarchical_query_clause3689);
                    start_part247=start_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_start_part.add(start_part247.getTree());
                    pushFollow(FOLLOW_connect_key_in_hierarchical_query_clause3691);
                    connect_key248=connect_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_connect_key.add(connect_key248.getTree());
                    pushFollow(FOLLOW_by_key_in_hierarchical_query_clause3693);
                    by_key249=by_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_by_key.add(by_key249.getTree());
                    // OracleParser.g:444:40: ( nocycle_key )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==REGULAR_ID) ) {
                        int LA85_1 = input.LA(2);

                        if ( ((synpred117_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("nocycle")))) ) {
                            alt85=1;
                        }
                    }
                    switch (alt85) {
                        case 1 :
                            // OracleParser.g:0:0: nocycle_key
                            {
                            pushFollow(FOLLOW_nocycle_key_in_hierarchical_query_clause3695);
                            nocycle_key250=nocycle_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nocycle_key.add(nocycle_key250.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_condition_in_hierarchical_query_clause3698);
                    condition251=condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition.add(condition251.getTree());


                    // AST REWRITE
                    // elements: nocycle_key, connect_key, start_part, condition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 445:9: -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
                    {
                        // OracleParser.g:445:12: ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(HIERARCHICAL, "HIERARCHICAL"), root_1);

                        adaptor.addChild(root_1, stream_start_part.nextTree());
                        // OracleParser.g:445:38: ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(stream_connect_key.nextNode(), root_2);

                        // OracleParser.g:445:52: ( nocycle_key )?
                        if ( stream_nocycle_key.hasNext() ) {
                            adaptor.addChild(root_2, stream_nocycle_key.nextTree());

                        }
                        stream_nocycle_key.reset();
                        // OracleParser.g:445:65: ^( LOGIC_EXPR condition )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);

                        adaptor.addChild(root_3, stream_condition.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 824, hierarchical_query_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hierarchical_query_clause"

    public static class start_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "start_part"
    // OracleParser.g:448:1: start_part : start_key with_key condition -> ^( start_key ^( LOGIC_EXPR condition ) ) ;
    public final OracleParser.start_part_return start_part() throws RecognitionException {
        OracleParser.start_part_return retval = new OracleParser.start_part_return();
        retval.start = input.LT(1);
        int start_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.start_key_return start_key252 = null;

        OracleParser_Keys.with_key_return with_key253 = null;

        OracleParser.condition_return condition254 = null;


        RewriteRuleSubtreeStream stream_start_key=new RewriteRuleSubtreeStream(adaptor,"rule start_key");
        RewriteRuleSubtreeStream stream_with_key=new RewriteRuleSubtreeStream(adaptor,"rule with_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 825) ) { return retval; }
            // OracleParser.g:449:5: ( start_key with_key condition -> ^( start_key ^( LOGIC_EXPR condition ) ) )
            // OracleParser.g:449:10: start_key with_key condition
            {
            pushFollow(FOLLOW_start_key_in_start_part3747);
            start_key252=start_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_start_key.add(start_key252.getTree());
            pushFollow(FOLLOW_with_key_in_start_part3749);
            with_key253=with_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_with_key.add(with_key253.getTree());
            pushFollow(FOLLOW_condition_in_start_part3751);
            condition254=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition254.getTree());


            // AST REWRITE
            // elements: condition, start_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:9: -> ^( start_key ^( LOGIC_EXPR condition ) )
            {
                // OracleParser.g:450:12: ^( start_key ^( LOGIC_EXPR condition ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_start_key.nextNode(), root_1);

                // OracleParser.g:450:24: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 825, start_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "start_part"

    public static class group_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_by_clause"
    // OracleParser.g:453:1: group_by_clause : ( ( group_key )=> group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ( having_clause )? -> ^( GROUP_BY_CLAUSE ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ( having_clause )? ) | ( having_key )=> having_clause ( group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )? -> ^( GROUP_BY_CLAUSE having_clause ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ) );
    public final OracleParser.group_by_clause_return group_by_clause() throws RecognitionException {
        OracleParser.group_by_clause_return retval = new OracleParser.group_by_clause_return();
        retval.start = input.LT(1);
        int group_by_clause_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA258=null;
        Token COMMA265=null;
        OracleParser_Keys.group_key_return group_key255 = null;

        OracleParser_Keys.by_key_return by_key256 = null;

        OracleParser.group_by_elements_return group_by_elements257 = null;

        OracleParser.group_by_elements_return group_by_elements259 = null;

        OracleParser.having_clause_return having_clause260 = null;

        OracleParser.having_clause_return having_clause261 = null;

        OracleParser_Keys.group_key_return group_key262 = null;

        OracleParser_Keys.by_key_return by_key263 = null;

        OracleParser.group_by_elements_return group_by_elements264 = null;

        OracleParser.group_by_elements_return group_by_elements266 = null;


        Object COMMA258_tree=null;
        Object COMMA265_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
        RewriteRuleSubtreeStream stream_group_key=new RewriteRuleSubtreeStream(adaptor,"rule group_key");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_group_by_elements=new RewriteRuleSubtreeStream(adaptor,"rule group_by_elements");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 826) ) { return retval; }
            // OracleParser.g:454:5: ( ( group_key )=> group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ( having_clause )? -> ^( GROUP_BY_CLAUSE ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ( having_clause )? ) | ( having_key )=> having_clause ( group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )? -> ^( GROUP_BY_CLAUSE having_clause ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ) )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==SQL92_RESERVED_GROUP) && (synpred118_OracleParser())) {
                alt91=1;
            }
            else if ( (LA91_0==SQL92_RESERVED_HAVING) && (synpred121_OracleParser())) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    // OracleParser.g:454:10: ( group_key )=> group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ( having_clause )?
                    {
                    pushFollow(FOLLOW_group_key_in_group_by_clause3797);
                    group_key255=group_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_group_key.add(group_key255.getTree());
                    pushFollow(FOLLOW_by_key_in_group_by_clause3799);
                    by_key256=by_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_by_key.add(by_key256.getTree());
                    pushFollow(FOLLOW_group_by_elements_in_group_by_clause3801);
                    group_by_elements257=group_by_elements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_group_by_elements.add(group_by_elements257.getTree());
                    // OracleParser.g:454:60: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
                    loop87:
                    do {
                        int alt87=2;
                        int LA87_0 = input.LA(1);

                        if ( (LA87_0==COMMA) ) {
                            int LA87_2 = input.LA(2);

                            if ( (synpred119_OracleParser()) ) {
                                alt87=1;
                            }


                        }


                        switch (alt87) {
                    	case 1 :
                    	    // OracleParser.g:454:61: ( COMMA group_by_elements )=> COMMA group_by_elements
                    	    {
                    	    COMMA258=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_by_clause3811); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA258);

                    	    pushFollow(FOLLOW_group_by_elements_in_group_by_clause3813);
                    	    group_by_elements259=group_by_elements();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_group_by_elements.add(group_by_elements259.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop87;
                        }
                    } while (true);

                    // OracleParser.g:454:115: ( having_clause )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==SQL92_RESERVED_HAVING) ) {
                        int LA88_1 = input.LA(2);

                        if ( (synpred120_OracleParser()) ) {
                            alt88=1;
                        }
                    }
                    switch (alt88) {
                        case 1 :
                            // OracleParser.g:0:0: having_clause
                            {
                            pushFollow(FOLLOW_having_clause_in_group_by_clause3817);
                            having_clause260=having_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_having_clause.add(having_clause260.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: having_clause, group_by_elements
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 455:10: -> ^( GROUP_BY_CLAUSE ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ( having_clause )? )
                    {
                        // OracleParser.g:455:13: ^( GROUP_BY_CLAUSE ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ( having_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GROUP_BY_CLAUSE, "GROUP_BY_CLAUSE"), root_1);

                        if ( !(stream_group_by_elements.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_group_by_elements.hasNext() ) {
                            // OracleParser.g:455:31: ^( GROUP_BY_ELEMENT group_by_elements )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(GROUP_BY_ELEMENT, "GROUP_BY_ELEMENT"), root_2);

                            adaptor.addChild(root_2, stream_group_by_elements.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_group_by_elements.reset();
                        // OracleParser.g:455:70: ( having_clause )?
                        if ( stream_having_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_having_clause.nextTree());

                        }
                        stream_having_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:456:10: ( having_key )=> having_clause ( group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )?
                    {
                    pushFollow(FOLLOW_having_clause_in_group_by_clause3860);
                    having_clause261=having_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_having_clause.add(having_clause261.getTree());
                    // OracleParser.g:456:40: ( group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==SQL92_RESERVED_GROUP) ) {
                        int LA90_1 = input.LA(2);

                        if ( (synpred123_OracleParser()) ) {
                            alt90=1;
                        }
                    }
                    switch (alt90) {
                        case 1 :
                            // OracleParser.g:456:41: group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
                            {
                            pushFollow(FOLLOW_group_key_in_group_by_clause3863);
                            group_key262=group_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_group_key.add(group_key262.getTree());
                            pushFollow(FOLLOW_by_key_in_group_by_clause3865);
                            by_key263=by_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_by_key.add(by_key263.getTree());
                            pushFollow(FOLLOW_group_by_elements_in_group_by_clause3867);
                            group_by_elements264=group_by_elements();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_group_by_elements.add(group_by_elements264.getTree());
                            // OracleParser.g:456:76: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
                            loop89:
                            do {
                                int alt89=2;
                                int LA89_0 = input.LA(1);

                                if ( (LA89_0==COMMA) ) {
                                    int LA89_2 = input.LA(2);

                                    if ( (synpred122_OracleParser()) ) {
                                        alt89=1;
                                    }


                                }


                                switch (alt89) {
                            	case 1 :
                            	    // OracleParser.g:456:77: ( COMMA group_by_elements )=> COMMA group_by_elements
                            	    {
                            	    COMMA265=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_by_clause3877); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA265);

                            	    pushFollow(FOLLOW_group_by_elements_in_group_by_clause3879);
                            	    group_by_elements266=group_by_elements();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_group_by_elements.add(group_by_elements266.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop89;
                                }
                            } while (true);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: group_by_elements, having_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 457:10: -> ^( GROUP_BY_CLAUSE having_clause ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ )
                    {
                        // OracleParser.g:457:13: ^( GROUP_BY_CLAUSE having_clause ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GROUP_BY_CLAUSE, "GROUP_BY_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_having_clause.nextTree());
                        if ( !(stream_group_by_elements.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_group_by_elements.hasNext() ) {
                            // OracleParser.g:457:45: ^( GROUP_BY_ELEMENT group_by_elements )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(GROUP_BY_ELEMENT, "GROUP_BY_ELEMENT"), root_2);

                            adaptor.addChild(root_2, stream_group_by_elements.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_group_by_elements.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 826, group_by_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_by_clause"

    public static class group_by_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_by_elements"
    // OracleParser.g:460:1: group_by_elements : ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) );
    public final OracleParser.group_by_elements_return group_by_elements() throws RecognitionException {
        OracleParser.group_by_elements_return retval = new OracleParser.group_by_elements_return();
        retval.start = input.LT(1);
        int group_by_elements_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.grouping_sets_clause_return grouping_sets_clause267 = null;

        OracleParser.rollup_cube_clause_return rollup_cube_clause268 = null;

        OracleParser.expression_return expression269 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 827) ) { return retval; }
            // OracleParser.g:461:5: ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) )
            int alt92=3;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // OracleParser.g:461:10: grouping_sets_clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_grouping_sets_clause_in_group_by_elements3927);
                    grouping_sets_clause267=grouping_sets_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_clause267.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:462:10: rollup_cube_clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rollup_cube_clause_in_group_by_elements3938);
                    rollup_cube_clause268=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollup_cube_clause268.getTree());

                    }
                    break;
                case 3 :
                    // OracleParser.g:463:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_group_by_elements3950);
                    expression269=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression269.getTree());


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 463:21: -> ^( EXPR expression )
                    {
                        // OracleParser.g:463:24: ^( EXPR expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 827, group_by_elements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_by_elements"

    public static class rollup_cube_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollup_cube_clause"
    // OracleParser.g:466:1: rollup_cube_clause : ( rollup_key | cube_key ) LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN ;
    public final OracleParser.rollup_cube_clause_return rollup_cube_clause() throws RecognitionException {
        OracleParser.rollup_cube_clause_return retval = new OracleParser.rollup_cube_clause_return();
        retval.start = input.LT(1);
        int rollup_cube_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN272=null;
        Token COMMA274=null;
        Token RIGHT_PAREN276=null;
        OracleParser_Keys.rollup_key_return rollup_key270 = null;

        OracleParser_Keys.cube_key_return cube_key271 = null;

        OracleParser.grouping_sets_elements_return grouping_sets_elements273 = null;

        OracleParser.grouping_sets_elements_return grouping_sets_elements275 = null;


        Object LEFT_PAREN272_tree=null;
        Object COMMA274_tree=null;
        Object RIGHT_PAREN276_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 828) ) { return retval; }
            // OracleParser.g:467:5: ( ( rollup_key | cube_key ) LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN )
            // OracleParser.g:467:10: ( rollup_key | cube_key ) LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            // OracleParser.g:467:10: ( rollup_key | cube_key )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("cube")))) {
                int LA93_1 = input.LA(2);

                if ( ((synpred126_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("rollup")))) ) {
                    alt93=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("cube"))) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // OracleParser.g:467:11: rollup_key
                    {
                    pushFollow(FOLLOW_rollup_key_in_rollup_cube_clause3979);
                    rollup_key270=rollup_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(rollup_key270.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // OracleParser.g:467:23: cube_key
                    {
                    pushFollow(FOLLOW_cube_key_in_rollup_cube_clause3982);
                    cube_key271=cube_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(cube_key271.getTree(), root_0);

                    }
                    break;

            }

            LEFT_PAREN272=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_rollup_cube_clause3986); if (state.failed) return retval;
            pushFollow(FOLLOW_grouping_sets_elements_in_rollup_cube_clause3989);
            grouping_sets_elements273=grouping_sets_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_elements273.getTree());
            // OracleParser.g:467:69: ( COMMA grouping_sets_elements )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==COMMA) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // OracleParser.g:467:70: COMMA grouping_sets_elements
            	    {
            	    COMMA274=(Token)match(input,COMMA,FOLLOW_COMMA_in_rollup_cube_clause3992); if (state.failed) return retval;
            	    pushFollow(FOLLOW_grouping_sets_elements_in_rollup_cube_clause3995);
            	    grouping_sets_elements275=grouping_sets_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_elements275.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            RIGHT_PAREN276=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_rollup_cube_clause3999); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 828, rollup_cube_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollup_cube_clause"

    public static class grouping_sets_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_sets_clause"
    // OracleParser.g:470:1: grouping_sets_clause : grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ ) ;
    public final OracleParser.grouping_sets_clause_return grouping_sets_clause() throws RecognitionException {
        OracleParser.grouping_sets_clause_return retval = new OracleParser.grouping_sets_clause_return();
        retval.start = input.LT(1);
        int grouping_sets_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN279=null;
        Token COMMA281=null;
        Token RIGHT_PAREN283=null;
        OracleParser_Keys.grouping_key_return grouping_key277 = null;

        OracleParser_Keys.sets_key_return sets_key278 = null;

        OracleParser.grouping_sets_elements_return grouping_sets_elements280 = null;

        OracleParser.grouping_sets_elements_return grouping_sets_elements282 = null;


        Object LEFT_PAREN279_tree=null;
        Object COMMA281_tree=null;
        Object RIGHT_PAREN283_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_grouping_key=new RewriteRuleSubtreeStream(adaptor,"rule grouping_key");
        RewriteRuleSubtreeStream stream_sets_key=new RewriteRuleSubtreeStream(adaptor,"rule sets_key");
        RewriteRuleSubtreeStream stream_grouping_sets_elements=new RewriteRuleSubtreeStream(adaptor,"rule grouping_sets_elements");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 829) ) { return retval; }
            // OracleParser.g:471:5: ( grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ ) )
            // OracleParser.g:471:10: grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN
            {
            pushFollow(FOLLOW_grouping_key_in_grouping_sets_clause4021);
            grouping_key277=grouping_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_grouping_key.add(grouping_key277.getTree());
            pushFollow(FOLLOW_sets_key_in_grouping_sets_clause4023);
            sets_key278=sets_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sets_key.add(sets_key278.getTree());
            LEFT_PAREN279=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_grouping_sets_clause4034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN279);

            pushFollow(FOLLOW_grouping_sets_elements_in_grouping_sets_clause4036);
            grouping_sets_elements280=grouping_sets_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_grouping_sets_elements.add(grouping_sets_elements280.getTree());
            // OracleParser.g:472:43: ( COMMA grouping_sets_elements )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // OracleParser.g:472:44: COMMA grouping_sets_elements
            	    {
            	    COMMA281=(Token)match(input,COMMA,FOLLOW_COMMA_in_grouping_sets_clause4039); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA281);

            	    pushFollow(FOLLOW_grouping_sets_elements_in_grouping_sets_clause4041);
            	    grouping_sets_elements282=grouping_sets_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_grouping_sets_elements.add(grouping_sets_elements282.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);

            RIGHT_PAREN283=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN283);



            // AST REWRITE
            // elements: grouping_sets_elements, grouping_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:9: -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ )
            {
                // OracleParser.g:473:12: ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_grouping_key.nextNode(), root_1);

                if ( !(stream_grouping_sets_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_grouping_sets_elements.hasNext() ) {
                    // OracleParser.g:473:27: ^( GROUPIN_SET grouping_sets_elements )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(GROUPIN_SET, "GROUPIN_SET"), root_2);

                    adaptor.addChild(root_2, stream_grouping_sets_elements.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_grouping_sets_elements.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 829, grouping_sets_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_sets_clause"

    public static class grouping_sets_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_sets_elements"
    // OracleParser.g:476:1: grouping_sets_elements : ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) );
    public final OracleParser.grouping_sets_elements_return grouping_sets_elements() throws RecognitionException {
        OracleParser.grouping_sets_elements_return retval = new OracleParser.grouping_sets_elements_return();
        retval.start = input.LT(1);
        int grouping_sets_elements_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.rollup_cube_clause_return rollup_cube_clause284 = null;

        OracleParser.expression_list_return expression_list285 = null;

        OracleParser.expression_return expression286 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 830) ) { return retval; }
            // OracleParser.g:477:5: ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) )
            int alt96=3;
            alt96 = dfa96.predict(input);
            switch (alt96) {
                case 1 :
                    // OracleParser.g:477:10: ( rollup_key | cube_key )=> rollup_cube_clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rollup_cube_clause_in_grouping_sets_elements4093);
                    rollup_cube_clause284=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollup_cube_clause284.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:478:10: ( LEFT_PAREN )=> expression_list
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_list_in_grouping_sets_elements4109);
                    expression_list285=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list285.getTree());

                    }
                    break;
                case 3 :
                    // OracleParser.g:479:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_grouping_sets_elements4120);
                    expression286=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression286.getTree());


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 479:21: -> ^( EXPR expression )
                    {
                        // OracleParser.g:479:24: ^( EXPR expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 830, grouping_sets_elements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_sets_elements"

    public static class having_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "having_clause"
    // OracleParser.g:482:1: having_clause : having_key condition -> ^( HAVING_CLAUSE ^( LOGIC_EXPR condition ) ) ;
    public final OracleParser.having_clause_return having_clause() throws RecognitionException {
        OracleParser.having_clause_return retval = new OracleParser.having_clause_return();
        retval.start = input.LT(1);
        int having_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.having_key_return having_key287 = null;

        OracleParser.condition_return condition288 = null;


        RewriteRuleSubtreeStream stream_having_key=new RewriteRuleSubtreeStream(adaptor,"rule having_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 831) ) { return retval; }
            // OracleParser.g:483:5: ( having_key condition -> ^( HAVING_CLAUSE ^( LOGIC_EXPR condition ) ) )
            // OracleParser.g:483:10: having_key condition
            {
            pushFollow(FOLLOW_having_key_in_having_clause4148);
            having_key287=having_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_having_key.add(having_key287.getTree());
            pushFollow(FOLLOW_condition_in_having_clause4150);
            condition288=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition288.getTree());


            // AST REWRITE
            // elements: condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:9: -> ^( HAVING_CLAUSE ^( LOGIC_EXPR condition ) )
            {
                // OracleParser.g:484:12: ^( HAVING_CLAUSE ^( LOGIC_EXPR condition ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(HAVING_CLAUSE, "HAVING_CLAUSE"), root_1);

                // OracleParser.g:484:28: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 831, having_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "having_clause"

    public static class model_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_clause"
    // OracleParser.g:487:1: model_clause : model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model -> ^( model_key main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) ;
    public final OracleParser.model_clause_return model_clause() throws RecognitionException {
        OracleParser.model_clause_return retval = new OracleParser.model_clause_return();
        retval.start = input.LT(1);
        int model_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.model_key_return model_key289 = null;

        OracleParser.cell_reference_options_return cell_reference_options290 = null;

        OracleParser.return_rows_clause_return return_rows_clause291 = null;

        OracleParser.reference_model_return reference_model292 = null;

        OracleParser.main_model_return main_model293 = null;


        RewriteRuleSubtreeStream stream_return_rows_clause=new RewriteRuleSubtreeStream(adaptor,"rule return_rows_clause");
        RewriteRuleSubtreeStream stream_model_key=new RewriteRuleSubtreeStream(adaptor,"rule model_key");
        RewriteRuleSubtreeStream stream_cell_reference_options=new RewriteRuleSubtreeStream(adaptor,"rule cell_reference_options");
        RewriteRuleSubtreeStream stream_reference_model=new RewriteRuleSubtreeStream(adaptor,"rule reference_model");
        RewriteRuleSubtreeStream stream_main_model=new RewriteRuleSubtreeStream(adaptor,"rule main_model");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 832) ) { return retval; }
            // OracleParser.g:488:5: ( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model -> ^( model_key main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) )
            // OracleParser.g:488:10: model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model
            {
            pushFollow(FOLLOW_model_key_in_model_clause4190);
            model_key289=model_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_key.add(model_key289.getTree());
            // OracleParser.g:488:20: ( cell_reference_options )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==REGULAR_ID) ) {
                    int LA97_1 = input.LA(2);

                    if ( (LA97_1==REGULAR_ID) ) {
                        int LA97_4 = input.LA(3);

                        if ( (((synpred132_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("keep")))||(synpred132_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("ignore"))))) ) {
                            alt97=1;
                        }


                    }


                }
                else if ( (LA97_0==SQL92_RESERVED_UNIQUE) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // OracleParser.g:0:0: cell_reference_options
            	    {
            	    pushFollow(FOLLOW_cell_reference_options_in_model_clause4192);
            	    cell_reference_options290=cell_reference_options();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cell_reference_options.add(cell_reference_options290.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);

            // OracleParser.g:488:44: ( return_rows_clause )?
            int alt98=2;
            alt98 = dfa98.predict(input);
            switch (alt98) {
                case 1 :
                    // OracleParser.g:0:0: return_rows_clause
                    {
                    pushFollow(FOLLOW_return_rows_clause_in_model_clause4195);
                    return_rows_clause291=return_rows_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_return_rows_clause.add(return_rows_clause291.getTree());

                    }
                    break;

            }

            // OracleParser.g:488:64: ( reference_model )*
            loop99:
            do {
                int alt99=2;
                alt99 = dfa99.predict(input);
                switch (alt99) {
            	case 1 :
            	    // OracleParser.g:0:0: reference_model
            	    {
            	    pushFollow(FOLLOW_reference_model_in_model_clause4198);
            	    reference_model292=reference_model();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_reference_model.add(reference_model292.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            pushFollow(FOLLOW_main_model_in_model_clause4201);
            main_model293=main_model();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_main_model.add(main_model293.getTree());


            // AST REWRITE
            // elements: cell_reference_options, reference_model, model_key, main_model, return_rows_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 489:9: -> ^( model_key main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
            {
                // OracleParser.g:489:12: ^( model_key main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_model_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_main_model.nextTree());
                // OracleParser.g:489:35: ( cell_reference_options )*
                while ( stream_cell_reference_options.hasNext() ) {
                    adaptor.addChild(root_1, stream_cell_reference_options.nextTree());

                }
                stream_cell_reference_options.reset();
                // OracleParser.g:489:59: ( return_rows_clause )?
                if ( stream_return_rows_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_return_rows_clause.nextTree());

                }
                stream_return_rows_clause.reset();
                // OracleParser.g:489:79: ( reference_model )*
                while ( stream_reference_model.hasNext() ) {
                    adaptor.addChild(root_1, stream_reference_model.nextTree());

                }
                stream_reference_model.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 832, model_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_clause"

    public static class cell_reference_options_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_reference_options"
    // OracleParser.g:492:1: cell_reference_options : ( ( ignore_key | keep_key ) nav_key | unique_key ( dimension_key | single_key reference_key ) );
    public final OracleParser.cell_reference_options_return cell_reference_options() throws RecognitionException {
        OracleParser.cell_reference_options_return retval = new OracleParser.cell_reference_options_return();
        retval.start = input.LT(1);
        int cell_reference_options_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.ignore_key_return ignore_key294 = null;

        OracleParser_Keys.keep_key_return keep_key295 = null;

        OracleParser_Keys.nav_key_return nav_key296 = null;

        OracleParser_Keys.unique_key_return unique_key297 = null;

        OracleParser_Keys.dimension_key_return dimension_key298 = null;

        OracleParser_Keys.single_key_return single_key299 = null;

        OracleParser_Keys.reference_key_return reference_key300 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 833) ) { return retval; }
            // OracleParser.g:493:5: ( ( ignore_key | keep_key ) nav_key | unique_key ( dimension_key | single_key reference_key ) )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("keep"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                alt102=1;
            }
            else if ( (LA102_0==SQL92_RESERVED_UNIQUE) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // OracleParser.g:493:10: ( ignore_key | keep_key ) nav_key
                    {
                    root_0 = (Object)adaptor.nil();

                    // OracleParser.g:493:10: ( ignore_key | keep_key )
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("keep")))) {
                        int LA100_1 = input.LA(2);

                        if ( ((synpred135_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("ignore")))) ) {
                            alt100=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("keep"))) ) {
                            alt100=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 100, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 100, 0, input);

                        throw nvae;
                    }
                    switch (alt100) {
                        case 1 :
                            // OracleParser.g:493:11: ignore_key
                            {
                            pushFollow(FOLLOW_ignore_key_in_cell_reference_options4247);
                            ignore_key294=ignore_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(ignore_key294.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // OracleParser.g:493:23: keep_key
                            {
                            pushFollow(FOLLOW_keep_key_in_cell_reference_options4250);
                            keep_key295=keep_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(keep_key295.getTree(), root_0);

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nav_key_in_cell_reference_options4254);
                    nav_key296=nav_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nav_key296.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:494:10: unique_key ( dimension_key | single_key reference_key )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unique_key_in_cell_reference_options4265);
                    unique_key297=unique_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(unique_key297.getTree(), root_0);
                    // OracleParser.g:494:22: ( dimension_key | single_key reference_key )
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("single")))) {
                        int LA101_1 = input.LA(2);

                        if ( (LA101_1==EOF) && ((input.LT(1).getText().equalsIgnoreCase("dimension")))) {
                            alt101=1;
                        }
                        else if ( (LA101_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("single")))) {
                            int LA101_3 = input.LA(3);

                            if ( ((synpred137_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("dimension")))) ) {
                                alt101=1;
                            }
                            else if ( ((input.LT(1).getText().equalsIgnoreCase("single"))) ) {
                                alt101=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 101, 3, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA101_1==SQL92_RESERVED_UNIQUE) && ((input.LT(1).getText().equalsIgnoreCase("dimension")))) {
                            alt101=1;
                        }
                        else if ( (LA101_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("dimension")))) {
                            alt101=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 101, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 101, 0, input);

                        throw nvae;
                    }
                    switch (alt101) {
                        case 1 :
                            // OracleParser.g:494:23: dimension_key
                            {
                            pushFollow(FOLLOW_dimension_key_in_cell_reference_options4269);
                            dimension_key298=dimension_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dimension_key298.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:494:37: single_key reference_key
                            {
                            pushFollow(FOLLOW_single_key_in_cell_reference_options4271);
                            single_key299=single_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, single_key299.getTree());
                            pushFollow(FOLLOW_reference_key_in_cell_reference_options4273);
                            reference_key300=reference_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 833, cell_reference_options_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_reference_options"

    public static class return_rows_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_rows_clause"
    // OracleParser.g:497:1: return_rows_clause : return_key ( updated_key | all_key ) rows_key ;
    public final OracleParser.return_rows_clause_return return_rows_clause() throws RecognitionException {
        OracleParser.return_rows_clause_return retval = new OracleParser.return_rows_clause_return();
        retval.start = input.LT(1);
        int return_rows_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.return_key_return return_key301 = null;

        OracleParser_Keys.updated_key_return updated_key302 = null;

        OracleParser_Keys.all_key_return all_key303 = null;

        OracleParser_Keys.rows_key_return rows_key304 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 834) ) { return retval; }
            // OracleParser.g:498:5: ( return_key ( updated_key | all_key ) rows_key )
            // OracleParser.g:498:10: return_key ( updated_key | all_key ) rows_key
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_return_key_in_return_rows_clause4296);
            return_key301=return_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(return_key301.getTree(), root_0);
            // OracleParser.g:498:22: ( updated_key | all_key )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("updated")))) {
                alt103=1;
            }
            else if ( (LA103_0==SQL92_RESERVED_ALL) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    // OracleParser.g:498:23: updated_key
                    {
                    pushFollow(FOLLOW_updated_key_in_return_rows_clause4300);
                    updated_key302=updated_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updated_key302.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:498:35: all_key
                    {
                    pushFollow(FOLLOW_all_key_in_return_rows_clause4302);
                    all_key303=all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, all_key303.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rows_key_in_return_rows_clause4305);
            rows_key304=rows_key();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 834, return_rows_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_rows_clause"

    public static class reference_model_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_model"
    // OracleParser.g:501:1: reference_model : reference_key reference_model_name on_key LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )* ;
    public final OracleParser.reference_model_return reference_model() throws RecognitionException {
        OracleParser.reference_model_return retval = new OracleParser.reference_model_return();
        retval.start = input.LT(1);
        int reference_model_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN308=null;
        Token RIGHT_PAREN310=null;
        OracleParser_Keys.reference_key_return reference_key305 = null;

        OracleParser_Commons.reference_model_name_return reference_model_name306 = null;

        OracleParser_Keys.on_key_return on_key307 = null;

        OracleParser.subquery_return subquery309 = null;

        OracleParser.model_column_clauses_return model_column_clauses311 = null;

        OracleParser.cell_reference_options_return cell_reference_options312 = null;


        Object LEFT_PAREN308_tree=null;
        Object RIGHT_PAREN310_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 835) ) { return retval; }
            // OracleParser.g:502:5: ( reference_key reference_model_name on_key LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )* )
            // OracleParser.g:502:10: reference_key reference_model_name on_key LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_reference_key_in_reference_model4326);
            reference_key305=reference_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(reference_key305.getTree(), root_0);
            pushFollow(FOLLOW_reference_model_name_in_reference_model4329);
            reference_model_name306=reference_model_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_model_name306.getTree());
            pushFollow(FOLLOW_on_key_in_reference_model4331);
            on_key307=on_key();

            state._fsp--;
            if (state.failed) return retval;
            LEFT_PAREN308=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_reference_model4347); if (state.failed) return retval;
            pushFollow(FOLLOW_subquery_in_reference_model4350);
            subquery309=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery309.getTree());
            RIGHT_PAREN310=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_reference_model4352); if (state.failed) return retval;
            pushFollow(FOLLOW_model_column_clauses_in_reference_model4355);
            model_column_clauses311=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column_clauses311.getTree());
            // OracleParser.g:504:13: ( cell_reference_options )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("dimension"))||(input.LT(1).getText().equalsIgnoreCase("main"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {
                    int LA104_1 = input.LA(2);

                    if ( (LA104_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {
                        int LA104_5 = input.LA(3);

                        if ( (((synpred139_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("keep")))||(synpred139_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("ignore"))))) ) {
                            alt104=1;
                        }


                    }


                }
                else if ( (LA104_0==SQL92_RESERVED_UNIQUE) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // OracleParser.g:0:0: cell_reference_options
            	    {
            	    pushFollow(FOLLOW_cell_reference_options_in_reference_model4370);
            	    cell_reference_options312=cell_reference_options();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options312.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 835, reference_model_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference_model"

    public static class main_model_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "main_model"
    // OracleParser.g:507:1: main_model : ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) ;
    public final OracleParser.main_model_return main_model() throws RecognitionException {
        OracleParser.main_model_return retval = new OracleParser.main_model_return();
        retval.start = input.LT(1);
        int main_model_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.main_key_return main_key313 = null;

        OracleParser_Commons.main_model_name_return main_model_name314 = null;

        OracleParser.model_column_clauses_return model_column_clauses315 = null;

        OracleParser.cell_reference_options_return cell_reference_options316 = null;

        OracleParser.model_rules_clause_return model_rules_clause317 = null;


        RewriteRuleSubtreeStream stream_main_key=new RewriteRuleSubtreeStream(adaptor,"rule main_key");
        RewriteRuleSubtreeStream stream_main_model_name=new RewriteRuleSubtreeStream(adaptor,"rule main_model_name");
        RewriteRuleSubtreeStream stream_model_column_clauses=new RewriteRuleSubtreeStream(adaptor,"rule model_column_clauses");
        RewriteRuleSubtreeStream stream_cell_reference_options=new RewriteRuleSubtreeStream(adaptor,"rule cell_reference_options");
        RewriteRuleSubtreeStream stream_model_rules_clause=new RewriteRuleSubtreeStream(adaptor,"rule model_rules_clause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 836) ) { return retval; }
            // OracleParser.g:508:5: ( ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) )
            // OracleParser.g:508:10: ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause
            {
            // OracleParser.g:508:10: ( main_key main_model_name )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("dimension"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {
                int LA105_1 = input.LA(2);

                if ( (LA105_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {
                    alt105=1;
                }
                else if ( (LA105_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {
                    alt105=1;
                }
                else if ( (LA105_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {
                    alt105=1;
                }
            }
            switch (alt105) {
                case 1 :
                    // OracleParser.g:508:11: main_key main_model_name
                    {
                    pushFollow(FOLLOW_main_key_in_main_model4392);
                    main_key313=main_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_main_key.add(main_key313.getTree());
                    pushFollow(FOLLOW_main_model_name_in_main_model4394);
                    main_model_name314=main_model_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_main_model_name.add(main_model_name314.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_model_column_clauses_in_main_model4398);
            model_column_clauses315=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_column_clauses.add(model_column_clauses315.getTree());
            // OracleParser.g:508:59: ( cell_reference_options )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("rules")))) {
                    int LA106_1 = input.LA(2);

                    if ( (LA106_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("rules")))) {
                        int LA106_4 = input.LA(3);

                        if ( (((synpred141_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("ignore")))||(synpred141_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("keep"))))) ) {
                            alt106=1;
                        }


                    }


                }
                else if ( (LA106_0==SQL92_RESERVED_UNIQUE) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // OracleParser.g:0:0: cell_reference_options
            	    {
            	    pushFollow(FOLLOW_cell_reference_options_in_main_model4400);
            	    cell_reference_options316=cell_reference_options();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cell_reference_options.add(cell_reference_options316.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);

            pushFollow(FOLLOW_model_rules_clause_in_main_model4403);
            model_rules_clause317=model_rules_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_rules_clause.add(model_rules_clause317.getTree());


            // AST REWRITE
            // elements: model_column_clauses, cell_reference_options, main_model_name, model_rules_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 509:9: -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
            {
                // OracleParser.g:509:12: ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MAIN_MODEL, "MAIN_MODEL"), root_1);

                // OracleParser.g:509:25: ( main_model_name )?
                if ( stream_main_model_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_main_model_name.nextTree());

                }
                stream_main_model_name.reset();
                adaptor.addChild(root_1, stream_model_column_clauses.nextTree());
                adaptor.addChild(root_1, stream_model_rules_clause.nextTree());
                // OracleParser.g:509:82: ( cell_reference_options )*
                while ( stream_cell_reference_options.hasNext() ) {
                    adaptor.addChild(root_1, stream_cell_reference_options.nextTree());

                }
                stream_cell_reference_options.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 836, main_model_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "main_model"

    public static class model_column_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_column_clauses"
    // OracleParser.g:512:1: model_column_clauses : ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list -> ^( MODEL_COLUMN ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ( model_column_partition_part )? ) ;
    public final OracleParser.model_column_clauses_return model_column_clauses() throws RecognitionException {
        OracleParser.model_column_clauses_return retval = new OracleParser.model_column_clauses_return();
        retval.start = input.LT(1);
        int model_column_clauses_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.model_column_partition_part_return model_column_partition_part318 = null;

        OracleParser_Keys.dimension_key_return dimension_key319 = null;

        OracleParser_Keys.by_key_return by_key320 = null;

        OracleParser.model_column_list_return model_column_list321 = null;

        OracleParser_Keys.measures_key_return measures_key322 = null;

        OracleParser.model_column_list_return model_column_list323 = null;


        RewriteRuleSubtreeStream stream_model_column_list=new RewriteRuleSubtreeStream(adaptor,"rule model_column_list");
        RewriteRuleSubtreeStream stream_dimension_key=new RewriteRuleSubtreeStream(adaptor,"rule dimension_key");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_model_column_partition_part=new RewriteRuleSubtreeStream(adaptor,"rule model_column_partition_part");
        RewriteRuleSubtreeStream stream_measures_key=new RewriteRuleSubtreeStream(adaptor,"rule measures_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 837) ) { return retval; }
            // OracleParser.g:513:5: ( ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list -> ^( MODEL_COLUMN ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ( model_column_partition_part )? ) )
            // OracleParser.g:513:10: ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list
            {
            // OracleParser.g:513:10: ( model_column_partition_part )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("dimension")))) {
                int LA107_1 = input.LA(2);

                if ( ((synpred142_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("partition")))) ) {
                    alt107=1;
                }
            }
            switch (alt107) {
                case 1 :
                    // OracleParser.g:0:0: model_column_partition_part
                    {
                    pushFollow(FOLLOW_model_column_partition_part_in_model_column_clauses4447);
                    model_column_partition_part318=model_column_partition_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_model_column_partition_part.add(model_column_partition_part318.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_dimension_key_in_model_column_clauses4458);
            dimension_key319=dimension_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dimension_key.add(dimension_key319.getTree());
            pushFollow(FOLLOW_by_key_in_model_column_clauses4460);
            by_key320=by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_by_key.add(by_key320.getTree());
            pushFollow(FOLLOW_model_column_list_in_model_column_clauses4462);
            model_column_list321=model_column_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_column_list.add(model_column_list321.getTree());
            pushFollow(FOLLOW_measures_key_in_model_column_clauses4464);
            measures_key322=measures_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_measures_key.add(measures_key322.getTree());
            pushFollow(FOLLOW_model_column_list_in_model_column_clauses4466);
            model_column_list323=model_column_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_column_list.add(model_column_list323.getTree());


            // AST REWRITE
            // elements: model_column_partition_part, model_column_list, dimension_key, measures_key, model_column_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 515:9: -> ^( MODEL_COLUMN ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ( model_column_partition_part )? )
            {
                // OracleParser.g:515:12: ^( MODEL_COLUMN ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ( model_column_partition_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODEL_COLUMN, "MODEL_COLUMN"), root_1);

                // OracleParser.g:515:27: ^( dimension_key model_column_list )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_dimension_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_model_column_list.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:515:62: ^( measures_key model_column_list )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_measures_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_model_column_list.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:515:96: ( model_column_partition_part )?
                if ( stream_model_column_partition_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_column_partition_part.nextTree());

                }
                stream_model_column_partition_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 837, model_column_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_column_clauses"

    public static class model_column_partition_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_column_partition_part"
    // OracleParser.g:518:1: model_column_partition_part : partition_key by_key model_column_list ;
    public final OracleParser.model_column_partition_part_return model_column_partition_part() throws RecognitionException {
        OracleParser.model_column_partition_part_return retval = new OracleParser.model_column_partition_part_return();
        retval.start = input.LT(1);
        int model_column_partition_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.partition_key_return partition_key324 = null;

        OracleParser_Keys.by_key_return by_key325 = null;

        OracleParser.model_column_list_return model_column_list326 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 838) ) { return retval; }
            // OracleParser.g:519:5: ( partition_key by_key model_column_list )
            // OracleParser.g:519:10: partition_key by_key model_column_list
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_partition_key_in_model_column_partition_part4515);
            partition_key324=partition_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(partition_key324.getTree(), root_0);
            pushFollow(FOLLOW_by_key_in_model_column_partition_part4518);
            by_key325=by_key();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_model_column_list_in_model_column_partition_part4521);
            model_column_list326=model_column_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column_list326.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 838, model_column_partition_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_column_partition_part"

    public static class model_column_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_column_list"
    // OracleParser.g:522:1: model_column_list : LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN -> ^( MODEL_COLUMNS ( model_column )+ ) ;
    public final OracleParser.model_column_list_return model_column_list() throws RecognitionException {
        OracleParser.model_column_list_return retval = new OracleParser.model_column_list_return();
        retval.start = input.LT(1);
        int model_column_list_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN327=null;
        Token COMMA329=null;
        Token RIGHT_PAREN331=null;
        OracleParser.model_column_return model_column328 = null;

        OracleParser.model_column_return model_column330 = null;


        Object LEFT_PAREN327_tree=null;
        Object COMMA329_tree=null;
        Object RIGHT_PAREN331_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_model_column=new RewriteRuleSubtreeStream(adaptor,"rule model_column");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 839) ) { return retval; }
            // OracleParser.g:523:5: ( LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN -> ^( MODEL_COLUMNS ( model_column )+ ) )
            // OracleParser.g:523:10: LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN
            {
            LEFT_PAREN327=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_model_column_list4541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN327);

            pushFollow(FOLLOW_model_column_in_model_column_list4543);
            model_column328=model_column();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_column.add(model_column328.getTree());
            // OracleParser.g:523:34: ( COMMA model_column )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==COMMA) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // OracleParser.g:523:35: COMMA model_column
            	    {
            	    COMMA329=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_column_list4546); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA329);

            	    pushFollow(FOLLOW_model_column_in_model_column_list4548);
            	    model_column330=model_column();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_model_column.add(model_column330.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);

            RIGHT_PAREN331=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_model_column_list4553); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN331);



            // AST REWRITE
            // elements: model_column
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:9: -> ^( MODEL_COLUMNS ( model_column )+ )
            {
                // OracleParser.g:524:12: ^( MODEL_COLUMNS ( model_column )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODEL_COLUMNS, "MODEL_COLUMNS"), root_1);

                if ( !(stream_model_column.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_model_column.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_column.nextTree());

                }
                stream_model_column.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 839, model_column_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_column_list"

    public static class model_column_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_column"
    // OracleParser.g:527:1: model_column : expression ( table_alias )? -> ^( MODEL_COLUMN ( table_alias )? ^( EXPR expression ) ) ;
    public final OracleParser.model_column_return model_column() throws RecognitionException {
        OracleParser.model_column_return retval = new OracleParser.model_column_return();
        retval.start = input.LT(1);
        int model_column_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.expression_return expression332 = null;

        OracleParser_Commons.table_alias_return table_alias333 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 840) ) { return retval; }
            // OracleParser.g:528:5: ( expression ( table_alias )? -> ^( MODEL_COLUMN ( table_alias )? ^( EXPR expression ) ) )
            // OracleParser.g:528:10: expression ( table_alias )?
            {
            pushFollow(FOLLOW_expression_in_model_column4590);
            expression332=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression332.getTree());
            // OracleParser.g:528:21: ( table_alias )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==NATIONAL_CHAR_STRING_LIT||LA109_0==CHAR_STRING||LA109_0==CHAR_STRING_PERL||LA109_0==DELIMITED_ID||LA109_0==INTRODUCER||LA109_0==REGULAR_ID) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // OracleParser.g:0:0: table_alias
                    {
                    pushFollow(FOLLOW_table_alias_in_model_column4592);
                    table_alias333=table_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_alias.add(table_alias333.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, table_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 529:9: -> ^( MODEL_COLUMN ( table_alias )? ^( EXPR expression ) )
            {
                // OracleParser.g:529:12: ^( MODEL_COLUMN ( table_alias )? ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODEL_COLUMN, "MODEL_COLUMN"), root_1);

                // OracleParser.g:529:27: ( table_alias )?
                if ( stream_table_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_alias.nextTree());

                }
                stream_table_alias.reset();
                // OracleParser.g:529:40: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 840, model_column_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_column"

    public static class model_rules_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_rules_clause"
    // OracleParser.g:532:1: model_rules_clause : ( model_rules_part )? LEFT_PAREN model_rules_element ( COMMA model_rules_element )* RIGHT_PAREN -> ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) ;
    public final OracleParser.model_rules_clause_return model_rules_clause() throws RecognitionException {
        OracleParser.model_rules_clause_return retval = new OracleParser.model_rules_clause_return();
        retval.start = input.LT(1);
        int model_rules_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN335=null;
        Token COMMA337=null;
        Token RIGHT_PAREN339=null;
        OracleParser.model_rules_part_return model_rules_part334 = null;

        OracleParser.model_rules_element_return model_rules_element336 = null;

        OracleParser.model_rules_element_return model_rules_element338 = null;


        Object LEFT_PAREN335_tree=null;
        Object COMMA337_tree=null;
        Object RIGHT_PAREN339_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_model_rules_element=new RewriteRuleSubtreeStream(adaptor,"rule model_rules_element");
        RewriteRuleSubtreeStream stream_model_rules_part=new RewriteRuleSubtreeStream(adaptor,"rule model_rules_part");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 841) ) { return retval; }
            // OracleParser.g:533:5: ( ( model_rules_part )? LEFT_PAREN model_rules_element ( COMMA model_rules_element )* RIGHT_PAREN -> ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) )
            // OracleParser.g:533:10: ( model_rules_part )? LEFT_PAREN model_rules_element ( COMMA model_rules_element )* RIGHT_PAREN
            {
            // OracleParser.g:533:10: ( model_rules_part )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("rules")))) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // OracleParser.g:0:0: model_rules_part
                    {
                    pushFollow(FOLLOW_model_rules_part_in_model_rules_clause4636);
                    model_rules_part334=model_rules_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_model_rules_part.add(model_rules_part334.getTree());

                    }
                    break;

            }

            LEFT_PAREN335=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_model_rules_clause4639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN335);

            pushFollow(FOLLOW_model_rules_element_in_model_rules_clause4641);
            model_rules_element336=model_rules_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_rules_element.add(model_rules_element336.getTree());
            // OracleParser.g:533:59: ( COMMA model_rules_element )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==COMMA) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // OracleParser.g:533:60: COMMA model_rules_element
            	    {
            	    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_rules_clause4644); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA337);

            	    pushFollow(FOLLOW_model_rules_element_in_model_rules_clause4646);
            	    model_rules_element338=model_rules_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_model_rules_element.add(model_rules_element338.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            RIGHT_PAREN339=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_model_rules_clause4650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN339);



            // AST REWRITE
            // elements: model_rules_part, model_rules_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:9: -> ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
            {
                // OracleParser.g:534:12: ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODEL_RULES, "MODEL_RULES"), root_1);

                if ( !(stream_model_rules_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_model_rules_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_rules_element.nextTree());

                }
                stream_model_rules_element.reset();
                // OracleParser.g:534:47: ( model_rules_part )?
                if ( stream_model_rules_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_rules_part.nextTree());

                }
                stream_model_rules_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 841, model_rules_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_rules_clause"

    public static class model_rules_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_rules_part"
    // OracleParser.g:537:1: model_rules_part : rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )? -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? ) ;
    public final OracleParser.model_rules_part_return model_rules_part() throws RecognitionException {
        OracleParser.model_rules_part_return retval = new OracleParser.model_rules_part_return();
        retval.start = input.LT(1);
        int model_rules_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.rules_key_return rules_key340 = null;

        OracleParser_Keys.update_key_return update_key341 = null;

        OracleParser_Keys.upsert_key_return upsert_key342 = null;

        OracleParser_Keys.all_key_return all_key343 = null;

        OracleParser_Keys.automatic_key_return automatic_key344 = null;

        OracleParser_Keys.sequential_key_return sequential_key345 = null;

        OracleParser_Keys.order_key_return order_key346 = null;

        OracleParser.model_iterate_clause_return model_iterate_clause347 = null;


        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_sequential_key=new RewriteRuleSubtreeStream(adaptor,"rule sequential_key");
        RewriteRuleSubtreeStream stream_order_key=new RewriteRuleSubtreeStream(adaptor,"rule order_key");
        RewriteRuleSubtreeStream stream_rules_key=new RewriteRuleSubtreeStream(adaptor,"rule rules_key");
        RewriteRuleSubtreeStream stream_model_iterate_clause=new RewriteRuleSubtreeStream(adaptor,"rule model_iterate_clause");
        RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
        RewriteRuleSubtreeStream stream_automatic_key=new RewriteRuleSubtreeStream(adaptor,"rule automatic_key");
        RewriteRuleSubtreeStream stream_upsert_key=new RewriteRuleSubtreeStream(adaptor,"rule upsert_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 842) ) { return retval; }
            // OracleParser.g:538:5: ( rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )? -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? ) )
            // OracleParser.g:538:10: rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )?
            {
            pushFollow(FOLLOW_rules_key_in_model_rules_part4690);
            rules_key340=rules_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rules_key.add(rules_key340.getTree());
            // OracleParser.g:538:20: ( update_key | upsert_key ( all_key )? )?
            int alt113=3;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==SQL92_RESERVED_UPDATE) ) {
                alt113=1;
            }
            else if ( (LA113_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("automatic"))||(input.LT(1).getText().equalsIgnoreCase("iterate"))||(input.LT(1).getText().equalsIgnoreCase("sequential"))))) {
                int LA113_2 = input.LA(2);

                if ( ((synpred149_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("upsert")))) ) {
                    alt113=2;
                }
            }
            switch (alt113) {
                case 1 :
                    // OracleParser.g:538:21: update_key
                    {
                    pushFollow(FOLLOW_update_key_in_model_rules_part4693);
                    update_key341=update_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_update_key.add(update_key341.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:538:32: upsert_key ( all_key )?
                    {
                    pushFollow(FOLLOW_upsert_key_in_model_rules_part4695);
                    upsert_key342=upsert_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_upsert_key.add(upsert_key342.getTree());
                    // OracleParser.g:538:43: ( all_key )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==SQL92_RESERVED_ALL) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // OracleParser.g:0:0: all_key
                            {
                            pushFollow(FOLLOW_all_key_in_model_rules_part4697);
                            all_key343=all_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_all_key.add(all_key343.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // OracleParser.g:538:54: ( ( automatic_key | sequential_key ) order_key )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("iterate")))) {
                int LA115_1 = input.LA(2);

                if ( (LA115_1==SQL92_RESERVED_ORDER) && (((input.LT(1).getText().equalsIgnoreCase("automatic"))||(input.LT(1).getText().equalsIgnoreCase("sequential"))))) {
                    alt115=1;
                }
            }
            switch (alt115) {
                case 1 :
                    // OracleParser.g:538:55: ( automatic_key | sequential_key ) order_key
                    {
                    // OracleParser.g:538:55: ( automatic_key | sequential_key )
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("sequential")))) {
                        int LA114_1 = input.LA(2);

                        if ( ((synpred150_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("automatic")))) ) {
                            alt114=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("sequential"))) ) {
                            alt114=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 114, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 114, 0, input);

                        throw nvae;
                    }
                    switch (alt114) {
                        case 1 :
                            // OracleParser.g:538:56: automatic_key
                            {
                            pushFollow(FOLLOW_automatic_key_in_model_rules_part4704);
                            automatic_key344=automatic_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_automatic_key.add(automatic_key344.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:538:70: sequential_key
                            {
                            pushFollow(FOLLOW_sequential_key_in_model_rules_part4706);
                            sequential_key345=sequential_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sequential_key.add(sequential_key345.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_order_key_in_model_rules_part4709);
                    order_key346=order_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_order_key.add(order_key346.getTree());

                    }
                    break;

            }

            // OracleParser.g:538:98: ( model_iterate_clause )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("iterate")))) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // OracleParser.g:0:0: model_iterate_clause
                    {
                    pushFollow(FOLLOW_model_iterate_clause_in_model_rules_part4713);
                    model_iterate_clause347=model_iterate_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_model_iterate_clause.add(model_iterate_clause347.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: model_iterate_clause, upsert_key, all_key, automatic_key, rules_key, update_key, sequential_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 539:9: -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? )
            {
                // OracleParser.g:539:12: ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_rules_key.nextNode(), root_1);

                // OracleParser.g:539:24: ( update_key )?
                if ( stream_update_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_update_key.nextTree());

                }
                stream_update_key.reset();
                // OracleParser.g:539:36: ( upsert_key )?
                if ( stream_upsert_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_upsert_key.nextTree());

                }
                stream_upsert_key.reset();
                // OracleParser.g:539:48: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_all_key.nextTree());

                }
                stream_all_key.reset();
                // OracleParser.g:539:57: ( automatic_key )?
                if ( stream_automatic_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_automatic_key.nextTree());

                }
                stream_automatic_key.reset();
                // OracleParser.g:539:72: ( sequential_key )?
                if ( stream_sequential_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_sequential_key.nextTree());

                }
                stream_sequential_key.reset();
                // OracleParser.g:539:88: ( model_iterate_clause )?
                if ( stream_model_iterate_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_iterate_clause.nextTree());

                }
                stream_model_iterate_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 842, model_rules_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_rules_part"

    public static class model_rules_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_rules_element"
    // OracleParser.g:542:1: model_rules_element : ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? ) ;
    public final OracleParser.model_rules_element_return model_rules_element() throws RecognitionException {
        OracleParser.model_rules_element_return retval = new OracleParser.model_rules_element_return();
        retval.start = input.LT(1);
        int model_rules_element_StartIndex = input.index();
        Object root_0 = null;

        Token EQUALS_OP353=null;
        OracleParser_Keys.update_key_return update_key348 = null;

        OracleParser_Keys.upsert_key_return upsert_key349 = null;

        OracleParser_Keys.all_key_return all_key350 = null;

        OracleParser.cell_assignment_return cell_assignment351 = null;

        OracleParser.order_by_clause_return order_by_clause352 = null;

        OracleParser.expression_return expression354 = null;


        Object EQUALS_OP353_tree=null;
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_order_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule order_by_clause");
        RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
        RewriteRuleSubtreeStream stream_cell_assignment=new RewriteRuleSubtreeStream(adaptor,"rule cell_assignment");
        RewriteRuleSubtreeStream stream_upsert_key=new RewriteRuleSubtreeStream(adaptor,"rule upsert_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 843) ) { return retval; }
            // OracleParser.g:543:5: ( ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? ) )
            // OracleParser.g:543:10: ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression
            {
            // OracleParser.g:543:10: ( update_key | upsert_key ( ( all_key )=> all_key )? )?
            int alt118=3;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==SQL92_RESERVED_UPDATE) ) {
                alt118=1;
            }
            else if ( (LA118_0==REGULAR_ID) ) {
                int LA118_2 = input.LA(2);

                if ( ((synpred155_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("upsert")))) ) {
                    alt118=2;
                }
            }
            switch (alt118) {
                case 1 :
                    // OracleParser.g:543:11: update_key
                    {
                    pushFollow(FOLLOW_update_key_in_model_rules_element4767);
                    update_key348=update_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_update_key.add(update_key348.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:543:22: upsert_key ( ( all_key )=> all_key )?
                    {
                    pushFollow(FOLLOW_upsert_key_in_model_rules_element4769);
                    upsert_key349=upsert_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_upsert_key.add(upsert_key349.getTree());
                    // OracleParser.g:543:33: ( ( all_key )=> all_key )?
                    int alt117=2;
                    alt117 = dfa117.predict(input);
                    switch (alt117) {
                        case 1 :
                            // OracleParser.g:543:34: ( all_key )=> all_key
                            {
                            pushFollow(FOLLOW_all_key_in_model_rules_element4777);
                            all_key350=all_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_all_key.add(all_key350.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_cell_assignment_in_model_rules_element4791);
            cell_assignment351=cell_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cell_assignment.add(cell_assignment351.getTree());
            // OracleParser.g:545:17: ( order_by_clause )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==SQL92_RESERVED_ORDER) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // OracleParser.g:0:0: order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_model_rules_element4809);
                    order_by_clause352=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_order_by_clause.add(order_by_clause352.getTree());

                    }
                    break;

            }

            EQUALS_OP353=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_model_rules_element4824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP353);

            pushFollow(FOLLOW_expression_in_model_rules_element4826);
            expression354=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression354.getTree());


            // AST REWRITE
            // elements: all_key, update_key, expression, upsert_key, cell_assignment, order_by_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 547:9: -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? )
            {
                // OracleParser.g:547:12: ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODEL_RULE, "MODEL_RULE"), root_1);

                // OracleParser.g:547:25: ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, EQUALS_OP353), root_2);

                adaptor.addChild(root_2, stream_cell_assignment.nextTree());
                // OracleParser.g:547:62: ^( EXPR expression )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);

                adaptor.addChild(root_3, stream_expression.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:547:82: ( update_key )?
                if ( stream_update_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_update_key.nextTree());

                }
                stream_update_key.reset();
                // OracleParser.g:547:94: ( upsert_key )?
                if ( stream_upsert_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_upsert_key.nextTree());

                }
                stream_upsert_key.reset();
                // OracleParser.g:547:106: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_all_key.nextTree());

                }
                stream_all_key.reset();
                // OracleParser.g:547:115: ( order_by_clause )?
                if ( stream_order_by_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_order_by_clause.nextTree());

                }
                stream_order_by_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 843, model_rules_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_rules_element"

    public static class cell_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_assignment"
    // OracleParser.g:550:1: cell_assignment : model_expression ;
    public final OracleParser.cell_assignment_return cell_assignment() throws RecognitionException {
        OracleParser.cell_assignment_return retval = new OracleParser.cell_assignment_return();
        retval.start = input.LT(1);
        int cell_assignment_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.model_expression_return model_expression355 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 844) ) { return retval; }
            // OracleParser.g:551:5: ( model_expression )
            // OracleParser.g:551:10: model_expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_model_expression_in_cell_assignment4885);
            model_expression355=model_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_expression355.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 844, cell_assignment_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_assignment"

    public static class model_iterate_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_iterate_clause"
    // OracleParser.g:554:1: model_iterate_clause : iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )? -> ^( iterate_key ^( EXPR expression ) ( until_part )? ) ;
    public final OracleParser.model_iterate_clause_return model_iterate_clause() throws RecognitionException {
        OracleParser.model_iterate_clause_return retval = new OracleParser.model_iterate_clause_return();
        retval.start = input.LT(1);
        int model_iterate_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN357=null;
        Token RIGHT_PAREN359=null;
        OracleParser_Keys.iterate_key_return iterate_key356 = null;

        OracleParser.expression_return expression358 = null;

        OracleParser.until_part_return until_part360 = null;


        Object LEFT_PAREN357_tree=null;
        Object RIGHT_PAREN359_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_iterate_key=new RewriteRuleSubtreeStream(adaptor,"rule iterate_key");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_until_part=new RewriteRuleSubtreeStream(adaptor,"rule until_part");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 845) ) { return retval; }
            // OracleParser.g:555:5: ( iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )? -> ^( iterate_key ^( EXPR expression ) ( until_part )? ) )
            // OracleParser.g:555:10: iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )?
            {
            pushFollow(FOLLOW_iterate_key_in_model_iterate_clause4905);
            iterate_key356=iterate_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iterate_key.add(iterate_key356.getTree());
            LEFT_PAREN357=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_model_iterate_clause4907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN357);

            pushFollow(FOLLOW_expression_in_model_iterate_clause4909);
            expression358=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression358.getTree());
            RIGHT_PAREN359=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_model_iterate_clause4911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN359);

            // OracleParser.g:555:56: ( until_part )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("until")))) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // OracleParser.g:0:0: until_part
                    {
                    pushFollow(FOLLOW_until_part_in_model_iterate_clause4913);
                    until_part360=until_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_until_part.add(until_part360.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: iterate_key, until_part, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 556:9: -> ^( iterate_key ^( EXPR expression ) ( until_part )? )
            {
                // OracleParser.g:556:11: ^( iterate_key ^( EXPR expression ) ( until_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_iterate_key.nextNode(), root_1);

                // OracleParser.g:556:25: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:556:44: ( until_part )?
                if ( stream_until_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_until_part.nextTree());

                }
                stream_until_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 845, model_iterate_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_iterate_clause"

    public static class until_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "until_part"
    // OracleParser.g:559:1: until_part : until_key LEFT_PAREN condition RIGHT_PAREN -> ^( until_key ^( LOGIC_EXPR condition ) ) ;
    public final OracleParser.until_part_return until_part() throws RecognitionException {
        OracleParser.until_part_return retval = new OracleParser.until_part_return();
        retval.start = input.LT(1);
        int until_part_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN362=null;
        Token RIGHT_PAREN364=null;
        OracleParser_Keys.until_key_return until_key361 = null;

        OracleParser.condition_return condition363 = null;


        Object LEFT_PAREN362_tree=null;
        Object RIGHT_PAREN364_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_until_key=new RewriteRuleSubtreeStream(adaptor,"rule until_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 846) ) { return retval; }
            // OracleParser.g:560:5: ( until_key LEFT_PAREN condition RIGHT_PAREN -> ^( until_key ^( LOGIC_EXPR condition ) ) )
            // OracleParser.g:560:10: until_key LEFT_PAREN condition RIGHT_PAREN
            {
            pushFollow(FOLLOW_until_key_in_until_part4956);
            until_key361=until_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_until_key.add(until_key361.getTree());
            LEFT_PAREN362=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_until_part4958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN362);

            pushFollow(FOLLOW_condition_in_until_part4960);
            condition363=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition363.getTree());
            RIGHT_PAREN364=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_until_part4962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN364);



            // AST REWRITE
            // elements: condition, until_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 561:9: -> ^( until_key ^( LOGIC_EXPR condition ) )
            {
                // OracleParser.g:561:12: ^( until_key ^( LOGIC_EXPR condition ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_until_key.nextNode(), root_1);

                // OracleParser.g:561:24: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 846, until_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "until_part"

    public static class order_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_by_clause"
    // OracleParser.g:564:1: order_by_clause : order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )* -> ^( ORDER_BY_CLAUSE ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) ;
    public final OracleParser.order_by_clause_return order_by_clause() throws RecognitionException {
        OracleParser.order_by_clause_return retval = new OracleParser.order_by_clause_return();
        retval.start = input.LT(1);
        int order_by_clause_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA369=null;
        OracleParser_Keys.order_key_return order_key365 = null;

        OracleParser_Keys.siblings_key_return siblings_key366 = null;

        OracleParser_Keys.by_key_return by_key367 = null;

        OracleParser.order_by_elements_return order_by_elements368 = null;

        OracleParser.order_by_elements_return order_by_elements370 = null;


        Object COMMA369_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_order_key=new RewriteRuleSubtreeStream(adaptor,"rule order_key");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_siblings_key=new RewriteRuleSubtreeStream(adaptor,"rule siblings_key");
        RewriteRuleSubtreeStream stream_order_by_elements=new RewriteRuleSubtreeStream(adaptor,"rule order_by_elements");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 847) ) { return retval; }
            // OracleParser.g:565:5: ( order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )* -> ^( ORDER_BY_CLAUSE ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) )
            // OracleParser.g:565:10: order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )*
            {
            pushFollow(FOLLOW_order_key_in_order_by_clause5002);
            order_key365=order_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_order_key.add(order_key365.getTree());
            // OracleParser.g:565:20: ( siblings_key )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("siblings")))) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // OracleParser.g:0:0: siblings_key
                    {
                    pushFollow(FOLLOW_siblings_key_in_order_by_clause5004);
                    siblings_key366=siblings_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_siblings_key.add(siblings_key366.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_by_key_in_order_by_clause5007);
            by_key367=by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_by_key.add(by_key367.getTree());
            pushFollow(FOLLOW_order_by_elements_in_order_by_clause5009);
            order_by_elements368=order_by_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_order_by_elements.add(order_by_elements368.getTree());
            // OracleParser.g:565:59: ( COMMA order_by_elements )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==COMMA) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // OracleParser.g:565:60: COMMA order_by_elements
            	    {
            	    COMMA369=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_by_clause5012); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA369);

            	    pushFollow(FOLLOW_order_by_elements_in_order_by_clause5014);
            	    order_by_elements370=order_by_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_order_by_elements.add(order_by_elements370.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);



            // AST REWRITE
            // elements: siblings_key, order_by_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:9: -> ^( ORDER_BY_CLAUSE ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
            {
                // OracleParser.g:566:12: ^( ORDER_BY_CLAUSE ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ORDER_BY_CLAUSE, "ORDER_BY_CLAUSE"), root_1);

                // OracleParser.g:566:30: ( siblings_key )?
                if ( stream_siblings_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_siblings_key.nextTree());

                }
                stream_siblings_key.reset();
                // OracleParser.g:566:44: ^( ORDER_BY_ELEMENTS ( order_by_elements )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ORDER_BY_ELEMENTS, "ORDER_BY_ELEMENTS"), root_2);

                if ( !(stream_order_by_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_order_by_elements.hasNext() ) {
                    adaptor.addChild(root_2, stream_order_by_elements.nextTree());

                }
                stream_order_by_elements.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 847, order_by_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"

    public static class order_by_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_by_elements"
    // OracleParser.g:569:1: order_by_elements : expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )? -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? ) ;
    public final OracleParser.order_by_elements_return order_by_elements() throws RecognitionException {
        OracleParser.order_by_elements_return retval = new OracleParser.order_by_elements_return();
        retval.start = input.LT(1);
        int order_by_elements_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.expression_return expression371 = null;

        OracleParser_Keys.asc_key_return asc_key372 = null;

        OracleParser_Keys.desc_key_return desc_key373 = null;

        OracleParser_Keys.nulls_key_return nulls_key374 = null;

        OracleParser_Keys.first_key_return first_key375 = null;

        OracleParser_Keys.last_key_return last_key376 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_desc_key=new RewriteRuleSubtreeStream(adaptor,"rule desc_key");
        RewriteRuleSubtreeStream stream_nulls_key=new RewriteRuleSubtreeStream(adaptor,"rule nulls_key");
        RewriteRuleSubtreeStream stream_last_key=new RewriteRuleSubtreeStream(adaptor,"rule last_key");
        RewriteRuleSubtreeStream stream_asc_key=new RewriteRuleSubtreeStream(adaptor,"rule asc_key");
        RewriteRuleSubtreeStream stream_first_key=new RewriteRuleSubtreeStream(adaptor,"rule first_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 848) ) { return retval; }
            // OracleParser.g:570:5: ( expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )? -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? ) )
            // OracleParser.g:570:10: expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )?
            {
            pushFollow(FOLLOW_expression_in_order_by_elements5060);
            expression371=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression371.getTree());
            // OracleParser.g:570:21: ( asc_key | desc_key )?
            int alt123=3;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==SQL92_RESERVED_ASC) ) {
                alt123=1;
            }
            else if ( (LA123_0==SQL92_RESERVED_DESC) ) {
                alt123=2;
            }
            switch (alt123) {
                case 1 :
                    // OracleParser.g:570:22: asc_key
                    {
                    pushFollow(FOLLOW_asc_key_in_order_by_elements5063);
                    asc_key372=asc_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_asc_key.add(asc_key372.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:570:30: desc_key
                    {
                    pushFollow(FOLLOW_desc_key_in_order_by_elements5065);
                    desc_key373=desc_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_desc_key.add(desc_key373.getTree());

                    }
                    break;

            }

            // OracleParser.g:570:41: ( nulls_key ( first_key | last_key ) )?
            int alt125=2;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // OracleParser.g:570:42: nulls_key ( first_key | last_key )
                    {
                    pushFollow(FOLLOW_nulls_key_in_order_by_elements5070);
                    nulls_key374=nulls_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nulls_key.add(nulls_key374.getTree());
                    // OracleParser.g:570:52: ( first_key | last_key )
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("last")))) {
                        int LA124_1 = input.LA(2);

                        if ( ((synpred162_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first")))) ) {
                            alt124=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("last"))) ) {
                            alt124=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 124, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);

                        throw nvae;
                    }
                    switch (alt124) {
                        case 1 :
                            // OracleParser.g:570:53: first_key
                            {
                            pushFollow(FOLLOW_first_key_in_order_by_elements5073);
                            first_key375=first_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_first_key.add(first_key375.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:570:63: last_key
                            {
                            pushFollow(FOLLOW_last_key_in_order_by_elements5075);
                            last_key376=last_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_last_key.add(last_key376.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: asc_key, nulls_key, desc_key, expression, last_key, first_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:9: -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? )
            {
                // OracleParser.g:571:12: ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ORDER_BY_ELEMENT, "ORDER_BY_ELEMENT"), root_1);

                // OracleParser.g:571:31: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:571:50: ( asc_key )?
                if ( stream_asc_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_asc_key.nextTree());

                }
                stream_asc_key.reset();
                // OracleParser.g:571:59: ( desc_key )?
                if ( stream_desc_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_desc_key.nextTree());

                }
                stream_desc_key.reset();
                // OracleParser.g:571:69: ( nulls_key )?
                if ( stream_nulls_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_nulls_key.nextTree());

                }
                stream_nulls_key.reset();
                // OracleParser.g:571:80: ( first_key )?
                if ( stream_first_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_first_key.nextTree());

                }
                stream_first_key.reset();
                // OracleParser.g:571:91: ( last_key )?
                if ( stream_last_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_last_key.nextTree());

                }
                stream_last_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 848, order_by_elements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_by_elements"

    public static class for_update_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_update_clause"
    // OracleParser.g:574:1: for_update_clause : for_key update_key ( for_update_of_part )? ( for_update_options )? -> ^( for_key ( for_update_of_part )? ( for_update_options )? ) ;
    public final OracleParser.for_update_clause_return for_update_clause() throws RecognitionException {
        OracleParser.for_update_clause_return retval = new OracleParser.for_update_clause_return();
        retval.start = input.LT(1);
        int for_update_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.for_key_return for_key377 = null;

        OracleParser_Keys.update_key_return update_key378 = null;

        OracleParser.for_update_of_part_return for_update_of_part379 = null;

        OracleParser.for_update_options_return for_update_options380 = null;


        RewriteRuleSubtreeStream stream_for_update_of_part=new RewriteRuleSubtreeStream(adaptor,"rule for_update_of_part");
        RewriteRuleSubtreeStream stream_for_update_options=new RewriteRuleSubtreeStream(adaptor,"rule for_update_options");
        RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 849) ) { return retval; }
            // OracleParser.g:575:5: ( for_key update_key ( for_update_of_part )? ( for_update_options )? -> ^( for_key ( for_update_of_part )? ( for_update_options )? ) )
            // OracleParser.g:575:10: for_key update_key ( for_update_of_part )? ( for_update_options )?
            {
            pushFollow(FOLLOW_for_key_in_for_update_clause5133);
            for_key377=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key377.getTree());
            pushFollow(FOLLOW_update_key_in_for_update_clause5135);
            update_key378=update_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_update_key.add(update_key378.getTree());
            // OracleParser.g:575:29: ( for_update_of_part )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==SQL92_RESERVED_OF) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // OracleParser.g:0:0: for_update_of_part
                    {
                    pushFollow(FOLLOW_for_update_of_part_in_for_update_clause5137);
                    for_update_of_part379=for_update_of_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_for_update_of_part.add(for_update_of_part379.getTree());

                    }
                    break;

            }

            // OracleParser.g:575:49: ( for_update_options )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("log")))) {
                int LA127_1 = input.LA(2);

                if ( ((LA127_1>=UNSIGNED_INTEGER && LA127_1<=MINUS_SIGN)||LA127_1==NATIONAL_CHAR_STRING_LIT||(LA127_1>=EXACT_NUM_LIT && LA127_1<=CHAR_STRING)||LA127_1==CHAR_STRING_PERL||LA127_1==DELIMITED_ID||LA127_1==LEFT_PAREN||LA127_1==PLUS_SIGN||LA127_1==COLON||LA127_1==BINDVAR||LA127_1==INTRODUCER||LA127_1==SQL92_RESERVED_ALL||LA127_1==SQL92_RESERVED_ANY||LA127_1==SQL92_RESERVED_CASE||LA127_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA127_1>=SQL92_RESERVED_CURSOR && LA127_1<=SQL92_RESERVED_DATE)||LA127_1==SQL92_RESERVED_DEFAULT||LA127_1==SQL92_RESERVED_DISTINCT||(LA127_1>=SQL92_RESERVED_EXISTS && LA127_1<=SQL92_RESERVED_FALSE)||LA127_1==SQL92_RESERVED_NOT||LA127_1==SQL92_RESERVED_NULL||LA127_1==SQL92_RESERVED_PRIOR||LA127_1==SQL92_RESERVED_TRUE) ) {
                    alt127=1;
                }
                else if ( (LA127_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("log")))) {
                    int LA127_4 = input.LA(3);

                    if ( (((synpred165_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("skip")))||(synpred165_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("wait"))))) ) {
                        alt127=1;
                    }
                }
            }
            else if ( (LA127_0==PLSQL_RESERVED_NOWAIT) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // OracleParser.g:0:0: for_update_options
                    {
                    pushFollow(FOLLOW_for_update_options_in_for_update_clause5140);
                    for_update_options380=for_update_options();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_for_update_options.add(for_update_options380.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: for_key, for_update_options, for_update_of_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:9: -> ^( for_key ( for_update_of_part )? ( for_update_options )? )
            {
                // OracleParser.g:576:12: ^( for_key ( for_update_of_part )? ( for_update_options )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_for_key.nextNode(), root_1);

                // OracleParser.g:576:22: ( for_update_of_part )?
                if ( stream_for_update_of_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_update_of_part.nextTree());

                }
                stream_for_update_of_part.reset();
                // OracleParser.g:576:42: ( for_update_options )?
                if ( stream_for_update_options.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_update_options.nextTree());

                }
                stream_for_update_options.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 849, for_update_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_update_clause"

    public static class for_update_of_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_update_of_part"
    // OracleParser.g:579:1: for_update_of_part : of_key column_name ( COMMA column_name )* ;
    public final OracleParser.for_update_of_part_return for_update_of_part() throws RecognitionException {
        OracleParser.for_update_of_part_return retval = new OracleParser.for_update_of_part_return();
        retval.start = input.LT(1);
        int for_update_of_part_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA383=null;
        OracleParser_Keys.of_key_return of_key381 = null;

        OracleParser_Commons.column_name_return column_name382 = null;

        OracleParser_Commons.column_name_return column_name384 = null;


        Object COMMA383_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 850) ) { return retval; }
            // OracleParser.g:580:5: ( of_key column_name ( COMMA column_name )* )
            // OracleParser.g:580:10: of_key column_name ( COMMA column_name )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_of_key_in_for_update_of_part5181);
            of_key381=of_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(of_key381.getTree(), root_0);
            pushFollow(FOLLOW_column_name_in_for_update_of_part5184);
            column_name382=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name382.getTree());
            // OracleParser.g:580:30: ( COMMA column_name )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==COMMA) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // OracleParser.g:580:31: COMMA column_name
            	    {
            	    COMMA383=(Token)match(input,COMMA,FOLLOW_COMMA_in_for_update_of_part5187); if (state.failed) return retval;
            	    pushFollow(FOLLOW_column_name_in_for_update_of_part5190);
            	    column_name384=column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name384.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 850, for_update_of_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_update_of_part"

    public static class for_update_options_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_update_options"
    // OracleParser.g:583:1: for_update_options : ( skip_key locked_key | nowait_key | wait_key expression -> ^( wait_key ^( EXPR expression ) ) );
    public final OracleParser.for_update_options_return for_update_options() throws RecognitionException {
        OracleParser.for_update_options_return retval = new OracleParser.for_update_options_return();
        retval.start = input.LT(1);
        int for_update_options_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.skip_key_return skip_key385 = null;

        OracleParser_Keys.locked_key_return locked_key386 = null;

        OracleParser_Keys.nowait_key_return nowait_key387 = null;

        OracleParser_Keys.wait_key_return wait_key388 = null;

        OracleParser.expression_return expression389 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_wait_key=new RewriteRuleSubtreeStream(adaptor,"rule wait_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 851) ) { return retval; }
            // OracleParser.g:584:5: ( skip_key locked_key | nowait_key | wait_key expression -> ^( wait_key ^( EXPR expression ) ) )
            int alt129=3;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("wait")))) {
                int LA129_1 = input.LA(2);

                if ( ((LA129_1>=UNSIGNED_INTEGER && LA129_1<=MINUS_SIGN)||LA129_1==NATIONAL_CHAR_STRING_LIT||(LA129_1>=EXACT_NUM_LIT && LA129_1<=CHAR_STRING)||LA129_1==CHAR_STRING_PERL||LA129_1==DELIMITED_ID||LA129_1==LEFT_PAREN||LA129_1==PLUS_SIGN||LA129_1==COLON||LA129_1==BINDVAR||LA129_1==INTRODUCER||LA129_1==SQL92_RESERVED_ALL||LA129_1==SQL92_RESERVED_ANY||LA129_1==SQL92_RESERVED_CASE||LA129_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA129_1>=SQL92_RESERVED_CURSOR && LA129_1<=SQL92_RESERVED_DATE)||LA129_1==SQL92_RESERVED_DEFAULT||LA129_1==SQL92_RESERVED_DISTINCT||(LA129_1>=SQL92_RESERVED_EXISTS && LA129_1<=SQL92_RESERVED_FALSE)||LA129_1==SQL92_RESERVED_NOT||LA129_1==SQL92_RESERVED_NULL||LA129_1==SQL92_RESERVED_PRIOR||LA129_1==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("wait")))) {
                    alt129=3;
                }
                else if ( (LA129_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("wait")))) {
                    int LA129_4 = input.LA(3);

                    if ( ((synpred167_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("skip")))) ) {
                        alt129=1;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("wait"))) ) {
                        alt129=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 129, 4, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 129, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA129_0==PLSQL_RESERVED_NOWAIT) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // OracleParser.g:584:10: skip_key locked_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_skip_key_in_for_update_options5212);
                    skip_key385=skip_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, skip_key385.getTree());
                    pushFollow(FOLLOW_locked_key_in_for_update_options5214);
                    locked_key386=locked_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // OracleParser.g:585:10: nowait_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nowait_key_in_for_update_options5226);
                    nowait_key387=nowait_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nowait_key387.getTree());

                    }
                    break;
                case 3 :
                    // OracleParser.g:586:10: wait_key expression
                    {
                    pushFollow(FOLLOW_wait_key_in_for_update_options5237);
                    wait_key388=wait_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wait_key.add(wait_key388.getTree());
                    pushFollow(FOLLOW_expression_in_for_update_options5239);
                    expression389=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression389.getTree());


                    // AST REWRITE
                    // elements: expression, wait_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 586:30: -> ^( wait_key ^( EXPR expression ) )
                    {
                        // OracleParser.g:586:33: ^( wait_key ^( EXPR expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_wait_key.nextNode(), root_1);

                        // OracleParser.g:586:44: ^( EXPR expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 851, for_update_options_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_update_options"

    public static class update_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_statement"
    // OracleParser.g:591:1: update_statement : update_key general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? -> ^( UPDATE_STATEMENT general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) ;
    public final OracleParser.update_statement_return update_statement() throws RecognitionException {
        OracleParser.update_statement_return retval = new OracleParser.update_statement_return();
        retval.start = input.LT(1);
        int update_statement_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.update_key_return update_key390 = null;

        OracleParser.general_table_ref_return general_table_ref391 = null;

        OracleParser.update_set_clause_return update_set_clause392 = null;

        OracleParser_Commons.where_clause_return where_clause393 = null;

        OracleParser.static_returning_clause_return static_returning_clause394 = null;

        OracleParser.error_logging_clause_return error_logging_clause395 = null;


        RewriteRuleSubtreeStream stream_general_table_ref=new RewriteRuleSubtreeStream(adaptor,"rule general_table_ref");
        RewriteRuleSubtreeStream stream_update_set_clause=new RewriteRuleSubtreeStream(adaptor,"rule update_set_clause");
        RewriteRuleSubtreeStream stream_static_returning_clause=new RewriteRuleSubtreeStream(adaptor,"rule static_returning_clause");
        RewriteRuleSubtreeStream stream_error_logging_clause=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_clause");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 852) ) { return retval; }
            // OracleParser.g:592:5: ( update_key general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? -> ^( UPDATE_STATEMENT general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) )
            // OracleParser.g:592:10: update_key general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )?
            {
            pushFollow(FOLLOW_update_key_in_update_statement5273);
            update_key390=update_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_update_key.add(update_key390.getTree());
            pushFollow(FOLLOW_general_table_ref_in_update_statement5275);
            general_table_ref391=general_table_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_general_table_ref.add(general_table_ref391.getTree());
            pushFollow(FOLLOW_update_set_clause_in_update_statement5285);
            update_set_clause392=update_set_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_update_set_clause.add(update_set_clause392.getTree());
            // OracleParser.g:594:9: ( where_clause )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==SQL92_RESERVED_WHERE) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // OracleParser.g:0:0: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_update_statement5295);
                    where_clause393=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause393.getTree());

                    }
                    break;

            }

            // OracleParser.g:594:23: ( static_returning_clause )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==REGULAR_ID) ) {
                int LA131_1 = input.LA(2);

                if ( (((synpred170_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("returning")))||(synpred170_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("return"))))) ) {
                    alt131=1;
                }
            }
            switch (alt131) {
                case 1 :
                    // OracleParser.g:0:0: static_returning_clause
                    {
                    pushFollow(FOLLOW_static_returning_clause_in_update_statement5298);
                    static_returning_clause394=static_returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_static_returning_clause.add(static_returning_clause394.getTree());

                    }
                    break;

            }

            // OracleParser.g:594:48: ( error_logging_clause )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("log")))) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // OracleParser.g:0:0: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_update_statement5301);
                    error_logging_clause395=error_logging_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_clause.add(error_logging_clause395.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: static_returning_clause, error_logging_clause, where_clause, general_table_ref, update_set_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 595:3: -> ^( UPDATE_STATEMENT general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
            {
                // OracleParser.g:595:6: ^( UPDATE_STATEMENT general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UPDATE_STATEMENT, "UPDATE_STATEMENT"), root_1);

                adaptor.addChild(root_1, stream_general_table_ref.nextTree());
                adaptor.addChild(root_1, stream_update_set_clause.nextTree());
                // OracleParser.g:595:61: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();
                // OracleParser.g:595:75: ( static_returning_clause )?
                if ( stream_static_returning_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_static_returning_clause.nextTree());

                }
                stream_static_returning_clause.reset();
                // OracleParser.g:595:100: ( error_logging_clause )?
                if ( stream_error_logging_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_clause.nextTree());

                }
                stream_error_logging_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 852, update_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_statement"

    public static class update_set_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_set_clause"
    // OracleParser.g:599:1: update_set_clause : set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id RIGHT_PAREN EQUALS_OP expression ) -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ ) -> ^( set_key ^( value_key id ^( EXPR expression ) ) ) ;
    public final OracleParser.update_set_clause_return update_set_clause() throws RecognitionException {
        OracleParser.update_set_clause_return retval = new OracleParser.update_set_clause_return();
        retval.start = input.LT(1);
        int update_set_clause_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA398=null;
        Token LEFT_PAREN401=null;
        Token RIGHT_PAREN403=null;
        Token EQUALS_OP404=null;
        OracleParser_Keys.set_key_return set_key396 = null;

        OracleParser.column_based_update_set_clause_return column_based_update_set_clause397 = null;

        OracleParser.column_based_update_set_clause_return column_based_update_set_clause399 = null;

        OracleParser_Keys.value_key_return value_key400 = null;

        OracleParser_Commons.id_return id402 = null;

        OracleParser.expression_return expression405 = null;


        Object COMMA398_tree=null;
        Object LEFT_PAREN401_tree=null;
        Object RIGHT_PAREN403_tree=null;
        Object EQUALS_OP404_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_value_key=new RewriteRuleSubtreeStream(adaptor,"rule value_key");
        RewriteRuleSubtreeStream stream_column_based_update_set_clause=new RewriteRuleSubtreeStream(adaptor,"rule column_based_update_set_clause");
        RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
            int mode = 0;    
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 853) ) { return retval; }
            // OracleParser.g:601:5: ( set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id RIGHT_PAREN EQUALS_OP expression ) -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ ) -> ^( set_key ^( value_key id ^( EXPR expression ) ) ) )
            // OracleParser.g:601:10: set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id RIGHT_PAREN EQUALS_OP expression )
            {
            pushFollow(FOLLOW_set_key_in_update_set_clause5352);
            set_key396=set_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_set_key.add(set_key396.getTree());
            // OracleParser.g:602:5: ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id RIGHT_PAREN EQUALS_OP expression )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==DELIMITED_ID||LA134_0==LEFT_PAREN||LA134_0==INTRODUCER) ) {
                alt134=1;
            }
            else if ( (LA134_0==REGULAR_ID) ) {
                int LA134_2 = input.LA(2);

                if ( (LA134_2==PERIOD||LA134_2==EQUALS_OP) ) {
                    alt134=1;
                }
                else if ( (LA134_2==LEFT_PAREN) ) {
                    alt134=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    // OracleParser.g:602:10: column_based_update_set_clause ( COMMA column_based_update_set_clause )*
                    {
                    pushFollow(FOLLOW_column_based_update_set_clause_in_update_set_clause5363);
                    column_based_update_set_clause397=column_based_update_set_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_based_update_set_clause.add(column_based_update_set_clause397.getTree());
                    // OracleParser.g:602:41: ( COMMA column_based_update_set_clause )*
                    loop133:
                    do {
                        int alt133=2;
                        int LA133_0 = input.LA(1);

                        if ( (LA133_0==COMMA) ) {
                            alt133=1;
                        }


                        switch (alt133) {
                    	case 1 :
                    	    // OracleParser.g:602:42: COMMA column_based_update_set_clause
                    	    {
                    	    COMMA398=(Token)match(input,COMMA,FOLLOW_COMMA_in_update_set_clause5366); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA398);

                    	    pushFollow(FOLLOW_column_based_update_set_clause_in_update_set_clause5368);
                    	    column_based_update_set_clause399=column_based_update_set_clause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_based_update_set_clause.add(column_based_update_set_clause399.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop133;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      mode = 1;
                    }

                    }
                    break;
                case 2 :
                    // OracleParser.g:603:10: value_key LEFT_PAREN id RIGHT_PAREN EQUALS_OP expression
                    {
                    pushFollow(FOLLOW_value_key_in_update_set_clause5383);
                    value_key400=value_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_value_key.add(value_key400.getTree());
                    LEFT_PAREN401=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_update_set_clause5385); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN401);

                    pushFollow(FOLLOW_id_in_update_set_clause5387);
                    id402=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_id.add(id402.getTree());
                    RIGHT_PAREN403=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_update_set_clause5389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN403);

                    EQUALS_OP404=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_update_set_clause5391); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP404);

                    pushFollow(FOLLOW_expression_in_update_set_clause5393);
                    expression405=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression405.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: id, set_key, value_key, set_key, expression, column_based_update_set_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:9: -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ )
            if (mode == 1) {
                // OracleParser.g:605:24: ^( set_key ( column_based_update_set_clause )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_set_key.nextNode(), root_1);

                if ( !(stream_column_based_update_set_clause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_based_update_set_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_based_update_set_clause.nextTree());

                }
                stream_column_based_update_set_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 606:9: -> ^( set_key ^( value_key id ^( EXPR expression ) ) )
            {
                // OracleParser.g:606:12: ^( set_key ^( value_key id ^( EXPR expression ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_set_key.nextNode(), root_1);

                // OracleParser.g:606:22: ^( value_key id ^( EXPR expression ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_value_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_id.nextTree());
                // OracleParser.g:606:37: ^( EXPR expression )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);

                adaptor.addChild(root_3, stream_expression.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 853, update_set_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_set_clause"

    public static class column_based_update_set_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "column_based_update_set_clause"
    // OracleParser.g:609:1: column_based_update_set_clause : ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery ) );
    public final OracleParser.column_based_update_set_clause_return column_based_update_set_clause() throws RecognitionException {
        OracleParser.column_based_update_set_clause_return retval = new OracleParser.column_based_update_set_clause_return();
        retval.start = input.LT(1);
        int column_based_update_set_clause_StartIndex = input.index();
        Object root_0 = null;

        Token EQUALS_OP407=null;
        Token LEFT_PAREN409=null;
        Token COMMA411=null;
        Token RIGHT_PAREN413=null;
        Token EQUALS_OP414=null;
        OracleParser_Commons.column_name_return column_name406 = null;

        OracleParser.expression_return expression408 = null;

        OracleParser_Commons.column_name_return column_name410 = null;

        OracleParser_Commons.column_name_return column_name412 = null;

        OracleParser.subquery_return subquery415 = null;


        Object EQUALS_OP407_tree=null;
        Object LEFT_PAREN409_tree=null;
        Object COMMA411_tree=null;
        Object RIGHT_PAREN413_tree=null;
        Object EQUALS_OP414_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 854) ) { return retval; }
            // OracleParser.g:610:5: ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery ) )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==DELIMITED_ID||LA136_0==INTRODUCER||LA136_0==REGULAR_ID) ) {
                alt136=1;
            }
            else if ( (LA136_0==LEFT_PAREN) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    // OracleParser.g:610:10: column_name EQUALS_OP expression
                    {
                    pushFollow(FOLLOW_column_name_in_column_based_update_set_clause5463);
                    column_name406=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name406.getTree());
                    EQUALS_OP407=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_column_based_update_set_clause5465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP407);

                    pushFollow(FOLLOW_expression_in_column_based_update_set_clause5467);
                    expression408=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression408.getTree());


                    // AST REWRITE
                    // elements: expression, column_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 610:43: -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
                    {
                        // OracleParser.g:610:46: ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, EQUALS_OP407), root_1);

                        adaptor.addChild(root_1, stream_column_name.nextTree());
                        // OracleParser.g:610:79: ^( EXPR expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:611:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery
                    {
                    LEFT_PAREN409=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN409);

                    pushFollow(FOLLOW_column_name_in_column_based_update_set_clause5495);
                    column_name410=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name410.getTree());
                    // OracleParser.g:611:33: ( COMMA column_name )*
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==COMMA) ) {
                            alt135=1;
                        }


                        switch (alt135) {
                    	case 1 :
                    	    // OracleParser.g:611:34: COMMA column_name
                    	    {
                    	    COMMA411=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_based_update_set_clause5498); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA411);

                    	    pushFollow(FOLLOW_column_name_in_column_based_update_set_clause5500);
                    	    column_name412=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name412.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);

                    RIGHT_PAREN413=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN413);

                    EQUALS_OP414=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_column_based_update_set_clause5506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP414);

                    pushFollow(FOLLOW_subquery_in_column_based_update_set_clause5508);
                    subquery415=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery415.getTree());


                    // AST REWRITE
                    // elements: column_name, subquery
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 611:85: -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery )
                    {
                        // OracleParser.g:611:88: ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, EQUALS_OP414), root_1);

                        if ( !(stream_column_name.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_column_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_column_name.nextTree());

                        }
                        stream_column_name.reset();
                        adaptor.addChild(root_1, stream_subquery.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 854, column_based_update_set_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "column_based_update_set_clause"

    public static class delete_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delete_statement"
    // OracleParser.g:616:1: delete_statement : delete_key ( from_key )? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? -> ^( DELETE_STATEMENT general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) ;
    public final OracleParser.delete_statement_return delete_statement() throws RecognitionException {
        OracleParser.delete_statement_return retval = new OracleParser.delete_statement_return();
        retval.start = input.LT(1);
        int delete_statement_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.delete_key_return delete_key416 = null;

        OracleParser_Keys.from_key_return from_key417 = null;

        OracleParser.general_table_ref_return general_table_ref418 = null;

        OracleParser_Commons.where_clause_return where_clause419 = null;

        OracleParser.static_returning_clause_return static_returning_clause420 = null;

        OracleParser.error_logging_clause_return error_logging_clause421 = null;


        RewriteRuleSubtreeStream stream_general_table_ref=new RewriteRuleSubtreeStream(adaptor,"rule general_table_ref");
        RewriteRuleSubtreeStream stream_static_returning_clause=new RewriteRuleSubtreeStream(adaptor,"rule static_returning_clause");
        RewriteRuleSubtreeStream stream_error_logging_clause=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_clause");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_delete_key=new RewriteRuleSubtreeStream(adaptor,"rule delete_key");
        RewriteRuleSubtreeStream stream_from_key=new RewriteRuleSubtreeStream(adaptor,"rule from_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 855) ) { return retval; }
            // OracleParser.g:617:5: ( delete_key ( from_key )? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? -> ^( DELETE_STATEMENT general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) )
            // OracleParser.g:617:10: delete_key ( from_key )? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )?
            {
            pushFollow(FOLLOW_delete_key_in_delete_statement5542);
            delete_key416=delete_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delete_key.add(delete_key416.getTree());
            // OracleParser.g:617:21: ( from_key )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==SQL92_RESERVED_FROM) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // OracleParser.g:0:0: from_key
                    {
                    pushFollow(FOLLOW_from_key_in_delete_statement5544);
                    from_key417=from_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_from_key.add(from_key417.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_general_table_ref_in_delete_statement5555);
            general_table_ref418=general_table_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_general_table_ref.add(general_table_ref418.getTree());
            // OracleParser.g:619:9: ( where_clause )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==SQL92_RESERVED_WHERE) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // OracleParser.g:0:0: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_delete_statement5565);
                    where_clause419=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause419.getTree());

                    }
                    break;

            }

            // OracleParser.g:619:23: ( static_returning_clause )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==REGULAR_ID) ) {
                int LA139_1 = input.LA(2);

                if ( (((synpred178_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("return")))||(synpred178_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("returning"))))) ) {
                    alt139=1;
                }
            }
            switch (alt139) {
                case 1 :
                    // OracleParser.g:0:0: static_returning_clause
                    {
                    pushFollow(FOLLOW_static_returning_clause_in_delete_statement5568);
                    static_returning_clause420=static_returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_static_returning_clause.add(static_returning_clause420.getTree());

                    }
                    break;

            }

            // OracleParser.g:619:48: ( error_logging_clause )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("log")))) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // OracleParser.g:0:0: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_delete_statement5571);
                    error_logging_clause421=error_logging_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_clause.add(error_logging_clause421.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: static_returning_clause, general_table_ref, where_clause, error_logging_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 620:3: -> ^( DELETE_STATEMENT general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
            {
                // OracleParser.g:620:6: ^( DELETE_STATEMENT general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DELETE_STATEMENT, "DELETE_STATEMENT"), root_1);

                adaptor.addChild(root_1, stream_general_table_ref.nextTree());
                // OracleParser.g:620:43: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();
                // OracleParser.g:620:57: ( static_returning_clause )?
                if ( stream_static_returning_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_static_returning_clause.nextTree());

                }
                stream_static_returning_clause.reset();
                // OracleParser.g:620:82: ( error_logging_clause )?
                if ( stream_error_logging_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_clause.nextTree());

                }
                stream_error_logging_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 855, delete_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delete_statement"

    public static class insert_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert_statement"
    // OracleParser.g:623:1: insert_statement : insert_key ( single_table_insert -> ^( INSERT_STATEMENT single_table_insert ) | multi_table_insert -> ^( INSERT_STATEMENT multi_table_insert ) ) ;
    public final OracleParser.insert_statement_return insert_statement() throws RecognitionException {
        OracleParser.insert_statement_return retval = new OracleParser.insert_statement_return();
        retval.start = input.LT(1);
        int insert_statement_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.insert_key_return insert_key422 = null;

        OracleParser.single_table_insert_return single_table_insert423 = null;

        OracleParser.multi_table_insert_return multi_table_insert424 = null;


        RewriteRuleSubtreeStream stream_single_table_insert=new RewriteRuleSubtreeStream(adaptor,"rule single_table_insert");
        RewriteRuleSubtreeStream stream_insert_key=new RewriteRuleSubtreeStream(adaptor,"rule insert_key");
        RewriteRuleSubtreeStream stream_multi_table_insert=new RewriteRuleSubtreeStream(adaptor,"rule multi_table_insert");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 856) ) { return retval; }
            // OracleParser.g:624:5: ( insert_key ( single_table_insert -> ^( INSERT_STATEMENT single_table_insert ) | multi_table_insert -> ^( INSERT_STATEMENT multi_table_insert ) ) )
            // OracleParser.g:624:10: insert_key ( single_table_insert -> ^( INSERT_STATEMENT single_table_insert ) | multi_table_insert -> ^( INSERT_STATEMENT multi_table_insert ) )
            {
            pushFollow(FOLLOW_insert_key_in_insert_statement5611);
            insert_key422=insert_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insert_key.add(insert_key422.getTree());
            // OracleParser.g:625:5: ( single_table_insert -> ^( INSERT_STATEMENT single_table_insert ) | multi_table_insert -> ^( INSERT_STATEMENT multi_table_insert ) )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==SQL92_RESERVED_INTO) ) {
                alt141=1;
            }
            else if ( (LA141_0==SQL92_RESERVED_ALL) ) {
                alt141=2;
            }
            else if ( (LA141_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("first")))) {
                alt141=2;
            }
            else if ( (LA141_0==SQL92_RESERVED_WHEN) ) {
                alt141=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // OracleParser.g:625:10: single_table_insert
                    {
                    pushFollow(FOLLOW_single_table_insert_in_insert_statement5622);
                    single_table_insert423=single_table_insert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_single_table_insert.add(single_table_insert423.getTree());


                    // AST REWRITE
                    // elements: single_table_insert
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 625:30: -> ^( INSERT_STATEMENT single_table_insert )
                    {
                        // OracleParser.g:625:33: ^( INSERT_STATEMENT single_table_insert )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INSERT_STATEMENT, "INSERT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_single_table_insert.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:626:10: multi_table_insert
                    {
                    pushFollow(FOLLOW_multi_table_insert_in_insert_statement5641);
                    multi_table_insert424=multi_table_insert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_multi_table_insert.add(multi_table_insert424.getTree());


                    // AST REWRITE
                    // elements: multi_table_insert
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 626:29: -> ^( INSERT_STATEMENT multi_table_insert )
                    {
                        // OracleParser.g:626:32: ^( INSERT_STATEMENT multi_table_insert )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INSERT_STATEMENT, "INSERT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_multi_table_insert.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 856, insert_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "insert_statement"

    public static class single_table_insert_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "single_table_insert"
    // OracleParser.g:632:1: single_table_insert : insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? ) ;
    public final OracleParser.single_table_insert_return single_table_insert() throws RecognitionException {
        OracleParser.single_table_insert_return retval = new OracleParser.single_table_insert_return();
        retval.start = input.LT(1);
        int single_table_insert_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.insert_into_clause_return insert_into_clause425 = null;

        OracleParser.values_clause_return values_clause426 = null;

        OracleParser.static_returning_clause_return static_returning_clause427 = null;

        OracleParser.select_statement_return select_statement428 = null;

        OracleParser.error_logging_clause_return error_logging_clause429 = null;


        RewriteRuleSubtreeStream stream_static_returning_clause=new RewriteRuleSubtreeStream(adaptor,"rule static_returning_clause");
        RewriteRuleSubtreeStream stream_values_clause=new RewriteRuleSubtreeStream(adaptor,"rule values_clause");
        RewriteRuleSubtreeStream stream_insert_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule insert_into_clause");
        RewriteRuleSubtreeStream stream_error_logging_clause=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_clause");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 857) ) { return retval; }
            // OracleParser.g:633:5: ( insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? ) )
            // OracleParser.g:633:10: insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )?
            {
            pushFollow(FOLLOW_insert_into_clause_in_single_table_insert5677);
            insert_into_clause425=insert_into_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insert_into_clause.add(insert_into_clause425.getTree());
            // OracleParser.g:634:5: ( values_clause ( static_returning_clause )? | select_statement )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==SQL92_RESERVED_VALUES) ) {
                alt143=1;
            }
            else if ( (LA143_0==LEFT_PAREN||LA143_0==SQL92_RESERVED_SELECT||LA143_0==SQL92_RESERVED_WITH) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // OracleParser.g:634:10: values_clause ( static_returning_clause )?
                    {
                    pushFollow(FOLLOW_values_clause_in_single_table_insert5688);
                    values_clause426=values_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_values_clause.add(values_clause426.getTree());
                    // OracleParser.g:634:24: ( static_returning_clause )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==REGULAR_ID) ) {
                        int LA142_1 = input.LA(2);

                        if ( (((synpred181_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("returning")))||(synpred181_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("return"))))) ) {
                            alt142=1;
                        }
                    }
                    switch (alt142) {
                        case 1 :
                            // OracleParser.g:0:0: static_returning_clause
                            {
                            pushFollow(FOLLOW_static_returning_clause_in_single_table_insert5690);
                            static_returning_clause427=static_returning_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_static_returning_clause.add(static_returning_clause427.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // OracleParser.g:635:10: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_single_table_insert5702);
                    select_statement428=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_statement.add(select_statement428.getTree());

                    }
                    break;

            }

            // OracleParser.g:637:9: ( error_logging_clause )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("log")))) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // OracleParser.g:0:0: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_single_table_insert5718);
                    error_logging_clause429=error_logging_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_clause.add(error_logging_clause429.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: values_clause, insert_into_clause, error_logging_clause, select_statement, static_returning_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 638:9: -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? )
            {
                // OracleParser.g:638:12: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SINGLE_TABLE_MODE, "SINGLE_TABLE_MODE"), root_1);

                adaptor.addChild(root_1, stream_insert_into_clause.nextTree());
                // OracleParser.g:638:51: ( values_clause )?
                if ( stream_values_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_values_clause.nextTree());

                }
                stream_values_clause.reset();
                // OracleParser.g:638:66: ( static_returning_clause )?
                if ( stream_static_returning_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_static_returning_clause.nextTree());

                }
                stream_static_returning_clause.reset();
                // OracleParser.g:638:91: ( select_statement )?
                if ( stream_select_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_select_statement.nextTree());

                }
                stream_select_statement.reset();
                // OracleParser.g:638:109: ( error_logging_clause )?
                if ( stream_error_logging_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_clause.nextTree());

                }
                stream_error_logging_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 857, single_table_insert_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "single_table_insert"

    public static class multi_table_insert_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multi_table_insert"
    // OracleParser.g:641:1: multi_table_insert : ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement -> ^( MULTI_TABLE_MODE select_statement ( multi_table_element )* ( conditional_insert_clause )? ) ;
    public final OracleParser.multi_table_insert_return multi_table_insert() throws RecognitionException {
        OracleParser.multi_table_insert_return retval = new OracleParser.multi_table_insert_return();
        retval.start = input.LT(1);
        int multi_table_insert_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.all_key_return all_key430 = null;

        OracleParser.multi_table_element_return multi_table_element431 = null;

        OracleParser.conditional_insert_clause_return conditional_insert_clause432 = null;

        OracleParser.select_statement_return select_statement433 = null;


        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_multi_table_element=new RewriteRuleSubtreeStream(adaptor,"rule multi_table_element");
        RewriteRuleSubtreeStream stream_conditional_insert_clause=new RewriteRuleSubtreeStream(adaptor,"rule conditional_insert_clause");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 858) ) { return retval; }
            // OracleParser.g:642:5: ( ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement -> ^( MULTI_TABLE_MODE select_statement ( multi_table_element )* ( conditional_insert_clause )? ) )
            // OracleParser.g:643:5: ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement
            {
            // OracleParser.g:643:5: ( all_key ( multi_table_element )+ | conditional_insert_clause )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==SQL92_RESERVED_ALL) ) {
                int LA146_1 = input.LA(2);

                if ( (LA146_1==SQL92_RESERVED_INTO) ) {
                    alt146=1;
                }
                else if ( (LA146_1==SQL92_RESERVED_WHEN) ) {
                    alt146=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA146_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("first")))) {
                alt146=2;
            }
            else if ( (LA146_0==SQL92_RESERVED_WHEN) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    // OracleParser.g:643:10: all_key ( multi_table_element )+
                    {
                    pushFollow(FOLLOW_all_key_in_multi_table_insert5777);
                    all_key430=all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_all_key.add(all_key430.getTree());
                    // OracleParser.g:643:18: ( multi_table_element )+
                    int cnt145=0;
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==SQL92_RESERVED_INTO) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // OracleParser.g:0:0: multi_table_element
                    	    {
                    	    pushFollow(FOLLOW_multi_table_element_in_multi_table_insert5779);
                    	    multi_table_element431=multi_table_element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_multi_table_element.add(multi_table_element431.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt145 >= 1 ) break loop145;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(145, input);
                                throw eee;
                        }
                        cnt145++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // OracleParser.g:644:10: conditional_insert_clause
                    {
                    pushFollow(FOLLOW_conditional_insert_clause_in_multi_table_insert5791);
                    conditional_insert_clause432=conditional_insert_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditional_insert_clause.add(conditional_insert_clause432.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_select_statement_in_multi_table_insert5807);
            select_statement433=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_select_statement.add(select_statement433.getTree());


            // AST REWRITE
            // elements: conditional_insert_clause, select_statement, multi_table_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 647:9: -> ^( MULTI_TABLE_MODE select_statement ( multi_table_element )* ( conditional_insert_clause )? )
            {
                // OracleParser.g:647:12: ^( MULTI_TABLE_MODE select_statement ( multi_table_element )* ( conditional_insert_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTI_TABLE_MODE, "MULTI_TABLE_MODE"), root_1);

                adaptor.addChild(root_1, stream_select_statement.nextTree());
                // OracleParser.g:647:48: ( multi_table_element )*
                while ( stream_multi_table_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_multi_table_element.nextTree());

                }
                stream_multi_table_element.reset();
                // OracleParser.g:647:69: ( conditional_insert_clause )?
                if ( stream_conditional_insert_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_conditional_insert_clause.nextTree());

                }
                stream_conditional_insert_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 858, multi_table_insert_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multi_table_insert"

    public static class multi_table_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multi_table_element"
    // OracleParser.g:650:1: multi_table_element : insert_into_clause ( values_clause )? ( error_logging_clause )? -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) ;
    public final OracleParser.multi_table_element_return multi_table_element() throws RecognitionException {
        OracleParser.multi_table_element_return retval = new OracleParser.multi_table_element_return();
        retval.start = input.LT(1);
        int multi_table_element_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.insert_into_clause_return insert_into_clause434 = null;

        OracleParser.values_clause_return values_clause435 = null;

        OracleParser.error_logging_clause_return error_logging_clause436 = null;


        RewriteRuleSubtreeStream stream_values_clause=new RewriteRuleSubtreeStream(adaptor,"rule values_clause");
        RewriteRuleSubtreeStream stream_insert_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule insert_into_clause");
        RewriteRuleSubtreeStream stream_error_logging_clause=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_clause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 859) ) { return retval; }
            // OracleParser.g:651:5: ( insert_into_clause ( values_clause )? ( error_logging_clause )? -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) )
            // OracleParser.g:651:10: insert_into_clause ( values_clause )? ( error_logging_clause )?
            {
            pushFollow(FOLLOW_insert_into_clause_in_multi_table_element5849);
            insert_into_clause434=insert_into_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insert_into_clause.add(insert_into_clause434.getTree());
            // OracleParser.g:651:29: ( values_clause )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==SQL92_RESERVED_VALUES) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // OracleParser.g:0:0: values_clause
                    {
                    pushFollow(FOLLOW_values_clause_in_multi_table_element5851);
                    values_clause435=values_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_values_clause.add(values_clause435.getTree());

                    }
                    break;

            }

            // OracleParser.g:651:44: ( error_logging_clause )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("log")))) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // OracleParser.g:0:0: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_multi_table_element5854);
                    error_logging_clause436=error_logging_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_clause.add(error_logging_clause436.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: values_clause, error_logging_clause, insert_into_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 652:9: -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
            {
                // OracleParser.g:652:12: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TABLE_ELEMENT, "TABLE_ELEMENT"), root_1);

                adaptor.addChild(root_1, stream_insert_into_clause.nextTree());
                // OracleParser.g:652:47: ( values_clause )?
                if ( stream_values_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_values_clause.nextTree());

                }
                stream_values_clause.reset();
                // OracleParser.g:652:62: ( error_logging_clause )?
                if ( stream_error_logging_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_clause.nextTree());

                }
                stream_error_logging_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 859, multi_table_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multi_table_element"

    public static class conditional_insert_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditional_insert_clause"
    // OracleParser.g:655:1: conditional_insert_clause : ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) ;
    public final OracleParser.conditional_insert_clause_return conditional_insert_clause() throws RecognitionException {
        OracleParser.conditional_insert_clause_return retval = new OracleParser.conditional_insert_clause_return();
        retval.start = input.LT(1);
        int conditional_insert_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.all_key_return all_key437 = null;

        OracleParser_Keys.first_key_return first_key438 = null;

        OracleParser.conditional_insert_when_part_return conditional_insert_when_part439 = null;

        OracleParser.conditional_insert_else_part_return conditional_insert_else_part440 = null;


        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_conditional_insert_when_part=new RewriteRuleSubtreeStream(adaptor,"rule conditional_insert_when_part");
        RewriteRuleSubtreeStream stream_conditional_insert_else_part=new RewriteRuleSubtreeStream(adaptor,"rule conditional_insert_else_part");
        RewriteRuleSubtreeStream stream_first_key=new RewriteRuleSubtreeStream(adaptor,"rule first_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 860) ) { return retval; }
            // OracleParser.g:656:5: ( ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) )
            // OracleParser.g:656:10: ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )?
            {
            // OracleParser.g:656:10: ( all_key | first_key )?
            int alt149=3;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==SQL92_RESERVED_ALL) ) {
                alt149=1;
            }
            else if ( (LA149_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("first")))) {
                alt149=2;
            }
            switch (alt149) {
                case 1 :
                    // OracleParser.g:656:11: all_key
                    {
                    pushFollow(FOLLOW_all_key_in_conditional_insert_clause5898);
                    all_key437=all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_all_key.add(all_key437.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:656:19: first_key
                    {
                    pushFollow(FOLLOW_first_key_in_conditional_insert_clause5900);
                    first_key438=first_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_first_key.add(first_key438.getTree());

                    }
                    break;

            }

            // OracleParser.g:657:9: ( conditional_insert_when_part )+
            int cnt150=0;
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==SQL92_RESERVED_WHEN) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // OracleParser.g:0:0: conditional_insert_when_part
            	    {
            	    pushFollow(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause5912);
            	    conditional_insert_when_part439=conditional_insert_when_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_conditional_insert_when_part.add(conditional_insert_when_part439.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt150 >= 1 ) break loop150;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(150, input);
                        throw eee;
                }
                cnt150++;
            } while (true);

            // OracleParser.g:657:39: ( conditional_insert_else_part )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==SQL92_RESERVED_ELSE) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // OracleParser.g:0:0: conditional_insert_else_part
                    {
                    pushFollow(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause5915);
                    conditional_insert_else_part440=conditional_insert_else_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditional_insert_else_part.add(conditional_insert_else_part440.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: conditional_insert_else_part, conditional_insert_when_part, all_key, first_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 658:9: -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
            {
                // OracleParser.g:658:12: ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONDITIONAL_INSERT, "CONDITIONAL_INSERT"), root_1);

                // OracleParser.g:658:33: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_all_key.nextTree());

                }
                stream_all_key.reset();
                // OracleParser.g:658:42: ( first_key )?
                if ( stream_first_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_first_key.nextTree());

                }
                stream_first_key.reset();
                if ( !(stream_conditional_insert_when_part.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_conditional_insert_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_conditional_insert_when_part.nextTree());

                }
                stream_conditional_insert_when_part.reset();
                // OracleParser.g:658:83: ( conditional_insert_else_part )?
                if ( stream_conditional_insert_else_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_conditional_insert_else_part.nextTree());

                }
                stream_conditional_insert_else_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 860, conditional_insert_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditional_insert_clause"

    public static class conditional_insert_when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditional_insert_when_part"
    // OracleParser.g:661:1: conditional_insert_when_part : when_key condition then_key ( multi_table_element )+ -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ ) ;
    public final OracleParser.conditional_insert_when_part_return conditional_insert_when_part() throws RecognitionException {
        OracleParser.conditional_insert_when_part_return retval = new OracleParser.conditional_insert_when_part_return();
        retval.start = input.LT(1);
        int conditional_insert_when_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.when_key_return when_key441 = null;

        OracleParser.condition_return condition442 = null;

        OracleParser_Keys.then_key_return then_key443 = null;

        OracleParser.multi_table_element_return multi_table_element444 = null;


        RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_multi_table_element=new RewriteRuleSubtreeStream(adaptor,"rule multi_table_element");
        RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 861) ) { return retval; }
            // OracleParser.g:662:5: ( when_key condition then_key ( multi_table_element )+ -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ ) )
            // OracleParser.g:662:10: when_key condition then_key ( multi_table_element )+
            {
            pushFollow(FOLLOW_when_key_in_conditional_insert_when_part5963);
            when_key441=when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_when_key.add(when_key441.getTree());
            pushFollow(FOLLOW_condition_in_conditional_insert_when_part5965);
            condition442=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition442.getTree());
            pushFollow(FOLLOW_then_key_in_conditional_insert_when_part5967);
            then_key443=then_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_then_key.add(then_key443.getTree());
            // OracleParser.g:662:38: ( multi_table_element )+
            int cnt152=0;
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==SQL92_RESERVED_INTO) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // OracleParser.g:0:0: multi_table_element
            	    {
            	    pushFollow(FOLLOW_multi_table_element_in_conditional_insert_when_part5969);
            	    multi_table_element444=multi_table_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multi_table_element.add(multi_table_element444.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt152 >= 1 ) break loop152;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(152, input);
                        throw eee;
                }
                cnt152++;
            } while (true);



            // AST REWRITE
            // elements: when_key, multi_table_element, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 663:9: -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ )
            {
                // OracleParser.g:663:12: ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_when_key.nextNode(), root_1);

                // OracleParser.g:663:23: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_multi_table_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_multi_table_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_multi_table_element.nextTree());

                }
                stream_multi_table_element.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 861, conditional_insert_when_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditional_insert_when_part"

    public static class conditional_insert_else_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditional_insert_else_part"
    // OracleParser.g:666:1: conditional_insert_else_part : else_key ( multi_table_element )+ ;
    public final OracleParser.conditional_insert_else_part_return conditional_insert_else_part() throws RecognitionException {
        OracleParser.conditional_insert_else_part_return retval = new OracleParser.conditional_insert_else_part_return();
        retval.start = input.LT(1);
        int conditional_insert_else_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.else_key_return else_key445 = null;

        OracleParser.multi_table_element_return multi_table_element446 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 862) ) { return retval; }
            // OracleParser.g:667:5: ( else_key ( multi_table_element )+ )
            // OracleParser.g:667:10: else_key ( multi_table_element )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_else_key_in_conditional_insert_else_part6013);
            else_key445=else_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(else_key445.getTree(), root_0);
            // OracleParser.g:667:20: ( multi_table_element )+
            int cnt153=0;
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==SQL92_RESERVED_INTO) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // OracleParser.g:0:0: multi_table_element
            	    {
            	    pushFollow(FOLLOW_multi_table_element_in_conditional_insert_else_part6016);
            	    multi_table_element446=multi_table_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_table_element446.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 862, conditional_insert_else_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditional_insert_else_part"

    public static class insert_into_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert_into_clause"
    // OracleParser.g:670:1: insert_into_clause : into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) ) ;
    public final OracleParser.insert_into_clause_return insert_into_clause() throws RecognitionException {
        OracleParser.insert_into_clause_return retval = new OracleParser.insert_into_clause_return();
        retval.start = input.LT(1);
        int insert_into_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN449=null;
        Token COMMA451=null;
        Token RIGHT_PAREN453=null;
        OracleParser_Keys.into_key_return into_key447 = null;

        OracleParser.general_table_ref_return general_table_ref448 = null;

        OracleParser_Commons.column_name_return column_name450 = null;

        OracleParser_Commons.column_name_return column_name452 = null;


        Object LEFT_PAREN449_tree=null;
        Object COMMA451_tree=null;
        Object RIGHT_PAREN453_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_general_table_ref=new RewriteRuleSubtreeStream(adaptor,"rule general_table_ref");
        RewriteRuleSubtreeStream stream_into_key=new RewriteRuleSubtreeStream(adaptor,"rule into_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 863) ) { return retval; }
            // OracleParser.g:671:5: ( into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) ) )
            // OracleParser.g:671:10: into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
            pushFollow(FOLLOW_into_key_in_insert_into_clause6037);
            into_key447=into_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_into_key.add(into_key447.getTree());
            pushFollow(FOLLOW_general_table_ref_in_insert_into_clause6039);
            general_table_ref448=general_table_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_general_table_ref.add(general_table_ref448.getTree());
            // OracleParser.g:672:9: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==LEFT_PAREN) ) {
                int LA155_1 = input.LA(2);

                if ( (LA155_1==DELIMITED_ID||LA155_1==INTRODUCER||LA155_1==REGULAR_ID) ) {
                    alt155=1;
                }
            }
            switch (alt155) {
                case 1 :
                    // OracleParser.g:672:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN449=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_insert_into_clause6051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN449);

                    pushFollow(FOLLOW_column_name_in_insert_into_clause6053);
                    column_name450=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name450.getTree());
                    // OracleParser.g:672:33: ( COMMA column_name )*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==COMMA) ) {
                            alt154=1;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // OracleParser.g:672:34: COMMA column_name
                    	    {
                    	    COMMA451=(Token)match(input,COMMA,FOLLOW_COMMA_in_insert_into_clause6056); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA451);

                    	    pushFollow(FOLLOW_column_name_in_insert_into_clause6058);
                    	    column_name452=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name452.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);

                    RIGHT_PAREN453=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_insert_into_clause6062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN453);


                    }
                    break;

            }



            // AST REWRITE
            // elements: into_key, general_table_ref, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 673:9: -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) )
            {
                // OracleParser.g:673:12: ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_into_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_general_table_ref.nextTree());
                // OracleParser.g:673:41: ^( COLUMNS ( column_name )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(COLUMNS, "COLUMNS"), root_2);

                // OracleParser.g:673:51: ( column_name )*
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_2, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 863, insert_into_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "insert_into_clause"

    public static class values_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "values_clause"
    // OracleParser.g:676:1: values_clause : values_key expression_list ;
    public final OracleParser.values_clause_return values_clause() throws RecognitionException {
        OracleParser.values_clause_return retval = new OracleParser.values_clause_return();
        retval.start = input.LT(1);
        int values_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.values_key_return values_key454 = null;

        OracleParser.expression_list_return expression_list455 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 864) ) { return retval; }
            // OracleParser.g:677:5: ( values_key expression_list )
            // OracleParser.g:677:10: values_key expression_list
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_values_key_in_values_clause6107);
            values_key454=values_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(values_key454.getTree(), root_0);
            pushFollow(FOLLOW_expression_list_in_values_clause6110);
            expression_list455=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list455.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 864, values_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "values_clause"

    public static class merge_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_statement"
    // OracleParser.g:681:1: merge_statement : merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )? | ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )? )? ( error_logging_clause )? -> ^( MERGE_STATEMENT ( table_alias )? tableview_name ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) ;
    public final OracleParser.merge_statement_return merge_statement() throws RecognitionException {
        OracleParser.merge_statement_return retval = new OracleParser.merge_statement_return();
        retval.start = input.LT(1);
        int merge_statement_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN463=null;
        Token RIGHT_PAREN465=null;
        OracleParser_Keys.merge_key_return merge_key456 = null;

        OracleParser_Keys.into_key_return into_key457 = null;

        OracleParser_Commons.tableview_name_return tableview_name458 = null;

        OracleParser_Commons.table_alias_return table_alias459 = null;

        OracleParser_Keys.using_key_return using_key460 = null;

        OracleParser.selected_tableview_return selected_tableview461 = null;

        OracleParser_Keys.on_key_return on_key462 = null;

        OracleParser.condition_return condition464 = null;

        OracleParser.merge_update_clause_return merge_update_clause466 = null;

        OracleParser.merge_insert_clause_return merge_insert_clause467 = null;

        OracleParser.merge_insert_clause_return merge_insert_clause468 = null;

        OracleParser.merge_update_clause_return merge_update_clause469 = null;

        OracleParser.error_logging_clause_return error_logging_clause470 = null;


        Object LEFT_PAREN463_tree=null;
        Object RIGHT_PAREN465_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_using_key=new RewriteRuleSubtreeStream(adaptor,"rule using_key");
        RewriteRuleSubtreeStream stream_merge_insert_clause=new RewriteRuleSubtreeStream(adaptor,"rule merge_insert_clause");
        RewriteRuleSubtreeStream stream_into_key=new RewriteRuleSubtreeStream(adaptor,"rule into_key");
        RewriteRuleSubtreeStream stream_merge_key=new RewriteRuleSubtreeStream(adaptor,"rule merge_key");
        RewriteRuleSubtreeStream stream_merge_update_clause=new RewriteRuleSubtreeStream(adaptor,"rule merge_update_clause");
        RewriteRuleSubtreeStream stream_error_logging_clause=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_clause");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
        RewriteRuleSubtreeStream stream_selected_tableview=new RewriteRuleSubtreeStream(adaptor,"rule selected_tableview");
        RewriteRuleSubtreeStream stream_on_key=new RewriteRuleSubtreeStream(adaptor,"rule on_key");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 865) ) { return retval; }
            // OracleParser.g:682:5: ( merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )? | ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )? )? ( error_logging_clause )? -> ^( MERGE_STATEMENT ( table_alias )? tableview_name ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) )
            // OracleParser.g:682:10: merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )? | ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )? )? ( error_logging_clause )?
            {
            pushFollow(FOLLOW_merge_key_in_merge_statement6131);
            merge_key456=merge_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_merge_key.add(merge_key456.getTree());
            pushFollow(FOLLOW_into_key_in_merge_statement6133);
            into_key457=into_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_into_key.add(into_key457.getTree());
            pushFollow(FOLLOW_tableview_name_in_merge_statement6135);
            tableview_name458=tableview_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name458.getTree());
            // OracleParser.g:682:44: ( table_alias )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==NATIONAL_CHAR_STRING_LIT||LA156_0==CHAR_STRING||LA156_0==CHAR_STRING_PERL||LA156_0==DELIMITED_ID||LA156_0==INTRODUCER||LA156_0==REGULAR_ID) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // OracleParser.g:0:0: table_alias
                    {
                    pushFollow(FOLLOW_table_alias_in_merge_statement6137);
                    table_alias459=table_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_alias.add(table_alias459.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_using_key_in_merge_statement6148);
            using_key460=using_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_using_key.add(using_key460.getTree());
            pushFollow(FOLLOW_selected_tableview_in_merge_statement6150);
            selected_tableview461=selected_tableview();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selected_tableview.add(selected_tableview461.getTree());
            pushFollow(FOLLOW_on_key_in_merge_statement6152);
            on_key462=on_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_on_key.add(on_key462.getTree());
            LEFT_PAREN463=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_merge_statement6154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN463);

            pushFollow(FOLLOW_condition_in_merge_statement6156);
            condition464=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition464.getTree());
            RIGHT_PAREN465=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_merge_statement6158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN465);

            // OracleParser.g:684:9: ( ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )? | ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )? )?
            int alt159=3;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // OracleParser.g:685:13: ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )?
                    {
                    pushFollow(FOLLOW_merge_update_clause_in_merge_statement6190);
                    merge_update_clause466=merge_update_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_merge_update_clause.add(merge_update_clause466.getTree());
                    // OracleParser.g:685:59: ( merge_insert_clause )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==SQL92_RESERVED_WHEN) ) {
                        int LA157_1 = input.LA(2);

                        if ( (LA157_1==SQL92_RESERVED_NOT) ) {
                            int LA157_4 = input.LA(3);

                            if ( (LA157_4==REGULAR_ID) ) {
                                int LA157_5 = input.LA(4);

                                if ( (LA157_5==SQL92_RESERVED_THEN) ) {
                                    int LA157_6 = input.LA(5);

                                    if ( (LA157_6==SQL92_RESERVED_INSERT) ) {
                                        int LA157_7 = input.LA(6);

                                        if ( (LA157_7==LEFT_PAREN||LA157_7==SQL92_RESERVED_VALUES) ) {
                                            alt157=1;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    switch (alt157) {
                        case 1 :
                            // OracleParser.g:0:0: merge_insert_clause
                            {
                            pushFollow(FOLLOW_merge_insert_clause_in_merge_statement6192);
                            merge_insert_clause467=merge_insert_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_merge_insert_clause.add(merge_insert_clause467.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // OracleParser.g:687:13: ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )?
                    {
                    pushFollow(FOLLOW_merge_insert_clause_in_merge_statement6227);
                    merge_insert_clause468=merge_insert_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_merge_insert_clause.add(merge_insert_clause468.getTree());
                    // OracleParser.g:687:67: ( merge_update_clause )?
                    int alt158=2;
                    alt158 = dfa158.predict(input);
                    switch (alt158) {
                        case 1 :
                            // OracleParser.g:0:0: merge_update_clause
                            {
                            pushFollow(FOLLOW_merge_update_clause_in_merge_statement6229);
                            merge_update_clause469=merge_update_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_merge_update_clause.add(merge_update_clause469.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // OracleParser.g:689:9: ( error_logging_clause )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("log")))) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // OracleParser.g:0:0: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_merge_statement6251);
                    error_logging_clause470=error_logging_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_clause.add(error_logging_clause470.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: tableview_name, merge_insert_clause, merge_update_clause, condition, error_logging_clause, using_key, table_alias, selected_tableview
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 690:9: -> ^( MERGE_STATEMENT ( table_alias )? tableview_name ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
            {
                // OracleParser.g:690:12: ^( MERGE_STATEMENT ( table_alias )? tableview_name ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MERGE_STATEMENT, "MERGE_STATEMENT"), root_1);

                // OracleParser.g:690:30: ( table_alias )?
                if ( stream_table_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_alias.nextTree());

                }
                stream_table_alias.reset();
                adaptor.addChild(root_1, stream_tableview_name.nextTree());
                // OracleParser.g:690:58: ^( using_key selected_tableview ^( LOGIC_EXPR condition ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_using_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_selected_tableview.nextTree());
                // OracleParser.g:690:89: ^( LOGIC_EXPR condition )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);

                adaptor.addChild(root_3, stream_condition.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:691:18: ( merge_update_clause )?
                if ( stream_merge_update_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_merge_update_clause.nextTree());

                }
                stream_merge_update_clause.reset();
                // OracleParser.g:691:39: ( merge_insert_clause )?
                if ( stream_merge_insert_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_merge_insert_clause.nextTree());

                }
                stream_merge_insert_clause.reset();
                // OracleParser.g:691:60: ( error_logging_clause )?
                if ( stream_error_logging_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_clause.nextTree());

                }
                stream_error_logging_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 865, merge_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "merge_statement"

    public static class merge_update_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_update_clause"
    // OracleParser.g:696:1: merge_update_clause : when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )? -> ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) ;
    public final OracleParser.merge_update_clause_return merge_update_clause() throws RecognitionException {
        OracleParser.merge_update_clause_return retval = new OracleParser.merge_update_clause_return();
        retval.start = input.LT(1);
        int merge_update_clause_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA477=null;
        OracleParser_Keys.when_key_return when_key471 = null;

        OracleParser_Keys.matched_key_return matched_key472 = null;

        OracleParser_Keys.then_key_return then_key473 = null;

        OracleParser_Keys.update_key_return update_key474 = null;

        OracleParser_Keys.set_key_return set_key475 = null;

        OracleParser.merge_element_return merge_element476 = null;

        OracleParser.merge_element_return merge_element478 = null;

        OracleParser_Commons.where_clause_return where_clause479 = null;

        OracleParser.merge_update_delete_part_return merge_update_delete_part480 = null;


        Object COMMA477_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
        RewriteRuleSubtreeStream stream_merge_update_delete_part=new RewriteRuleSubtreeStream(adaptor,"rule merge_update_delete_part");
        RewriteRuleSubtreeStream stream_merge_element=new RewriteRuleSubtreeStream(adaptor,"rule merge_element");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
        RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
        RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
        RewriteRuleSubtreeStream stream_matched_key=new RewriteRuleSubtreeStream(adaptor,"rule matched_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 866) ) { return retval; }
            // OracleParser.g:697:5: ( when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )? -> ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) )
            // OracleParser.g:697:10: when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )?
            {
            pushFollow(FOLLOW_when_key_in_merge_update_clause6331);
            when_key471=when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_when_key.add(when_key471.getTree());
            pushFollow(FOLLOW_matched_key_in_merge_update_clause6333);
            matched_key472=matched_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matched_key.add(matched_key472.getTree());
            pushFollow(FOLLOW_then_key_in_merge_update_clause6335);
            then_key473=then_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_then_key.add(then_key473.getTree());
            pushFollow(FOLLOW_update_key_in_merge_update_clause6337);
            update_key474=update_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_update_key.add(update_key474.getTree());
            pushFollow(FOLLOW_set_key_in_merge_update_clause6339);
            set_key475=set_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_set_key.add(set_key475.getTree());
            pushFollow(FOLLOW_merge_element_in_merge_update_clause6350);
            merge_element476=merge_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_merge_element.add(merge_element476.getTree());
            // OracleParser.g:698:23: ( COMMA merge_element )*
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==COMMA) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // OracleParser.g:698:24: COMMA merge_element
            	    {
            	    COMMA477=(Token)match(input,COMMA,FOLLOW_COMMA_in_merge_update_clause6353); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA477);

            	    pushFollow(FOLLOW_merge_element_in_merge_update_clause6355);
            	    merge_element478=merge_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_merge_element.add(merge_element478.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);

            // OracleParser.g:699:9: ( where_clause )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==SQL92_RESERVED_WHERE) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // OracleParser.g:0:0: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_merge_update_clause6367);
                    where_clause479=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause479.getTree());

                    }
                    break;

            }

            // OracleParser.g:699:23: ( merge_update_delete_part )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==SQL92_RESERVED_DELETE) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // OracleParser.g:0:0: merge_update_delete_part
                    {
                    pushFollow(FOLLOW_merge_update_delete_part_in_merge_update_clause6370);
                    merge_update_delete_part480=merge_update_delete_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_merge_update_delete_part.add(merge_update_delete_part480.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: merge_update_delete_part, where_clause, merge_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 700:9: -> ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
            {
                // OracleParser.g:700:11: ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MERGE_UPDATE, "MERGE_UPDATE"), root_1);

                if ( !(stream_merge_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_merge_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_merge_element.nextTree());

                }
                stream_merge_element.reset();
                // OracleParser.g:700:41: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();
                // OracleParser.g:700:55: ( merge_update_delete_part )?
                if ( stream_merge_update_delete_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_merge_update_delete_part.nextTree());

                }
                stream_merge_update_delete_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 866, merge_update_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "merge_update_clause"

    public static class merge_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_element"
    // OracleParser.g:703:1: merge_element : column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) ;
    public final OracleParser.merge_element_return merge_element() throws RecognitionException {
        OracleParser.merge_element_return retval = new OracleParser.merge_element_return();
        retval.start = input.LT(1);
        int merge_element_StartIndex = input.index();
        Object root_0 = null;

        Token EQUALS_OP482=null;
        OracleParser_Commons.column_name_return column_name481 = null;

        OracleParser.expression_return expression483 = null;


        Object EQUALS_OP482_tree=null;
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 867) ) { return retval; }
            // OracleParser.g:704:5: ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) )
            // OracleParser.g:704:10: column_name EQUALS_OP expression
            {
            pushFollow(FOLLOW_column_name_in_merge_element6413);
            column_name481=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_column_name.add(column_name481.getTree());
            EQUALS_OP482=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_merge_element6415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP482);

            pushFollow(FOLLOW_expression_in_merge_element6417);
            expression483=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression483.getTree());


            // AST REWRITE
            // elements: expression, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 705:9: -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
            {
                // OracleParser.g:705:12: ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, EQUALS_OP482), root_1);

                adaptor.addChild(root_1, stream_column_name.nextTree());
                // OracleParser.g:705:45: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 867, merge_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "merge_element"

    public static class merge_update_delete_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_update_delete_part"
    // OracleParser.g:708:1: merge_update_delete_part : delete_key where_clause ;
    public final OracleParser.merge_update_delete_part_return merge_update_delete_part() throws RecognitionException {
        OracleParser.merge_update_delete_part_return retval = new OracleParser.merge_update_delete_part_return();
        retval.start = input.LT(1);
        int merge_update_delete_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.delete_key_return delete_key484 = null;

        OracleParser_Commons.where_clause_return where_clause485 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 868) ) { return retval; }
            // OracleParser.g:709:5: ( delete_key where_clause )
            // OracleParser.g:709:10: delete_key where_clause
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_delete_key_in_merge_update_delete_part6460);
            delete_key484=delete_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(delete_key484.getTree(), root_0);
            pushFollow(FOLLOW_where_clause_in_merge_update_delete_part6463);
            where_clause485=where_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause485.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 868, merge_update_delete_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "merge_update_delete_part"

    public static class merge_insert_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_insert_clause"
    // OracleParser.g:712:1: merge_insert_clause : when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )? -> ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) ;
    public final OracleParser.merge_insert_clause_return merge_insert_clause() throws RecognitionException {
        OracleParser.merge_insert_clause_return retval = new OracleParser.merge_insert_clause_return();
        retval.start = input.LT(1);
        int merge_insert_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN491=null;
        Token COMMA493=null;
        Token RIGHT_PAREN495=null;
        OracleParser_Keys.when_key_return when_key486 = null;

        OracleParser_Keys.not_key_return not_key487 = null;

        OracleParser_Keys.matched_key_return matched_key488 = null;

        OracleParser_Keys.then_key_return then_key489 = null;

        OracleParser_Keys.insert_key_return insert_key490 = null;

        OracleParser_Commons.column_name_return column_name492 = null;

        OracleParser_Commons.column_name_return column_name494 = null;

        OracleParser_Keys.values_key_return values_key496 = null;

        OracleParser.expression_list_return expression_list497 = null;

        OracleParser_Commons.where_clause_return where_clause498 = null;


        Object LEFT_PAREN491_tree=null;
        Object COMMA493_tree=null;
        Object RIGHT_PAREN495_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
        RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
        RewriteRuleSubtreeStream stream_insert_key=new RewriteRuleSubtreeStream(adaptor,"rule insert_key");
        RewriteRuleSubtreeStream stream_values_key=new RewriteRuleSubtreeStream(adaptor,"rule values_key");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
        RewriteRuleSubtreeStream stream_matched_key=new RewriteRuleSubtreeStream(adaptor,"rule matched_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 869) ) { return retval; }
            // OracleParser.g:713:5: ( when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )? -> ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) )
            // OracleParser.g:713:10: when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )?
            {
            pushFollow(FOLLOW_when_key_in_merge_insert_clause6483);
            when_key486=when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_when_key.add(when_key486.getTree());
            pushFollow(FOLLOW_not_key_in_merge_insert_clause6485);
            not_key487=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key487.getTree());
            pushFollow(FOLLOW_matched_key_in_merge_insert_clause6487);
            matched_key488=matched_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matched_key.add(matched_key488.getTree());
            pushFollow(FOLLOW_then_key_in_merge_insert_clause6489);
            then_key489=then_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_then_key.add(then_key489.getTree());
            pushFollow(FOLLOW_insert_key_in_merge_insert_clause6491);
            insert_key490=insert_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insert_key.add(insert_key490.getTree());
            // OracleParser.g:714:9: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==LEFT_PAREN) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // OracleParser.g:714:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN491=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_merge_insert_clause6503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN491);

                    pushFollow(FOLLOW_column_name_in_merge_insert_clause6505);
                    column_name492=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name492.getTree());
                    // OracleParser.g:714:33: ( COMMA column_name )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==COMMA) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // OracleParser.g:714:34: COMMA column_name
                    	    {
                    	    COMMA493=(Token)match(input,COMMA,FOLLOW_COMMA_in_merge_insert_clause6508); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA493);

                    	    pushFollow(FOLLOW_column_name_in_merge_insert_clause6510);
                    	    column_name494=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name494.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);

                    RIGHT_PAREN495=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_merge_insert_clause6514); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN495);


                    }
                    break;

            }

            pushFollow(FOLLOW_values_key_in_merge_insert_clause6526);
            values_key496=values_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_values_key.add(values_key496.getTree());
            pushFollow(FOLLOW_expression_list_in_merge_insert_clause6528);
            expression_list497=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression_list.add(expression_list497.getTree());
            // OracleParser.g:715:36: ( where_clause )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==SQL92_RESERVED_WHERE) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // OracleParser.g:0:0: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_merge_insert_clause6530);
                    where_clause498=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause498.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: column_name, expression_list, where_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 716:9: -> ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? )
            {
                // OracleParser.g:716:12: ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MERGE_INSERT, "MERGE_INSERT"), root_1);

                // OracleParser.g:716:27: ^( COLUMNS ( column_name )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(COLUMNS, "COLUMNS"), root_2);

                // OracleParser.g:716:37: ( column_name )*
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_2, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_expression_list.nextTree());
                // OracleParser.g:716:67: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 869, merge_insert_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "merge_insert_clause"

    public static class selected_tableview_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selected_tableview"
    // OracleParser.g:719:1: selected_tableview : ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )? -> ^( SELECTED_TABLEVIEW ( table_alias )? ( tableview_name )? ( select_statement )? ) ;
    public final OracleParser.selected_tableview_return selected_tableview() throws RecognitionException {
        OracleParser.selected_tableview_return retval = new OracleParser.selected_tableview_return();
        retval.start = input.LT(1);
        int selected_tableview_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN500=null;
        Token RIGHT_PAREN502=null;
        OracleParser_Commons.tableview_name_return tableview_name499 = null;

        OracleParser.select_statement_return select_statement501 = null;

        OracleParser_Commons.table_alias_return table_alias503 = null;


        Object LEFT_PAREN500_tree=null;
        Object RIGHT_PAREN502_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 870) ) { return retval; }
            // OracleParser.g:720:5: ( ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )? -> ^( SELECTED_TABLEVIEW ( table_alias )? ( tableview_name )? ( select_statement )? ) )
            // OracleParser.g:720:10: ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )?
            {
            // OracleParser.g:720:10: ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==DELIMITED_ID||LA167_0==INTRODUCER||LA167_0==REGULAR_ID) ) {
                alt167=1;
            }
            else if ( (LA167_0==LEFT_PAREN) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // OracleParser.g:720:12: tableview_name
                    {
                    pushFollow(FOLLOW_tableview_name_in_selected_tableview6580);
                    tableview_name499=tableview_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name499.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:720:29: LEFT_PAREN select_statement RIGHT_PAREN
                    {
                    LEFT_PAREN500=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_selected_tableview6584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN500);

                    pushFollow(FOLLOW_select_statement_in_selected_tableview6586);
                    select_statement501=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_statement.add(select_statement501.getTree());
                    RIGHT_PAREN502=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_selected_tableview6588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN502);


                    }
                    break;

            }

            // OracleParser.g:720:70: ( table_alias )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==NATIONAL_CHAR_STRING_LIT||LA168_0==CHAR_STRING||LA168_0==CHAR_STRING_PERL||LA168_0==DELIMITED_ID||LA168_0==INTRODUCER||LA168_0==REGULAR_ID) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // OracleParser.g:0:0: table_alias
                    {
                    pushFollow(FOLLOW_table_alias_in_selected_tableview6591);
                    table_alias503=table_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_alias.add(table_alias503.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: select_statement, tableview_name, table_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 721:9: -> ^( SELECTED_TABLEVIEW ( table_alias )? ( tableview_name )? ( select_statement )? )
            {
                // OracleParser.g:721:12: ^( SELECTED_TABLEVIEW ( table_alias )? ( tableview_name )? ( select_statement )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTED_TABLEVIEW, "SELECTED_TABLEVIEW"), root_1);

                // OracleParser.g:721:33: ( table_alias )?
                if ( stream_table_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_alias.nextTree());

                }
                stream_table_alias.reset();
                // OracleParser.g:721:46: ( tableview_name )?
                if ( stream_tableview_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableview_name.nextTree());

                }
                stream_tableview_name.reset();
                // OracleParser.g:721:62: ( select_statement )?
                if ( stream_select_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_select_statement.nextTree());

                }
                stream_select_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 870, selected_tableview_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selected_tableview"

    public static class lock_table_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_table_statement"
    // OracleParser.g:726:1: lock_table_statement : lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )? -> ^( LOCK_TABLE_STATEMENT ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) ;
    public final OracleParser.lock_table_statement_return lock_table_statement() throws RecognitionException {
        OracleParser.lock_table_statement_return retval = new OracleParser.lock_table_statement_return();
        retval.start = input.LT(1);
        int lock_table_statement_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA507=null;
        OracleParser_Keys.lock_key_return lock_key504 = null;

        OracleParser_Keys.table_key_return table_key505 = null;

        OracleParser.lock_table_element_return lock_table_element506 = null;

        OracleParser.lock_table_element_return lock_table_element508 = null;

        OracleParser_Keys.in_key_return in_key509 = null;

        OracleParser.lock_mode_return lock_mode510 = null;

        OracleParser_Keys.mode_key_return mode_key511 = null;

        OracleParser.wait_nowait_part_return wait_nowait_part512 = null;


        Object COMMA507_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_lock_table_element=new RewriteRuleSubtreeStream(adaptor,"rule lock_table_element");
        RewriteRuleSubtreeStream stream_mode_key=new RewriteRuleSubtreeStream(adaptor,"rule mode_key");
        RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
        RewriteRuleSubtreeStream stream_lock_mode=new RewriteRuleSubtreeStream(adaptor,"rule lock_mode");
        RewriteRuleSubtreeStream stream_wait_nowait_part=new RewriteRuleSubtreeStream(adaptor,"rule wait_nowait_part");
        RewriteRuleSubtreeStream stream_lock_key=new RewriteRuleSubtreeStream(adaptor,"rule lock_key");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 871) ) { return retval; }
            // OracleParser.g:727:5: ( lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )? -> ^( LOCK_TABLE_STATEMENT ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) )
            // OracleParser.g:727:10: lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )?
            {
            pushFollow(FOLLOW_lock_key_in_lock_table_statement6637);
            lock_key504=lock_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lock_key.add(lock_key504.getTree());
            pushFollow(FOLLOW_table_key_in_lock_table_statement6639);
            table_key505=table_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_key.add(table_key505.getTree());
            pushFollow(FOLLOW_lock_table_element_in_lock_table_statement6650);
            lock_table_element506=lock_table_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lock_table_element.add(lock_table_element506.getTree());
            // OracleParser.g:728:28: ( COMMA lock_table_element )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==COMMA) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // OracleParser.g:728:29: COMMA lock_table_element
            	    {
            	    COMMA507=(Token)match(input,COMMA,FOLLOW_COMMA_in_lock_table_statement6653); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA507);

            	    pushFollow(FOLLOW_lock_table_element_in_lock_table_statement6655);
            	    lock_table_element508=lock_table_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_lock_table_element.add(lock_table_element508.getTree());

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);

            pushFollow(FOLLOW_in_key_in_lock_table_statement6668);
            in_key509=in_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_in_key.add(in_key509.getTree());
            pushFollow(FOLLOW_lock_mode_in_lock_table_statement6670);
            lock_mode510=lock_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lock_mode.add(lock_mode510.getTree());
            pushFollow(FOLLOW_mode_key_in_lock_table_statement6672);
            mode_key511=mode_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_mode_key.add(mode_key511.getTree());
            // OracleParser.g:729:35: ( wait_nowait_part )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("wait")))) {
                alt170=1;
            }
            else if ( (LA170_0==PLSQL_RESERVED_NOWAIT) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // OracleParser.g:0:0: wait_nowait_part
                    {
                    pushFollow(FOLLOW_wait_nowait_part_in_lock_table_statement6674);
                    wait_nowait_part512=wait_nowait_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wait_nowait_part.add(wait_nowait_part512.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: lock_table_element, lock_mode, wait_nowait_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 730:9: -> ^( LOCK_TABLE_STATEMENT ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
            {
                // OracleParser.g:730:12: ^( LOCK_TABLE_STATEMENT ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOCK_TABLE_STATEMENT, "LOCK_TABLE_STATEMENT"), root_1);

                if ( !(stream_lock_table_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_lock_table_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_lock_table_element.nextTree());

                }
                stream_lock_table_element.reset();
                adaptor.addChild(root_1, stream_lock_mode.nextTree());
                // OracleParser.g:730:65: ( wait_nowait_part )?
                if ( stream_wait_nowait_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_wait_nowait_part.nextTree());

                }
                stream_wait_nowait_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 871, lock_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"

    public static class wait_nowait_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wait_nowait_part"
    // OracleParser.g:733:1: wait_nowait_part : ( wait_key expression -> ^( wait_key ^( EXPR expression ) ) | nowait_key );
    public final OracleParser.wait_nowait_part_return wait_nowait_part() throws RecognitionException {
        OracleParser.wait_nowait_part_return retval = new OracleParser.wait_nowait_part_return();
        retval.start = input.LT(1);
        int wait_nowait_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.wait_key_return wait_key513 = null;

        OracleParser.expression_return expression514 = null;

        OracleParser_Keys.nowait_key_return nowait_key515 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_wait_key=new RewriteRuleSubtreeStream(adaptor,"rule wait_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 872) ) { return retval; }
            // OracleParser.g:734:5: ( wait_key expression -> ^( wait_key ^( EXPR expression ) ) | nowait_key )
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("wait")))) {
                alt171=1;
            }
            else if ( (LA171_0==PLSQL_RESERVED_NOWAIT) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }
            switch (alt171) {
                case 1 :
                    // OracleParser.g:734:10: wait_key expression
                    {
                    pushFollow(FOLLOW_wait_key_in_wait_nowait_part6717);
                    wait_key513=wait_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wait_key.add(wait_key513.getTree());
                    pushFollow(FOLLOW_expression_in_wait_nowait_part6719);
                    expression514=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression514.getTree());


                    // AST REWRITE
                    // elements: expression, wait_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 734:30: -> ^( wait_key ^( EXPR expression ) )
                    {
                        // OracleParser.g:734:33: ^( wait_key ^( EXPR expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_wait_key.nextNode(), root_1);

                        // OracleParser.g:734:44: ^( EXPR expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:735:10: nowait_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nowait_key_in_wait_nowait_part6742);
                    nowait_key515=nowait_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nowait_key515.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 872, wait_nowait_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wait_nowait_part"

    public static class lock_table_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_table_element"
    // OracleParser.g:740:1: lock_table_element : tableview_name ( partition_extension_clause )? -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) ;
    public final OracleParser.lock_table_element_return lock_table_element() throws RecognitionException {
        OracleParser.lock_table_element_return retval = new OracleParser.lock_table_element_return();
        retval.start = input.LT(1);
        int lock_table_element_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Commons.tableview_name_return tableview_name516 = null;

        OracleParser_Commons.partition_extension_clause_return partition_extension_clause517 = null;


        RewriteRuleSubtreeStream stream_partition_extension_clause=new RewriteRuleSubtreeStream(adaptor,"rule partition_extension_clause");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 873) ) { return retval; }
            // OracleParser.g:741:5: ( tableview_name ( partition_extension_clause )? -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) )
            // OracleParser.g:741:10: tableview_name ( partition_extension_clause )?
            {
            pushFollow(FOLLOW_tableview_name_in_lock_table_element6764);
            tableview_name516=tableview_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name516.getTree());
            // OracleParser.g:741:25: ( partition_extension_clause )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("subpartition"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // OracleParser.g:0:0: partition_extension_clause
                    {
                    pushFollow(FOLLOW_partition_extension_clause_in_lock_table_element6766);
                    partition_extension_clause517=partition_extension_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partition_extension_clause.add(partition_extension_clause517.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: tableview_name, partition_extension_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 742:9: -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
            {
                // OracleParser.g:742:12: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOCK_TABLE_ELEMENT, "LOCK_TABLE_ELEMENT"), root_1);

                adaptor.addChild(root_1, stream_tableview_name.nextTree());
                // OracleParser.g:742:48: ( partition_extension_clause )?
                if ( stream_partition_extension_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_partition_extension_clause.nextTree());

                }
                stream_partition_extension_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 873, lock_table_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_table_element"

    public static class lock_mode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_mode"
    // OracleParser.g:745:1: lock_mode : ( row_key share_key | row_key exclusive_key | share_key ( update_key )? | share_key row_key exclusive_key | exclusive_key );
    public final OracleParser.lock_mode_return lock_mode() throws RecognitionException {
        OracleParser.lock_mode_return retval = new OracleParser.lock_mode_return();
        retval.start = input.LT(1);
        int lock_mode_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.row_key_return row_key518 = null;

        OracleParser_Keys.share_key_return share_key519 = null;

        OracleParser_Keys.row_key_return row_key520 = null;

        OracleParser_Keys.exclusive_key_return exclusive_key521 = null;

        OracleParser_Keys.share_key_return share_key522 = null;

        OracleParser_Keys.update_key_return update_key523 = null;

        OracleParser_Keys.share_key_return share_key524 = null;

        OracleParser_Keys.row_key_return row_key525 = null;

        OracleParser_Keys.exclusive_key_return exclusive_key526 = null;

        OracleParser_Keys.exclusive_key_return exclusive_key527 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 874) ) { return retval; }
            // OracleParser.g:746:5: ( row_key share_key | row_key exclusive_key | share_key ( update_key )? | share_key row_key exclusive_key | exclusive_key )
            int alt174=5;
            switch ( input.LA(1) ) {
            case REGULAR_ID:
                {
                int LA174_1 = input.LA(2);

                if ( (LA174_1==PLSQL_RESERVED_SHARE) ) {
                    alt174=1;
                }
                else if ( (LA174_1==PLSQL_RESERVED_EXCLUSIVE) ) {
                    alt174=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 174, 1, input);

                    throw nvae;
                }
                }
                break;
            case PLSQL_RESERVED_SHARE:
                {
                int LA174_2 = input.LA(2);

                if ( (LA174_2==PLSQL_RESERVED_MODE||LA174_2==SQL92_RESERVED_UPDATE) ) {
                    alt174=3;
                }
                else if ( (LA174_2==REGULAR_ID) ) {
                    alt174=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 174, 2, input);

                    throw nvae;
                }
                }
                break;
            case PLSQL_RESERVED_EXCLUSIVE:
                {
                alt174=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;
            }

            switch (alt174) {
                case 1 :
                    // OracleParser.g:746:10: row_key share_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_row_key_in_lock_mode6806);
                    row_key518=row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, row_key518.getTree());
                    pushFollow(FOLLOW_share_key_in_lock_mode6808);
                    share_key519=share_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, share_key519.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:747:10: row_key exclusive_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_row_key_in_lock_mode6819);
                    row_key520=row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, row_key520.getTree());
                    pushFollow(FOLLOW_exclusive_key_in_lock_mode6821);
                    exclusive_key521=exclusive_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_key521.getTree());

                    }
                    break;
                case 3 :
                    // OracleParser.g:748:10: share_key ( update_key )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_share_key_in_lock_mode6832);
                    share_key522=share_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, share_key522.getTree());
                    // OracleParser.g:748:20: ( update_key )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==SQL92_RESERVED_UPDATE) ) {
                        alt173=1;
                    }
                    switch (alt173) {
                        case 1 :
                            // OracleParser.g:0:0: update_key
                            {
                            pushFollow(FOLLOW_update_key_in_lock_mode6834);
                            update_key523=update_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, update_key523.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // OracleParser.g:749:10: share_key row_key exclusive_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_share_key_in_lock_mode6846);
                    share_key524=share_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, share_key524.getTree());
                    pushFollow(FOLLOW_row_key_in_lock_mode6848);
                    row_key525=row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, row_key525.getTree());
                    pushFollow(FOLLOW_exclusive_key_in_lock_mode6850);
                    exclusive_key526=exclusive_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_key526.getTree());

                    }
                    break;
                case 5 :
                    // OracleParser.g:750:10: exclusive_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_exclusive_key_in_lock_mode6861);
                    exclusive_key527=exclusive_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_key527.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 874, lock_mode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_mode"

    public static class general_table_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "general_table_ref"
    // OracleParser.g:756:1: general_table_ref : ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )? -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? ) ;
    public final OracleParser.general_table_ref_return general_table_ref() throws RecognitionException {
        OracleParser.general_table_ref_return retval = new OracleParser.general_table_ref_return();
        retval.start = input.LT(1);
        int general_table_ref_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN530=null;
        Token RIGHT_PAREN532=null;
        OracleParser.dml_table_expression_clause_return dml_table_expression_clause528 = null;

        OracleParser_Keys.only_key_return only_key529 = null;

        OracleParser.dml_table_expression_clause_return dml_table_expression_clause531 = null;

        OracleParser_Commons.table_alias_return table_alias533 = null;


        Object LEFT_PAREN530_tree=null;
        Object RIGHT_PAREN532_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_dml_table_expression_clause=new RewriteRuleSubtreeStream(adaptor,"rule dml_table_expression_clause");
        RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
        RewriteRuleSubtreeStream stream_only_key=new RewriteRuleSubtreeStream(adaptor,"rule only_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 875) ) { return retval; }
            // OracleParser.g:757:5: ( ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )? -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? ) )
            // OracleParser.g:757:10: ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )?
            {
            // OracleParser.g:757:10: ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN )
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==DELIMITED_ID||LA175_0==LEFT_PAREN||LA175_0==INTRODUCER||(LA175_0>=SQL92_RESERVED_TABLE && LA175_0<=SQL92_RESERVED_THE)) ) {
                alt175=1;
            }
            else if ( (LA175_0==REGULAR_ID) ) {
                int LA175_5 = input.LA(2);

                if ( (synpred219_OracleParser()) ) {
                    alt175=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("only"))) ) {
                    alt175=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 175, 5, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;
            }
            switch (alt175) {
                case 1 :
                    // OracleParser.g:757:15: dml_table_expression_clause
                    {
                    pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref6889);
                    dml_table_expression_clause528=dml_table_expression_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_table_expression_clause.add(dml_table_expression_clause528.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:758:14: only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_only_key_in_general_table_ref6904);
                    only_key529=only_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_only_key.add(only_key529.getTree());
                    LEFT_PAREN530=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_general_table_ref6906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN530);

                    pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref6908);
                    dml_table_expression_clause531=dml_table_expression_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_table_expression_clause.add(dml_table_expression_clause531.getTree());
                    RIGHT_PAREN532=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_general_table_ref6910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN532);


                    }
                    break;

            }

            // OracleParser.g:759:14: ( table_alias )?
            int alt176=2;
            alt176 = dfa176.predict(input);
            switch (alt176) {
                case 1 :
                    // OracleParser.g:0:0: table_alias
                    {
                    pushFollow(FOLLOW_table_alias_in_general_table_ref6925);
                    table_alias533=table_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_alias.add(table_alias533.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dml_table_expression_clause, table_alias, only_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 760:9: -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? )
            {
                // OracleParser.g:760:12: ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TABLE_REF, "TABLE_REF"), root_1);

                // OracleParser.g:760:24: ( table_alias )?
                if ( stream_table_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_alias.nextTree());

                }
                stream_table_alias.reset();
                adaptor.addChild(root_1, stream_dml_table_expression_clause.nextTree());
                // OracleParser.g:760:65: ( only_key )?
                if ( stream_only_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_only_key.nextTree());

                }
                stream_only_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 875, general_table_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "general_table_ref"

    public static class static_returning_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "static_returning_clause"
    // OracleParser.g:763:1: static_returning_clause : ( returning_key | return_key ) expression ( COMMA expression )* into_clause -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause ) ;
    public final OracleParser.static_returning_clause_return static_returning_clause() throws RecognitionException {
        OracleParser.static_returning_clause_return retval = new OracleParser.static_returning_clause_return();
        retval.start = input.LT(1);
        int static_returning_clause_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA537=null;
        OracleParser_Keys.returning_key_return returning_key534 = null;

        OracleParser_Keys.return_key_return return_key535 = null;

        OracleParser.expression_return expression536 = null;

        OracleParser.expression_return expression538 = null;

        OracleParser_Commons.into_clause_return into_clause539 = null;


        Object COMMA537_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_returning_key=new RewriteRuleSubtreeStream(adaptor,"rule returning_key");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 876) ) { return retval; }
            // OracleParser.g:764:5: ( ( returning_key | return_key ) expression ( COMMA expression )* into_clause -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause ) )
            // OracleParser.g:764:10: ( returning_key | return_key ) expression ( COMMA expression )* into_clause
            {
            // OracleParser.g:764:10: ( returning_key | return_key )
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==REGULAR_ID) ) {
                int LA177_1 = input.LA(2);

                if ( ((synpred221_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("returning")))) ) {
                    alt177=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("return"))) ) {
                    alt177=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 177, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }
            switch (alt177) {
                case 1 :
                    // OracleParser.g:764:11: returning_key
                    {
                    pushFollow(FOLLOW_returning_key_in_static_returning_clause6969);
                    returning_key534=returning_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_returning_key.add(returning_key534.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:764:25: return_key
                    {
                    pushFollow(FOLLOW_return_key_in_static_returning_clause6971);
                    return_key535=return_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_return_key.add(return_key535.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_static_returning_clause6974);
            expression536=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression536.getTree());
            // OracleParser.g:764:48: ( COMMA expression )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==COMMA) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // OracleParser.g:764:49: COMMA expression
            	    {
            	    COMMA537=(Token)match(input,COMMA,FOLLOW_COMMA_in_static_returning_clause6977); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA537);

            	    pushFollow(FOLLOW_expression_in_static_returning_clause6979);
            	    expression538=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression538.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);

            pushFollow(FOLLOW_into_clause_in_static_returning_clause6992);
            into_clause539=into_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_into_clause.add(into_clause539.getTree());


            // AST REWRITE
            // elements: expression, into_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 766:9: -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause )
            {
                // OracleParser.g:766:12: ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STATIC_RETURNING, "STATIC_RETURNING"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    // OracleParser.g:766:31: ^( EXPR expression )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                    adaptor.addChild(root_2, stream_expression.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_into_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 876, static_returning_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "static_returning_clause"

    public static class error_logging_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "error_logging_clause"
    // OracleParser.g:769:1: error_logging_clause : log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )? -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? ) ;
    public final OracleParser.error_logging_clause_return error_logging_clause() throws RecognitionException {
        OracleParser.error_logging_clause_return retval = new OracleParser.error_logging_clause_return();
        retval.start = input.LT(1);
        int error_logging_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.log_key_return log_key540 = null;

        OracleParser_Keys.errors_key_return errors_key541 = null;

        OracleParser.error_logging_into_part_return error_logging_into_part542 = null;

        OracleParser.expression_wrapper_return expression_wrapper543 = null;

        OracleParser.error_logging_reject_part_return error_logging_reject_part544 = null;


        RewriteRuleSubtreeStream stream_error_logging_reject_part=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_reject_part");
        RewriteRuleSubtreeStream stream_expression_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule expression_wrapper");
        RewriteRuleSubtreeStream stream_errors_key=new RewriteRuleSubtreeStream(adaptor,"rule errors_key");
        RewriteRuleSubtreeStream stream_error_logging_into_part=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_into_part");
        RewriteRuleSubtreeStream stream_log_key=new RewriteRuleSubtreeStream(adaptor,"rule log_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 877) ) { return retval; }
            // OracleParser.g:770:5: ( log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )? -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? ) )
            // OracleParser.g:770:10: log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )?
            {
            pushFollow(FOLLOW_log_key_in_error_logging_clause7035);
            log_key540=log_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_log_key.add(log_key540.getTree());
            pushFollow(FOLLOW_errors_key_in_error_logging_clause7037);
            errors_key541=errors_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_errors_key.add(errors_key541.getTree());
            // OracleParser.g:771:9: ( error_logging_into_part )?
            int alt179=2;
            alt179 = dfa179.predict(input);
            switch (alt179) {
                case 1 :
                    // OracleParser.g:0:0: error_logging_into_part
                    {
                    pushFollow(FOLLOW_error_logging_into_part_in_error_logging_clause7048);
                    error_logging_into_part542=error_logging_into_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_into_part.add(error_logging_into_part542.getTree());

                    }
                    break;

            }

            // OracleParser.g:772:9: ( ( LEFT_PAREN )=> expression_wrapper )?
            int alt180=2;
            alt180 = dfa180.predict(input);
            switch (alt180) {
                case 1 :
                    // OracleParser.g:772:10: ( LEFT_PAREN )=> expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_error_logging_clause7065);
                    expression_wrapper543=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_wrapper.add(expression_wrapper543.getTree());

                    }
                    break;

            }

            // OracleParser.g:773:9: ( error_logging_reject_part )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("reject")))) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // OracleParser.g:0:0: error_logging_reject_part
                    {
                    pushFollow(FOLLOW_error_logging_reject_part_in_error_logging_clause7077);
                    error_logging_reject_part544=error_logging_reject_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_reject_part.add(error_logging_reject_part544.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression_wrapper, log_key, error_logging_into_part, error_logging_reject_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 774:9: -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? )
            {
                // OracleParser.g:774:12: ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_log_key.nextNode(), root_1);

                // OracleParser.g:774:22: ( error_logging_into_part )?
                if ( stream_error_logging_into_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_into_part.nextTree());

                }
                stream_error_logging_into_part.reset();
                // OracleParser.g:774:47: ( expression_wrapper )?
                if ( stream_expression_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression_wrapper.nextTree());

                }
                stream_expression_wrapper.reset();
                // OracleParser.g:774:67: ( error_logging_reject_part )?
                if ( stream_error_logging_reject_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_reject_part.nextTree());

                }
                stream_error_logging_reject_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 877, error_logging_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "error_logging_clause"

    public static class error_logging_into_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "error_logging_into_part"
    // OracleParser.g:777:1: error_logging_into_part : into_key tableview_name ;
    public final OracleParser.error_logging_into_part_return error_logging_into_part() throws RecognitionException {
        OracleParser.error_logging_into_part_return retval = new OracleParser.error_logging_into_part_return();
        retval.start = input.LT(1);
        int error_logging_into_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.into_key_return into_key545 = null;

        OracleParser_Commons.tableview_name_return tableview_name546 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 878) ) { return retval; }
            // OracleParser.g:778:5: ( into_key tableview_name )
            // OracleParser.g:778:10: into_key tableview_name
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_into_key_in_error_logging_into_part7121);
            into_key545=into_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(into_key545.getTree(), root_0);
            pushFollow(FOLLOW_tableview_name_in_error_logging_into_part7124);
            tableview_name546=tableview_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tableview_name546.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 878, error_logging_into_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "error_logging_into_part"

    public static class error_logging_reject_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "error_logging_reject_part"
    // OracleParser.g:781:1: error_logging_reject_part : reject_key limit_key ( ( unlimited_key )=> unlimited_key | expression_wrapper ) ;
    public final OracleParser.error_logging_reject_part_return error_logging_reject_part() throws RecognitionException {
        OracleParser.error_logging_reject_part_return retval = new OracleParser.error_logging_reject_part_return();
        retval.start = input.LT(1);
        int error_logging_reject_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.reject_key_return reject_key547 = null;

        OracleParser_Keys.limit_key_return limit_key548 = null;

        OracleParser_Keys.unlimited_key_return unlimited_key549 = null;

        OracleParser.expression_wrapper_return expression_wrapper550 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 879) ) { return retval; }
            // OracleParser.g:782:5: ( reject_key limit_key ( ( unlimited_key )=> unlimited_key | expression_wrapper ) )
            // OracleParser.g:782:10: reject_key limit_key ( ( unlimited_key )=> unlimited_key | expression_wrapper )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_reject_key_in_error_logging_reject_part7144);
            reject_key547=reject_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(reject_key547.getTree(), root_0);
            pushFollow(FOLLOW_limit_key_in_error_logging_reject_part7147);
            limit_key548=limit_key();

            state._fsp--;
            if (state.failed) return retval;
            // OracleParser.g:782:33: ( ( unlimited_key )=> unlimited_key | expression_wrapper )
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==REGULAR_ID) ) {
                int LA182_1 = input.LA(2);

                if ( ((synpred226_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("unlimited")))) ) {
                    alt182=1;
                }
                else if ( (true) ) {
                    alt182=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 182, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA182_0>=UNSIGNED_INTEGER && LA182_0<=MINUS_SIGN)||LA182_0==NATIONAL_CHAR_STRING_LIT||(LA182_0>=EXACT_NUM_LIT && LA182_0<=CHAR_STRING)||LA182_0==CHAR_STRING_PERL||LA182_0==DELIMITED_ID||LA182_0==LEFT_PAREN||LA182_0==PLUS_SIGN||LA182_0==COLON||LA182_0==BINDVAR||LA182_0==INTRODUCER||LA182_0==SQL92_RESERVED_ALL||LA182_0==SQL92_RESERVED_ANY||LA182_0==SQL92_RESERVED_CASE||LA182_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA182_0>=SQL92_RESERVED_CURSOR && LA182_0<=SQL92_RESERVED_DATE)||LA182_0==SQL92_RESERVED_DEFAULT||LA182_0==SQL92_RESERVED_DISTINCT||(LA182_0>=SQL92_RESERVED_EXISTS && LA182_0<=SQL92_RESERVED_FALSE)||LA182_0==SQL92_RESERVED_NOT||LA182_0==SQL92_RESERVED_NULL||LA182_0==SQL92_RESERVED_PRIOR||LA182_0==SQL92_RESERVED_TRUE) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    // OracleParser.g:782:34: ( unlimited_key )=> unlimited_key
                    {
                    pushFollow(FOLLOW_unlimited_key_in_error_logging_reject_part7155);
                    unlimited_key549=unlimited_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unlimited_key549.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:782:65: expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_error_logging_reject_part7157);
                    expression_wrapper550=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper550.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 879, error_logging_reject_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "error_logging_reject_part"

    public static class dml_table_expression_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_table_expression_clause"
    // OracleParser.g:785:1: dml_table_expression_clause : ( table_collection_expression -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) ) | LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN -> ^( TABLE_EXPRESSION ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) ) | tableview_name ( sample_clause )? -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) );
    public final OracleParser.dml_table_expression_clause_return dml_table_expression_clause() throws RecognitionException {
        OracleParser.dml_table_expression_clause_return retval = new OracleParser.dml_table_expression_clause_return();
        retval.start = input.LT(1);
        int dml_table_expression_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN552=null;
        Token RIGHT_PAREN555=null;
        OracleParser.table_collection_expression_return table_collection_expression551 = null;

        OracleParser.select_statement_return select_statement553 = null;

        OracleParser.subquery_restriction_clause_return subquery_restriction_clause554 = null;

        OracleParser_Commons.tableview_name_return tableview_name556 = null;

        OracleParser.sample_clause_return sample_clause557 = null;


        Object LEFT_PAREN552_tree=null;
        Object RIGHT_PAREN555_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_sample_clause=new RewriteRuleSubtreeStream(adaptor,"rule sample_clause");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        RewriteRuleSubtreeStream stream_table_collection_expression=new RewriteRuleSubtreeStream(adaptor,"rule table_collection_expression");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        RewriteRuleSubtreeStream stream_subquery_restriction_clause=new RewriteRuleSubtreeStream(adaptor,"rule subquery_restriction_clause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 880) ) { return retval; }
            // OracleParser.g:786:5: ( table_collection_expression -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) ) | LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN -> ^( TABLE_EXPRESSION ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) ) | tableview_name ( sample_clause )? -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) )
            int alt185=3;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_TABLE:
            case SQL92_RESERVED_THE:
                {
                alt185=1;
                }
                break;
            case LEFT_PAREN:
                {
                alt185=2;
                }
                break;
            case DELIMITED_ID:
            case INTRODUCER:
            case REGULAR_ID:
                {
                alt185=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }

            switch (alt185) {
                case 1 :
                    // OracleParser.g:786:10: table_collection_expression
                    {
                    pushFollow(FOLLOW_table_collection_expression_in_dml_table_expression_clause7178);
                    table_collection_expression551=table_collection_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_collection_expression.add(table_collection_expression551.getTree());


                    // AST REWRITE
                    // elements: table_collection_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 786:38: -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) )
                    {
                        // OracleParser.g:786:41: ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);

                        // OracleParser.g:786:60: ^( COLLECTION_MODE table_collection_expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(COLLECTION_MODE, "COLLECTION_MODE"), root_2);

                        adaptor.addChild(root_2, stream_table_collection_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:787:10: LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN
                    {
                    LEFT_PAREN552=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN552);

                    pushFollow(FOLLOW_select_statement_in_dml_table_expression_clause7203);
                    select_statement553=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_statement.add(select_statement553.getTree());
                    // OracleParser.g:787:38: ( subquery_restriction_clause )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==SQL92_RESERVED_WITH) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // OracleParser.g:0:0: subquery_restriction_clause
                            {
                            pushFollow(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7205);
                            subquery_restriction_clause554=subquery_restriction_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_subquery_restriction_clause.add(subquery_restriction_clause554.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN555=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN555);



                    // AST REWRITE
                    // elements: subquery_restriction_clause, select_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 787:79: -> ^( TABLE_EXPRESSION ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) )
                    {
                        // OracleParser.g:787:82: ^( TABLE_EXPRESSION ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);

                        // OracleParser.g:787:101: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECT_MODE, "SELECT_MODE"), root_2);

                        adaptor.addChild(root_2, stream_select_statement.nextTree());
                        // OracleParser.g:787:132: ( subquery_restriction_clause )?
                        if ( stream_subquery_restriction_clause.hasNext() ) {
                            adaptor.addChild(root_2, stream_subquery_restriction_clause.nextTree());

                        }
                        stream_subquery_restriction_clause.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // OracleParser.g:788:10: tableview_name ( sample_clause )?
                    {
                    pushFollow(FOLLOW_tableview_name_in_dml_table_expression_clause7234);
                    tableview_name556=tableview_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name556.getTree());
                    // OracleParser.g:788:25: ( sample_clause )?
                    int alt184=2;
                    alt184 = dfa184.predict(input);
                    switch (alt184) {
                        case 1 :
                            // OracleParser.g:0:0: sample_clause
                            {
                            pushFollow(FOLLOW_sample_clause_in_dml_table_expression_clause7236);
                            sample_clause557=sample_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sample_clause.add(sample_clause557.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: sample_clause, tableview_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 788:40: -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
                    {
                        // OracleParser.g:788:43: ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);

                        // OracleParser.g:788:62: ^( DIRECT_MODE tableview_name ( sample_clause )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DIRECT_MODE, "DIRECT_MODE"), root_2);

                        adaptor.addChild(root_2, stream_tableview_name.nextTree());
                        // OracleParser.g:788:91: ( sample_clause )?
                        if ( stream_sample_clause.hasNext() ) {
                            adaptor.addChild(root_2, stream_sample_clause.nextTree());

                        }
                        stream_sample_clause.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 880, dml_table_expression_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_table_expression_clause"

    public static class table_collection_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_collection_expression"
    // OracleParser.g:791:1: table_collection_expression : ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN ) -> ^( EXPR ( subquery )? ( expression )? ) ;
    public final OracleParser.table_collection_expression_return table_collection_expression() throws RecognitionException {
        OracleParser.table_collection_expression_return retval = new OracleParser.table_collection_expression_return();
        retval.start = input.LT(1);
        int table_collection_expression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN560=null;
        Token RIGHT_PAREN562=null;
        Token LEFT_PAREN563=null;
        Token RIGHT_PAREN565=null;
        OracleParser_Keys.table_key_return table_key558 = null;

        OracleParser_Keys.the_key_return the_key559 = null;

        OracleParser.subquery_return subquery561 = null;

        OracleParser.expression_return expression564 = null;


        Object LEFT_PAREN560_tree=null;
        Object RIGHT_PAREN562_tree=null;
        Object LEFT_PAREN563_tree=null;
        Object RIGHT_PAREN565_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
        RewriteRuleSubtreeStream stream_the_key=new RewriteRuleSubtreeStream(adaptor,"rule the_key");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 881) ) { return retval; }
            // OracleParser.g:792:5: ( ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN ) -> ^( EXPR ( subquery )? ( expression )? ) )
            // OracleParser.g:792:10: ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN )
            {
            // OracleParser.g:792:10: ( table_key | the_key )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==SQL92_RESERVED_TABLE) ) {
                alt186=1;
            }
            else if ( (LA186_0==SQL92_RESERVED_THE) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // OracleParser.g:792:12: table_key
                    {
                    pushFollow(FOLLOW_table_key_in_table_collection_expression7274);
                    table_key558=table_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_key.add(table_key558.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:792:24: the_key
                    {
                    pushFollow(FOLLOW_the_key_in_table_collection_expression7278);
                    the_key559=the_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_the_key.add(the_key559.getTree());

                    }
                    break;

            }

            // OracleParser.g:793:10: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==LEFT_PAREN) ) {
                int LA187_1 = input.LA(2);

                if ( (synpred233_OracleParser()) ) {
                    alt187=1;
                }
                else if ( (true) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }
            switch (alt187) {
                case 1 :
                    // OracleParser.g:793:12: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
                    {
                    LEFT_PAREN560=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_table_collection_expression7306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN560);

                    pushFollow(FOLLOW_subquery_in_table_collection_expression7308);
                    subquery561=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery561.getTree());
                    RIGHT_PAREN562=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_table_collection_expression7310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN562);


                    }
                    break;
                case 2 :
                    // OracleParser.g:794:12: LEFT_PAREN expression RIGHT_PAREN
                    {
                    LEFT_PAREN563=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_table_collection_expression7323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN563);

                    pushFollow(FOLLOW_expression_in_table_collection_expression7325);
                    expression564=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression564.getTree());
                    RIGHT_PAREN565=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_table_collection_expression7327); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN565);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 796:9: -> ^( EXPR ( subquery )? ( expression )? )
            {
                // OracleParser.g:796:12: ^( EXPR ( subquery )? ( expression )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                // OracleParser.g:796:19: ( subquery )?
                if ( stream_subquery.hasNext() ) {
                    adaptor.addChild(root_1, stream_subquery.nextTree());

                }
                stream_subquery.reset();
                // OracleParser.g:796:29: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 881, table_collection_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_collection_expression"

    public static class subquery_restriction_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subquery_restriction_clause"
    // OracleParser.g:799:1: subquery_restriction_clause : with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? ) -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? ) ;
    public final OracleParser.subquery_restriction_clause_return subquery_restriction_clause() throws RecognitionException {
        OracleParser.subquery_restriction_clause_return retval = new OracleParser.subquery_restriction_clause_return();
        retval.start = input.LT(1);
        int subquery_restriction_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.with_key_return with_key566 = null;

        OracleParser_Keys.read_key_return read_key567 = null;

        OracleParser_Keys.only_key_return only_key568 = null;

        OracleParser_Keys.check_key_return check_key569 = null;

        OracleParser_Keys.option_key_return option_key570 = null;

        OracleParser_Keys.constraint_key_return constraint_key571 = null;

        OracleParser_Commons.constraint_name_return constraint_name572 = null;


        RewriteRuleSubtreeStream stream_with_key=new RewriteRuleSubtreeStream(adaptor,"rule with_key");
        RewriteRuleSubtreeStream stream_constraint_key=new RewriteRuleSubtreeStream(adaptor,"rule constraint_key");
        RewriteRuleSubtreeStream stream_check_key=new RewriteRuleSubtreeStream(adaptor,"rule check_key");
        RewriteRuleSubtreeStream stream_option_key=new RewriteRuleSubtreeStream(adaptor,"rule option_key");
        RewriteRuleSubtreeStream stream_constraint_name=new RewriteRuleSubtreeStream(adaptor,"rule constraint_name");
        RewriteRuleSubtreeStream stream_read_key=new RewriteRuleSubtreeStream(adaptor,"rule read_key");
        RewriteRuleSubtreeStream stream_only_key=new RewriteRuleSubtreeStream(adaptor,"rule only_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 882) ) { return retval; }
            // OracleParser.g:800:5: ( with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? ) -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? ) )
            // OracleParser.g:800:10: with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? )
            {
            pushFollow(FOLLOW_with_key_in_subquery_restriction_clause7380);
            with_key566=with_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_with_key.add(with_key566.getTree());
            // OracleParser.g:801:5: ( read_key only_key | check_key option_key ( constraint_key constraint_name )? )
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("read")))) {
                alt189=1;
            }
            else if ( (LA189_0==SQL92_RESERVED_CHECK) ) {
                alt189=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }
            switch (alt189) {
                case 1 :
                    // OracleParser.g:801:10: read_key only_key
                    {
                    pushFollow(FOLLOW_read_key_in_subquery_restriction_clause7391);
                    read_key567=read_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_read_key.add(read_key567.getTree());
                    pushFollow(FOLLOW_only_key_in_subquery_restriction_clause7393);
                    only_key568=only_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_only_key.add(only_key568.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:802:10: check_key option_key ( constraint_key constraint_name )?
                    {
                    pushFollow(FOLLOW_check_key_in_subquery_restriction_clause7404);
                    check_key569=check_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_check_key.add(check_key569.getTree());
                    pushFollow(FOLLOW_option_key_in_subquery_restriction_clause7406);
                    option_key570=option_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_option_key.add(option_key570.getTree());
                    // OracleParser.g:802:31: ( constraint_key constraint_name )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("constraint")))) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // OracleParser.g:802:32: constraint_key constraint_name
                            {
                            pushFollow(FOLLOW_constraint_key_in_subquery_restriction_clause7409);
                            constraint_key571=constraint_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constraint_key.add(constraint_key571.getTree());
                            pushFollow(FOLLOW_constraint_name_in_subquery_restriction_clause7411);
                            constraint_name572=constraint_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constraint_name.add(constraint_name572.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: with_key, constraint_name, check_key, read_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 804:9: -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? )
            {
                // OracleParser.g:804:12: ^( with_key ( read_key )? ( check_key )? ( constraint_name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_with_key.nextNode(), root_1);

                // OracleParser.g:804:23: ( read_key )?
                if ( stream_read_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_read_key.nextTree());

                }
                stream_read_key.reset();
                // OracleParser.g:804:33: ( check_key )?
                if ( stream_check_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_check_key.nextTree());

                }
                stream_check_key.reset();
                // OracleParser.g:804:44: ( constraint_name )?
                if ( stream_constraint_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraint_name.nextTree());

                }
                stream_constraint_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 882, subquery_restriction_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subquery_restriction_clause"

    public static class sample_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sample_clause"
    // OracleParser.g:807:1: sample_clause : sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )? -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? ) ;
    public final OracleParser.sample_clause_return sample_clause() throws RecognitionException {
        OracleParser.sample_clause_return retval = new OracleParser.sample_clause_return();
        retval.start = input.LT(1);
        int sample_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN575=null;
        Token COMMA576=null;
        Token RIGHT_PAREN577=null;
        OracleParser.expression_return e1 = null;

        OracleParser.expression_return e2 = null;

        OracleParser_Keys.sample_key_return sample_key573 = null;

        OracleParser_Keys.block_key_return block_key574 = null;

        OracleParser.seed_part_return seed_part578 = null;


        Object LEFT_PAREN575_tree=null;
        Object COMMA576_tree=null;
        Object RIGHT_PAREN577_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_seed_part=new RewriteRuleSubtreeStream(adaptor,"rule seed_part");
        RewriteRuleSubtreeStream stream_sample_key=new RewriteRuleSubtreeStream(adaptor,"rule sample_key");
        RewriteRuleSubtreeStream stream_block_key=new RewriteRuleSubtreeStream(adaptor,"rule block_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 883) ) { return retval; }
            // OracleParser.g:808:5: ( sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )? -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? ) )
            // OracleParser.g:808:10: sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )?
            {
            pushFollow(FOLLOW_sample_key_in_sample_clause7462);
            sample_key573=sample_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sample_key.add(sample_key573.getTree());
            // OracleParser.g:808:21: ( block_key )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("block")))) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // OracleParser.g:0:0: block_key
                    {
                    pushFollow(FOLLOW_block_key_in_sample_clause7464);
                    block_key574=block_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_key.add(block_key574.getTree());

                    }
                    break;

            }

            LEFT_PAREN575=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_sample_clause7476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN575);

            pushFollow(FOLLOW_expression_in_sample_clause7480);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
            // OracleParser.g:809:34: ( COMMA e2= expression )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==COMMA) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // OracleParser.g:809:35: COMMA e2= expression
                    {
                    COMMA576=(Token)match(input,COMMA,FOLLOW_COMMA_in_sample_clause7483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA576);

                    pushFollow(FOLLOW_expression_in_sample_clause7487);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

                    }
                    break;

            }

            RIGHT_PAREN577=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_sample_clause7491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN577);

            // OracleParser.g:810:9: ( seed_part )?
            int alt192=2;
            alt192 = dfa192.predict(input);
            switch (alt192) {
                case 1 :
                    // OracleParser.g:0:0: seed_part
                    {
                    pushFollow(FOLLOW_seed_part_in_sample_clause7501);
                    seed_part578=seed_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_seed_part.add(seed_part578.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: e2, e1, block_key, seed_part, sample_key
            // token labels: 
            // rule labels: retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

            root_0 = (Object)adaptor.nil();
            // 811:9: -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? )
            {
                // OracleParser.g:811:12: ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_sample_key.nextNode(), root_1);

                // OracleParser.g:811:25: ( block_key )?
                if ( stream_block_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_block_key.nextTree());

                }
                stream_block_key.reset();
                // OracleParser.g:811:36: ^( EXPR $e1)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_e1.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:811:48: ( ^( EXPR $e2) )?
                if ( stream_e2.hasNext() ) {
                    // OracleParser.g:811:48: ^( EXPR $e2)
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                    adaptor.addChild(root_2, stream_e2.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_e2.reset();
                // OracleParser.g:811:61: ( seed_part )?
                if ( stream_seed_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_seed_part.nextTree());

                }
                stream_seed_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 883, sample_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sample_clause"

    public static class seed_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "seed_part"
    // OracleParser.g:814:1: seed_part : seed_key LEFT_PAREN expression RIGHT_PAREN -> ^( seed_key ^( EXPR expression ) ) ;
    public final OracleParser.seed_part_return seed_part() throws RecognitionException {
        OracleParser.seed_part_return retval = new OracleParser.seed_part_return();
        retval.start = input.LT(1);
        int seed_part_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN580=null;
        Token RIGHT_PAREN582=null;
        OracleParser_Keys.seed_key_return seed_key579 = null;

        OracleParser.expression_return expression581 = null;


        Object LEFT_PAREN580_tree=null;
        Object RIGHT_PAREN582_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_seed_key=new RewriteRuleSubtreeStream(adaptor,"rule seed_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 884) ) { return retval; }
            // OracleParser.g:815:5: ( seed_key LEFT_PAREN expression RIGHT_PAREN -> ^( seed_key ^( EXPR expression ) ) )
            // OracleParser.g:815:10: seed_key LEFT_PAREN expression RIGHT_PAREN
            {
            pushFollow(FOLLOW_seed_key_in_seed_part7557);
            seed_key579=seed_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_seed_key.add(seed_key579.getTree());
            LEFT_PAREN580=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_seed_part7559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN580);

            pushFollow(FOLLOW_expression_in_seed_part7561);
            expression581=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression581.getTree());
            RIGHT_PAREN582=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_seed_part7563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN582);



            // AST REWRITE
            // elements: seed_key, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 816:9: -> ^( seed_key ^( EXPR expression ) )
            {
                // OracleParser.g:816:12: ^( seed_key ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_seed_key.nextNode(), root_1);

                // OracleParser.g:816:23: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 884, seed_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "seed_part"

    public static class cursor_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_expression"
    // OracleParser.g:822:1: cursor_expression : cursor_key LEFT_PAREN subquery RIGHT_PAREN ;
    public final OracleParser.cursor_expression_return cursor_expression() throws RecognitionException {
        OracleParser.cursor_expression_return retval = new OracleParser.cursor_expression_return();
        retval.start = input.LT(1);
        int cursor_expression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN584=null;
        Token RIGHT_PAREN586=null;
        OracleParser_Keys.cursor_key_return cursor_key583 = null;

        OracleParser.subquery_return subquery585 = null;


        Object LEFT_PAREN584_tree=null;
        Object RIGHT_PAREN586_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 885) ) { return retval; }
            // OracleParser.g:823:5: ( cursor_key LEFT_PAREN subquery RIGHT_PAREN )
            // OracleParser.g:823:10: cursor_key LEFT_PAREN subquery RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cursor_key_in_cursor_expression7606);
            cursor_key583=cursor_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_key583.getTree());
            LEFT_PAREN584=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cursor_expression7608); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN584_tree = (Object)adaptor.create(LEFT_PAREN584);
            adaptor.addChild(root_0, LEFT_PAREN584_tree);
            }
            pushFollow(FOLLOW_subquery_in_cursor_expression7610);
            subquery585=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery585.getTree());
            RIGHT_PAREN586=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cursor_expression7612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN586_tree = (Object)adaptor.create(RIGHT_PAREN586);
            adaptor.addChild(root_0, RIGHT_PAREN586_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 885, cursor_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_expression"

    public static class expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_list"
    // OracleParser.g:826:1: expression_list : LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN -> ^( EXPR_LIST ( ^( EXPR expression ) )* ) ;
    public final OracleParser.expression_list_return expression_list() throws RecognitionException {
        OracleParser.expression_list_return retval = new OracleParser.expression_list_return();
        retval.start = input.LT(1);
        int expression_list_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN587=null;
        Token COMMA589=null;
        Token RIGHT_PAREN591=null;
        OracleParser.expression_return expression588 = null;

        OracleParser.expression_return expression590 = null;


        Object LEFT_PAREN587_tree=null;
        Object COMMA589_tree=null;
        Object RIGHT_PAREN591_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 886) ) { return retval; }
            // OracleParser.g:827:5: ( LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN -> ^( EXPR_LIST ( ^( EXPR expression ) )* ) )
            // OracleParser.g:827:10: LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN
            {
            LEFT_PAREN587=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_expression_list7632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN587);

            // OracleParser.g:827:21: ( expression )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( ((LA193_0>=UNSIGNED_INTEGER && LA193_0<=MINUS_SIGN)||LA193_0==NATIONAL_CHAR_STRING_LIT||(LA193_0>=EXACT_NUM_LIT && LA193_0<=CHAR_STRING)||LA193_0==CHAR_STRING_PERL||LA193_0==DELIMITED_ID||LA193_0==LEFT_PAREN||LA193_0==PLUS_SIGN||LA193_0==COLON||LA193_0==BINDVAR||LA193_0==INTRODUCER||LA193_0==SQL92_RESERVED_ALL||LA193_0==SQL92_RESERVED_ANY||LA193_0==SQL92_RESERVED_CASE||LA193_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA193_0>=SQL92_RESERVED_CURSOR && LA193_0<=SQL92_RESERVED_DATE)||LA193_0==SQL92_RESERVED_DEFAULT||LA193_0==SQL92_RESERVED_DISTINCT||(LA193_0>=SQL92_RESERVED_EXISTS && LA193_0<=SQL92_RESERVED_FALSE)||LA193_0==SQL92_RESERVED_NOT||LA193_0==SQL92_RESERVED_NULL||LA193_0==SQL92_RESERVED_PRIOR||LA193_0==SQL92_RESERVED_TRUE||LA193_0==REGULAR_ID) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // OracleParser.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_expression_list7634);
                    expression588=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression588.getTree());

                    }
                    break;

            }

            // OracleParser.g:827:33: ( COMMA expression )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==COMMA) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // OracleParser.g:827:34: COMMA expression
            	    {
            	    COMMA589=(Token)match(input,COMMA,FOLLOW_COMMA_in_expression_list7638); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA589);

            	    pushFollow(FOLLOW_expression_in_expression_list7640);
            	    expression590=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression590.getTree());

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);

            RIGHT_PAREN591=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_expression_list7644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN591);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 828:9: -> ^( EXPR_LIST ( ^( EXPR expression ) )* )
            {
                // OracleParser.g:828:12: ^( EXPR_LIST ( ^( EXPR expression ) )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR_LIST, "EXPR_LIST"), root_1);

                // OracleParser.g:828:24: ( ^( EXPR expression ) )*
                while ( stream_expression.hasNext() ) {
                    // OracleParser.g:828:24: ^( EXPR expression )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                    adaptor.addChild(root_2, stream_expression.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 886, expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression_list"

    public static class condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition"
    // OracleParser.g:831:1: condition : expression ;
    public final OracleParser.condition_return condition() throws RecognitionException {
        OracleParser.condition_return retval = new OracleParser.condition_return();
        retval.start = input.LT(1);
        int condition_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.expression_return expression592 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 887) ) { return retval; }
            // OracleParser.g:832:5: ( expression )
            // OracleParser.g:832:11: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_condition7686);
            expression592=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression592.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 887, condition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition"

    public static class condition_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_wrapper"
    // OracleParser.g:835:1: condition_wrapper : expression -> ^( LOGIC_EXPR expression ) ;
    public final OracleParser.condition_wrapper_return condition_wrapper() throws RecognitionException {
        OracleParser.condition_wrapper_return retval = new OracleParser.condition_wrapper_return();
        retval.start = input.LT(1);
        int condition_wrapper_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.expression_return expression593 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 888) ) { return retval; }
            // OracleParser.g:836:5: ( expression -> ^( LOGIC_EXPR expression ) )
            // OracleParser.g:836:10: expression
            {
            pushFollow(FOLLOW_expression_in_condition_wrapper7706);
            expression593=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression593.getTree());


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 837:9: -> ^( LOGIC_EXPR expression )
            {
                // OracleParser.g:837:12: ^( LOGIC_EXPR expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 888, condition_wrapper_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_wrapper"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // OracleParser.g:840:1: expression : ( ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression | logical_and_expression ( or_key logical_and_expression )* );
    public final OracleParser.expression_return expression() throws RecognitionException {
        OracleParser.expression_return retval = new OracleParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.cursor_expression_return cursor_expression594 = null;

        OracleParser.logical_and_expression_return logical_and_expression595 = null;

        OracleParser_Keys.or_key_return or_key596 = null;

        OracleParser.logical_and_expression_return logical_and_expression597 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 889) ) { return retval; }
            // OracleParser.g:841:5: ( ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression | logical_and_expression ( or_key logical_and_expression )* )
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==SQL92_RESERVED_CURSOR) && (synpred242_OracleParser())) {
                alt196=1;
            }
            else if ( ((LA196_0>=UNSIGNED_INTEGER && LA196_0<=MINUS_SIGN)||LA196_0==NATIONAL_CHAR_STRING_LIT||(LA196_0>=EXACT_NUM_LIT && LA196_0<=CHAR_STRING)||LA196_0==CHAR_STRING_PERL||LA196_0==DELIMITED_ID||LA196_0==LEFT_PAREN||LA196_0==PLUS_SIGN||LA196_0==COLON||LA196_0==BINDVAR||LA196_0==INTRODUCER||LA196_0==SQL92_RESERVED_ALL||LA196_0==SQL92_RESERVED_ANY||LA196_0==SQL92_RESERVED_CASE||LA196_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA196_0==SQL92_RESERVED_DATE||LA196_0==SQL92_RESERVED_DEFAULT||LA196_0==SQL92_RESERVED_DISTINCT||(LA196_0>=SQL92_RESERVED_EXISTS && LA196_0<=SQL92_RESERVED_FALSE)||LA196_0==SQL92_RESERVED_NOT||LA196_0==SQL92_RESERVED_NULL||LA196_0==SQL92_RESERVED_PRIOR||LA196_0==SQL92_RESERVED_TRUE||LA196_0==REGULAR_ID) ) {
                alt196=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }
            switch (alt196) {
                case 1 :
                    // OracleParser.g:841:10: ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cursor_expression_in_expression7756);
                    cursor_expression594=cursor_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_expression594.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:842:10: logical_and_expression ( or_key logical_and_expression )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logical_and_expression_in_expression7767);
                    logical_and_expression595=logical_and_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_and_expression595.getTree());
                    // OracleParser.g:842:33: ( or_key logical_and_expression )*
                    loop195:
                    do {
                        int alt195=2;
                        int LA195_0 = input.LA(1);

                        if ( (LA195_0==SQL92_RESERVED_OR) ) {
                            int LA195_2 = input.LA(2);

                            if ( (synpred243_OracleParser()) ) {
                                alt195=1;
                            }


                        }


                        switch (alt195) {
                    	case 1 :
                    	    // OracleParser.g:842:35: or_key logical_and_expression
                    	    {
                    	    pushFollow(FOLLOW_or_key_in_expression7771);
                    	    or_key596=or_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(or_key596.getTree(), root_0);
                    	    pushFollow(FOLLOW_logical_and_expression_in_expression7774);
                    	    logical_and_expression597=logical_and_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_and_expression597.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop195;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 889, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class expression_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_wrapper"
    // OracleParser.g:845:1: expression_wrapper : expression -> ^( EXPR expression ) ;
    public final OracleParser.expression_wrapper_return expression_wrapper() throws RecognitionException {
        OracleParser.expression_wrapper_return retval = new OracleParser.expression_wrapper_return();
        retval.start = input.LT(1);
        int expression_wrapper_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.expression_return expression598 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 890) ) { return retval; }
            // OracleParser.g:846:5: ( expression -> ^( EXPR expression ) )
            // OracleParser.g:846:10: expression
            {
            pushFollow(FOLLOW_expression_in_expression_wrapper7797);
            expression598=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression598.getTree());


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 847:9: -> ^( EXPR expression )
            {
                // OracleParser.g:847:12: ^( EXPR expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 890, expression_wrapper_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression_wrapper"

    public static class logical_and_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logical_and_expression"
    // OracleParser.g:850:1: logical_and_expression : negated_expression ( and_key negated_expression )* ;
    public final OracleParser.logical_and_expression_return logical_and_expression() throws RecognitionException {
        OracleParser.logical_and_expression_return retval = new OracleParser.logical_and_expression_return();
        retval.start = input.LT(1);
        int logical_and_expression_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.negated_expression_return negated_expression599 = null;

        OracleParser_Keys.and_key_return and_key600 = null;

        OracleParser.negated_expression_return negated_expression601 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 891) ) { return retval; }
            // OracleParser.g:851:5: ( negated_expression ( and_key negated_expression )* )
            // OracleParser.g:851:10: negated_expression ( and_key negated_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_negated_expression_in_logical_and_expression7833);
            negated_expression599=negated_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negated_expression599.getTree());
            // OracleParser.g:851:29: ( and_key negated_expression )*
            loop197:
            do {
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==SQL92_RESERVED_AND) ) {
                    int LA197_2 = input.LA(2);

                    if ( (synpred244_OracleParser()) ) {
                        alt197=1;
                    }


                }


                switch (alt197) {
            	case 1 :
            	    // OracleParser.g:851:31: and_key negated_expression
            	    {
            	    pushFollow(FOLLOW_and_key_in_logical_and_expression7837);
            	    and_key600=and_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(and_key600.getTree(), root_0);
            	    pushFollow(FOLLOW_negated_expression_in_logical_and_expression7840);
            	    negated_expression601=negated_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negated_expression601.getTree());

            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 891, logical_and_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logical_and_expression"

    public static class negated_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negated_expression"
    // OracleParser.g:854:1: negated_expression : ( not_key negated_expression | equality_expression );
    public final OracleParser.negated_expression_return negated_expression() throws RecognitionException {
        OracleParser.negated_expression_return retval = new OracleParser.negated_expression_return();
        retval.start = input.LT(1);
        int negated_expression_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.not_key_return not_key602 = null;

        OracleParser.negated_expression_return negated_expression603 = null;

        OracleParser.equality_expression_return equality_expression604 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 892) ) { return retval; }
            // OracleParser.g:855:5: ( not_key negated_expression | equality_expression )
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==SQL92_RESERVED_NOT) ) {
                alt198=1;
            }
            else if ( ((LA198_0>=UNSIGNED_INTEGER && LA198_0<=MINUS_SIGN)||LA198_0==NATIONAL_CHAR_STRING_LIT||(LA198_0>=EXACT_NUM_LIT && LA198_0<=CHAR_STRING)||LA198_0==CHAR_STRING_PERL||LA198_0==DELIMITED_ID||LA198_0==LEFT_PAREN||LA198_0==PLUS_SIGN||LA198_0==COLON||LA198_0==BINDVAR||LA198_0==INTRODUCER||LA198_0==SQL92_RESERVED_ALL||LA198_0==SQL92_RESERVED_ANY||LA198_0==SQL92_RESERVED_CASE||LA198_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA198_0==SQL92_RESERVED_DATE||LA198_0==SQL92_RESERVED_DEFAULT||LA198_0==SQL92_RESERVED_DISTINCT||(LA198_0>=SQL92_RESERVED_EXISTS && LA198_0<=SQL92_RESERVED_FALSE)||LA198_0==SQL92_RESERVED_NULL||LA198_0==SQL92_RESERVED_PRIOR||LA198_0==SQL92_RESERVED_TRUE||LA198_0==REGULAR_ID) ) {
                alt198=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }
            switch (alt198) {
                case 1 :
                    // OracleParser.g:855:10: not_key negated_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_not_key_in_negated_expression7863);
                    not_key602=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(not_key602.getTree(), root_0);
                    pushFollow(FOLLOW_negated_expression_in_negated_expression7866);
                    negated_expression603=negated_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, negated_expression603.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:856:10: equality_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equality_expression_in_negated_expression7877);
                    equality_expression604=equality_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equality_expression604.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 892, negated_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "negated_expression"

    public static class equality_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equality_expression"
    // OracleParser.g:859:1: equality_expression : ( multiset_expression -> multiset_expression ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )* ;
    public final OracleParser.equality_expression_return equality_expression() throws RecognitionException {
        OracleParser.equality_expression_return retval = new OracleParser.equality_expression_return();
        retval.start = input.LT(1);
        int equality_expression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN617=null;
        Token COMMA620=null;
        Token RIGHT_PAREN622=null;
        OracleParser.multiset_expression_return multiset_expression605 = null;

        OracleParser_Keys.is_key_return is_key606 = null;

        OracleParser_Keys.not_key_return not_key607 = null;

        OracleParser_Keys.null_key_return null_key608 = null;

        OracleParser_Keys.nan_key_return nan_key609 = null;

        OracleParser_Keys.present_key_return present_key610 = null;

        OracleParser_Keys.infinite_key_return infinite_key611 = null;

        OracleParser_Keys.a_key_return a_key612 = null;

        OracleParser_Keys.set_key_return set_key613 = null;

        OracleParser_Keys.empty_key_return empty_key614 = null;

        OracleParser_Keys.of_key_return of_key615 = null;

        OracleParser_Keys.type_key_return type_key616 = null;

        OracleParser_Keys.only_key_return only_key618 = null;

        OracleParser_Commons.type_spec_return type_spec619 = null;

        OracleParser_Commons.type_spec_return type_spec621 = null;


        Object LEFT_PAREN617_tree=null;
        Object COMMA620_tree=null;
        Object RIGHT_PAREN622_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
        RewriteRuleSubtreeStream stream_a_key=new RewriteRuleSubtreeStream(adaptor,"rule a_key");
        RewriteRuleSubtreeStream stream_infinite_key=new RewriteRuleSubtreeStream(adaptor,"rule infinite_key");
        RewriteRuleSubtreeStream stream_multiset_expression=new RewriteRuleSubtreeStream(adaptor,"rule multiset_expression");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_present_key=new RewriteRuleSubtreeStream(adaptor,"rule present_key");
        RewriteRuleSubtreeStream stream_nan_key=new RewriteRuleSubtreeStream(adaptor,"rule nan_key");
        RewriteRuleSubtreeStream stream_empty_key=new RewriteRuleSubtreeStream(adaptor,"rule empty_key");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        RewriteRuleSubtreeStream stream_only_key=new RewriteRuleSubtreeStream(adaptor,"rule only_key");
        RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");
            boolean isNegated = false;    
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 893) ) { return retval; }
            // OracleParser.g:861:5: ( ( multiset_expression -> multiset_expression ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )* )
            // OracleParser.g:861:10: ( multiset_expression -> multiset_expression ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )*
            {
            // OracleParser.g:861:10: ( multiset_expression -> multiset_expression )
            // OracleParser.g:861:11: multiset_expression
            {
            pushFollow(FOLLOW_multiset_expression_in_equality_expression7906);
            multiset_expression605=multiset_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiset_expression.add(multiset_expression605.getTree());


            // AST REWRITE
            // elements: multiset_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 861:31: -> multiset_expression
            {
                adaptor.addChild(root_0, stream_multiset_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            // OracleParser.g:862:5: ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==SQL92_RESERVED_IS) ) {
                    int LA204_2 = input.LA(2);

                    if ( (synpred256_OracleParser()) ) {
                        alt204=1;
                    }


                }


                switch (alt204) {
            	case 1 :
            	    // OracleParser.g:862:10: is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) )
            	    {
            	    pushFollow(FOLLOW_is_key_in_equality_expression7922);
            	    is_key606=is_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_is_key.add(is_key606.getTree());
            	    // OracleParser.g:862:17: ( not_key )?
            	    int alt199=2;
            	    int LA199_0 = input.LA(1);

            	    if ( (LA199_0==SQL92_RESERVED_NOT) ) {
            	        alt199=1;
            	    }
            	    switch (alt199) {
            	        case 1 :
            	            // OracleParser.g:862:18: not_key
            	            {
            	            pushFollow(FOLLOW_not_key_in_equality_expression7925);
            	            not_key607=not_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_not_key.add(not_key607.getTree());
            	            if ( state.backtracking==0 ) {
            	              isNegated = true;
            	            }

            	            }
            	            break;

            	    }

            	    // OracleParser.g:863:9: ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) )
            	    int alt203=7;
            	    switch ( input.LA(1) ) {
            	    case SQL92_RESERVED_NULL:
            	        {
            	        alt203=1;
            	        }
            	        break;
            	    case REGULAR_ID:
            	        {
            	        int LA203_2 = input.LA(2);

            	        if ( (LA203_2==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("a")))) {
            	            alt203=5;
            	        }
            	        else if ( ((synpred248_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("nan")))) ) {
            	            alt203=2;
            	        }
            	        else if ( ((synpred249_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("present")))) ) {
            	            alt203=3;
            	        }
            	        else if ( ((synpred250_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("infinite")))) ) {
            	            alt203=4;
            	        }
            	        else if ( ((synpred252_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("empty")))) ) {
            	            alt203=6;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 203, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL92_RESERVED_OF:
            	        {
            	        alt203=7;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 203, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt203) {
            	        case 1 :
            	            // OracleParser.g:863:14: null_key
            	            {
            	            pushFollow(FOLLOW_null_key_in_equality_expression7944);
            	            null_key608=null_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_null_key.add(null_key608.getTree());


            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 864:17: -> {isNegated}? ^( IS_NOT_NULL $equality_expression)
            	            if (isNegated) {
            	                // OracleParser.g:864:33: ^( IS_NOT_NULL $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_NOT_NULL, "IS_NOT_NULL"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }
            	            else // 865:17: -> ^( IS_NULL $equality_expression)
            	            {
            	                // OracleParser.g:865:20: ^( IS_NULL $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_NULL, "IS_NULL"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 2 :
            	            // OracleParser.g:866:14: nan_key
            	            {
            	            pushFollow(FOLLOW_nan_key_in_equality_expression8011);
            	            nan_key609=nan_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_nan_key.add(nan_key609.getTree());


            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 867:17: -> {isNegated}? ^( IS_NOT_NAN $equality_expression)
            	            if (isNegated) {
            	                // OracleParser.g:867:33: ^( IS_NOT_NAN $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_NOT_NAN, "IS_NOT_NAN"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }
            	            else // 868:17: -> ^( IS_NAN $equality_expression)
            	            {
            	                // OracleParser.g:868:20: ^( IS_NAN $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_NAN, "IS_NAN"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 3 :
            	            // OracleParser.g:869:14: present_key
            	            {
            	            pushFollow(FOLLOW_present_key_in_equality_expression8078);
            	            present_key610=present_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_present_key.add(present_key610.getTree());


            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 870:17: -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression)
            	            if (isNegated) {
            	                // OracleParser.g:870:33: ^( IS_NOT_PRESENT $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_NOT_PRESENT, "IS_NOT_PRESENT"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }
            	            else // 871:17: -> ^( IS_PRESENT $equality_expression)
            	            {
            	                // OracleParser.g:871:20: ^( IS_PRESENT $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_PRESENT, "IS_PRESENT"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 4 :
            	            // OracleParser.g:872:14: infinite_key
            	            {
            	            pushFollow(FOLLOW_infinite_key_in_equality_expression8145);
            	            infinite_key611=infinite_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_infinite_key.add(infinite_key611.getTree());


            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 873:17: -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression)
            	            if (isNegated) {
            	                // OracleParser.g:873:33: ^( IS_NOT_INFINITE $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_NOT_INFINITE, "IS_NOT_INFINITE"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }
            	            else // 874:17: -> ^( IS_INFINITE $equality_expression)
            	            {
            	                // OracleParser.g:874:20: ^( IS_INFINITE $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_INFINITE, "IS_INFINITE"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 5 :
            	            // OracleParser.g:875:14: a_key set_key
            	            {
            	            pushFollow(FOLLOW_a_key_in_equality_expression8212);
            	            a_key612=a_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_a_key.add(a_key612.getTree());
            	            pushFollow(FOLLOW_set_key_in_equality_expression8214);
            	            set_key613=set_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_set_key.add(set_key613.getTree());


            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 876:17: -> {isNegated}? ^( IS_NOT_A_SET $equality_expression)
            	            if (isNegated) {
            	                // OracleParser.g:876:33: ^( IS_NOT_A_SET $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_NOT_A_SET, "IS_NOT_A_SET"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }
            	            else // 877:17: -> ^( IS_A_SET $equality_expression)
            	            {
            	                // OracleParser.g:877:20: ^( IS_A_SET $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_A_SET, "IS_A_SET"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 6 :
            	            // OracleParser.g:878:14: empty_key
            	            {
            	            pushFollow(FOLLOW_empty_key_in_equality_expression8281);
            	            empty_key614=empty_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_empty_key.add(empty_key614.getTree());


            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 879:17: -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression)
            	            if (isNegated) {
            	                // OracleParser.g:879:33: ^( IS_NOT_EMPTY $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_NOT_EMPTY, "IS_NOT_EMPTY"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }
            	            else // 880:17: -> ^( IS_EMPTY $equality_expression)
            	            {
            	                // OracleParser.g:880:20: ^( IS_EMPTY $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_EMPTY, "IS_EMPTY"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 7 :
            	            // OracleParser.g:881:14: of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN
            	            {
            	            pushFollow(FOLLOW_of_key_in_equality_expression8348);
            	            of_key615=of_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_of_key.add(of_key615.getTree());
            	            // OracleParser.g:881:21: ( type_key )?
            	            int alt200=2;
            	            int LA200_0 = input.LA(1);

            	            if ( (LA200_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {
            	                alt200=1;
            	            }
            	            switch (alt200) {
            	                case 1 :
            	                    // OracleParser.g:0:0: type_key
            	                    {
            	                    pushFollow(FOLLOW_type_key_in_equality_expression8350);
            	                    type_key616=type_key();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_type_key.add(type_key616.getTree());

            	                    }
            	                    break;

            	            }

            	            LEFT_PAREN617=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_equality_expression8353); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN617);

            	            // OracleParser.g:881:42: ( only_key )?
            	            int alt201=2;
            	            int LA201_0 = input.LA(1);

            	            if ( (LA201_0==REGULAR_ID) ) {
            	                int LA201_1 = input.LA(2);

            	                if ( ((synpred254_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("only")))) ) {
            	                    alt201=1;
            	                }
            	            }
            	            switch (alt201) {
            	                case 1 :
            	                    // OracleParser.g:0:0: only_key
            	                    {
            	                    pushFollow(FOLLOW_only_key_in_equality_expression8355);
            	                    only_key618=only_key();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_only_key.add(only_key618.getTree());

            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_type_spec_in_equality_expression8358);
            	            type_spec619=type_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_type_spec.add(type_spec619.getTree());
            	            // OracleParser.g:881:62: ( COMMA type_spec )*
            	            loop202:
            	            do {
            	                int alt202=2;
            	                int LA202_0 = input.LA(1);

            	                if ( (LA202_0==COMMA) ) {
            	                    alt202=1;
            	                }


            	                switch (alt202) {
            	            	case 1 :
            	            	    // OracleParser.g:881:63: COMMA type_spec
            	            	    {
            	            	    COMMA620=(Token)match(input,COMMA,FOLLOW_COMMA_in_equality_expression8361); if (state.failed) return retval; 
            	            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA620);

            	            	    pushFollow(FOLLOW_type_spec_in_equality_expression8363);
            	            	    type_spec621=type_spec();

            	            	    state._fsp--;
            	            	    if (state.failed) return retval;
            	            	    if ( state.backtracking==0 ) stream_type_spec.add(type_spec621.getTree());

            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop202;
            	                }
            	            } while (true);

            	            RIGHT_PAREN622=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_equality_expression8367); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN622);



            	            // AST REWRITE
            	            // elements: type_spec, equality_expression, equality_expression, type_spec
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 882:17: -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ )
            	            if (isNegated) {
            	                // OracleParser.g:882:33: ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ )
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_NOT_OF_TYPE, "IS_NOT_OF_TYPE"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                if ( !(stream_type_spec.hasNext()) ) {
            	                    throw new RewriteEarlyExitException();
            	                }
            	                while ( stream_type_spec.hasNext() ) {
            	                    adaptor.addChild(root_1, stream_type_spec.nextTree());

            	                }
            	                stream_type_spec.reset();

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }
            	            else // 883:17: -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ )
            	            {
            	                // OracleParser.g:883:20: ^( IS_OF_TYPE $equality_expression ( type_spec )+ )
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IS_OF_TYPE, "IS_OF_TYPE"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                if ( !(stream_type_spec.hasNext()) ) {
            	                    throw new RewriteEarlyExitException();
            	                }
            	                while ( stream_type_spec.hasNext() ) {
            	                    adaptor.addChild(root_1, stream_type_spec.nextTree());

            	                }
            	                stream_type_spec.reset();

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 893, equality_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equality_expression"

    public static class multiset_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiset_expression"
    // OracleParser.g:889:1: multiset_expression : ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_expression ^( EXPR concatenation ) ) )? ;
    public final OracleParser.multiset_expression_return multiset_expression() throws RecognitionException {
        OracleParser.multiset_expression_return retval = new OracleParser.multiset_expression_return();
        retval.start = input.LT(1);
        int multiset_expression_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.relational_expression_return relational_expression623 = null;

        OracleParser.multiset_type_return multiset_type624 = null;

        OracleParser_Keys.of_key_return of_key625 = null;

        OracleParser.concatenation_return concatenation626 = null;


        RewriteRuleSubtreeStream stream_multiset_type=new RewriteRuleSubtreeStream(adaptor,"rule multiset_type");
        RewriteRuleSubtreeStream stream_relational_expression=new RewriteRuleSubtreeStream(adaptor,"rule relational_expression");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 894) ) { return retval; }
            // OracleParser.g:890:5: ( ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_expression ^( EXPR concatenation ) ) )? )
            // OracleParser.g:890:10: ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_expression ^( EXPR concatenation ) ) )?
            {
            // OracleParser.g:890:10: ( relational_expression -> relational_expression )
            // OracleParser.g:890:11: relational_expression
            {
            pushFollow(FOLLOW_relational_expression_in_multiset_expression8464);
            relational_expression623=relational_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relational_expression.add(relational_expression623.getTree());


            // AST REWRITE
            // elements: relational_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 890:33: -> relational_expression
            {
                adaptor.addChild(root_0, stream_relational_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            // OracleParser.g:891:5: ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_expression ^( EXPR concatenation ) ) )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==REGULAR_ID) ) {
                int LA206_1 = input.LA(2);

                if ( (((synpred258_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("submultiset")))||(synpred258_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("member"))))) ) {
                    alt206=1;
                }
            }
            switch (alt206) {
                case 1 :
                    // OracleParser.g:891:10: multiset_type ( of_key )? concatenation
                    {
                    pushFollow(FOLLOW_multiset_type_in_multiset_expression8480);
                    multiset_type624=multiset_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_multiset_type.add(multiset_type624.getTree());
                    // OracleParser.g:891:24: ( of_key )?
                    int alt205=2;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==SQL92_RESERVED_OF) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            // OracleParser.g:0:0: of_key
                            {
                            pushFollow(FOLLOW_of_key_in_multiset_expression8482);
                            of_key625=of_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_of_key.add(of_key625.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_concatenation_in_multiset_expression8485);
                    concatenation626=concatenation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_concatenation.add(concatenation626.getTree());


                    // AST REWRITE
                    // elements: concatenation, multiset_expression, multiset_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 892:9: -> ^( multiset_type $multiset_expression ^( EXPR concatenation ) )
                    {
                        // OracleParser.g:892:12: ^( multiset_type $multiset_expression ^( EXPR concatenation ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_multiset_type.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        // OracleParser.g:892:49: ^( EXPR concatenation )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                        adaptor.addChild(root_2, stream_concatenation.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 894, multiset_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiset_expression"

    public static class multiset_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiset_type"
    // OracleParser.g:895:1: multiset_type : ( member_key | submultiset_key );
    public final OracleParser.multiset_type_return multiset_type() throws RecognitionException {
        OracleParser.multiset_type_return retval = new OracleParser.multiset_type_return();
        retval.start = input.LT(1);
        int multiset_type_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.member_key_return member_key627 = null;

        OracleParser_Keys.submultiset_key_return submultiset_key628 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 895) ) { return retval; }
            // OracleParser.g:896:5: ( member_key | submultiset_key )
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("submultiset")))) {
                int LA207_1 = input.LA(2);

                if ( ((synpred259_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("member")))) ) {
                    alt207=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("submultiset"))) ) {
                    alt207=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }
            switch (alt207) {
                case 1 :
                    // OracleParser.g:896:10: member_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_member_key_in_multiset_type8530);
                    member_key627=member_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, member_key627.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:897:10: submultiset_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_submultiset_key_in_multiset_type8541);
                    submultiset_key628=submultiset_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, submultiset_key628.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 895, multiset_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiset_type"

    public static class relational_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relational_expression"
    // OracleParser.g:900:1: relational_expression : compound_expression ( ( EQUALS_OP | not_equal_op | LESS_THAN_OP | GREATER_THAN_OP | less_than_or_equals_op | greater_than_or_equals_op ) compound_expression )* ;
    public final OracleParser.relational_expression_return relational_expression() throws RecognitionException {
        OracleParser.relational_expression_return retval = new OracleParser.relational_expression_return();
        retval.start = input.LT(1);
        int relational_expression_StartIndex = input.index();
        Object root_0 = null;

        Token EQUALS_OP630=null;
        Token LESS_THAN_OP632=null;
        Token GREATER_THAN_OP633=null;
        OracleParser.compound_expression_return compound_expression629 = null;

        OracleParser_Commons.not_equal_op_return not_equal_op631 = null;

        OracleParser_Commons.less_than_or_equals_op_return less_than_or_equals_op634 = null;

        OracleParser_Commons.greater_than_or_equals_op_return greater_than_or_equals_op635 = null;

        OracleParser.compound_expression_return compound_expression636 = null;


        Object EQUALS_OP630_tree=null;
        Object LESS_THAN_OP632_tree=null;
        Object GREATER_THAN_OP633_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 896) ) { return retval; }
            // OracleParser.g:901:5: ( compound_expression ( ( EQUALS_OP | not_equal_op | LESS_THAN_OP | GREATER_THAN_OP | less_than_or_equals_op | greater_than_or_equals_op ) compound_expression )* )
            // OracleParser.g:901:10: compound_expression ( ( EQUALS_OP | not_equal_op | LESS_THAN_OP | GREATER_THAN_OP | less_than_or_equals_op | greater_than_or_equals_op ) compound_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_compound_expression_in_relational_expression8561);
            compound_expression629=compound_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_expression629.getTree());
            // OracleParser.g:902:5: ( ( EQUALS_OP | not_equal_op | LESS_THAN_OP | GREATER_THAN_OP | less_than_or_equals_op | greater_than_or_equals_op ) compound_expression )*
            loop209:
            do {
                int alt209=2;
                alt209 = dfa209.predict(input);
                switch (alt209) {
            	case 1 :
            	    // OracleParser.g:902:7: ( EQUALS_OP | not_equal_op | LESS_THAN_OP | GREATER_THAN_OP | less_than_or_equals_op | greater_than_or_equals_op ) compound_expression
            	    {
            	    // OracleParser.g:902:7: ( EQUALS_OP | not_equal_op | LESS_THAN_OP | GREATER_THAN_OP | less_than_or_equals_op | greater_than_or_equals_op )
            	    int alt208=6;
            	    switch ( input.LA(1) ) {
            	    case EQUALS_OP:
            	        {
            	        alt208=1;
            	        }
            	        break;
            	    case NOT_EQUAL_OP:
            	    case CARRET_OPERATOR_PART:
            	    case EXCLAMATION_OPERATOR_PART:
            	        {
            	        alt208=2;
            	        }
            	        break;
            	    case LESS_THAN_OP:
            	        {
            	        switch ( input.LA(2) ) {
            	        case GREATER_THAN_OP:
            	            {
            	            alt208=2;
            	            }
            	            break;
            	        case EQUALS_OP:
            	            {
            	            alt208=5;
            	            }
            	            break;
            	        case UNSIGNED_INTEGER:
            	        case APPROXIMATE_NUM_LIT:
            	        case MINUS_SIGN:
            	        case NATIONAL_CHAR_STRING_LIT:
            	        case EXACT_NUM_LIT:
            	        case CHAR_STRING:
            	        case CHAR_STRING_PERL:
            	        case DELIMITED_ID:
            	        case LEFT_PAREN:
            	        case PLUS_SIGN:
            	        case COLON:
            	        case BINDVAR:
            	        case INTRODUCER:
            	        case SQL92_RESERVED_ALL:
            	        case SQL92_RESERVED_ANY:
            	        case SQL92_RESERVED_CASE:
            	        case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	        case SQL92_RESERVED_DATE:
            	        case SQL92_RESERVED_DEFAULT:
            	        case SQL92_RESERVED_DISTINCT:
            	        case SQL92_RESERVED_EXISTS:
            	        case SQL92_RESERVED_FALSE:
            	        case SQL92_RESERVED_NULL:
            	        case SQL92_RESERVED_PRIOR:
            	        case SQL92_RESERVED_TRUE:
            	        case REGULAR_ID:
            	            {
            	            alt208=3;
            	            }
            	            break;
            	        default:
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 208, 3, input);

            	            throw nvae;
            	        }

            	        }
            	        break;
            	    case GREATER_THAN_OP:
            	        {
            	        int LA208_4 = input.LA(2);

            	        if ( (LA208_4==EQUALS_OP) ) {
            	            alt208=6;
            	        }
            	        else if ( ((LA208_4>=UNSIGNED_INTEGER && LA208_4<=MINUS_SIGN)||LA208_4==NATIONAL_CHAR_STRING_LIT||(LA208_4>=EXACT_NUM_LIT && LA208_4<=CHAR_STRING)||LA208_4==CHAR_STRING_PERL||LA208_4==DELIMITED_ID||LA208_4==LEFT_PAREN||LA208_4==PLUS_SIGN||LA208_4==COLON||LA208_4==BINDVAR||LA208_4==INTRODUCER||LA208_4==SQL92_RESERVED_ALL||LA208_4==SQL92_RESERVED_ANY||LA208_4==SQL92_RESERVED_CASE||LA208_4==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA208_4==SQL92_RESERVED_DATE||LA208_4==SQL92_RESERVED_DEFAULT||LA208_4==SQL92_RESERVED_DISTINCT||(LA208_4>=SQL92_RESERVED_EXISTS && LA208_4<=SQL92_RESERVED_FALSE)||LA208_4==SQL92_RESERVED_NULL||LA208_4==SQL92_RESERVED_PRIOR||LA208_4==SQL92_RESERVED_TRUE||LA208_4==REGULAR_ID) ) {
            	            alt208=4;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 208, 4, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case LESS_THAN_OR_EQUALS_OP:
            	        {
            	        alt208=5;
            	        }
            	        break;
            	    case GREATER_THAN_OR_EQUALS_OP:
            	        {
            	        alt208=6;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 208, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt208) {
            	        case 1 :
            	            // OracleParser.g:902:9: EQUALS_OP
            	            {
            	            EQUALS_OP630=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_relational_expression8571); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUALS_OP630_tree = (Object)adaptor.create(EQUALS_OP630);
            	            root_0 = (Object)adaptor.becomeRoot(EQUALS_OP630_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // OracleParser.g:902:22: not_equal_op
            	            {
            	            pushFollow(FOLLOW_not_equal_op_in_relational_expression8576);
            	            not_equal_op631=not_equal_op();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(not_equal_op631.getTree(), root_0);

            	            }
            	            break;
            	        case 3 :
            	            // OracleParser.g:902:38: LESS_THAN_OP
            	            {
            	            LESS_THAN_OP632=(Token)match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_relational_expression8581); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_THAN_OP632_tree = (Object)adaptor.create(LESS_THAN_OP632);
            	            root_0 = (Object)adaptor.becomeRoot(LESS_THAN_OP632_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // OracleParser.g:902:54: GREATER_THAN_OP
            	            {
            	            GREATER_THAN_OP633=(Token)match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_relational_expression8586); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_THAN_OP633_tree = (Object)adaptor.create(GREATER_THAN_OP633);
            	            root_0 = (Object)adaptor.becomeRoot(GREATER_THAN_OP633_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // OracleParser.g:902:73: less_than_or_equals_op
            	            {
            	            pushFollow(FOLLOW_less_than_or_equals_op_in_relational_expression8591);
            	            less_than_or_equals_op634=less_than_or_equals_op();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(less_than_or_equals_op634.getTree(), root_0);

            	            }
            	            break;
            	        case 6 :
            	            // OracleParser.g:902:99: greater_than_or_equals_op
            	            {
            	            pushFollow(FOLLOW_greater_than_or_equals_op_in_relational_expression8596);
            	            greater_than_or_equals_op635=greater_than_or_equals_op();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(greater_than_or_equals_op635.getTree(), root_0);

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_compound_expression_in_relational_expression8601);
            	    compound_expression636=compound_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_expression636.getTree());

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 896, relational_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relational_expression"

    public static class compound_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_expression"
    // OracleParser.g:905:1: compound_expression : ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )? ;
    public final OracleParser.compound_expression_return compound_expression() throws RecognitionException {
        OracleParser.compound_expression_return retval = new OracleParser.compound_expression_return();
        retval.start = input.LT(1);
        int compound_expression_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.concatenation_return concatenation637 = null;

        OracleParser_Keys.not_key_return not_key638 = null;

        OracleParser_Keys.in_key_return in_key639 = null;

        OracleParser.in_elements_return in_elements640 = null;

        OracleParser_Keys.between_key_return between_key641 = null;

        OracleParser.between_elements_return between_elements642 = null;

        OracleParser.like_type_return like_type643 = null;

        OracleParser.concatenation_return concatenation644 = null;

        OracleParser.like_escape_part_return like_escape_part645 = null;


        RewriteRuleSubtreeStream stream_between_elements=new RewriteRuleSubtreeStream(adaptor,"rule between_elements");
        RewriteRuleSubtreeStream stream_like_escape_part=new RewriteRuleSubtreeStream(adaptor,"rule like_escape_part");
        RewriteRuleSubtreeStream stream_between_key=new RewriteRuleSubtreeStream(adaptor,"rule between_key");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_like_type=new RewriteRuleSubtreeStream(adaptor,"rule like_type");
        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_in_elements=new RewriteRuleSubtreeStream(adaptor,"rule in_elements");
            boolean isNegated = false;    
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 897) ) { return retval; }
            // OracleParser.g:907:5: ( ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )? )
            // OracleParser.g:907:10: ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )?
            {
            // OracleParser.g:907:10: ( concatenation -> concatenation )
            // OracleParser.g:907:11: concatenation
            {
            pushFollow(FOLLOW_concatenation_in_compound_expression8632);
            concatenation637=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(concatenation637.getTree());


            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 907:25: -> concatenation
            {
                adaptor.addChild(root_0, stream_concatenation.nextTree());

            }

            retval.tree = root_0;}
            }

            // OracleParser.g:908:5: ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )?
            int alt213=2;
            switch ( input.LA(1) ) {
                case SQL92_RESERVED_NOT:
                    {
                    int LA213_1 = input.LA(2);

                    if ( (synpred270_OracleParser()) ) {
                        alt213=1;
                    }
                    }
                    break;
                case SQL92_RESERVED_IN:
                    {
                    int LA213_2 = input.LA(2);

                    if ( (synpred270_OracleParser()) ) {
                        alt213=1;
                    }
                    }
                    break;
                case SQL92_RESERVED_BETWEEN:
                    {
                    int LA213_3 = input.LA(2);

                    if ( (synpred270_OracleParser()) ) {
                        alt213=1;
                    }
                    }
                    break;
                case SQL92_RESERVED_LIKE:
                    {
                    int LA213_4 = input.LA(2);

                    if ( (synpred270_OracleParser()) ) {
                        alt213=1;
                    }
                    }
                    break;
                case REGULAR_ID:
                    {
                    int LA213_5 = input.LA(2);

                    if ( (((synpred270_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("like4")))||(synpred270_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("likec")))||(synpred270_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("like2"))))) ) {
                        alt213=1;
                    }
                    }
                    break;
            }

            switch (alt213) {
                case 1 :
                    // OracleParser.g:908:10: ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) )
                    {
                    // OracleParser.g:908:10: ( not_key )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==SQL92_RESERVED_NOT) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // OracleParser.g:908:11: not_key
                            {
                            pushFollow(FOLLOW_not_key_in_compound_expression8649);
                            not_key638=not_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_not_key.add(not_key638.getTree());
                            if ( state.backtracking==0 ) {
                              isNegated = true;
                            }

                            }
                            break;

                    }

                    // OracleParser.g:909:9: ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) )
                    int alt212=3;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==SQL92_RESERVED_IN) ) {
                        alt212=1;
                    }
                    else if ( (LA212_0==SQL92_RESERVED_BETWEEN) ) {
                        alt212=2;
                    }
                    else if ( (LA212_0==SQL92_RESERVED_LIKE) ) {
                        alt212=3;
                    }
                    else if ( (LA212_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("like4"))||(input.LT(1).getText().equalsIgnoreCase("like2"))||(input.LT(1).getText().equalsIgnoreCase("likec"))))) {
                        alt212=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 0, input);

                        throw nvae;
                    }
                    switch (alt212) {
                        case 1 :
                            // OracleParser.g:909:14: in_key in_elements
                            {
                            pushFollow(FOLLOW_in_key_in_compound_expression8669);
                            in_key639=in_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_in_key.add(in_key639.getTree());
                            pushFollow(FOLLOW_in_elements_in_compound_expression8671);
                            in_elements640=in_elements();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_in_elements.add(in_elements640.getTree());


                            // AST REWRITE
                            // elements: in_elements, compound_expression, in_key, in_elements, compound_expression
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 910:17: -> {isNegated}? ^( NOT_IN $compound_expression in_elements )
                            if (isNegated) {
                                // OracleParser.g:910:33: ^( NOT_IN $compound_expression in_elements )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NOT_IN, "NOT_IN"), root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());
                                adaptor.addChild(root_1, stream_in_elements.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 911:17: -> ^( in_key $compound_expression in_elements )
                            {
                                // OracleParser.g:911:20: ^( in_key $compound_expression in_elements )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());
                                adaptor.addChild(root_1, stream_in_elements.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // OracleParser.g:912:14: between_key between_elements
                            {
                            pushFollow(FOLLOW_between_key_in_compound_expression8742);
                            between_key641=between_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_between_key.add(between_key641.getTree());
                            pushFollow(FOLLOW_between_elements_in_compound_expression8744);
                            between_elements642=between_elements();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_between_elements.add(between_elements642.getTree());


                            // AST REWRITE
                            // elements: between_elements, between_elements, compound_expression, between_key, compound_expression
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 913:17: -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements )
                            if (isNegated) {
                                // OracleParser.g:913:33: ^( NOT_BETWEEN $compound_expression between_elements )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());
                                adaptor.addChild(root_1, stream_between_elements.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 914:17: -> ^( between_key $compound_expression between_elements )
                            {
                                // OracleParser.g:914:20: ^( between_key $compound_expression between_elements )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(stream_between_key.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());
                                adaptor.addChild(root_1, stream_between_elements.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // OracleParser.g:915:14: like_type concatenation ( like_escape_part )?
                            {
                            pushFollow(FOLLOW_like_type_in_compound_expression8815);
                            like_type643=like_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_like_type.add(like_type643.getTree());
                            pushFollow(FOLLOW_concatenation_in_compound_expression8817);
                            concatenation644=concatenation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation.add(concatenation644.getTree());
                            // OracleParser.g:915:38: ( like_escape_part )?
                            int alt211=2;
                            int LA211_0 = input.LA(1);

                            if ( (LA211_0==REGULAR_ID) ) {
                                int LA211_1 = input.LA(2);

                                if ( ((synpred269_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("escape")))) ) {
                                    alt211=1;
                                }
                            }
                            switch (alt211) {
                                case 1 :
                                    // OracleParser.g:0:0: like_escape_part
                                    {
                                    pushFollow(FOLLOW_like_escape_part_in_compound_expression8819);
                                    like_escape_part645=like_escape_part();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_like_escape_part.add(like_escape_part645.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: concatenation, like_type, compound_expression, like_escape_part, like_escape_part, compound_expression, concatenation
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 916:17: -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
                            if (isNegated) {
                                // OracleParser.g:916:33: ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());
                                // OracleParser.g:916:65: ^( EXPR concatenation )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                                adaptor.addChild(root_2, stream_concatenation.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }
                                // OracleParser.g:916:87: ( like_escape_part )?
                                if ( stream_like_escape_part.hasNext() ) {
                                    adaptor.addChild(root_1, stream_like_escape_part.nextTree());

                                }
                                stream_like_escape_part.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 917:17: -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
                            {
                                // OracleParser.g:917:20: ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(stream_like_type.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());
                                // OracleParser.g:917:54: ^( EXPR concatenation )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                                adaptor.addChild(root_2, stream_concatenation.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }
                                // OracleParser.g:917:76: ( like_escape_part )?
                                if ( stream_like_escape_part.hasNext() ) {
                                    adaptor.addChild(root_1, stream_like_escape_part.nextTree());

                                }
                                stream_like_escape_part.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 897, compound_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compound_expression"

    public static class like_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "like_type"
    // OracleParser.g:922:1: like_type : ( like_key | likec_key | like2_key | like4_key );
    public final OracleParser.like_type_return like_type() throws RecognitionException {
        OracleParser.like_type_return retval = new OracleParser.like_type_return();
        retval.start = input.LT(1);
        int like_type_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.like_key_return like_key646 = null;

        OracleParser_Keys.likec_key_return likec_key647 = null;

        OracleParser_Keys.like2_key_return like2_key648 = null;

        OracleParser_Keys.like4_key_return like4_key649 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 898) ) { return retval; }
            // OracleParser.g:923:5: ( like_key | likec_key | like2_key | like4_key )
            int alt214=4;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==SQL92_RESERVED_LIKE) ) {
                alt214=1;
            }
            else if ( (LA214_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("like4")))) {
                int LA214_2 = input.LA(2);

                if ( ((synpred272_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("likec")))) ) {
                    alt214=2;
                }
                else if ( ((synpred273_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("like2")))) ) {
                    alt214=3;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("like4"))) ) {
                    alt214=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    // OracleParser.g:923:10: like_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_like_key_in_like_type8928);
                    like_key646=like_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, like_key646.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:924:10: likec_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_likec_key_in_like_type8939);
                    likec_key647=likec_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, likec_key647.getTree());

                    }
                    break;
                case 3 :
                    // OracleParser.g:925:10: like2_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_like2_key_in_like_type8950);
                    like2_key648=like2_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, like2_key648.getTree());

                    }
                    break;
                case 4 :
                    // OracleParser.g:926:10: like4_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_like4_key_in_like_type8961);
                    like4_key649=like4_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, like4_key649.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 898, like_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "like_type"

    public static class like_escape_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "like_escape_part"
    // OracleParser.g:929:1: like_escape_part : escape_key concatenation -> ^( EXPR concatenation ) ;
    public final OracleParser.like_escape_part_return like_escape_part() throws RecognitionException {
        OracleParser.like_escape_part_return retval = new OracleParser.like_escape_part_return();
        retval.start = input.LT(1);
        int like_escape_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.escape_key_return escape_key650 = null;

        OracleParser.concatenation_return concatenation651 = null;


        RewriteRuleSubtreeStream stream_escape_key=new RewriteRuleSubtreeStream(adaptor,"rule escape_key");
        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 899) ) { return retval; }
            // OracleParser.g:930:5: ( escape_key concatenation -> ^( EXPR concatenation ) )
            // OracleParser.g:930:10: escape_key concatenation
            {
            pushFollow(FOLLOW_escape_key_in_like_escape_part8981);
            escape_key650=escape_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escape_key.add(escape_key650.getTree());
            pushFollow(FOLLOW_concatenation_in_like_escape_part8983);
            concatenation651=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(concatenation651.getTree());


            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 931:9: -> ^( EXPR concatenation )
            {
                // OracleParser.g:931:12: ^( EXPR concatenation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_concatenation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 899, like_escape_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "like_escape_part"

    public static class in_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_elements"
    // OracleParser.g:934:1: in_elements : ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> subquery | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST ( concatenation_wrapper )+ ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) );
    public final OracleParser.in_elements_return in_elements() throws RecognitionException {
        OracleParser.in_elements_return retval = new OracleParser.in_elements_return();
        retval.start = input.LT(1);
        int in_elements_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN652=null;
        Token RIGHT_PAREN654=null;
        Token LEFT_PAREN655=null;
        Token COMMA657=null;
        Token RIGHT_PAREN659=null;
        OracleParser.subquery_return subquery653 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper656 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper658 = null;

        OracleParser_Commons.constant_return constant660 = null;

        OracleParser_Commons.bind_variable_return bind_variable661 = null;

        OracleParser_Commons.general_element_return general_element662 = null;


        Object LEFT_PAREN652_tree=null;
        Object RIGHT_PAREN654_tree=null;
        Object LEFT_PAREN655_tree=null;
        Object COMMA657_tree=null;
        Object RIGHT_PAREN659_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_concatenation_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule concatenation_wrapper");
        RewriteRuleSubtreeStream stream_bind_variable=new RewriteRuleSubtreeStream(adaptor,"rule bind_variable");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_general_element=new RewriteRuleSubtreeStream(adaptor,"rule general_element");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
            int mode = 0;    
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 900) ) { return retval; }
            // OracleParser.g:936:5: ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> subquery | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST ( concatenation_wrapper )+ ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) )
            int alt216=5;
            alt216 = dfa216.predict(input);
            switch (alt216) {
                case 1 :
                    // OracleParser.g:936:10: ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
                    {
                    LEFT_PAREN652=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_in_elements9041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN652);

                    pushFollow(FOLLOW_subquery_in_in_elements9043);
                    subquery653=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery653.getTree());
                    RIGHT_PAREN654=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_in_elements9045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN654);



                    // AST REWRITE
                    // elements: subquery
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 937:10: -> subquery
                    {
                        adaptor.addChild(root_0, stream_subquery.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:938:10: LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN
                    {
                    LEFT_PAREN655=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_in_elements9069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN655);

                    pushFollow(FOLLOW_concatenation_wrapper_in_in_elements9071);
                    concatenation_wrapper656=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_concatenation_wrapper.add(concatenation_wrapper656.getTree());
                    // OracleParser.g:938:43: ( COMMA concatenation_wrapper )*
                    loop215:
                    do {
                        int alt215=2;
                        int LA215_0 = input.LA(1);

                        if ( (LA215_0==COMMA) ) {
                            alt215=1;
                        }


                        switch (alt215) {
                    	case 1 :
                    	    // OracleParser.g:938:44: COMMA concatenation_wrapper
                    	    {
                    	    COMMA657=(Token)match(input,COMMA,FOLLOW_COMMA_in_in_elements9074); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA657);

                    	    pushFollow(FOLLOW_concatenation_wrapper_in_in_elements9076);
                    	    concatenation_wrapper658=concatenation_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_concatenation_wrapper.add(concatenation_wrapper658.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop215;
                        }
                    } while (true);

                    RIGHT_PAREN659=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_in_elements9080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN659);



                    // AST REWRITE
                    // elements: concatenation_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 939:10: -> ^( EXPR_LIST ( concatenation_wrapper )+ )
                    {
                        // OracleParser.g:939:13: ^( EXPR_LIST ( concatenation_wrapper )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR_LIST, "EXPR_LIST"), root_1);

                        if ( !(stream_concatenation_wrapper.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenation_wrapper.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenation_wrapper.nextTree());

                        }
                        stream_concatenation_wrapper.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // OracleParser.g:940:10: constant
                    {
                    pushFollow(FOLLOW_constant_in_in_elements9109);
                    constant660=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant660.getTree());


                    // AST REWRITE
                    // elements: constant
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 941:10: -> ^( EXPR_LIST constant )
                    {
                        // OracleParser.g:941:13: ^( EXPR_LIST constant )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR_LIST, "EXPR_LIST"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // OracleParser.g:942:10: bind_variable
                    {
                    pushFollow(FOLLOW_bind_variable_in_in_elements9137);
                    bind_variable661=bind_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bind_variable.add(bind_variable661.getTree());


                    // AST REWRITE
                    // elements: bind_variable
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 943:10: -> ^( EXPR_LIST bind_variable )
                    {
                        // OracleParser.g:943:13: ^( EXPR_LIST bind_variable )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR_LIST, "EXPR_LIST"), root_1);

                        adaptor.addChild(root_1, stream_bind_variable.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // OracleParser.g:944:10: general_element
                    {
                    pushFollow(FOLLOW_general_element_in_in_elements9165);
                    general_element662=general_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_general_element.add(general_element662.getTree());


                    // AST REWRITE
                    // elements: general_element
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 945:10: -> ^( EXPR_LIST general_element )
                    {
                        // OracleParser.g:945:13: ^( EXPR_LIST general_element )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR_LIST, "EXPR_LIST"), root_1);

                        adaptor.addChild(root_1, stream_general_element.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 900, in_elements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in_elements"

    public static class between_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "between_elements"
    // OracleParser.g:948:1: between_elements : cn1= concatenation and_key cn2= concatenation -> ^( EXPR $cn1) ^( EXPR $cn2) ;
    public final OracleParser.between_elements_return between_elements() throws RecognitionException {
        OracleParser.between_elements_return retval = new OracleParser.between_elements_return();
        retval.start = input.LT(1);
        int between_elements_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.concatenation_return cn1 = null;

        OracleParser.concatenation_return cn2 = null;

        OracleParser_Keys.and_key_return and_key663 = null;


        RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");
        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 901) ) { return retval; }
            // OracleParser.g:949:5: (cn1= concatenation and_key cn2= concatenation -> ^( EXPR $cn1) ^( EXPR $cn2) )
            // OracleParser.g:949:10: cn1= concatenation and_key cn2= concatenation
            {
            pushFollow(FOLLOW_concatenation_in_between_elements9204);
            cn1=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(cn1.getTree());
            pushFollow(FOLLOW_and_key_in_between_elements9206);
            and_key663=and_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_and_key.add(and_key663.getTree());
            pushFollow(FOLLOW_concatenation_in_between_elements9210);
            cn2=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(cn2.getTree());


            // AST REWRITE
            // elements: cn2, cn1
            // token labels: 
            // rule labels: retval, cn2, cn1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_cn2=new RewriteRuleSubtreeStream(adaptor,"rule cn2",cn2!=null?cn2.tree:null);
            RewriteRuleSubtreeStream stream_cn1=new RewriteRuleSubtreeStream(adaptor,"rule cn1",cn1!=null?cn1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 950:9: -> ^( EXPR $cn1) ^( EXPR $cn2)
            {
                // OracleParser.g:950:12: ^( EXPR $cn1)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_cn1.nextTree());

                adaptor.addChild(root_0, root_1);
                }
                // OracleParser.g:950:25: ^( EXPR $cn2)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_cn2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 901, between_elements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "between_elements"

    public static class concatenation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenation"
    // OracleParser.g:953:1: concatenation : additive_expression ( concatenation_op additive_expression )* ;
    public final OracleParser.concatenation_return concatenation() throws RecognitionException {
        OracleParser.concatenation_return retval = new OracleParser.concatenation_return();
        retval.start = input.LT(1);
        int concatenation_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.additive_expression_return additive_expression664 = null;

        OracleParser_Commons.concatenation_op_return concatenation_op665 = null;

        OracleParser.additive_expression_return additive_expression666 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 902) ) { return retval; }
            // OracleParser.g:954:5: ( additive_expression ( concatenation_op additive_expression )* )
            // OracleParser.g:954:10: additive_expression ( concatenation_op additive_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_additive_expression_in_concatenation9255);
            additive_expression664=additive_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression664.getTree());
            // OracleParser.g:954:30: ( concatenation_op additive_expression )*
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);

                if ( (LA217_0==CONCATENATION_OP) ) {
                    int LA217_2 = input.LA(2);

                    if ( (synpred281_OracleParser()) ) {
                        alt217=1;
                    }


                }
                else if ( (LA217_0==VERTICAL_BAR) ) {
                    int LA217_3 = input.LA(2);

                    if ( (synpred281_OracleParser()) ) {
                        alt217=1;
                    }


                }


                switch (alt217) {
            	case 1 :
            	    // OracleParser.g:954:31: concatenation_op additive_expression
            	    {
            	    pushFollow(FOLLOW_concatenation_op_in_concatenation9258);
            	    concatenation_op665=concatenation_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(concatenation_op665.getTree(), root_0);
            	    pushFollow(FOLLOW_additive_expression_in_concatenation9261);
            	    additive_expression666=additive_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression666.getTree());

            	    }
            	    break;

            	default :
            	    break loop217;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 902, concatenation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "concatenation"

    public static class concatenation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenation_wrapper"
    // OracleParser.g:957:1: concatenation_wrapper : concatenation -> ^( EXPR concatenation ) ;
    public final OracleParser.concatenation_wrapper_return concatenation_wrapper() throws RecognitionException {
        OracleParser.concatenation_wrapper_return retval = new OracleParser.concatenation_wrapper_return();
        retval.start = input.LT(1);
        int concatenation_wrapper_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.concatenation_return concatenation667 = null;


        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 903) ) { return retval; }
            // OracleParser.g:958:5: ( concatenation -> ^( EXPR concatenation ) )
            // OracleParser.g:958:10: concatenation
            {
            pushFollow(FOLLOW_concatenation_in_concatenation_wrapper9283);
            concatenation667=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(concatenation667.getTree());


            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 959:9: -> ^( EXPR concatenation )
            {
                // OracleParser.g:959:12: ^( EXPR concatenation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_concatenation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 903, concatenation_wrapper_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "concatenation_wrapper"

    public static class additive_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additive_expression"
    // OracleParser.g:962:1: additive_expression : ( special_function -> ^( SPECIAL_FUNC special_function ) | ( multiply_expression ( ( PLUS_SIGN | MINUS_SIGN ) multiply_expression )* ) );
    public final OracleParser.additive_expression_return additive_expression() throws RecognitionException {
        OracleParser.additive_expression_return retval = new OracleParser.additive_expression_return();
        retval.start = input.LT(1);
        int additive_expression_StartIndex = input.index();
        Object root_0 = null;

        Token PLUS_SIGN670=null;
        Token MINUS_SIGN671=null;
        OracleParser.special_function_return special_function668 = null;

        OracleParser.multiply_expression_return multiply_expression669 = null;

        OracleParser.multiply_expression_return multiply_expression672 = null;


        Object PLUS_SIGN670_tree=null;
        Object MINUS_SIGN671_tree=null;
        RewriteRuleSubtreeStream stream_special_function=new RewriteRuleSubtreeStream(adaptor,"rule special_function");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 904) ) { return retval; }
            // OracleParser.g:963:5: ( special_function -> ^( SPECIAL_FUNC special_function ) | ( multiply_expression ( ( PLUS_SIGN | MINUS_SIGN ) multiply_expression )* ) )
            int alt220=2;
            alt220 = dfa220.predict(input);
            switch (alt220) {
                case 1 :
                    // OracleParser.g:963:9: special_function
                    {
                    pushFollow(FOLLOW_special_function_in_additive_expression9318);
                    special_function668=special_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_special_function.add(special_function668.getTree());


                    // AST REWRITE
                    // elements: special_function
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 963:26: -> ^( SPECIAL_FUNC special_function )
                    {
                        // OracleParser.g:963:29: ^( SPECIAL_FUNC special_function )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SPECIAL_FUNC, "SPECIAL_FUNC"), root_1);

                        adaptor.addChild(root_1, stream_special_function.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:964:4: ( multiply_expression ( ( PLUS_SIGN | MINUS_SIGN ) multiply_expression )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // OracleParser.g:964:4: ( multiply_expression ( ( PLUS_SIGN | MINUS_SIGN ) multiply_expression )* )
                    // OracleParser.g:964:5: multiply_expression ( ( PLUS_SIGN | MINUS_SIGN ) multiply_expression )*
                    {
                    pushFollow(FOLLOW_multiply_expression_in_additive_expression9332);
                    multiply_expression669=multiply_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiply_expression669.getTree());
                    // OracleParser.g:964:25: ( ( PLUS_SIGN | MINUS_SIGN ) multiply_expression )*
                    loop219:
                    do {
                        int alt219=2;
                        int LA219_0 = input.LA(1);

                        if ( (LA219_0==PLUS_SIGN) ) {
                            int LA219_2 = input.LA(2);

                            if ( (synpred284_OracleParser()) ) {
                                alt219=1;
                            }


                        }
                        else if ( (LA219_0==MINUS_SIGN) ) {
                            int LA219_3 = input.LA(2);

                            if ( (synpred284_OracleParser()) ) {
                                alt219=1;
                            }


                        }


                        switch (alt219) {
                    	case 1 :
                    	    // OracleParser.g:964:27: ( PLUS_SIGN | MINUS_SIGN ) multiply_expression
                    	    {
                    	    // OracleParser.g:964:27: ( PLUS_SIGN | MINUS_SIGN )
                    	    int alt218=2;
                    	    int LA218_0 = input.LA(1);

                    	    if ( (LA218_0==PLUS_SIGN) ) {
                    	        alt218=1;
                    	    }
                    	    else if ( (LA218_0==MINUS_SIGN) ) {
                    	        alt218=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 218, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt218) {
                    	        case 1 :
                    	            // OracleParser.g:964:29: PLUS_SIGN
                    	            {
                    	            PLUS_SIGN670=(Token)match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_additive_expression9338); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	            PLUS_SIGN670_tree = (Object)adaptor.create(PLUS_SIGN670);
                    	            root_0 = (Object)adaptor.becomeRoot(PLUS_SIGN670_tree, root_0);
                    	            }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // OracleParser.g:964:42: MINUS_SIGN
                    	            {
                    	            MINUS_SIGN671=(Token)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_additive_expression9343); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	            MINUS_SIGN671_tree = (Object)adaptor.create(MINUS_SIGN671);
                    	            root_0 = (Object)adaptor.becomeRoot(MINUS_SIGN671_tree, root_0);
                    	            }

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_multiply_expression_in_additive_expression9348);
                    	    multiply_expression672=multiply_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiply_expression672.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop219;
                        }
                    } while (true);


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 904, additive_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additive_expression"

    public static class special_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "special_function"
    // OracleParser.g:967:1: special_function : sysdate_interval_key CHAR_STRING REGULAR_ID ;
    public final OracleParser.special_function_return special_function() throws RecognitionException {
        OracleParser.special_function_return retval = new OracleParser.special_function_return();
        retval.start = input.LT(1);
        int special_function_StartIndex = input.index();
        Object root_0 = null;

        Token CHAR_STRING674=null;
        Token REGULAR_ID675=null;
        OracleParser_Keys.sysdate_interval_key_return sysdate_interval_key673 = null;


        Object CHAR_STRING674_tree=null;
        Object REGULAR_ID675_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 905) ) { return retval; }
            // OracleParser.g:968:2: ( sysdate_interval_key CHAR_STRING REGULAR_ID )
            // OracleParser.g:968:4: sysdate_interval_key CHAR_STRING REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sysdate_interval_key_in_special_function9365);
            sysdate_interval_key673=sysdate_interval_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sysdate_interval_key673.getTree());
            CHAR_STRING674=(Token)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_special_function9367); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CHAR_STRING674_tree = (Object)adaptor.create(CHAR_STRING674);
            adaptor.addChild(root_0, CHAR_STRING674_tree);
            }
            REGULAR_ID675=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_special_function9369); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID675_tree = (Object)adaptor.create(REGULAR_ID675);
            adaptor.addChild(root_0, REGULAR_ID675_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 905, special_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "special_function"

    public static class multiply_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiply_expression"
    // OracleParser.g:971:1: multiply_expression : datetime_expression ( ( ASTERISK | SOLIDUS ) datetime_expression )* ;
    public final OracleParser.multiply_expression_return multiply_expression() throws RecognitionException {
        OracleParser.multiply_expression_return retval = new OracleParser.multiply_expression_return();
        retval.start = input.LT(1);
        int multiply_expression_StartIndex = input.index();
        Object root_0 = null;

        Token ASTERISK677=null;
        Token SOLIDUS678=null;
        OracleParser.datetime_expression_return datetime_expression676 = null;

        OracleParser.datetime_expression_return datetime_expression679 = null;


        Object ASTERISK677_tree=null;
        Object SOLIDUS678_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 906) ) { return retval; }
            // OracleParser.g:972:5: ( datetime_expression ( ( ASTERISK | SOLIDUS ) datetime_expression )* )
            // OracleParser.g:972:10: datetime_expression ( ( ASTERISK | SOLIDUS ) datetime_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_datetime_expression_in_multiply_expression9387);
            datetime_expression676=datetime_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, datetime_expression676.getTree());
            // OracleParser.g:972:30: ( ( ASTERISK | SOLIDUS ) datetime_expression )*
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( (LA222_0==ASTERISK) ) {
                    int LA222_2 = input.LA(2);

                    if ( (synpred286_OracleParser()) ) {
                        alt222=1;
                    }


                }
                else if ( (LA222_0==SOLIDUS) ) {
                    int LA222_3 = input.LA(2);

                    if ( (synpred286_OracleParser()) ) {
                        alt222=1;
                    }


                }


                switch (alt222) {
            	case 1 :
            	    // OracleParser.g:972:32: ( ASTERISK | SOLIDUS ) datetime_expression
            	    {
            	    // OracleParser.g:972:32: ( ASTERISK | SOLIDUS )
            	    int alt221=2;
            	    int LA221_0 = input.LA(1);

            	    if ( (LA221_0==ASTERISK) ) {
            	        alt221=1;
            	    }
            	    else if ( (LA221_0==SOLIDUS) ) {
            	        alt221=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 221, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt221) {
            	        case 1 :
            	            // OracleParser.g:972:34: ASTERISK
            	            {
            	            ASTERISK677=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_multiply_expression9393); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ASTERISK677_tree = (Object)adaptor.create(ASTERISK677);
            	            root_0 = (Object)adaptor.becomeRoot(ASTERISK677_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // OracleParser.g:972:46: SOLIDUS
            	            {
            	            SOLIDUS678=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_multiply_expression9398); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SOLIDUS678_tree = (Object)adaptor.create(SOLIDUS678);
            	            root_0 = (Object)adaptor.becomeRoot(SOLIDUS678_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_datetime_expression_in_multiply_expression9403);
            	    datetime_expression679=datetime_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, datetime_expression679.getTree());

            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 906, multiply_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiply_expression"

    public static class datetime_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "datetime_expression"
    // OracleParser.g:975:1: datetime_expression : ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )? ;
    public final OracleParser.datetime_expression_return datetime_expression() throws RecognitionException {
        OracleParser.datetime_expression_return retval = new OracleParser.datetime_expression_return();
        retval.start = input.LT(1);
        int datetime_expression_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.model_expression_return model_expression680 = null;

        OracleParser_Keys.at_key_return at_key681 = null;

        OracleParser_Keys.local_key_return local_key682 = null;

        OracleParser_Keys.time_key_return time_key683 = null;

        OracleParser_Keys.zone_key_return zone_key684 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper685 = null;

        OracleParser.interval_expression_return interval_expression686 = null;


        RewriteRuleSubtreeStream stream_at_key=new RewriteRuleSubtreeStream(adaptor,"rule at_key");
        RewriteRuleSubtreeStream stream_concatenation_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule concatenation_wrapper");
        RewriteRuleSubtreeStream stream_model_expression=new RewriteRuleSubtreeStream(adaptor,"rule model_expression");
        RewriteRuleSubtreeStream stream_local_key=new RewriteRuleSubtreeStream(adaptor,"rule local_key");
        RewriteRuleSubtreeStream stream_zone_key=new RewriteRuleSubtreeStream(adaptor,"rule zone_key");
        RewriteRuleSubtreeStream stream_interval_expression=new RewriteRuleSubtreeStream(adaptor,"rule interval_expression");
        RewriteRuleSubtreeStream stream_time_key=new RewriteRuleSubtreeStream(adaptor,"rule time_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 907) ) { return retval; }
            // OracleParser.g:976:5: ( ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )? )
            // OracleParser.g:976:10: ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )?
            {
            // OracleParser.g:976:10: ( model_expression -> model_expression )
            // OracleParser.g:976:11: model_expression
            {
            pushFollow(FOLLOW_model_expression_in_datetime_expression9426);
            model_expression680=model_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_expression.add(model_expression680.getTree());


            // AST REWRITE
            // elements: model_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 976:28: -> model_expression
            {
                adaptor.addChild(root_0, stream_model_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            // OracleParser.g:977:5: ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )?
            int alt224=3;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==REGULAR_ID) ) {
                int LA224_1 = input.LA(2);

                if ( ((synpred288_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("at")))) ) {
                    alt224=1;
                }
                else if ( (((synpred289_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("day")))||(synpred289_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("year"))))) ) {
                    alt224=2;
                }
            }
            switch (alt224) {
                case 1 :
                    // OracleParser.g:977:10: at_key ( local_key | time_key zone_key concatenation_wrapper )
                    {
                    pushFollow(FOLLOW_at_key_in_datetime_expression9442);
                    at_key681=at_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_at_key.add(at_key681.getTree());
                    // OracleParser.g:977:17: ( local_key | time_key zone_key concatenation_wrapper )
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==REGULAR_ID) ) {
                        int LA223_1 = input.LA(2);

                        if ( ((synpred287_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("local")))) ) {
                            alt223=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("time"))) ) {
                            alt223=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 223, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 223, 0, input);

                        throw nvae;
                    }
                    switch (alt223) {
                        case 1 :
                            // OracleParser.g:977:18: local_key
                            {
                            pushFollow(FOLLOW_local_key_in_datetime_expression9445);
                            local_key682=local_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_local_key.add(local_key682.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:977:28: time_key zone_key concatenation_wrapper
                            {
                            pushFollow(FOLLOW_time_key_in_datetime_expression9447);
                            time_key683=time_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_time_key.add(time_key683.getTree());
                            pushFollow(FOLLOW_zone_key_in_datetime_expression9449);
                            zone_key684=zone_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_zone_key.add(zone_key684.getTree());
                            pushFollow(FOLLOW_concatenation_wrapper_in_datetime_expression9451);
                            concatenation_wrapper685=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation_wrapper.add(concatenation_wrapper685.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: concatenation_wrapper, time_key, datetime_expression, local_key, at_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 978:13: -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) )
                    {
                        // OracleParser.g:978:16: ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATETIME_OP, "DATETIME_OP"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        // OracleParser.g:978:51: ^( at_key ( local_key )? ( time_key )? concatenation_wrapper )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(stream_at_key.nextNode(), root_2);

                        // OracleParser.g:978:60: ( local_key )?
                        if ( stream_local_key.hasNext() ) {
                            adaptor.addChild(root_2, stream_local_key.nextTree());

                        }
                        stream_local_key.reset();
                        // OracleParser.g:978:71: ( time_key )?
                        if ( stream_time_key.hasNext() ) {
                            adaptor.addChild(root_2, stream_time_key.nextTree());

                        }
                        stream_time_key.reset();
                        adaptor.addChild(root_2, stream_concatenation_wrapper.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:979:10: ( interval_expression )=> interval_expression
                    {
                    pushFollow(FOLLOW_interval_expression_in_datetime_expression9501);
                    interval_expression686=interval_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interval_expression.add(interval_expression686.getTree());


                    // AST REWRITE
                    // elements: datetime_expression, interval_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 980:13: -> ^( DATETIME_OP $datetime_expression interval_expression )
                    {
                        // OracleParser.g:980:16: ^( DATETIME_OP $datetime_expression interval_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATETIME_OP, "DATETIME_OP"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_interval_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 907, datetime_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "datetime_expression"

    public static class interval_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_expression"
    // OracleParser.g:984:1: interval_expression : ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? -> ^( day_key second_key ( $cn1)? ( $cn2)? ) | year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key -> ^( year_key month_key concatenation_wrapper ) );
    public final OracleParser.interval_expression_return interval_expression() throws RecognitionException {
        OracleParser.interval_expression_return retval = new OracleParser.interval_expression_return();
        retval.start = input.LT(1);
        int interval_expression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN688=null;
        Token RIGHT_PAREN689=null;
        Token LEFT_PAREN692=null;
        Token RIGHT_PAREN693=null;
        Token LEFT_PAREN695=null;
        Token RIGHT_PAREN697=null;
        OracleParser.concatenation_wrapper_return cn1 = null;

        OracleParser.concatenation_wrapper_return cn2 = null;

        OracleParser_Keys.day_key_return day_key687 = null;

        OracleParser_Keys.to_key_return to_key690 = null;

        OracleParser_Keys.second_key_return second_key691 = null;

        OracleParser_Keys.year_key_return year_key694 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper696 = null;

        OracleParser_Keys.to_key_return to_key698 = null;

        OracleParser_Keys.month_key_return month_key699 = null;


        Object LEFT_PAREN688_tree=null;
        Object RIGHT_PAREN689_tree=null;
        Object LEFT_PAREN692_tree=null;
        Object RIGHT_PAREN693_tree=null;
        Object LEFT_PAREN695_tree=null;
        Object RIGHT_PAREN697_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_year_key=new RewriteRuleSubtreeStream(adaptor,"rule year_key");
        RewriteRuleSubtreeStream stream_day_key=new RewriteRuleSubtreeStream(adaptor,"rule day_key");
        RewriteRuleSubtreeStream stream_second_key=new RewriteRuleSubtreeStream(adaptor,"rule second_key");
        RewriteRuleSubtreeStream stream_concatenation_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule concatenation_wrapper");
        RewriteRuleSubtreeStream stream_to_key=new RewriteRuleSubtreeStream(adaptor,"rule to_key");
        RewriteRuleSubtreeStream stream_month_key=new RewriteRuleSubtreeStream(adaptor,"rule month_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 908) ) { return retval; }
            // OracleParser.g:985:5: ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? -> ^( day_key second_key ( $cn1)? ( $cn2)? ) | year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key -> ^( year_key month_key concatenation_wrapper ) )
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("year")))) {
                int LA228_1 = input.LA(2);

                if ( ((synpred292_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("day")))) ) {
                    alt228=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("year"))) ) {
                    alt228=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;
            }
            switch (alt228) {
                case 1 :
                    // OracleParser.g:985:10: day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
                    {
                    pushFollow(FOLLOW_day_key_in_interval_expression9551);
                    day_key687=day_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_day_key.add(day_key687.getTree());
                    // OracleParser.g:985:21: ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )?
                    int alt225=2;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==LEFT_PAREN) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            // OracleParser.g:985:22: LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN
                            {
                            LEFT_PAREN688=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_interval_expression9557); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN688);

                            pushFollow(FOLLOW_concatenation_wrapper_in_interval_expression9561);
                            cn1=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation_wrapper.add(cn1.getTree());
                            RIGHT_PAREN689=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_interval_expression9563); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN689);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_to_key_in_interval_expression9567);
                    to_key690=to_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_to_key.add(to_key690.getTree());
                    pushFollow(FOLLOW_second_key_in_interval_expression9569);
                    second_key691=second_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_second_key.add(second_key691.getTree());
                    // OracleParser.g:985:91: ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
                    int alt226=2;
                    alt226 = dfa226.predict(input);
                    switch (alt226) {
                        case 1 :
                            // OracleParser.g:985:92: LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN
                            {
                            LEFT_PAREN692=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_interval_expression9572); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN692);

                            pushFollow(FOLLOW_concatenation_wrapper_in_interval_expression9576);
                            cn2=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation_wrapper.add(cn2.getTree());
                            RIGHT_PAREN693=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_interval_expression9578); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN693);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: day_key, cn2, second_key, cn1
                    // token labels: 
                    // rule labels: retval, cn2, cn1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_cn2=new RewriteRuleSubtreeStream(adaptor,"rule cn2",cn2!=null?cn2.tree:null);
                    RewriteRuleSubtreeStream stream_cn1=new RewriteRuleSubtreeStream(adaptor,"rule cn1",cn1!=null?cn1.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 986:9: -> ^( day_key second_key ( $cn1)? ( $cn2)? )
                    {
                        // OracleParser.g:986:12: ^( day_key second_key ( $cn1)? ( $cn2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_day_key.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_second_key.nextTree());
                        // OracleParser.g:986:33: ( $cn1)?
                        if ( stream_cn1.hasNext() ) {
                            adaptor.addChild(root_1, stream_cn1.nextTree());

                        }
                        stream_cn1.reset();
                        // OracleParser.g:986:39: ( $cn2)?
                        if ( stream_cn2.hasNext() ) {
                            adaptor.addChild(root_1, stream_cn2.nextTree());

                        }
                        stream_cn2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:987:10: year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key
                    {
                    pushFollow(FOLLOW_year_key_in_interval_expression9615);
                    year_key694=year_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_year_key.add(year_key694.getTree());
                    // OracleParser.g:987:19: ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )?
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==LEFT_PAREN) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            // OracleParser.g:987:20: LEFT_PAREN concatenation_wrapper RIGHT_PAREN
                            {
                            LEFT_PAREN695=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_interval_expression9618); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN695);

                            pushFollow(FOLLOW_concatenation_wrapper_in_interval_expression9620);
                            concatenation_wrapper696=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation_wrapper.add(concatenation_wrapper696.getTree());
                            RIGHT_PAREN697=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_interval_expression9622); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN697);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_to_key_in_interval_expression9626);
                    to_key698=to_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_to_key.add(to_key698.getTree());
                    pushFollow(FOLLOW_month_key_in_interval_expression9628);
                    month_key699=month_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_month_key.add(month_key699.getTree());


                    // AST REWRITE
                    // elements: concatenation_wrapper, month_key, year_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 988:9: -> ^( year_key month_key concatenation_wrapper )
                    {
                        // OracleParser.g:988:12: ^( year_key month_key concatenation_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_year_key.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_month_key.nextTree());
                        adaptor.addChild(root_1, stream_concatenation_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 908, interval_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_expression"

    public static class model_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_expression"
    // OracleParser.g:991:1: model_expression : ( unary_expression -> unary_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )? ;
    public final OracleParser.model_expression_return model_expression() throws RecognitionException {
        OracleParser.model_expression_return retval = new OracleParser.model_expression_return();
        retval.start = input.LT(1);
        int model_expression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_BRACKET701=null;
        Token RIGHT_BRACKET703=null;
        OracleParser.unary_expression_return unary_expression700 = null;

        OracleParser.model_expression_element_return model_expression_element702 = null;


        Object LEFT_BRACKET701_tree=null;
        Object RIGHT_BRACKET703_tree=null;
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_unary_expression=new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
        RewriteRuleSubtreeStream stream_model_expression_element=new RewriteRuleSubtreeStream(adaptor,"rule model_expression_element");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 909) ) { return retval; }
            // OracleParser.g:992:5: ( ( unary_expression -> unary_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )? )
            // OracleParser.g:992:10: ( unary_expression -> unary_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )?
            {
            // OracleParser.g:992:10: ( unary_expression -> unary_expression )
            // OracleParser.g:992:11: unary_expression
            {
            pushFollow(FOLLOW_unary_expression_in_model_expression9667);
            unary_expression700=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unary_expression.add(unary_expression700.getTree());


            // AST REWRITE
            // elements: unary_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 992:28: -> unary_expression
            {
                adaptor.addChild(root_0, stream_unary_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            // OracleParser.g:993:9: ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==LEFT_BRACKET) ) {
                int LA229_1 = input.LA(2);

                if ( (synpred294_OracleParser()) ) {
                    alt229=1;
                }
            }
            switch (alt229) {
                case 1 :
                    // OracleParser.g:993:10: LEFT_BRACKET model_expression_element RIGHT_BRACKET
                    {
                    LEFT_BRACKET701=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_model_expression9683); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET701);

                    pushFollow(FOLLOW_model_expression_element_in_model_expression9685);
                    model_expression_element702=model_expression_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_model_expression_element.add(model_expression_element702.getTree());
                    RIGHT_BRACKET703=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_model_expression9687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET703);



                    // AST REWRITE
                    // elements: model_expression, model_expression_element
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 994:13: -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element )
                    {
                        // OracleParser.g:994:16: ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODEL_EXPRESSION, LEFT_BRACKET701), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_model_expression_element.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 909, model_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_expression"

    public static class model_expression_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_expression_element"
    // OracleParser.g:997:1: model_expression_element : ( ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ( ( any_key )=> any_key | condition_wrapper ) )* | single_column_for_loop ( COMMA single_column_for_loop )* | multi_column_for_loop );
    public final OracleParser.model_expression_element_return model_expression_element() throws RecognitionException {
        OracleParser.model_expression_element_return retval = new OracleParser.model_expression_element_return();
        retval.start = input.LT(1);
        int model_expression_element_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA706=null;
        Token COMMA710=null;
        OracleParser_Keys.any_key_return any_key704 = null;

        OracleParser.condition_wrapper_return condition_wrapper705 = null;

        OracleParser_Keys.any_key_return any_key707 = null;

        OracleParser.condition_wrapper_return condition_wrapper708 = null;

        OracleParser.single_column_for_loop_return single_column_for_loop709 = null;

        OracleParser.single_column_for_loop_return single_column_for_loop711 = null;

        OracleParser.multi_column_for_loop_return multi_column_for_loop712 = null;


        Object COMMA706_tree=null;
        Object COMMA710_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 910) ) { return retval; }
            // OracleParser.g:998:5: ( ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ( ( any_key )=> any_key | condition_wrapper ) )* | single_column_for_loop ( COMMA single_column_for_loop )* | multi_column_for_loop )
            int alt234=3;
            int LA234_0 = input.LA(1);

            if ( ((LA234_0>=UNSIGNED_INTEGER && LA234_0<=MINUS_SIGN)||LA234_0==NATIONAL_CHAR_STRING_LIT||(LA234_0>=EXACT_NUM_LIT && LA234_0<=CHAR_STRING)||LA234_0==CHAR_STRING_PERL||LA234_0==DELIMITED_ID||LA234_0==LEFT_PAREN||LA234_0==PLUS_SIGN||LA234_0==COLON||LA234_0==BINDVAR||LA234_0==INTRODUCER||LA234_0==SQL92_RESERVED_ALL||LA234_0==SQL92_RESERVED_ANY||LA234_0==SQL92_RESERVED_CASE||LA234_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA234_0>=SQL92_RESERVED_CURSOR && LA234_0<=SQL92_RESERVED_DATE)||LA234_0==SQL92_RESERVED_DEFAULT||LA234_0==SQL92_RESERVED_DISTINCT||(LA234_0>=SQL92_RESERVED_EXISTS && LA234_0<=SQL92_RESERVED_FALSE)||LA234_0==SQL92_RESERVED_NOT||LA234_0==SQL92_RESERVED_NULL||LA234_0==SQL92_RESERVED_PRIOR||LA234_0==SQL92_RESERVED_TRUE||LA234_0==REGULAR_ID) ) {
                alt234=1;
            }
            else if ( (LA234_0==SQL92_RESERVED_FOR) ) {
                int LA234_2 = input.LA(2);

                if ( (LA234_2==DELIMITED_ID||LA234_2==INTRODUCER||LA234_2==REGULAR_ID) ) {
                    alt234=2;
                }
                else if ( (LA234_2==LEFT_PAREN) ) {
                    alt234=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 234, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    // OracleParser.g:998:10: ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ( ( any_key )=> any_key | condition_wrapper ) )*
                    {
                    root_0 = (Object)adaptor.nil();

                    // OracleParser.g:998:10: ( ( any_key )=> any_key | condition_wrapper )
                    int alt230=2;
                    int LA230_0 = input.LA(1);

                    if ( (LA230_0==SQL92_RESERVED_ANY) ) {
                        int LA230_1 = input.LA(2);

                        if ( (LA230_1==COMMA) && (synpred295_OracleParser())) {
                            alt230=1;
                        }
                        else if ( (LA230_1==RIGHT_BRACKET) && (synpred295_OracleParser())) {
                            alt230=1;
                        }
                        else if ( (LA230_1==LEFT_PAREN) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA230_0>=UNSIGNED_INTEGER && LA230_0<=MINUS_SIGN)||LA230_0==NATIONAL_CHAR_STRING_LIT||(LA230_0>=EXACT_NUM_LIT && LA230_0<=CHAR_STRING)||LA230_0==CHAR_STRING_PERL||LA230_0==DELIMITED_ID||LA230_0==LEFT_PAREN||LA230_0==PLUS_SIGN||LA230_0==COLON||LA230_0==BINDVAR||LA230_0==INTRODUCER||LA230_0==SQL92_RESERVED_ALL||LA230_0==SQL92_RESERVED_CASE||LA230_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA230_0>=SQL92_RESERVED_CURSOR && LA230_0<=SQL92_RESERVED_DATE)||LA230_0==SQL92_RESERVED_DEFAULT||LA230_0==SQL92_RESERVED_DISTINCT||(LA230_0>=SQL92_RESERVED_EXISTS && LA230_0<=SQL92_RESERVED_FALSE)||LA230_0==SQL92_RESERVED_NOT||LA230_0==SQL92_RESERVED_NULL||LA230_0==SQL92_RESERVED_PRIOR||LA230_0==SQL92_RESERVED_TRUE||LA230_0==REGULAR_ID) ) {
                        alt230=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 230, 0, input);

                        throw nvae;
                    }
                    switch (alt230) {
                        case 1 :
                            // OracleParser.g:998:11: ( any_key )=> any_key
                            {
                            pushFollow(FOLLOW_any_key_in_model_expression_element9739);
                            any_key704=any_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, any_key704.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:998:31: condition_wrapper
                            {
                            pushFollow(FOLLOW_condition_wrapper_in_model_expression_element9741);
                            condition_wrapper705=condition_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_wrapper705.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:998:50: ( COMMA ( ( any_key )=> any_key | condition_wrapper ) )*
                    loop232:
                    do {
                        int alt232=2;
                        int LA232_0 = input.LA(1);

                        if ( (LA232_0==COMMA) ) {
                            alt232=1;
                        }


                        switch (alt232) {
                    	case 1 :
                    	    // OracleParser.g:998:51: COMMA ( ( any_key )=> any_key | condition_wrapper )
                    	    {
                    	    COMMA706=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_expression_element9745); if (state.failed) return retval;
                    	    // OracleParser.g:998:58: ( ( any_key )=> any_key | condition_wrapper )
                    	    int alt231=2;
                    	    int LA231_0 = input.LA(1);

                    	    if ( (LA231_0==SQL92_RESERVED_ANY) ) {
                    	        int LA231_1 = input.LA(2);

                    	        if ( (LA231_1==LEFT_PAREN) ) {
                    	            alt231=2;
                    	        }
                    	        else if ( (LA231_1==RIGHT_BRACKET) && (synpred296_OracleParser())) {
                    	            alt231=1;
                    	        }
                    	        else if ( (LA231_1==COMMA) && (synpred296_OracleParser())) {
                    	            alt231=1;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 231, 1, input);

                    	            throw nvae;
                    	        }
                    	    }
                    	    else if ( ((LA231_0>=UNSIGNED_INTEGER && LA231_0<=MINUS_SIGN)||LA231_0==NATIONAL_CHAR_STRING_LIT||(LA231_0>=EXACT_NUM_LIT && LA231_0<=CHAR_STRING)||LA231_0==CHAR_STRING_PERL||LA231_0==DELIMITED_ID||LA231_0==LEFT_PAREN||LA231_0==PLUS_SIGN||LA231_0==COLON||LA231_0==BINDVAR||LA231_0==INTRODUCER||LA231_0==SQL92_RESERVED_ALL||LA231_0==SQL92_RESERVED_CASE||LA231_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA231_0>=SQL92_RESERVED_CURSOR && LA231_0<=SQL92_RESERVED_DATE)||LA231_0==SQL92_RESERVED_DEFAULT||LA231_0==SQL92_RESERVED_DISTINCT||(LA231_0>=SQL92_RESERVED_EXISTS && LA231_0<=SQL92_RESERVED_FALSE)||LA231_0==SQL92_RESERVED_NOT||LA231_0==SQL92_RESERVED_NULL||LA231_0==SQL92_RESERVED_PRIOR||LA231_0==SQL92_RESERVED_TRUE||LA231_0==REGULAR_ID) ) {
                    	        alt231=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 231, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt231) {
                    	        case 1 :
                    	            // OracleParser.g:998:59: ( any_key )=> any_key
                    	            {
                    	            pushFollow(FOLLOW_any_key_in_model_expression_element9754);
                    	            any_key707=any_key();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, any_key707.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // OracleParser.g:998:79: condition_wrapper
                    	            {
                    	            pushFollow(FOLLOW_condition_wrapper_in_model_expression_element9756);
                    	            condition_wrapper708=condition_wrapper();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_wrapper708.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop232;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // OracleParser.g:999:10: single_column_for_loop ( COMMA single_column_for_loop )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_single_column_for_loop_in_model_expression_element9770);
                    single_column_for_loop709=single_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_column_for_loop709.getTree());
                    // OracleParser.g:999:33: ( COMMA single_column_for_loop )*
                    loop233:
                    do {
                        int alt233=2;
                        int LA233_0 = input.LA(1);

                        if ( (LA233_0==COMMA) ) {
                            alt233=1;
                        }


                        switch (alt233) {
                    	case 1 :
                    	    // OracleParser.g:999:34: COMMA single_column_for_loop
                    	    {
                    	    COMMA710=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_expression_element9773); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_single_column_for_loop_in_model_expression_element9776);
                    	    single_column_for_loop711=single_column_for_loop();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_column_for_loop711.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop233;
                        }
                    } while (true);


                    }
                    break;
                case 3 :
                    // OracleParser.g:1000:10: multi_column_for_loop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_multi_column_for_loop_in_model_expression_element9789);
                    multi_column_for_loop712=multi_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_column_for_loop712.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 910, model_expression_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_expression_element"

    public static class single_column_for_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "single_column_for_loop"
    // OracleParser.g:1003:1: single_column_for_loop : for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression ) -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) ) -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? ) ;
    public final OracleParser.single_column_for_loop_return single_column_for_loop() throws RecognitionException {
        OracleParser.single_column_for_loop_return retval = new OracleParser.single_column_for_loop_return();
        retval.start = input.LT(1);
        int single_column_for_loop_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.expression_return ex1 = null;

        OracleParser.expression_return ex2 = null;

        OracleParser.expression_return ex3 = null;

        OracleParser_Keys.for_key_return for_key713 = null;

        OracleParser_Commons.column_name_return column_name714 = null;

        OracleParser_Keys.in_key_return in_key715 = null;

        OracleParser.expression_list_return expression_list716 = null;

        OracleParser.for_like_part_return for_like_part717 = null;

        OracleParser_Keys.from_key_return from_key718 = null;

        OracleParser_Keys.to_key_return to_key719 = null;

        OracleParser.for_increment_decrement_type_return for_increment_decrement_type720 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
        RewriteRuleSubtreeStream stream_for_like_part=new RewriteRuleSubtreeStream(adaptor,"rule for_like_part");
        RewriteRuleSubtreeStream stream_to_key=new RewriteRuleSubtreeStream(adaptor,"rule to_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_for_increment_decrement_type=new RewriteRuleSubtreeStream(adaptor,"rule for_increment_decrement_type");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        RewriteRuleSubtreeStream stream_from_key=new RewriteRuleSubtreeStream(adaptor,"rule from_key");
            int mode = 0;    
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 911) ) { return retval; }
            // OracleParser.g:1005:5: ( for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression ) -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) ) -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? ) )
            // OracleParser.g:1005:10: for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression )
            {
            pushFollow(FOLLOW_for_key_in_single_column_for_loop9817);
            for_key713=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key713.getTree());
            pushFollow(FOLLOW_column_name_in_single_column_for_loop9819);
            column_name714=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_column_name.add(column_name714.getTree());
            // OracleParser.g:1006:5: ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression )
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==SQL92_RESERVED_IN) ) {
                alt236=1;
            }
            else if ( (LA236_0==SQL92_RESERVED_FROM||LA236_0==SQL92_RESERVED_LIKE) ) {
                alt236=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }
            switch (alt236) {
                case 1 :
                    // OracleParser.g:1006:10: in_key expression_list
                    {
                    pushFollow(FOLLOW_in_key_in_single_column_for_loop9831);
                    in_key715=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_in_key.add(in_key715.getTree());
                    pushFollow(FOLLOW_expression_list_in_single_column_for_loop9833);
                    expression_list716=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_list.add(expression_list716.getTree());
                    if ( state.backtracking==0 ) {
                      mode = 1;
                    }

                    }
                    break;
                case 2 :
                    // OracleParser.g:1007:10: ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression
                    {
                    // OracleParser.g:1007:10: ( for_like_part )?
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==SQL92_RESERVED_LIKE) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            // OracleParser.g:0:0: for_like_part
                            {
                            pushFollow(FOLLOW_for_like_part_in_single_column_for_loop9846);
                            for_like_part717=for_like_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_for_like_part.add(for_like_part717.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_from_key_in_single_column_for_loop9849);
                    from_key718=from_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_from_key.add(from_key718.getTree());
                    pushFollow(FOLLOW_expression_in_single_column_for_loop9853);
                    ex1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(ex1.getTree());
                    pushFollow(FOLLOW_to_key_in_single_column_for_loop9867);
                    to_key719=to_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_to_key.add(to_key719.getTree());
                    pushFollow(FOLLOW_expression_in_single_column_for_loop9871);
                    ex2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(ex2.getTree());
                    pushFollow(FOLLOW_for_increment_decrement_type_in_single_column_for_loop9873);
                    for_increment_decrement_type720=for_increment_decrement_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_for_increment_decrement_type.add(for_increment_decrement_type720.getTree());
                    pushFollow(FOLLOW_expression_in_single_column_for_loop9877);
                    ex3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(ex3.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: ex3, expression_list, ex2, in_key, column_name, for_increment_decrement_type, from_key, for_like_part, to_key, ex1, column_name
            // token labels: 
            // rule labels: retval, ex3, ex2, ex1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ex3=new RewriteRuleSubtreeStream(adaptor,"rule ex3",ex3!=null?ex3.tree:null);
            RewriteRuleSubtreeStream stream_ex2=new RewriteRuleSubtreeStream(adaptor,"rule ex2",ex2!=null?ex2.tree:null);
            RewriteRuleSubtreeStream stream_ex1=new RewriteRuleSubtreeStream(adaptor,"rule ex1",ex1!=null?ex1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1010:9: -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) )
            if (mode == 1) {
                // OracleParser.g:1010:24: ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOR_SINGLE_COLUMN, (for_key713!=null?((Token)for_key713.start):null)), root_1);

                adaptor.addChild(root_1, stream_column_name.nextTree());
                // OracleParser.g:1010:72: ^( in_key expression_list )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_expression_list.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1011:9: -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? )
            {
                // OracleParser.g:1011:12: ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOR_SINGLE_COLUMN, (for_key713!=null?((Token)for_key713.start):null)), root_1);

                adaptor.addChild(root_1, stream_column_name.nextTree());
                // OracleParser.g:1011:60: ^( from_key ^( EXPR $ex1) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_from_key.nextNode(), root_2);

                // OracleParser.g:1011:71: ^( EXPR $ex1)
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);

                adaptor.addChild(root_3, stream_ex1.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:1011:85: ^( to_key ^( EXPR $ex2) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_to_key.nextNode(), root_2);

                // OracleParser.g:1011:94: ^( EXPR $ex2)
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);

                adaptor.addChild(root_3, stream_ex2.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:1011:108: ^( for_increment_decrement_type ^( EXPR $ex3) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_for_increment_decrement_type.nextNode(), root_2);

                // OracleParser.g:1011:139: ^( EXPR $ex3)
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);

                adaptor.addChild(root_3, stream_ex3.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:1011:153: ( for_like_part )?
                if ( stream_for_like_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_like_part.nextTree());

                }
                stream_for_like_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 911, single_column_for_loop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "single_column_for_loop"

    public static class for_like_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_like_part"
    // OracleParser.g:1014:1: for_like_part : like_key expression -> ^( like_key ^( EXPR expression ) ) ;
    public final OracleParser.for_like_part_return for_like_part() throws RecognitionException {
        OracleParser.for_like_part_return retval = new OracleParser.for_like_part_return();
        retval.start = input.LT(1);
        int for_like_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.like_key_return like_key721 = null;

        OracleParser.expression_return expression722 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_like_key=new RewriteRuleSubtreeStream(adaptor,"rule like_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 912) ) { return retval; }
            // OracleParser.g:1015:5: ( like_key expression -> ^( like_key ^( EXPR expression ) ) )
            // OracleParser.g:1015:10: like_key expression
            {
            pushFollow(FOLLOW_like_key_in_for_like_part9986);
            like_key721=like_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_like_key.add(like_key721.getTree());
            pushFollow(FOLLOW_expression_in_for_like_part9988);
            expression722=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression722.getTree());


            // AST REWRITE
            // elements: like_key, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1016:9: -> ^( like_key ^( EXPR expression ) )
            {
                // OracleParser.g:1016:12: ^( like_key ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_like_key.nextNode(), root_1);

                // OracleParser.g:1016:23: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 912, for_like_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_like_part"

    public static class for_increment_decrement_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_increment_decrement_type"
    // OracleParser.g:1019:1: for_increment_decrement_type : ( increment_key | decrement_key );
    public final OracleParser.for_increment_decrement_type_return for_increment_decrement_type() throws RecognitionException {
        OracleParser.for_increment_decrement_type_return retval = new OracleParser.for_increment_decrement_type_return();
        retval.start = input.LT(1);
        int for_increment_decrement_type_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.increment_key_return increment_key723 = null;

        OracleParser_Keys.decrement_key_return decrement_key724 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 913) ) { return retval; }
            // OracleParser.g:1020:5: ( increment_key | decrement_key )
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("decrement")))) {
                int LA237_1 = input.LA(2);

                if ( ((synpred303_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("increment")))) ) {
                    alt237=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("decrement"))) ) {
                    alt237=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;
            }
            switch (alt237) {
                case 1 :
                    // OracleParser.g:1020:10: increment_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_increment_key_in_for_increment_decrement_type10028);
                    increment_key723=increment_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_key723.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1021:10: decrement_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_decrement_key_in_for_increment_decrement_type10039);
                    decrement_key724=decrement_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decrement_key724.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 913, for_increment_decrement_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_increment_decrement_type"

    public static class multi_column_for_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multi_column_for_loop"
    // OracleParser.g:1024:1: multi_column_for_loop : for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) ) ;
    public final OracleParser.multi_column_for_loop_return multi_column_for_loop() throws RecognitionException {
        OracleParser.multi_column_for_loop_return retval = new OracleParser.multi_column_for_loop_return();
        retval.start = input.LT(1);
        int multi_column_for_loop_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN726=null;
        Token COMMA728=null;
        Token RIGHT_PAREN730=null;
        Token LEFT_PAREN732=null;
        Token LEFT_PAREN734=null;
        Token COMMA736=null;
        Token RIGHT_PAREN738=null;
        Token RIGHT_PAREN739=null;
        OracleParser_Keys.for_key_return for_key725 = null;

        OracleParser_Commons.column_name_return column_name727 = null;

        OracleParser_Commons.column_name_return column_name729 = null;

        OracleParser_Keys.in_key_return in_key731 = null;

        OracleParser.subquery_return subquery733 = null;

        OracleParser.expression_list_return expression_list735 = null;

        OracleParser.expression_list_return expression_list737 = null;


        Object LEFT_PAREN726_tree=null;
        Object COMMA728_tree=null;
        Object RIGHT_PAREN730_tree=null;
        Object LEFT_PAREN732_tree=null;
        Object LEFT_PAREN734_tree=null;
        Object COMMA736_tree=null;
        Object RIGHT_PAREN738_tree=null;
        Object RIGHT_PAREN739_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 914) ) { return retval; }
            // OracleParser.g:1025:5: ( for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) ) )
            // OracleParser.g:1025:10: for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN
            {
            pushFollow(FOLLOW_for_key_in_multi_column_for_loop10059);
            for_key725=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key725.getTree());
            LEFT_PAREN726=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_multi_column_for_loop10061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN726);

            pushFollow(FOLLOW_column_name_in_multi_column_for_loop10063);
            column_name727=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_column_name.add(column_name727.getTree());
            // OracleParser.g:1025:41: ( COMMA column_name )*
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==COMMA) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    // OracleParser.g:1025:42: COMMA column_name
            	    {
            	    COMMA728=(Token)match(input,COMMA,FOLLOW_COMMA_in_multi_column_for_loop10066); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA728);

            	    pushFollow(FOLLOW_column_name_in_multi_column_for_loop10068);
            	    column_name729=column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_column_name.add(column_name729.getTree());

            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);

            RIGHT_PAREN730=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN730);

            pushFollow(FOLLOW_in_key_in_multi_column_for_loop10074);
            in_key731=in_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_in_key.add(in_key731.getTree());
            LEFT_PAREN732=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_multi_column_for_loop10084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN732);

            // OracleParser.g:1027:13: ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN )
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==SQL92_RESERVED_SELECT) && (synpred305_OracleParser())) {
                alt240=1;
            }
            else if ( (LA240_0==LEFT_PAREN) ) {
                int LA240_2 = input.LA(2);

                if ( (synpred305_OracleParser()) ) {
                    alt240=1;
                }
                else if ( (synpred306_OracleParser()) ) {
                    alt240=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 240, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;
            }
            switch (alt240) {
                case 1 :
                    // OracleParser.g:1027:18: ( select_key )=> subquery
                    {
                    pushFollow(FOLLOW_subquery_in_multi_column_for_loop10108);
                    subquery733=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery733.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1028:18: ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN
                    {
                    LEFT_PAREN734=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_multi_column_for_loop10132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN734);

                    pushFollow(FOLLOW_expression_list_in_multi_column_for_loop10134);
                    expression_list735=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_list.add(expression_list735.getTree());
                    // OracleParser.g:1028:60: ( COMMA expression_list )*
                    loop239:
                    do {
                        int alt239=2;
                        int LA239_0 = input.LA(1);

                        if ( (LA239_0==COMMA) ) {
                            alt239=1;
                        }


                        switch (alt239) {
                    	case 1 :
                    	    // OracleParser.g:1028:61: COMMA expression_list
                    	    {
                    	    COMMA736=(Token)match(input,COMMA,FOLLOW_COMMA_in_multi_column_for_loop10137); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA736);

                    	    pushFollow(FOLLOW_expression_list_in_multi_column_for_loop10139);
                    	    expression_list737=expression_list();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression_list.add(expression_list737.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop239;
                        }
                    } while (true);

                    RIGHT_PAREN738=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN738);


                    }
                    break;

            }

            RIGHT_PAREN739=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN739);



            // AST REWRITE
            // elements: in_key, column_name, expression_list, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1031:9: -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) )
            {
                // OracleParser.g:1031:12: ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOR_MULTI_COLUMN, (for_key725!=null?((Token)for_key725.start):null)), root_1);

                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_name.nextTree());

                }
                stream_column_name.reset();
                // OracleParser.g:1031:60: ^( in_key ( subquery )? ( expression_list )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_2);

                // OracleParser.g:1031:69: ( subquery )?
                if ( stream_subquery.hasNext() ) {
                    adaptor.addChild(root_2, stream_subquery.nextTree());

                }
                stream_subquery.reset();
                // OracleParser.g:1031:79: ( expression_list )*
                while ( stream_expression_list.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression_list.nextTree());

                }
                stream_expression_list.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 914, multi_column_for_loop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multi_column_for_loop"

    public static class unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_expression"
    // OracleParser.g:1034:1: unary_expression options {backtrack=true; } : ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key unary_expression | connect_by_root_key unary_expression | {...}? => new_key unary_expression | distinct_key unary_expression | all_key unary_expression | {...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom );
    public final OracleParser.unary_expression_return unary_expression() throws RecognitionException {
        OracleParser.unary_expression_return retval = new OracleParser.unary_expression_return();
        retval.start = input.LT(1);
        int unary_expression_StartIndex = input.index();
        Object root_0 = null;

        Token MINUS_SIGN740=null;
        Token PLUS_SIGN742=null;
        OracleParser.unary_expression_return unary_expression741 = null;

        OracleParser.unary_expression_return unary_expression743 = null;

        OracleParser_Keys.prior_key_return prior_key744 = null;

        OracleParser.unary_expression_return unary_expression745 = null;

        OracleParser_Keys.connect_by_root_key_return connect_by_root_key746 = null;

        OracleParser.unary_expression_return unary_expression747 = null;

        OracleParser_Keys.new_key_return new_key748 = null;

        OracleParser.unary_expression_return unary_expression749 = null;

        OracleParser_Keys.distinct_key_return distinct_key750 = null;

        OracleParser.unary_expression_return unary_expression751 = null;

        OracleParser_Keys.all_key_return all_key752 = null;

        OracleParser.unary_expression_return unary_expression753 = null;

        OracleParser.case_statement_return case_statement754 = null;

        OracleParser.quantified_expression_return quantified_expression755 = null;

        OracleParser.standard_function_return standard_function756 = null;

        OracleParser.atom_return atom757 = null;


        Object MINUS_SIGN740_tree=null;
        Object PLUS_SIGN742_tree=null;
        RewriteRuleTokenStream stream_PLUS_SIGN=new RewriteRuleTokenStream(adaptor,"token PLUS_SIGN");
        RewriteRuleTokenStream stream_MINUS_SIGN=new RewriteRuleTokenStream(adaptor,"token MINUS_SIGN");
        RewriteRuleSubtreeStream stream_unary_expression=new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
        RewriteRuleSubtreeStream stream_standard_function=new RewriteRuleSubtreeStream(adaptor,"rule standard_function");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 915) ) { return retval; }
            // OracleParser.g:1039:5: ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key unary_expression | connect_by_root_key unary_expression | {...}? => new_key unary_expression | distinct_key unary_expression | all_key unary_expression | {...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom )
            int alt241=11;
            alt241 = dfa241.predict(input);
            switch (alt241) {
                case 1 :
                    // OracleParser.g:1039:10: MINUS_SIGN unary_expression
                    {
                    MINUS_SIGN740=(Token)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_unary_expression10224); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS_SIGN.add(MINUS_SIGN740);

                    pushFollow(FOLLOW_unary_expression_in_unary_expression10226);
                    unary_expression741=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary_expression.add(unary_expression741.getTree());


                    // AST REWRITE
                    // elements: unary_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1039:38: -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression )
                    {
                        // OracleParser.g:1039:41: ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNARY_OPERATOR, MINUS_SIGN740), root_1);

                        adaptor.addChild(root_1, stream_unary_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // OracleParser.g:1040:10: PLUS_SIGN unary_expression
                    {
                    PLUS_SIGN742=(Token)match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_unary_expression10246); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS_SIGN.add(PLUS_SIGN742);

                    pushFollow(FOLLOW_unary_expression_in_unary_expression10248);
                    unary_expression743=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary_expression.add(unary_expression743.getTree());


                    // AST REWRITE
                    // elements: unary_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1040:37: -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression )
                    {
                        // OracleParser.g:1040:40: ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNARY_OPERATOR, PLUS_SIGN742), root_1);

                        adaptor.addChild(root_1, stream_unary_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // OracleParser.g:1041:10: prior_key unary_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prior_key_in_unary_expression10268);
                    prior_key744=prior_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(prior_key744.getTree(), root_0);
                    pushFollow(FOLLOW_unary_expression_in_unary_expression10271);
                    unary_expression745=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression745.getTree());

                    }
                    break;
                case 4 :
                    // OracleParser.g:1042:10: connect_by_root_key unary_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_connect_by_root_key_in_unary_expression10282);
                    connect_by_root_key746=connect_by_root_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(connect_by_root_key746.getTree(), root_0);
                    pushFollow(FOLLOW_unary_expression_in_unary_expression10285);
                    unary_expression747=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression747.getTree());

                    }
                    break;
                case 5 :
                    // OracleParser.g:1043:10: {...}? => new_key unary_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "unary_expression", "input.LT(1).getText().equalsIgnoreCase(\"new\") && !input.LT(2).getText().equals(\".\")");
                    }
                    pushFollow(FOLLOW_new_key_in_unary_expression10299);
                    new_key748=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(new_key748.getTree(), root_0);
                    pushFollow(FOLLOW_unary_expression_in_unary_expression10302);
                    unary_expression749=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression749.getTree());

                    }
                    break;
                case 6 :
                    // OracleParser.g:1044:10: distinct_key unary_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_distinct_key_in_unary_expression10313);
                    distinct_key750=distinct_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(distinct_key750.getTree(), root_0);
                    pushFollow(FOLLOW_unary_expression_in_unary_expression10316);
                    unary_expression751=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression751.getTree());

                    }
                    break;
                case 7 :
                    // OracleParser.g:1045:10: all_key unary_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_all_key_in_unary_expression10327);
                    all_key752=all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(all_key752.getTree(), root_0);
                    pushFollow(FOLLOW_unary_expression_in_unary_expression10330);
                    unary_expression753=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression753.getTree());

                    }
                    break;
                case 8 :
                    // OracleParser.g:1046:10: {...}? case_statement[false]
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !(((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "unary_expression", "(input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE)");
                    }
                    pushFollow(FOLLOW_case_statement_in_unary_expression10343);
                    case_statement754=case_statement(false);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement754.getTree());

                    }
                    break;
                case 9 :
                    // OracleParser.g:1047:10: quantified_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantified_expression_in_unary_expression10355);
                    quantified_expression755=quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantified_expression755.getTree());

                    }
                    break;
                case 10 :
                    // OracleParser.g:1048:10: standard_function
                    {
                    pushFollow(FOLLOW_standard_function_in_unary_expression10366);
                    standard_function756=standard_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_standard_function.add(standard_function756.getTree());


                    // AST REWRITE
                    // elements: standard_function
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1048:28: -> ^( STANDARD_FUNCTION standard_function )
                    {
                        // OracleParser.g:1048:31: ^( STANDARD_FUNCTION standard_function )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STANDARD_FUNCTION, "STANDARD_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_standard_function.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // OracleParser.g:1049:10: atom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_atom_in_unary_expression10385);
                    atom757=atom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, atom757.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 915, unary_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_expression"

    protected static class case_statement_scope {
        boolean isStatement;
    }
    @SuppressWarnings("rawtypes")
	protected Stack case_statement_stack = new Stack();

    public static class case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_statement"
    // OracleParser.g:1052:1: case_statement[boolean isStatementParameter] : ( ( ( label_name )? case_key when_key )=> searched_case_statement | simple_case_statement );
    @SuppressWarnings("unchecked")
	public final OracleParser.case_statement_return case_statement(boolean isStatementParameter) throws RecognitionException {
        case_statement_stack.push(new case_statement_scope());
        OracleParser.case_statement_return retval = new OracleParser.case_statement_return();
        retval.start = input.LT(1);
        int case_statement_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.searched_case_statement_return searched_case_statement758 = null;

        OracleParser.simple_case_statement_return simple_case_statement759 = null;



        ((case_statement_scope)case_statement_stack.peek()).isStatement = isStatementParameter;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 916) ) { return retval; }
            // OracleParser.g:1057:5: ( ( ( label_name )? case_key when_key )=> searched_case_statement | simple_case_statement )
            int alt242=2;
            switch ( input.LA(1) ) {
            case REGULAR_ID:
                {
                int LA242_1 = input.LA(2);

                if ( (LA242_1==SQL92_RESERVED_CASE) ) {
                    int LA242_3 = input.LA(3);

                    if ( (LA242_3==SQL92_RESERVED_WHEN) && (synpred319_OracleParser())) {
                        alt242=1;
                    }
                    else if ( ((LA242_3>=UNSIGNED_INTEGER && LA242_3<=APPROXIMATE_NUM_LIT)||LA242_3==NATIONAL_CHAR_STRING_LIT||(LA242_3>=EXACT_NUM_LIT && LA242_3<=CHAR_STRING)||LA242_3==CHAR_STRING_PERL||LA242_3==DELIMITED_ID||LA242_3==LEFT_PAREN||LA242_3==COLON||LA242_3==BINDVAR||LA242_3==INTRODUCER||LA242_3==SQL92_RESERVED_DATE||LA242_3==SQL92_RESERVED_DEFAULT||LA242_3==SQL92_RESERVED_FALSE||LA242_3==SQL92_RESERVED_NULL||LA242_3==SQL92_RESERVED_TRUE||LA242_3==REGULAR_ID) ) {
                        alt242=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 1, input);

                    throw nvae;
                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA242_2 = input.LA(2);

                if ( (LA242_2==SQL92_RESERVED_CASE) ) {
                    int LA242_3 = input.LA(3);

                    if ( (LA242_3==SQL92_RESERVED_WHEN) && (synpred319_OracleParser())) {
                        alt242=1;
                    }
                    else if ( ((LA242_3>=UNSIGNED_INTEGER && LA242_3<=APPROXIMATE_NUM_LIT)||LA242_3==NATIONAL_CHAR_STRING_LIT||(LA242_3>=EXACT_NUM_LIT && LA242_3<=CHAR_STRING)||LA242_3==CHAR_STRING_PERL||LA242_3==DELIMITED_ID||LA242_3==LEFT_PAREN||LA242_3==COLON||LA242_3==BINDVAR||LA242_3==INTRODUCER||LA242_3==SQL92_RESERVED_DATE||LA242_3==SQL92_RESERVED_DEFAULT||LA242_3==SQL92_RESERVED_FALSE||LA242_3==SQL92_RESERVED_NULL||LA242_3==SQL92_RESERVED_TRUE||LA242_3==REGULAR_ID) ) {
                        alt242=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 2, input);

                    throw nvae;
                }
                }
                break;
            case SQL92_RESERVED_CASE:
                {
                int LA242_3 = input.LA(2);

                if ( (LA242_3==SQL92_RESERVED_WHEN) && (synpred319_OracleParser())) {
                    alt242=1;
                }
                else if ( ((LA242_3>=UNSIGNED_INTEGER && LA242_3<=APPROXIMATE_NUM_LIT)||LA242_3==NATIONAL_CHAR_STRING_LIT||(LA242_3>=EXACT_NUM_LIT && LA242_3<=CHAR_STRING)||LA242_3==CHAR_STRING_PERL||LA242_3==DELIMITED_ID||LA242_3==LEFT_PAREN||LA242_3==COLON||LA242_3==BINDVAR||LA242_3==INTRODUCER||LA242_3==SQL92_RESERVED_DATE||LA242_3==SQL92_RESERVED_DEFAULT||LA242_3==SQL92_RESERVED_FALSE||LA242_3==SQL92_RESERVED_NULL||LA242_3==SQL92_RESERVED_TRUE||LA242_3==REGULAR_ID) ) {
                    alt242=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;
            }

            switch (alt242) {
                case 1 :
                    // OracleParser.g:1057:10: ( ( label_name )? case_key when_key )=> searched_case_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_searched_case_statement_in_case_statement10432);
                    searched_case_statement758=searched_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_statement758.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1058:10: simple_case_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_simple_case_statement_in_case_statement10443);
                    simple_case_statement759=simple_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_statement759.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 916, case_statement_StartIndex); }
            case_statement_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "case_statement"

    public static class simple_case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_statement"
    // OracleParser.g:1063:1: simple_case_statement : ( label_name )? ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )? -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? ) ;
    public final OracleParser.simple_case_statement_return simple_case_statement() throws RecognitionException {
        OracleParser.simple_case_statement_return retval = new OracleParser.simple_case_statement_return();
        retval.start = input.LT(1);
        int simple_case_statement_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.case_key_return ck1 = null;

        OracleParser_Commons.label_name_return label_name760 = null;

        OracleParser.atom_return atom761 = null;

        OracleParser.simple_case_when_part_return simple_case_when_part762 = null;

        OracleParser.case_else_part_return case_else_part763 = null;

        OracleParser_Keys.end_key_return end_key764 = null;

        OracleParser_Keys.case_key_return case_key765 = null;

        OracleParser_Commons.label_name_return label_name766 = null;


        RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
        RewriteRuleSubtreeStream stream_simple_case_when_part=new RewriteRuleSubtreeStream(adaptor,"rule simple_case_when_part");
        RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
        RewriteRuleSubtreeStream stream_case_else_part=new RewriteRuleSubtreeStream(adaptor,"rule case_else_part");
        RewriteRuleSubtreeStream stream_case_key=new RewriteRuleSubtreeStream(adaptor,"rule case_key");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 917) ) { return retval; }
            // OracleParser.g:1064:5: ( ( label_name )? ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )? -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? ) )
            // OracleParser.g:1064:10: ( label_name )? ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )?
            {
            // OracleParser.g:1064:10: ( label_name )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==DELIMITED_ID||LA243_0==REGULAR_ID) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // OracleParser.g:0:0: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_simple_case_statement10465);
                    label_name760=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name760.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_case_key_in_simple_case_statement10470);
            ck1=case_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_case_key.add(ck1.getTree());
            pushFollow(FOLLOW_atom_in_simple_case_statement10472);
            atom761=atom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_atom.add(atom761.getTree());
            // OracleParser.g:1065:9: ( simple_case_when_part )+
            int cnt244=0;
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==SQL92_RESERVED_WHEN) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // OracleParser.g:0:0: simple_case_when_part
            	    {
            	    pushFollow(FOLLOW_simple_case_when_part_in_simple_case_statement10482);
            	    simple_case_when_part762=simple_case_when_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_simple_case_when_part.add(simple_case_when_part762.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt244 >= 1 ) break loop244;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(244, input);
                        throw eee;
                }
                cnt244++;
            } while (true);

            // OracleParser.g:1066:9: ( case_else_part )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==SQL92_RESERVED_ELSE) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // OracleParser.g:0:0: case_else_part
                    {
                    pushFollow(FOLLOW_case_else_part_in_simple_case_statement10494);
                    case_else_part763=case_else_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_case_else_part.add(case_else_part763.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_end_key_in_simple_case_statement10505);
            end_key764=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key764.getTree());
            // OracleParser.g:1067:17: ( case_key )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==SQL92_RESERVED_CASE) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // OracleParser.g:0:0: case_key
                    {
                    pushFollow(FOLLOW_case_key_in_simple_case_statement10507);
                    case_key765=case_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_case_key.add(case_key765.getTree());

                    }
                    break;

            }

            // OracleParser.g:1067:27: ( label_name )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==REGULAR_ID) ) {
                int LA247_1 = input.LA(2);

                if ( (synpred324_OracleParser()) ) {
                    alt247=1;
                }
            }
            else if ( (LA247_0==DELIMITED_ID) ) {
                int LA247_2 = input.LA(2);

                if ( (synpred324_OracleParser()) ) {
                    alt247=1;
                }
            }
            switch (alt247) {
                case 1 :
                    // OracleParser.g:0:0: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_simple_case_statement10510);
                    label_name766=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name766.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: simple_case_when_part, label_name, case_else_part, atom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1068:9: -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? )
            {
                // OracleParser.g:1068:12: ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SIMPLE_CASE, (ck1!=null?((Token)ck1.start):null)), root_1);

                // OracleParser.g:1068:38: ( label_name )*
                while ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();
                // OracleParser.g:1068:50: ^( EXPR atom )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_atom.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_simple_case_when_part.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_simple_case_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_simple_case_when_part.nextTree());

                }
                stream_simple_case_when_part.reset();
                // OracleParser.g:1068:86: ( case_else_part )?
                if ( stream_case_else_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_else_part.nextTree());

                }
                stream_case_else_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 917, simple_case_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_case_statement"

    public static class simple_case_when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_when_part"
    // OracleParser.g:1071:1: simple_case_when_part : when_key ew1= expression_wrapper then_key ({...}? seq_of_statements | ew2= expression_wrapper ) ;
    public final OracleParser.simple_case_when_part_return simple_case_when_part() throws RecognitionException {
        OracleParser.simple_case_when_part_return retval = new OracleParser.simple_case_when_part_return();
        retval.start = input.LT(1);
        int simple_case_when_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.expression_wrapper_return ew1 = null;

        OracleParser.expression_wrapper_return ew2 = null;

        OracleParser_Keys.when_key_return when_key767 = null;

        OracleParser_Keys.then_key_return then_key768 = null;

        OracleParser.seq_of_statements_return seq_of_statements769 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 918) ) { return retval; }
            // OracleParser.g:1072:5: ( when_key ew1= expression_wrapper then_key ({...}? seq_of_statements | ew2= expression_wrapper ) )
            // OracleParser.g:1072:10: when_key ew1= expression_wrapper then_key ({...}? seq_of_statements | ew2= expression_wrapper )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_when_key_in_simple_case_when_part10563);
            when_key767=when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(when_key767.getTree(), root_0);
            pushFollow(FOLLOW_expression_wrapper_in_simple_case_when_part10568);
            ew1=expression_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ew1.getTree());
            pushFollow(FOLLOW_then_key_in_simple_case_when_part10570);
            then_key768=then_key();

            state._fsp--;
            if (state.failed) return retval;
            // OracleParser.g:1072:53: ({...}? seq_of_statements | ew2= expression_wrapper )
            int alt248=2;
            alt248 = dfa248.predict(input);
            switch (alt248) {
                case 1 :
                    // OracleParser.g:1072:54: {...}? seq_of_statements
                    {
                    if ( !((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_case_when_part", "$case_statement::isStatement");
                    }
                    pushFollow(FOLLOW_seq_of_statements_in_simple_case_when_part10576);
                    seq_of_statements769=seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements769.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1072:106: ew2= expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_simple_case_when_part10582);
                    ew2=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ew2.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 918, simple_case_when_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_case_when_part"

    public static class searched_case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_statement"
    // OracleParser.g:1075:1: searched_case_statement : ( label_name )? ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )? -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? ) ;
    public final OracleParser.searched_case_statement_return searched_case_statement() throws RecognitionException {
        OracleParser.searched_case_statement_return retval = new OracleParser.searched_case_statement_return();
        retval.start = input.LT(1);
        int searched_case_statement_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.case_key_return ck1 = null;

        OracleParser_Commons.label_name_return label_name770 = null;

        OracleParser.searched_case_when_part_return searched_case_when_part771 = null;

        OracleParser.case_else_part_return case_else_part772 = null;

        OracleParser_Keys.end_key_return end_key773 = null;

        OracleParser_Keys.case_key_return case_key774 = null;

        OracleParser_Commons.label_name_return label_name775 = null;


        RewriteRuleSubtreeStream stream_searched_case_when_part=new RewriteRuleSubtreeStream(adaptor,"rule searched_case_when_part");
        RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
        RewriteRuleSubtreeStream stream_case_else_part=new RewriteRuleSubtreeStream(adaptor,"rule case_else_part");
        RewriteRuleSubtreeStream stream_case_key=new RewriteRuleSubtreeStream(adaptor,"rule case_key");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 919) ) { return retval; }
            // OracleParser.g:1076:5: ( ( label_name )? ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )? -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? ) )
            // OracleParser.g:1076:10: ( label_name )? ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )?
            {
            // OracleParser.g:1076:10: ( label_name )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==DELIMITED_ID||LA249_0==REGULAR_ID) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    // OracleParser.g:0:0: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_searched_case_statement10603);
                    label_name770=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name770.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_case_key_in_searched_case_statement10608);
            ck1=case_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_case_key.add(ck1.getTree());
            // OracleParser.g:1077:9: ( searched_case_when_part )+
            int cnt250=0;
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( (LA250_0==SQL92_RESERVED_WHEN) ) {
                    alt250=1;
                }


                switch (alt250) {
            	case 1 :
            	    // OracleParser.g:0:0: searched_case_when_part
            	    {
            	    pushFollow(FOLLOW_searched_case_when_part_in_searched_case_statement10618);
            	    searched_case_when_part771=searched_case_when_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_searched_case_when_part.add(searched_case_when_part771.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt250 >= 1 ) break loop250;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(250, input);
                        throw eee;
                }
                cnt250++;
            } while (true);

            // OracleParser.g:1078:9: ( case_else_part )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==SQL92_RESERVED_ELSE) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // OracleParser.g:0:0: case_else_part
                    {
                    pushFollow(FOLLOW_case_else_part_in_searched_case_statement10629);
                    case_else_part772=case_else_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_case_else_part.add(case_else_part772.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_end_key_in_searched_case_statement10640);
            end_key773=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key773.getTree());
            // OracleParser.g:1079:17: ( case_key )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==SQL92_RESERVED_CASE) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // OracleParser.g:0:0: case_key
                    {
                    pushFollow(FOLLOW_case_key_in_searched_case_statement10642);
                    case_key774=case_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_case_key.add(case_key774.getTree());

                    }
                    break;

            }

            // OracleParser.g:1079:27: ( label_name )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==REGULAR_ID) ) {
                int LA253_1 = input.LA(2);

                if ( (synpred330_OracleParser()) ) {
                    alt253=1;
                }
            }
            else if ( (LA253_0==DELIMITED_ID) ) {
                int LA253_2 = input.LA(2);

                if ( (synpred330_OracleParser()) ) {
                    alt253=1;
                }
            }
            switch (alt253) {
                case 1 :
                    // OracleParser.g:0:0: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_searched_case_statement10645);
                    label_name775=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name775.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: case_else_part, searched_case_when_part, label_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1080:9: -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? )
            {
                // OracleParser.g:1080:12: ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEARCHED_CASE, (ck1!=null?((Token)ck1.start):null)), root_1);

                // OracleParser.g:1080:40: ( label_name )*
                while ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();
                if ( !(stream_searched_case_when_part.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_searched_case_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_searched_case_when_part.nextTree());

                }
                stream_searched_case_when_part.reset();
                // OracleParser.g:1080:77: ( case_else_part )?
                if ( stream_case_else_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_else_part.nextTree());

                }
                stream_case_else_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 919, searched_case_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "searched_case_statement"

    public static class searched_case_when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_when_part"
    // OracleParser.g:1083:1: searched_case_when_part : when_key condition_wrapper then_key ({...}? seq_of_statements | expression_wrapper ) ;
    public final OracleParser.searched_case_when_part_return searched_case_when_part() throws RecognitionException {
        OracleParser.searched_case_when_part_return retval = new OracleParser.searched_case_when_part_return();
        retval.start = input.LT(1);
        int searched_case_when_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.when_key_return when_key776 = null;

        OracleParser.condition_wrapper_return condition_wrapper777 = null;

        OracleParser_Keys.then_key_return then_key778 = null;

        OracleParser.seq_of_statements_return seq_of_statements779 = null;

        OracleParser.expression_wrapper_return expression_wrapper780 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 920) ) { return retval; }
            // OracleParser.g:1084:5: ( when_key condition_wrapper then_key ({...}? seq_of_statements | expression_wrapper ) )
            // OracleParser.g:1084:10: when_key condition_wrapper then_key ({...}? seq_of_statements | expression_wrapper )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_when_key_in_searched_case_when_part10691);
            when_key776=when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(when_key776.getTree(), root_0);
            pushFollow(FOLLOW_condition_wrapper_in_searched_case_when_part10694);
            condition_wrapper777=condition_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_wrapper777.getTree());
            pushFollow(FOLLOW_then_key_in_searched_case_when_part10696);
            then_key778=then_key();

            state._fsp--;
            if (state.failed) return retval;
            // OracleParser.g:1084:48: ({...}? seq_of_statements | expression_wrapper )
            int alt254=2;
            alt254 = dfa254.predict(input);
            switch (alt254) {
                case 1 :
                    // OracleParser.g:1084:49: {...}? seq_of_statements
                    {
                    if ( !((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "searched_case_when_part", "$case_statement::isStatement");
                    }
                    pushFollow(FOLLOW_seq_of_statements_in_searched_case_when_part10702);
                    seq_of_statements779=seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements779.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1084:101: expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_searched_case_when_part10706);
                    expression_wrapper780=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper780.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 920, searched_case_when_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "searched_case_when_part"

    public static class case_else_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_else_part"
    // OracleParser.g:1087:1: case_else_part : else_key ({...}? seq_of_statements | expression_wrapper ) ;
    public final OracleParser.case_else_part_return case_else_part() throws RecognitionException {
        OracleParser.case_else_part_return retval = new OracleParser.case_else_part_return();
        retval.start = input.LT(1);
        int case_else_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.else_key_return else_key781 = null;

        OracleParser.seq_of_statements_return seq_of_statements782 = null;

        OracleParser.expression_wrapper_return expression_wrapper783 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 921) ) { return retval; }
            // OracleParser.g:1088:5: ( else_key ({...}? seq_of_statements | expression_wrapper ) )
            // OracleParser.g:1088:10: else_key ({...}? seq_of_statements | expression_wrapper )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_else_key_in_case_else_part10727);
            else_key781=else_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(else_key781.getTree(), root_0);
            // OracleParser.g:1088:20: ({...}? seq_of_statements | expression_wrapper )
            int alt255=2;
            alt255 = dfa255.predict(input);
            switch (alt255) {
                case 1 :
                    // OracleParser.g:1088:21: {...}? seq_of_statements
                    {
                    if ( !((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "case_else_part", "$case_statement::isStatement");
                    }
                    pushFollow(FOLLOW_seq_of_statements_in_case_else_part10733);
                    seq_of_statements782=seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements782.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1088:73: expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_case_else_part10737);
                    expression_wrapper783=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper783.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 921, case_else_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_else_part"

    public static class atom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atom"
    // OracleParser.g:1092:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) );
    public final OracleParser.atom_return atom() throws RecognitionException {
        OracleParser.atom_return retval = new OracleParser.atom_return();
        retval.start = input.LT(1);
        int atom_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN789=null;
        Token RIGHT_PAREN791=null;
        Token RIGHT_PAREN794=null;
        OracleParser_Commons.table_element_return table_element784 = null;

        OracleParser_Commons.outer_join_sign_return outer_join_sign785 = null;

        OracleParser_Commons.bind_variable_return bind_variable786 = null;

        OracleParser_Commons.constant_return constant787 = null;

        OracleParser_Commons.general_element_return general_element788 = null;

        OracleParser.subquery_return subquery790 = null;

        OracleParser.subquery_operation_part_return subquery_operation_part792 = null;

        OracleParser.expression_or_vector_return expression_or_vector793 = null;


        Object LEFT_PAREN789_tree=null;
        Object RIGHT_PAREN791_tree=null;
        Object RIGHT_PAREN794_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 922) ) { return retval; }
            // OracleParser.g:1097:5: ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) )
            int alt258=5;
            alt258 = dfa258.predict(input);
            switch (alt258) {
                case 1 :
                    // OracleParser.g:1097:10: ( table_element outer_join_sign )=> table_element outer_join_sign
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_table_element_in_atom10776);
                    table_element784=table_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_element784.getTree());
                    pushFollow(FOLLOW_outer_join_sign_in_atom10778);
                    outer_join_sign785=outer_join_sign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign785.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1098:10: bind_variable
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bind_variable_in_atom10789);
                    bind_variable786=bind_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bind_variable786.getTree());

                    }
                    break;
                case 3 :
                    // OracleParser.g:1099:10: constant
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_atom10800);
                    constant787=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant787.getTree());

                    }
                    break;
                case 4 :
                    // OracleParser.g:1100:10: general_element
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_general_element_in_atom10811);
                    general_element788=general_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element788.getTree());

                    }
                    break;
                case 5 :
                    // OracleParser.g:1101:10: LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN )
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN789=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_atom10822); if (state.failed) return retval;
                    // OracleParser.g:1102:10: ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN )
                    int alt257=2;
                    alt257 = dfa257.predict(input);
                    switch (alt257) {
                        case 1 :
                            // OracleParser.g:1103:15: ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )*
                            {
                            pushFollow(FOLLOW_subquery_in_atom10860);
                            subquery790=subquery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery790.getTree());
                            RIGHT_PAREN791=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_atom10862); if (state.failed) return retval;
                            // OracleParser.g:1103:64: ( subquery_operation_part )*
                            loop256:
                            do {
                                int alt256=2;
                                switch ( input.LA(1) ) {
                                case SQL92_RESERVED_UNION:
                                    {
                                    int LA256_2 = input.LA(2);

                                    if ( (synpred339_OracleParser()) ) {
                                        alt256=1;
                                    }


                                    }
                                    break;
                                case SQL92_RESERVED_INTERSECT:
                                    {
                                    int LA256_3 = input.LA(2);

                                    if ( (synpred339_OracleParser()) ) {
                                        alt256=1;
                                    }


                                    }
                                    break;
                                case PLSQL_RESERVED_MINUS:
                                    {
                                    int LA256_4 = input.LA(2);

                                    if ( (synpred339_OracleParser()) ) {
                                        alt256=1;
                                    }


                                    }
                                    break;

                                }

                                switch (alt256) {
                            	case 1 :
                            	    // OracleParser.g:0:0: subquery_operation_part
                            	    {
                            	    pushFollow(FOLLOW_subquery_operation_part_in_atom10865);
                            	    subquery_operation_part792=subquery_operation_part();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery_operation_part792.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop256;
                                }
                            } while (true);


                            }
                            break;
                        case 2 :
                            // OracleParser.g:1104:17: expression_or_vector RIGHT_PAREN
                            {
                            pushFollow(FOLLOW_expression_or_vector_in_atom10884);
                            expression_or_vector793=expression_or_vector();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_or_vector793.getTree());
                            RIGHT_PAREN794=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_atom10886); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 922, atom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "atom"

    public static class expression_or_vector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_or_vector"
    // OracleParser.g:1108:1: expression_or_vector : expression ( vector_expr )? -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr ) -> expression ;
    public final OracleParser.expression_or_vector_return expression_or_vector() throws RecognitionException {
        OracleParser.expression_or_vector_return retval = new OracleParser.expression_or_vector_return();
        retval.start = input.LT(1);
        int expression_or_vector_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.expression_return expression795 = null;

        OracleParser.vector_expr_return vector_expr796 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_vector_expr=new RewriteRuleSubtreeStream(adaptor,"rule vector_expr");
            int mode = 0;    
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 923) ) { return retval; }
            // OracleParser.g:1110:5: ( expression ( vector_expr )? -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr ) -> expression )
            // OracleParser.g:1110:10: expression ( vector_expr )?
            {
            pushFollow(FOLLOW_expression_in_expression_or_vector10926);
            expression795=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression795.getTree());
            // OracleParser.g:1110:21: ( vector_expr )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==COMMA) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // OracleParser.g:1110:22: vector_expr
                    {
                    pushFollow(FOLLOW_vector_expr_in_expression_or_vector10929);
                    vector_expr796=vector_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_vector_expr.add(vector_expr796.getTree());
                    if ( state.backtracking==0 ) {
                      mode = 1;
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: vector_expr, expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1111:9: -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr )
            if (mode == 1) {
                // OracleParser.g:1111:25: ^( VECTOR_EXPR ^( EXPR expression ) vector_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VECTOR_EXPR, "VECTOR_EXPR"), root_1);

                // OracleParser.g:1111:39: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_vector_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1112:9: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 923, expression_or_vector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression_or_vector"

    public static class vector_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vector_expr"
    // OracleParser.g:1115:1: vector_expr : COMMA expression ( COMMA expression )* -> ( ^( EXPR expression ) )+ ;
    public final OracleParser.vector_expr_return vector_expr() throws RecognitionException {
        OracleParser.vector_expr_return retval = new OracleParser.vector_expr_return();
        retval.start = input.LT(1);
        int vector_expr_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA797=null;
        Token COMMA799=null;
        OracleParser.expression_return expression798 = null;

        OracleParser.expression_return expression800 = null;


        Object COMMA797_tree=null;
        Object COMMA799_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 924) ) { return retval; }
            // OracleParser.g:1116:5: ( COMMA expression ( COMMA expression )* -> ( ^( EXPR expression ) )+ )
            // OracleParser.g:1116:10: COMMA expression ( COMMA expression )*
            {
            COMMA797=(Token)match(input,COMMA,FOLLOW_COMMA_in_vector_expr10989); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA797);

            pushFollow(FOLLOW_expression_in_vector_expr10991);
            expression798=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression798.getTree());
            // OracleParser.g:1116:27: ( COMMA expression )*
            loop260:
            do {
                int alt260=2;
                int LA260_0 = input.LA(1);

                if ( (LA260_0==COMMA) ) {
                    alt260=1;
                }


                switch (alt260) {
            	case 1 :
            	    // OracleParser.g:1116:28: COMMA expression
            	    {
            	    COMMA799=(Token)match(input,COMMA,FOLLOW_COMMA_in_vector_expr10994); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA799);

            	    pushFollow(FOLLOW_expression_in_vector_expr10996);
            	    expression800=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression800.getTree());

            	    }
            	    break;

            	default :
            	    break loop260;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1117:9: -> ( ^( EXPR expression ) )+
            {
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    // OracleParser.g:1117:12: ^( EXPR expression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);

                    adaptor.addChild(root_1, stream_expression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_expression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 924, vector_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vector_expr"

    public static class quantified_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantified_expression"
    // OracleParser.g:1120:1: quantified_expression : ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN ) ;
    public final OracleParser.quantified_expression_return quantified_expression() throws RecognitionException {
        OracleParser.quantified_expression_return retval = new OracleParser.quantified_expression_return();
        retval.start = input.LT(1);
        int quantified_expression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN805=null;
        Token RIGHT_PAREN807=null;
        Token LEFT_PAREN808=null;
        Token RIGHT_PAREN810=null;
        OracleParser_Keys.some_key_return some_key801 = null;

        OracleParser_Keys.exists_key_return exists_key802 = null;

        OracleParser_Keys.all_key_return all_key803 = null;

        OracleParser_Keys.any_key_return any_key804 = null;

        OracleParser.subquery_return subquery806 = null;

        OracleParser.expression_wrapper_return expression_wrapper809 = null;


        Object LEFT_PAREN805_tree=null;
        Object RIGHT_PAREN807_tree=null;
        Object LEFT_PAREN808_tree=null;
        Object RIGHT_PAREN810_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 925) ) { return retval; }
            // OracleParser.g:1121:5: ( ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN ) )
            // OracleParser.g:1121:10: ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN )
            {
            root_0 = (Object)adaptor.nil();

            // OracleParser.g:1121:10: ( some_key | exists_key | all_key | any_key )
            int alt261=4;
            switch ( input.LA(1) ) {
            case REGULAR_ID:
                {
                alt261=1;
                }
                break;
            case SQL92_RESERVED_EXISTS:
                {
                alt261=2;
                }
                break;
            case SQL92_RESERVED_ALL:
                {
                alt261=3;
                }
                break;
            case SQL92_RESERVED_ANY:
                {
                alt261=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }

            switch (alt261) {
                case 1 :
                    // OracleParser.g:1121:12: some_key
                    {
                    pushFollow(FOLLOW_some_key_in_quantified_expression11037);
                    some_key801=some_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(some_key801.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // OracleParser.g:1121:24: exists_key
                    {
                    pushFollow(FOLLOW_exists_key_in_quantified_expression11042);
                    exists_key802=exists_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(exists_key802.getTree(), root_0);

                    }
                    break;
                case 3 :
                    // OracleParser.g:1121:38: all_key
                    {
                    pushFollow(FOLLOW_all_key_in_quantified_expression11047);
                    all_key803=all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(all_key803.getTree(), root_0);

                    }
                    break;
                case 4 :
                    // OracleParser.g:1121:49: any_key
                    {
                    pushFollow(FOLLOW_any_key_in_quantified_expression11052);
                    any_key804=any_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(any_key804.getTree(), root_0);

                    }
                    break;

            }

            // OracleParser.g:1122:10: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN )
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==LEFT_PAREN) ) {
                int LA262_1 = input.LA(2);

                if ( (synpred346_OracleParser()) ) {
                    alt262=1;
                }
                else if ( (true) ) {
                    alt262=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 262, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;
            }
            switch (alt262) {
                case 1 :
                    // OracleParser.g:1122:12: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
                    {
                    LEFT_PAREN805=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_quantified_expression11080); if (state.failed) return retval;
                    pushFollow(FOLLOW_subquery_in_quantified_expression11083);
                    subquery806=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery806.getTree());
                    RIGHT_PAREN807=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_quantified_expression11085); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // OracleParser.g:1123:14: LEFT_PAREN expression_wrapper RIGHT_PAREN
                    {
                    LEFT_PAREN808=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_quantified_expression11101); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_wrapper_in_quantified_expression11104);
                    expression_wrapper809=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper809.getTree());
                    RIGHT_PAREN810=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_quantified_expression11106); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 925, quantified_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantified_expression"

    public static class standard_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "standard_function"
    // OracleParser.g:1127:1: standard_function : ( stantard_function_enabling_over function_argument ( over_clause )? | stantard_function_enabling_using function_argument ( using_clause )? | count_key LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )? | ( cast_key | xmlcast_key ) LEFT_PAREN ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN ) | concatenation_wrapper ) as_key type_spec RIGHT_PAREN | chr_key LEFT_PAREN concatenation_wrapper using_key nchar_cs_key RIGHT_PAREN | collect_key LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN | stantard_function_enabling_within_or_over function_argument ( within_or_over_part )+ | decompose_key LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN | extract_key LEFT_PAREN REGULAR_ID from_key concatenation_wrapper RIGHT_PAREN | ( first_value_key | last_value_key ) LEFT_PAREN concatenation_wrapper ( ignore_key nulls_key )? RIGHT_PAREN over_clause | ( first_value_key | last_value_key ) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN | translate_key LEFT_PAREN expression_wrapper ( using_key ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN | treat_key LEFT_PAREN expression_wrapper as_key ( ref_key )? type_spec RIGHT_PAREN | trim_key LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN | xmlagg_key LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )? | ( xmlcolattval_key | xmlforest_key ) LEFT_PAREN xml_multiuse_expression_element ( COMMA xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlelement_key LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA xml_attributes_clause )? ( COMMA expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlexists_key LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN | xmlparse_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlpi_key LEFT_PAREN ( name_key id | evalname_key concatenation_wrapper ) ( COMMA concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlquery_key LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key content_key ( null_key on_key empty_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlroot_key LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlserialize_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmltable_key LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key xml_table_column ( COMMA xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )? );
    public final OracleParser.standard_function_return standard_function() throws RecognitionException {
        OracleParser.standard_function_return retval = new OracleParser.standard_function_return();
        retval.start = input.LT(1);
        int standard_function_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN818=null;
        Token ASTERISK819=null;
        Token RIGHT_PAREN824=null;
        Token LEFT_PAREN828=null;
        Token LEFT_PAREN830=null;
        Token RIGHT_PAREN832=null;
        Token RIGHT_PAREN836=null;
        Token LEFT_PAREN838=null;
        Token RIGHT_PAREN842=null;
        Token LEFT_PAREN844=null;
        Token RIGHT_PAREN849=null;
        Token LEFT_PAREN854=null;
        Token RIGHT_PAREN858=null;
        Token LEFT_PAREN860=null;
        Token REGULAR_ID861=null;
        Token RIGHT_PAREN864=null;
        Token LEFT_PAREN867=null;
        Token RIGHT_PAREN871=null;
        Token LEFT_PAREN879=null;
        Token COMMA881=null;
        Token RIGHT_PAREN885=null;
        Token LEFT_PAREN887=null;
        Token COMMA892=null;
        Token RIGHT_PAREN894=null;
        Token LEFT_PAREN896=null;
        Token RIGHT_PAREN901=null;
        Token LEFT_PAREN903=null;
        Token RIGHT_PAREN910=null;
        Token LEFT_PAREN912=null;
        Token RIGHT_PAREN915=null;
        Token PERIOD916=null;
        Token LEFT_PAREN920=null;
        Token COMMA922=null;
        Token RIGHT_PAREN924=null;
        Token PERIOD925=null;
        Token LEFT_PAREN928=null;
        Token COMMA934=null;
        Token COMMA936=null;
        Token RIGHT_PAREN939=null;
        Token PERIOD940=null;
        Token LEFT_PAREN943=null;
        Token RIGHT_PAREN946=null;
        Token LEFT_PAREN948=null;
        Token RIGHT_PAREN953=null;
        Token PERIOD954=null;
        Token LEFT_PAREN957=null;
        Token COMMA962=null;
        Token RIGHT_PAREN964=null;
        Token PERIOD965=null;
        Token LEFT_PAREN968=null;
        Token RIGHT_PAREN976=null;
        Token PERIOD977=null;
        Token LEFT_PAREN980=null;
        Token COMMA983=null;
        Token RIGHT_PAREN985=null;
        Token PERIOD986=null;
        Token LEFT_PAREN989=null;
        Token RIGHT_PAREN1001=null;
        Token PERIOD1002=null;
        Token LEFT_PAREN1005=null;
        Token COMMA1011=null;
        Token RIGHT_PAREN1013=null;
        Token PERIOD1014=null;
        OracleParser.stantard_function_enabling_over_return stantard_function_enabling_over811 = null;

        OracleParser_Commons.function_argument_return function_argument812 = null;

        OracleParser.over_clause_return over_clause813 = null;

        OracleParser.stantard_function_enabling_using_return stantard_function_enabling_using814 = null;

        OracleParser_Commons.function_argument_return function_argument815 = null;

        OracleParser.using_clause_return using_clause816 = null;

        OracleParser_Keys.count_key_return count_key817 = null;

        OracleParser_Keys.distinct_key_return distinct_key820 = null;

        OracleParser_Keys.unique_key_return unique_key821 = null;

        OracleParser_Keys.all_key_return all_key822 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper823 = null;

        OracleParser.over_clause_return over_clause825 = null;

        OracleParser_Keys.cast_key_return cast_key826 = null;

        OracleParser_Keys.xmlcast_key_return xmlcast_key827 = null;

        OracleParser_Keys.multiset_key_return multiset_key829 = null;

        OracleParser.subquery_return subquery831 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper833 = null;

        OracleParser_Keys.as_key_return as_key834 = null;

        OracleParser_Commons.type_spec_return type_spec835 = null;

        OracleParser_Keys.chr_key_return chr_key837 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper839 = null;

        OracleParser_Keys.using_key_return using_key840 = null;

        OracleParser_Keys.nchar_cs_key_return nchar_cs_key841 = null;

        OracleParser_Keys.collect_key_return collect_key843 = null;

        OracleParser_Keys.distinct_key_return distinct_key845 = null;

        OracleParser_Keys.unique_key_return unique_key846 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper847 = null;

        OracleParser.collect_order_by_part_return collect_order_by_part848 = null;

        OracleParser.stantard_function_enabling_within_or_over_return stantard_function_enabling_within_or_over850 = null;

        OracleParser_Commons.function_argument_return function_argument851 = null;

        OracleParser.within_or_over_part_return within_or_over_part852 = null;

        OracleParser_Keys.decompose_key_return decompose_key853 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper855 = null;

        OracleParser_Keys.canonical_key_return canonical_key856 = null;

        OracleParser_Keys.compatibility_key_return compatibility_key857 = null;

        OracleParser_Keys.extract_key_return extract_key859 = null;

        OracleParser_Keys.from_key_return from_key862 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper863 = null;

        OracleParser_Keys.first_value_key_return first_value_key865 = null;

        OracleParser_Keys.last_value_key_return last_value_key866 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper868 = null;

        OracleParser_Keys.ignore_key_return ignore_key869 = null;

        OracleParser_Keys.nulls_key_return nulls_key870 = null;

        OracleParser.over_clause_return over_clause872 = null;

        OracleParser_Keys.first_value_key_return first_value_key873 = null;

        OracleParser_Keys.last_value_key_return last_value_key874 = null;

        OracleParser_Commons.function_argument_analytic_return function_argument_analytic875 = null;

        OracleParser_Commons.respect_or_ignore_nulls_return respect_or_ignore_nulls876 = null;

        OracleParser.over_clause_return over_clause877 = null;

        OracleParser.stantard_function_pedictions_return stantard_function_pedictions878 = null;

        OracleParser.expression_wrapper_return expression_wrapper880 = null;

        OracleParser.expression_wrapper_return expression_wrapper882 = null;

        OracleParser.cost_matrix_clause_return cost_matrix_clause883 = null;

        OracleParser.using_clause_return using_clause884 = null;

        OracleParser_Keys.translate_key_return translate_key886 = null;

        OracleParser.expression_wrapper_return expression_wrapper888 = null;

        OracleParser_Keys.using_key_return using_key889 = null;

        OracleParser_Keys.char_cs_key_return char_cs_key890 = null;

        OracleParser_Keys.nchar_cs_key_return nchar_cs_key891 = null;

        OracleParser.expression_wrapper_return expression_wrapper893 = null;

        OracleParser_Keys.treat_key_return treat_key895 = null;

        OracleParser.expression_wrapper_return expression_wrapper897 = null;

        OracleParser_Keys.as_key_return as_key898 = null;

        OracleParser_Keys.ref_key_return ref_key899 = null;

        OracleParser_Commons.type_spec_return type_spec900 = null;

        OracleParser_Keys.trim_key_return trim_key902 = null;

        OracleParser_Keys.leading_key_return leading_key904 = null;

        OracleParser_Keys.trailing_key_return trailing_key905 = null;

        OracleParser_Keys.both_key_return both_key906 = null;

        OracleParser_Commons.quoted_string_return quoted_string907 = null;

        OracleParser_Keys.from_key_return from_key908 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper909 = null;

        OracleParser_Keys.xmlagg_key_return xmlagg_key911 = null;

        OracleParser.expression_wrapper_return expression_wrapper913 = null;

        OracleParser.order_by_clause_return order_by_clause914 = null;

        OracleParser_Commons.general_element_part_return general_element_part917 = null;

        OracleParser_Keys.xmlcolattval_key_return xmlcolattval_key918 = null;

        OracleParser_Keys.xmlforest_key_return xmlforest_key919 = null;

        OracleParser.xml_multiuse_expression_element_return xml_multiuse_expression_element921 = null;

        OracleParser.xml_multiuse_expression_element_return xml_multiuse_expression_element923 = null;

        OracleParser_Commons.general_element_part_return general_element_part926 = null;

        OracleParser_Keys.xmlelement_key_return xmlelement_key927 = null;

        OracleParser_Keys.entityescaping_key_return entityescaping_key929 = null;

        OracleParser_Keys.noentityescaping_key_return noentityescaping_key930 = null;

        OracleParser_Keys.name_key_return name_key931 = null;

        OracleParser_Keys.evalname_key_return evalname_key932 = null;

        OracleParser.expression_wrapper_return expression_wrapper933 = null;

        OracleParser.xml_attributes_clause_return xml_attributes_clause935 = null;

        OracleParser.expression_wrapper_return expression_wrapper937 = null;

        OracleParser_Commons.column_alias_return column_alias938 = null;

        OracleParser_Commons.general_element_part_return general_element_part941 = null;

        OracleParser_Keys.xmlexists_key_return xmlexists_key942 = null;

        OracleParser.expression_wrapper_return expression_wrapper944 = null;

        OracleParser.xml_passing_clause_return xml_passing_clause945 = null;

        OracleParser_Keys.xmlparse_key_return xmlparse_key947 = null;

        OracleParser_Keys.document_key_return document_key949 = null;

        OracleParser_Keys.content_key_return content_key950 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper951 = null;

        OracleParser_Keys.wellformed_key_return wellformed_key952 = null;

        OracleParser_Commons.general_element_part_return general_element_part955 = null;

        OracleParser_Keys.xmlpi_key_return xmlpi_key956 = null;

        OracleParser_Keys.name_key_return name_key958 = null;

        OracleParser_Commons.id_return id959 = null;

        OracleParser_Keys.evalname_key_return evalname_key960 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper961 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper963 = null;

        OracleParser_Commons.general_element_part_return general_element_part966 = null;

        OracleParser_Keys.xmlquery_key_return xmlquery_key967 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper969 = null;

        OracleParser.xml_passing_clause_return xml_passing_clause970 = null;

        OracleParser_Keys.returning_key_return returning_key971 = null;

        OracleParser_Keys.content_key_return content_key972 = null;

        OracleParser_Keys.null_key_return null_key973 = null;

        OracleParser_Keys.on_key_return on_key974 = null;

        OracleParser_Keys.empty_key_return empty_key975 = null;

        OracleParser_Commons.general_element_part_return general_element_part978 = null;

        OracleParser_Keys.xmlroot_key_return xmlroot_key979 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper981 = null;

        OracleParser.xmlroot_param_version_part_return xmlroot_param_version_part982 = null;

        OracleParser.xmlroot_param_standalone_part_return xmlroot_param_standalone_part984 = null;

        OracleParser_Commons.general_element_part_return general_element_part987 = null;

        OracleParser_Keys.xmlserialize_key_return xmlserialize_key988 = null;

        OracleParser_Keys.document_key_return document_key990 = null;

        OracleParser_Keys.content_key_return content_key991 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper992 = null;

        OracleParser_Keys.as_key_return as_key993 = null;

        OracleParser_Commons.type_spec_return type_spec994 = null;

        OracleParser.xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part995 = null;

        OracleParser.xmlserialize_param_version_part_return xmlserialize_param_version_part996 = null;

        OracleParser.xmlserialize_param_ident_part_return xmlserialize_param_ident_part997 = null;

        OracleParser_Keys.hide_key_return hide_key998 = null;

        OracleParser_Keys.show_key_return show_key999 = null;

        OracleParser_Keys.defaults_key_return defaults_key1000 = null;

        OracleParser_Commons.general_element_part_return general_element_part1003 = null;

        OracleParser_Keys.xmltable_key_return xmltable_key1004 = null;

        OracleParser.xml_namespaces_clause_return xml_namespaces_clause1006 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper1007 = null;

        OracleParser.xml_passing_clause_return xml_passing_clause1008 = null;

        OracleParser_Keys.columns_key_return columns_key1009 = null;

        OracleParser.xml_table_column_return xml_table_column1010 = null;

        OracleParser.xml_table_column_return xml_table_column1012 = null;

        OracleParser_Commons.general_element_part_return general_element_part1015 = null;


        Object LEFT_PAREN818_tree=null;
        Object ASTERISK819_tree=null;
        Object RIGHT_PAREN824_tree=null;
        Object LEFT_PAREN828_tree=null;
        Object LEFT_PAREN830_tree=null;
        Object RIGHT_PAREN832_tree=null;
        Object RIGHT_PAREN836_tree=null;
        Object LEFT_PAREN838_tree=null;
        Object RIGHT_PAREN842_tree=null;
        Object LEFT_PAREN844_tree=null;
        Object RIGHT_PAREN849_tree=null;
        Object LEFT_PAREN854_tree=null;
        Object RIGHT_PAREN858_tree=null;
        Object LEFT_PAREN860_tree=null;
        Object REGULAR_ID861_tree=null;
        Object RIGHT_PAREN864_tree=null;
        Object LEFT_PAREN867_tree=null;
        Object RIGHT_PAREN871_tree=null;
        Object LEFT_PAREN879_tree=null;
        Object COMMA881_tree=null;
        Object RIGHT_PAREN885_tree=null;
        Object LEFT_PAREN887_tree=null;
        Object COMMA892_tree=null;
        Object RIGHT_PAREN894_tree=null;
        Object LEFT_PAREN896_tree=null;
        Object RIGHT_PAREN901_tree=null;
        Object LEFT_PAREN903_tree=null;
        Object RIGHT_PAREN910_tree=null;
        Object LEFT_PAREN912_tree=null;
        Object RIGHT_PAREN915_tree=null;
        Object PERIOD916_tree=null;
        Object LEFT_PAREN920_tree=null;
        Object COMMA922_tree=null;
        Object RIGHT_PAREN924_tree=null;
        Object PERIOD925_tree=null;
        Object LEFT_PAREN928_tree=null;
        Object COMMA934_tree=null;
        Object COMMA936_tree=null;
        Object RIGHT_PAREN939_tree=null;
        Object PERIOD940_tree=null;
        Object LEFT_PAREN943_tree=null;
        Object RIGHT_PAREN946_tree=null;
        Object LEFT_PAREN948_tree=null;
        Object RIGHT_PAREN953_tree=null;
        Object PERIOD954_tree=null;
        Object LEFT_PAREN957_tree=null;
        Object COMMA962_tree=null;
        Object RIGHT_PAREN964_tree=null;
        Object PERIOD965_tree=null;
        Object LEFT_PAREN968_tree=null;
        Object RIGHT_PAREN976_tree=null;
        Object PERIOD977_tree=null;
        Object LEFT_PAREN980_tree=null;
        Object COMMA983_tree=null;
        Object RIGHT_PAREN985_tree=null;
        Object PERIOD986_tree=null;
        Object LEFT_PAREN989_tree=null;
        Object RIGHT_PAREN1001_tree=null;
        Object PERIOD1002_tree=null;
        Object LEFT_PAREN1005_tree=null;
        Object COMMA1011_tree=null;
        Object RIGHT_PAREN1013_tree=null;
        Object PERIOD1014_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 926) ) { return retval; }
            // OracleParser.g:1128:5: ( stantard_function_enabling_over function_argument ( over_clause )? | stantard_function_enabling_using function_argument ( using_clause )? | count_key LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )? | ( cast_key | xmlcast_key ) LEFT_PAREN ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN ) | concatenation_wrapper ) as_key type_spec RIGHT_PAREN | chr_key LEFT_PAREN concatenation_wrapper using_key nchar_cs_key RIGHT_PAREN | collect_key LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN | stantard_function_enabling_within_or_over function_argument ( within_or_over_part )+ | decompose_key LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN | extract_key LEFT_PAREN REGULAR_ID from_key concatenation_wrapper RIGHT_PAREN | ( first_value_key | last_value_key ) LEFT_PAREN concatenation_wrapper ( ignore_key nulls_key )? RIGHT_PAREN over_clause | ( first_value_key | last_value_key ) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN | translate_key LEFT_PAREN expression_wrapper ( using_key ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN | treat_key LEFT_PAREN expression_wrapper as_key ( ref_key )? type_spec RIGHT_PAREN | trim_key LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN | xmlagg_key LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )? | ( xmlcolattval_key | xmlforest_key ) LEFT_PAREN xml_multiuse_expression_element ( COMMA xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlelement_key LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA xml_attributes_clause )? ( COMMA expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlexists_key LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN | xmlparse_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlpi_key LEFT_PAREN ( name_key id | evalname_key concatenation_wrapper ) ( COMMA concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlquery_key LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key content_key ( null_key on_key empty_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlroot_key LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlserialize_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmltable_key LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key xml_table_column ( COMMA xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )? )
            int alt323=25;
            alt323 = dfa323.predict(input);
            switch (alt323) {
                case 1 :
                    // OracleParser.g:1128:10: stantard_function_enabling_over function_argument ( over_clause )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stantard_function_enabling_over_in_standard_function11138);
                    stantard_function_enabling_over811=stantard_function_enabling_over();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(stantard_function_enabling_over811.getTree(), root_0);
                    pushFollow(FOLLOW_function_argument_in_standard_function11141);
                    function_argument812=function_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_argument812.getTree());
                    // OracleParser.g:1128:61: ( over_clause )?
                    int alt263=2;
                    alt263 = dfa263.predict(input);
                    switch (alt263) {
                        case 1 :
                            // OracleParser.g:0:0: over_clause
                            {
                            pushFollow(FOLLOW_over_clause_in_standard_function11143);
                            over_clause813=over_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause813.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // OracleParser.g:1129:10: stantard_function_enabling_using function_argument ( using_clause )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stantard_function_enabling_using_in_standard_function11155);
                    stantard_function_enabling_using814=stantard_function_enabling_using();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(stantard_function_enabling_using814.getTree(), root_0);
                    pushFollow(FOLLOW_function_argument_in_standard_function11158);
                    function_argument815=function_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_argument815.getTree());
                    // OracleParser.g:1129:62: ( using_clause )?
                    int alt264=2;
                    alt264 = dfa264.predict(input);
                    switch (alt264) {
                        case 1 :
                            // OracleParser.g:0:0: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_standard_function11160);
                            using_clause816=using_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause816.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // OracleParser.g:1130:10: count_key LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_count_key_in_standard_function11172);
                    count_key817=count_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(count_key817.getTree(), root_0);
                    LEFT_PAREN818=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11187); if (state.failed) return retval;
                    // OracleParser.g:1132:17: ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper )
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==ASTERISK) ) {
                        alt266=1;
                    }
                    else if ( ((LA266_0>=UNSIGNED_INTEGER && LA266_0<=MINUS_SIGN)||LA266_0==NATIONAL_CHAR_STRING_LIT||(LA266_0>=EXACT_NUM_LIT && LA266_0<=CHAR_STRING)||LA266_0==CHAR_STRING_PERL||LA266_0==DELIMITED_ID||LA266_0==LEFT_PAREN||LA266_0==PLUS_SIGN||LA266_0==COLON||LA266_0==BINDVAR||LA266_0==INTRODUCER||LA266_0==SQL92_RESERVED_ALL||LA266_0==SQL92_RESERVED_ANY||LA266_0==SQL92_RESERVED_CASE||LA266_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA266_0==SQL92_RESERVED_DATE||LA266_0==SQL92_RESERVED_DEFAULT||LA266_0==SQL92_RESERVED_DISTINCT||(LA266_0>=SQL92_RESERVED_EXISTS && LA266_0<=SQL92_RESERVED_FALSE)||LA266_0==SQL92_RESERVED_NULL||LA266_0==SQL92_RESERVED_PRIOR||LA266_0==SQL92_RESERVED_TRUE||LA266_0==SQL92_RESERVED_UNIQUE||LA266_0==REGULAR_ID) ) {
                        alt266=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 266, 0, input);

                        throw nvae;
                    }
                    switch (alt266) {
                        case 1 :
                            // OracleParser.g:1132:19: ASTERISK
                            {
                            ASTERISK819=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_standard_function11208); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASTERISK819_tree = (Object)adaptor.create(ASTERISK819);
                            adaptor.addChild(root_0, ASTERISK819_tree);
                            }

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1132:30: ( distinct_key | unique_key | all_key )? concatenation_wrapper
                            {
                            // OracleParser.g:1132:30: ( distinct_key | unique_key | all_key )?
                            int alt265=4;
                            alt265 = dfa265.predict(input);
                            switch (alt265) {
                                case 1 :
                                    // OracleParser.g:1132:31: distinct_key
                                    {
                                    pushFollow(FOLLOW_distinct_key_in_standard_function11213);
                                    distinct_key820=distinct_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, distinct_key820.getTree());

                                    }
                                    break;
                                case 2 :
                                    // OracleParser.g:1132:44: unique_key
                                    {
                                    pushFollow(FOLLOW_unique_key_in_standard_function11215);
                                    unique_key821=unique_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unique_key821.getTree());

                                    }
                                    break;
                                case 3 :
                                    // OracleParser.g:1132:55: all_key
                                    {
                                    pushFollow(FOLLOW_all_key_in_standard_function11217);
                                    all_key822=all_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, all_key822.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11221);
                            concatenation_wrapper823=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper823.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN824=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11237); if (state.failed) return retval;
                    // OracleParser.g:1133:26: ( over_clause )?
                    int alt267=2;
                    alt267 = dfa267.predict(input);
                    switch (alt267) {
                        case 1 :
                            // OracleParser.g:0:0: over_clause
                            {
                            pushFollow(FOLLOW_over_clause_in_standard_function11240);
                            over_clause825=over_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause825.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // OracleParser.g:1134:10: ( cast_key | xmlcast_key ) LEFT_PAREN ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN ) | concatenation_wrapper ) as_key type_spec RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    // OracleParser.g:1134:10: ( cast_key | xmlcast_key )
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==REGULAR_ID) ) {
                        int LA268_1 = input.LA(2);

                        if ( ((synpred357_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("cast")))) ) {
                            alt268=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlcast"))) ) {
                            alt268=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 268, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 268, 0, input);

                        throw nvae;
                    }
                    switch (alt268) {
                        case 1 :
                            // OracleParser.g:1134:11: cast_key
                            {
                            pushFollow(FOLLOW_cast_key_in_standard_function11253);
                            cast_key826=cast_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(cast_key826.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1134:21: xmlcast_key
                            {
                            pushFollow(FOLLOW_xmlcast_key_in_standard_function11256);
                            xmlcast_key827=xmlcast_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlcast_key827.getTree(), root_0);

                            }
                            break;

                    }

                    LEFT_PAREN828=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11273); if (state.failed) return retval;
                    // OracleParser.g:1136:17: ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN ) | concatenation_wrapper )
                    int alt269=2;
                    alt269 = dfa269.predict(input);
                    switch (alt269) {
                        case 1 :
                            // OracleParser.g:1136:19: ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN )
                            {
                            // OracleParser.g:1136:70: ( multiset_key LEFT_PAREN subquery RIGHT_PAREN )
                            // OracleParser.g:1136:71: multiset_key LEFT_PAREN subquery RIGHT_PAREN
                            {
                            pushFollow(FOLLOW_multiset_key_in_standard_function11309);
                            multiset_key829=multiset_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            LEFT_PAREN830=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11312); if (state.failed) return retval;
                            pushFollow(FOLLOW_subquery_in_standard_function11315);
                            subquery831=subquery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery831.getTree());
                            RIGHT_PAREN832=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11317); if (state.failed) return retval;

                            }


                            }
                            break;
                        case 2 :
                            // OracleParser.g:1137:19: concatenation_wrapper
                            {
                            pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11339);
                            concatenation_wrapper833=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper833.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_as_key_in_standard_function11375);
                    as_key834=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_type_spec_in_standard_function11378);
                    type_spec835=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec835.getTree());
                    RIGHT_PAREN836=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11392); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // OracleParser.g:1141:10: chr_key LEFT_PAREN concatenation_wrapper using_key nchar_cs_key RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_chr_key_in_standard_function11404);
                    chr_key837=chr_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(chr_key837.getTree(), root_0);
                    LEFT_PAREN838=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11419); if (state.failed) return retval;
                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11439);
                    concatenation_wrapper839=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper839.getTree());
                    pushFollow(FOLLOW_using_key_in_standard_function11441);
                    using_key840=using_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_nchar_cs_key_in_standard_function11444);
                    nchar_cs_key841=nchar_cs_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nchar_cs_key841.getTree());
                    RIGHT_PAREN842=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11459); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // OracleParser.g:1145:10: collect_key LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_collect_key_in_standard_function11471);
                    collect_key843=collect_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(collect_key843.getTree(), root_0);
                    LEFT_PAREN844=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11486); if (state.failed) return retval;
                    // OracleParser.g:1147:17: ( distinct_key | unique_key )?
                    int alt270=3;
                    alt270 = dfa270.predict(input);
                    switch (alt270) {
                        case 1 :
                            // OracleParser.g:1147:18: distinct_key
                            {
                            pushFollow(FOLLOW_distinct_key_in_standard_function11507);
                            distinct_key845=distinct_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, distinct_key845.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1147:31: unique_key
                            {
                            pushFollow(FOLLOW_unique_key_in_standard_function11509);
                            unique_key846=unique_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unique_key846.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11513);
                    concatenation_wrapper847=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper847.getTree());
                    // OracleParser.g:1147:66: ( collect_order_by_part )?
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==SQL92_RESERVED_ORDER) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            // OracleParser.g:0:0: collect_order_by_part
                            {
                            pushFollow(FOLLOW_collect_order_by_part_in_standard_function11515);
                            collect_order_by_part848=collect_order_by_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collect_order_by_part848.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN849=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11530); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // OracleParser.g:1149:10: stantard_function_enabling_within_or_over function_argument ( within_or_over_part )+
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stantard_function_enabling_within_or_over_in_standard_function11542);
                    stantard_function_enabling_within_or_over850=stantard_function_enabling_within_or_over();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(stantard_function_enabling_within_or_over850.getTree(), root_0);
                    pushFollow(FOLLOW_function_argument_in_standard_function11558);
                    function_argument851=function_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_argument851.getTree());
                    // OracleParser.g:1150:31: ( within_or_over_part )+
                    int cnt272=0;
                    loop272:
                    do {
                        int alt272=2;
                        alt272 = dfa272.predict(input);
                        switch (alt272) {
                    	case 1 :
                    	    // OracleParser.g:0:0: within_or_over_part
                    	    {
                    	    pushFollow(FOLLOW_within_or_over_part_in_standard_function11560);
                    	    within_or_over_part852=within_or_over_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, within_or_over_part852.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt272 >= 1 ) break loop272;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(272, input);
                                throw eee;
                        }
                        cnt272++;
                    } while (true);


                    }
                    break;
                case 8 :
                    // OracleParser.g:1151:10: decompose_key LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_decompose_key_in_standard_function11572);
                    decompose_key853=decompose_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(decompose_key853.getTree(), root_0);
                    LEFT_PAREN854=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11587); if (state.failed) return retval;
                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11607);
                    concatenation_wrapper855=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper855.getTree());
                    // OracleParser.g:1153:39: ( canonical_key | compatibility_key )?
                    int alt273=3;
                    int LA273_0 = input.LA(1);

                    if ( (LA273_0==REGULAR_ID) ) {
                        int LA273_1 = input.LA(2);

                        if ( ((synpred368_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("canonical")))) ) {
                            alt273=1;
                        }
                        else if ( ((synpred369_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("compatibility")))) ) {
                            alt273=2;
                        }
                    }
                    switch (alt273) {
                        case 1 :
                            // OracleParser.g:1153:40: canonical_key
                            {
                            pushFollow(FOLLOW_canonical_key_in_standard_function11610);
                            canonical_key856=canonical_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, canonical_key856.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1153:54: compatibility_key
                            {
                            pushFollow(FOLLOW_compatibility_key_in_standard_function11612);
                            compatibility_key857=compatibility_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, compatibility_key857.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN858=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11629); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // OracleParser.g:1155:10: extract_key LEFT_PAREN REGULAR_ID from_key concatenation_wrapper RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_extract_key_in_standard_function11641);
                    extract_key859=extract_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(extract_key859.getTree(), root_0);
                    LEFT_PAREN860=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11656); if (state.failed) return retval;
                    REGULAR_ID861=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_standard_function11675); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REGULAR_ID861_tree = (Object)adaptor.create(REGULAR_ID861);
                    adaptor.addChild(root_0, REGULAR_ID861_tree);
                    }
                    pushFollow(FOLLOW_from_key_in_standard_function11677);
                    from_key862=from_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11680);
                    concatenation_wrapper863=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper863.getTree());
                    RIGHT_PAREN864=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11695); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // OracleParser.g:1159:10: ( first_value_key | last_value_key ) LEFT_PAREN concatenation_wrapper ( ignore_key nulls_key )? RIGHT_PAREN over_clause
                    {
                    root_0 = (Object)adaptor.nil();

                    // OracleParser.g:1159:10: ( first_value_key | last_value_key )
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("last_value")))) {
                        int LA274_1 = input.LA(2);

                        if ( ((synpred372_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first_value")))) ) {
                            alt274=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("last_value"))) ) {
                            alt274=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 274, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 274, 0, input);

                        throw nvae;
                    }
                    switch (alt274) {
                        case 1 :
                            // OracleParser.g:1159:11: first_value_key
                            {
                            pushFollow(FOLLOW_first_value_key_in_standard_function11708);
                            first_value_key865=first_value_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(first_value_key865.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1159:28: last_value_key
                            {
                            pushFollow(FOLLOW_last_value_key_in_standard_function11711);
                            last_value_key866=last_value_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(last_value_key866.getTree(), root_0);

                            }
                            break;

                    }

                    LEFT_PAREN867=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11728); if (state.failed) return retval;
                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11747);
                    concatenation_wrapper868=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper868.getTree());
                    // OracleParser.g:1161:39: ( ignore_key nulls_key )?
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("ignore")))) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            // OracleParser.g:1161:40: ignore_key nulls_key
                            {
                            pushFollow(FOLLOW_ignore_key_in_standard_function11750);
                            ignore_key869=ignore_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            pushFollow(FOLLOW_nulls_key_in_standard_function11753);
                            nulls_key870=nulls_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nulls_key870.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN871=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11770); if (state.failed) return retval;
                    pushFollow(FOLLOW_over_clause_in_standard_function11773);
                    over_clause872=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause872.getTree());

                    }
                    break;
                case 11 :
                    // OracleParser.g:1163:10: ( first_value_key | last_value_key ) function_argument_analytic ( respect_or_ignore_nulls )? over_clause
                    {
                    root_0 = (Object)adaptor.nil();

                    // OracleParser.g:1163:10: ( first_value_key | last_value_key )
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("last_value")))) {
                        int LA276_1 = input.LA(2);

                        if ( ((synpred375_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first_value")))) ) {
                            alt276=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("last_value"))) ) {
                            alt276=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 276, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 276, 0, input);

                        throw nvae;
                    }
                    switch (alt276) {
                        case 1 :
                            // OracleParser.g:1163:11: first_value_key
                            {
                            pushFollow(FOLLOW_first_value_key_in_standard_function11785);
                            first_value_key873=first_value_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(first_value_key873.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1163:28: last_value_key
                            {
                            pushFollow(FOLLOW_last_value_key_in_standard_function11788);
                            last_value_key874=last_value_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(last_value_key874.getTree(), root_0);

                            }
                            break;

                    }

                    pushFollow(FOLLOW_function_argument_analytic_in_standard_function11805);
                    function_argument_analytic875=function_argument_analytic();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_argument_analytic875.getTree());
                    // OracleParser.g:1165:14: ( respect_or_ignore_nulls )?
                    int alt277=2;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
                        int LA277_1 = input.LA(2);

                        if ( (LA277_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("respect"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                            alt277=1;
                        }
                    }
                    switch (alt277) {
                        case 1 :
                            // OracleParser.g:0:0: respect_or_ignore_nulls
                            {
                            pushFollow(FOLLOW_respect_or_ignore_nulls_in_standard_function11820);
                            respect_or_ignore_nulls876=respect_or_ignore_nulls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, respect_or_ignore_nulls876.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_over_clause_in_standard_function11823);
                    over_clause877=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause877.getTree());

                    }
                    break;
                case 12 :
                    // OracleParser.g:1166:10: stantard_function_pedictions LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stantard_function_pedictions_in_standard_function11834);
                    stantard_function_pedictions878=stantard_function_pedictions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(stantard_function_pedictions878.getTree(), root_0);
                    LEFT_PAREN879=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11849); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_wrapper_in_standard_function11868);
                    expression_wrapper880=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper880.getTree());
                    // OracleParser.g:1168:36: ( COMMA expression_wrapper )*
                    loop278:
                    do {
                        int alt278=2;
                        int LA278_0 = input.LA(1);

                        if ( (LA278_0==COMMA) ) {
                            alt278=1;
                        }


                        switch (alt278) {
                    	case 1 :
                    	    // OracleParser.g:1168:37: COMMA expression_wrapper
                    	    {
                    	    COMMA881=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function11871); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA881_tree = (Object)adaptor.create(COMMA881);
                    	    adaptor.addChild(root_0, COMMA881_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_wrapper_in_standard_function11873);
                    	    expression_wrapper882=expression_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper882.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop278;
                        }
                    } while (true);

                    // OracleParser.g:1168:64: ( cost_matrix_clause )?
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("cost")))) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            // OracleParser.g:0:0: cost_matrix_clause
                            {
                            pushFollow(FOLLOW_cost_matrix_clause_in_standard_function11877);
                            cost_matrix_clause883=cost_matrix_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cost_matrix_clause883.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:1168:84: ( using_clause )?
                    int alt280=2;
                    int LA280_0 = input.LA(1);

                    if ( (LA280_0==PLSQL_NON_RESERVED_USING) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            // OracleParser.g:0:0: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_standard_function11880);
                            using_clause884=using_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause884.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN885=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11896); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // OracleParser.g:1170:10: translate_key LEFT_PAREN expression_wrapper ( using_key ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_translate_key_in_standard_function11908);
                    translate_key886=translate_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(translate_key886.getTree(), root_0);
                    LEFT_PAREN887=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11923); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_wrapper_in_standard_function11943);
                    expression_wrapper888=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper888.getTree());
                    // OracleParser.g:1172:36: ( using_key ( char_cs_key | nchar_cs_key ) )?
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==PLSQL_NON_RESERVED_USING) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            // OracleParser.g:1172:37: using_key ( char_cs_key | nchar_cs_key )
                            {
                            pushFollow(FOLLOW_using_key_in_standard_function11946);
                            using_key889=using_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            // OracleParser.g:1172:48: ( char_cs_key | nchar_cs_key )
                            int alt281=2;
                            int LA281_0 = input.LA(1);

                            if ( (LA281_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nchar_cs")))) {
                                int LA281_1 = input.LA(2);

                                if ( ((synpred382_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("char_cs")))) ) {
                                    alt281=1;
                                }
                                else if ( ((input.LT(1).getText().equalsIgnoreCase("nchar_cs"))) ) {
                                    alt281=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 281, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 281, 0, input);

                                throw nvae;
                            }
                            switch (alt281) {
                                case 1 :
                                    // OracleParser.g:1172:49: char_cs_key
                                    {
                                    pushFollow(FOLLOW_char_cs_key_in_standard_function11950);
                                    char_cs_key890=char_cs_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_cs_key890.getTree());

                                    }
                                    break;
                                case 2 :
                                    // OracleParser.g:1172:61: nchar_cs_key
                                    {
                                    pushFollow(FOLLOW_nchar_cs_key_in_standard_function11952);
                                    nchar_cs_key891=nchar_cs_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nchar_cs_key891.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    // OracleParser.g:1173:21: ( COMMA expression_wrapper )*
                    loop283:
                    do {
                        int alt283=2;
                        int LA283_0 = input.LA(1);

                        if ( (LA283_0==COMMA) ) {
                            alt283=1;
                        }


                        switch (alt283) {
                    	case 1 :
                    	    // OracleParser.g:1173:22: COMMA expression_wrapper
                    	    {
                    	    COMMA892=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function11979); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA892_tree = (Object)adaptor.create(COMMA892);
                    	    adaptor.addChild(root_0, COMMA892_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_wrapper_in_standard_function11981);
                    	    expression_wrapper893=expression_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper893.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop283;
                        }
                    } while (true);

                    RIGHT_PAREN894=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11998); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // OracleParser.g:1175:10: treat_key LEFT_PAREN expression_wrapper as_key ( ref_key )? type_spec RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_treat_key_in_standard_function12010);
                    treat_key895=treat_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(treat_key895.getTree(), root_0);
                    LEFT_PAREN896=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12025); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_wrapper_in_standard_function12044);
                    expression_wrapper897=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper897.getTree());
                    pushFollow(FOLLOW_as_key_in_standard_function12046);
                    as_key898=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    // OracleParser.g:1177:44: ( ref_key )?
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==REGULAR_ID) ) {
                        int LA284_1 = input.LA(2);

                        if ( ((synpred386_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("ref")))) ) {
                            alt284=1;
                        }
                    }
                    switch (alt284) {
                        case 1 :
                            // OracleParser.g:0:0: ref_key
                            {
                            pushFollow(FOLLOW_ref_key_in_standard_function12049);
                            ref_key899=ref_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_key899.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_type_spec_in_standard_function12052);
                    type_spec900=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec900.getTree());
                    RIGHT_PAREN901=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12067); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // OracleParser.g:1179:10: trim_key LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_trim_key_in_standard_function12079);
                    trim_key902=trim_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(trim_key902.getTree(), root_0);
                    LEFT_PAREN903=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12094); if (state.failed) return retval;
                    // OracleParser.g:1181:17: ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )?
                    int alt287=2;
                    alt287 = dfa287.predict(input);
                    switch (alt287) {
                        case 1 :
                            // OracleParser.g:1181:18: ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key
                            {
                            // OracleParser.g:1181:18: ( leading_key | trailing_key | both_key )?
                            int alt285=4;
                            int LA285_0 = input.LA(1);

                            if ( (LA285_0==REGULAR_ID) ) {
                                int LA285_1 = input.LA(2);

                                if ( ((synpred388_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("leading")))) ) {
                                    alt285=1;
                                }
                                else if ( ((synpred389_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("trailing")))) ) {
                                    alt285=2;
                                }
                                else if ( ((synpred390_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("both")))) ) {
                                    alt285=3;
                                }
                            }
                            switch (alt285) {
                                case 1 :
                                    // OracleParser.g:1181:19: leading_key
                                    {
                                    pushFollow(FOLLOW_leading_key_in_standard_function12115);
                                    leading_key904=leading_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, leading_key904.getTree());

                                    }
                                    break;
                                case 2 :
                                    // OracleParser.g:1181:31: trailing_key
                                    {
                                    pushFollow(FOLLOW_trailing_key_in_standard_function12117);
                                    trailing_key905=trailing_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trailing_key905.getTree());

                                    }
                                    break;
                                case 3 :
                                    // OracleParser.g:1181:44: both_key
                                    {
                                    pushFollow(FOLLOW_both_key_in_standard_function12119);
                                    both_key906=both_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, both_key906.getTree());

                                    }
                                    break;

                            }

                            // OracleParser.g:1181:55: ( quoted_string )?
                            int alt286=2;
                            int LA286_0 = input.LA(1);

                            if ( (LA286_0==NATIONAL_CHAR_STRING_LIT||LA286_0==CHAR_STRING||LA286_0==CHAR_STRING_PERL) ) {
                                alt286=1;
                            }
                            switch (alt286) {
                                case 1 :
                                    // OracleParser.g:0:0: quoted_string
                                    {
                                    pushFollow(FOLLOW_quoted_string_in_standard_function12123);
                                    quoted_string907=quoted_string();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quoted_string907.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_from_key_in_standard_function12126);
                            from_key908=from_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, from_key908.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12146);
                    concatenation_wrapper909=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper909.getTree());
                    RIGHT_PAREN910=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12160); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // OracleParser.g:1184:10: xmlagg_key LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlagg_key_in_standard_function12172);
                    xmlagg_key911=xmlagg_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlagg_key911.getTree(), root_0);
                    LEFT_PAREN912=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12187); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_wrapper_in_standard_function12207);
                    expression_wrapper913=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper913.getTree());
                    // OracleParser.g:1186:36: ( order_by_clause )?
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==SQL92_RESERVED_ORDER) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            // OracleParser.g:0:0: order_by_clause
                            {
                            pushFollow(FOLLOW_order_by_clause_in_standard_function12209);
                            order_by_clause914=order_by_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause914.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN915=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12225); if (state.failed) return retval;
                    // OracleParser.g:1188:13: ( PERIOD general_element_part )?
                    int alt289=2;
                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==PERIOD) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            // OracleParser.g:1188:14: PERIOD general_element_part
                            {
                            PERIOD916=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12241); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD916_tree = (Object)adaptor.create(PERIOD916);
                            adaptor.addChild(root_0, PERIOD916_tree);
                            }
                            pushFollow(FOLLOW_general_element_part_in_standard_function12243);
                            general_element_part917=general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part917.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 17 :
                    // OracleParser.g:1189:10: ( xmlcolattval_key | xmlforest_key ) LEFT_PAREN xml_multiuse_expression_element ( COMMA xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // OracleParser.g:1189:10: ( xmlcolattval_key | xmlforest_key )
                    int alt290=2;
                    int LA290_0 = input.LA(1);

                    if ( (LA290_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("xmlforest")))) {
                        int LA290_1 = input.LA(2);

                        if ( ((synpred397_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlcolattval")))) ) {
                            alt290=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlforest"))) ) {
                            alt290=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 290, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 290, 0, input);

                        throw nvae;
                    }
                    switch (alt290) {
                        case 1 :
                            // OracleParser.g:1189:11: xmlcolattval_key
                            {
                            pushFollow(FOLLOW_xmlcolattval_key_in_standard_function12257);
                            xmlcolattval_key918=xmlcolattval_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlcolattval_key918.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1189:29: xmlforest_key
                            {
                            pushFollow(FOLLOW_xmlforest_key_in_standard_function12260);
                            xmlforest_key919=xmlforest_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlforest_key919.getTree(), root_0);

                            }
                            break;

                    }

                    LEFT_PAREN920=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12277); if (state.failed) return retval;
                    pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function12296);
                    xml_multiuse_expression_element921=xml_multiuse_expression_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_multiuse_expression_element921.getTree());
                    // OracleParser.g:1191:49: ( COMMA xml_multiuse_expression_element )*
                    loop291:
                    do {
                        int alt291=2;
                        int LA291_0 = input.LA(1);

                        if ( (LA291_0==COMMA) ) {
                            alt291=1;
                        }


                        switch (alt291) {
                    	case 1 :
                    	    // OracleParser.g:1191:50: COMMA xml_multiuse_expression_element
                    	    {
                    	    COMMA922=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function12299); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function12302);
                    	    xml_multiuse_expression_element923=xml_multiuse_expression_element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_multiuse_expression_element923.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop291;
                        }
                    } while (true);

                    RIGHT_PAREN924=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12318); if (state.failed) return retval;
                    // OracleParser.g:1193:13: ( PERIOD general_element_part )?
                    int alt292=2;
                    int LA292_0 = input.LA(1);

                    if ( (LA292_0==PERIOD) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            // OracleParser.g:1193:14: PERIOD general_element_part
                            {
                            PERIOD925=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12334); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD925_tree = (Object)adaptor.create(PERIOD925);
                            adaptor.addChild(root_0, PERIOD925_tree);
                            }
                            pushFollow(FOLLOW_general_element_part_in_standard_function12336);
                            general_element_part926=general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part926.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 18 :
                    // OracleParser.g:1194:10: xmlelement_key LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA xml_attributes_clause )? ( COMMA expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlelement_key_in_standard_function12349);
                    xmlelement_key927=xmlelement_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlelement_key927.getTree(), root_0);
                    LEFT_PAREN928=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12364); if (state.failed) return retval;
                    // OracleParser.g:1196:17: ( entityescaping_key | noentityescaping_key )?
                    int alt293=3;
                    int LA293_0 = input.LA(1);

                    if ( (LA293_0==REGULAR_ID) ) {
                        int LA293_1 = input.LA(2);

                        if ( ((synpred401_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("entityescaping")))) ) {
                            alt293=1;
                        }
                        else if ( ((synpred402_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("noentityescaping")))) ) {
                            alt293=2;
                        }
                    }
                    switch (alt293) {
                        case 1 :
                            // OracleParser.g:1196:18: entityescaping_key
                            {
                            pushFollow(FOLLOW_entityescaping_key_in_standard_function12384);
                            entityescaping_key929=entityescaping_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, entityescaping_key929.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1196:37: noentityescaping_key
                            {
                            pushFollow(FOLLOW_noentityescaping_key_in_standard_function12386);
                            noentityescaping_key930=noentityescaping_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, noentityescaping_key930.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:1197:17: ( name_key | evalname_key )?
                    int alt294=3;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==REGULAR_ID) ) {
                        int LA294_1 = input.LA(2);

                        if ( ((synpred403_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("name")))) ) {
                            alt294=1;
                        }
                        else if ( ((synpred404_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("evalname")))) ) {
                            alt294=2;
                        }
                    }
                    switch (alt294) {
                        case 1 :
                            // OracleParser.g:1197:18: name_key
                            {
                            pushFollow(FOLLOW_name_key_in_standard_function12407);
                            name_key931=name_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, name_key931.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1197:27: evalname_key
                            {
                            pushFollow(FOLLOW_evalname_key_in_standard_function12409);
                            evalname_key932=evalname_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, evalname_key932.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_wrapper_in_standard_function12413);
                    expression_wrapper933=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper933.getTree());
                    // OracleParser.g:1198:17: ({...}? COMMA xml_attributes_clause )?
                    int alt295=2;
                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==COMMA) ) {
                        int LA295_1 = input.LA(2);

                        if ( ((synpred405_OracleParser()&&(input.LT(2).getText().equalsIgnoreCase("xmlattributes")))) ) {
                            alt295=1;
                        }
                    }
                    switch (alt295) {
                        case 1 :
                            // OracleParser.g:1198:18: {...}? COMMA xml_attributes_clause
                            {
                            if ( !((input.LT(2).getText().equalsIgnoreCase("xmlattributes"))) ) {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                throw new FailedPredicateException(input, "standard_function", "input.LT(2).getText().equalsIgnoreCase(\"xmlattributes\")");
                            }
                            COMMA934=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function12434); if (state.failed) return retval;
                            pushFollow(FOLLOW_xml_attributes_clause_in_standard_function12437);
                            xml_attributes_clause935=xml_attributes_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_attributes_clause935.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:1199:17: ( COMMA expression_wrapper ( column_alias )? )*
                    loop297:
                    do {
                        int alt297=2;
                        int LA297_0 = input.LA(1);

                        if ( (LA297_0==COMMA) ) {
                            alt297=1;
                        }


                        switch (alt297) {
                    	case 1 :
                    	    // OracleParser.g:1199:18: COMMA expression_wrapper ( column_alias )?
                    	    {
                    	    COMMA936=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function12458); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_wrapper_in_standard_function12461);
                    	    expression_wrapper937=expression_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper937.getTree());
                    	    // OracleParser.g:1199:44: ( column_alias )?
                    	    int alt296=2;
                    	    int LA296_0 = input.LA(1);

                    	    if ( (LA296_0==NATIONAL_CHAR_STRING_LIT||LA296_0==CHAR_STRING||LA296_0==CHAR_STRING_PERL||LA296_0==DELIMITED_ID||LA296_0==INTRODUCER||LA296_0==SQL92_RESERVED_AS||LA296_0==REGULAR_ID) ) {
                    	        alt296=1;
                    	    }
                    	    switch (alt296) {
                    	        case 1 :
                    	            // OracleParser.g:0:0: column_alias
                    	            {
                    	            pushFollow(FOLLOW_column_alias_in_standard_function12463);
                    	            column_alias938=column_alias();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias938.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop297;
                        }
                    } while (true);

                    RIGHT_PAREN939=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12480); if (state.failed) return retval;
                    // OracleParser.g:1201:13: ( PERIOD general_element_part )?
                    int alt298=2;
                    int LA298_0 = input.LA(1);

                    if ( (LA298_0==PERIOD) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            // OracleParser.g:1201:14: PERIOD general_element_part
                            {
                            PERIOD940=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12496); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD940_tree = (Object)adaptor.create(PERIOD940);
                            adaptor.addChild(root_0, PERIOD940_tree);
                            }
                            pushFollow(FOLLOW_general_element_part_in_standard_function12498);
                            general_element_part941=general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part941.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 19 :
                    // OracleParser.g:1202:10: xmlexists_key LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlexists_key_in_standard_function12511);
                    xmlexists_key942=xmlexists_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlexists_key942.getTree(), root_0);
                    LEFT_PAREN943=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12526); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_wrapper_in_standard_function12545);
                    expression_wrapper944=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper944.getTree());
                    // OracleParser.g:1205:17: ( xml_passing_clause )?
                    int alt299=2;
                    int LA299_0 = input.LA(1);

                    if ( (LA299_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {
                        alt299=1;
                    }
                    switch (alt299) {
                        case 1 :
                            // OracleParser.g:0:0: xml_passing_clause
                            {
                            pushFollow(FOLLOW_xml_passing_clause_in_standard_function12563);
                            xml_passing_clause945=xml_passing_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_passing_clause945.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN946=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12578); if (state.failed) return retval;

                    }
                    break;
                case 20 :
                    // OracleParser.g:1207:10: xmlparse_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlparse_key_in_standard_function12590);
                    xmlparse_key947=xmlparse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlparse_key947.getTree(), root_0);
                    LEFT_PAREN948=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12605); if (state.failed) return retval;
                    // OracleParser.g:1209:17: ( document_key | content_key )
                    int alt300=2;
                    int LA300_0 = input.LA(1);

                    if ( (LA300_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("content")))) {
                        int LA300_1 = input.LA(2);

                        if ( ((synpred412_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("document")))) ) {
                            alt300=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("content"))) ) {
                            alt300=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 300, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 300, 0, input);

                        throw nvae;
                    }
                    switch (alt300) {
                        case 1 :
                            // OracleParser.g:1209:18: document_key
                            {
                            pushFollow(FOLLOW_document_key_in_standard_function12626);
                            document_key949=document_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, document_key949.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1209:31: content_key
                            {
                            pushFollow(FOLLOW_content_key_in_standard_function12628);
                            content_key950=content_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, content_key950.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12631);
                    concatenation_wrapper951=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper951.getTree());
                    // OracleParser.g:1209:66: ( wellformed_key )?
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("wellformed")))) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            // OracleParser.g:0:0: wellformed_key
                            {
                            pushFollow(FOLLOW_wellformed_key_in_standard_function12633);
                            wellformed_key952=wellformed_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, wellformed_key952.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN953=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12648); if (state.failed) return retval;
                    // OracleParser.g:1211:13: ( PERIOD general_element_part )?
                    int alt302=2;
                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==PERIOD) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            // OracleParser.g:1211:14: PERIOD general_element_part
                            {
                            PERIOD954=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12664); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD954_tree = (Object)adaptor.create(PERIOD954);
                            adaptor.addChild(root_0, PERIOD954_tree);
                            }
                            pushFollow(FOLLOW_general_element_part_in_standard_function12666);
                            general_element_part955=general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part955.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 21 :
                    // OracleParser.g:1212:10: xmlpi_key LEFT_PAREN ( name_key id | evalname_key concatenation_wrapper ) ( COMMA concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlpi_key_in_standard_function12679);
                    xmlpi_key956=xmlpi_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlpi_key956.getTree(), root_0);
                    LEFT_PAREN957=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12694); if (state.failed) return retval;
                    // OracleParser.g:1214:17: ( name_key id | evalname_key concatenation_wrapper )
                    int alt303=2;
                    alt303 = dfa303.predict(input);
                    switch (alt303) {
                        case 1 :
                            // OracleParser.g:1214:22: name_key id
                            {
                            pushFollow(FOLLOW_name_key_in_standard_function12719);
                            name_key958=name_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, name_key958.getTree());
                            pushFollow(FOLLOW_id_in_standard_function12721);
                            id959=id();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, id959.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1215:22: evalname_key concatenation_wrapper
                            {
                            pushFollow(FOLLOW_evalname_key_in_standard_function12744);
                            evalname_key960=evalname_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, evalname_key960.getTree());
                            pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12746);
                            concatenation_wrapper961=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper961.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:1217:17: ( COMMA concatenation_wrapper )?
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==COMMA) ) {
                        alt304=1;
                    }
                    switch (alt304) {
                        case 1 :
                            // OracleParser.g:1217:18: COMMA concatenation_wrapper
                            {
                            COMMA962=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function12783); if (state.failed) return retval;
                            pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12786);
                            concatenation_wrapper963=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper963.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN964=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12802); if (state.failed) return retval;
                    // OracleParser.g:1219:13: ( PERIOD general_element_part )?
                    int alt305=2;
                    int LA305_0 = input.LA(1);

                    if ( (LA305_0==PERIOD) ) {
                        alt305=1;
                    }
                    switch (alt305) {
                        case 1 :
                            // OracleParser.g:1219:14: PERIOD general_element_part
                            {
                            PERIOD965=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12818); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD965_tree = (Object)adaptor.create(PERIOD965);
                            adaptor.addChild(root_0, PERIOD965_tree);
                            }
                            pushFollow(FOLLOW_general_element_part_in_standard_function12820);
                            general_element_part966=general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part966.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 22 :
                    // OracleParser.g:1220:10: xmlquery_key LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key content_key ( null_key on_key empty_key )? RIGHT_PAREN ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlquery_key_in_standard_function12833);
                    xmlquery_key967=xmlquery_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlquery_key967.getTree(), root_0);
                    LEFT_PAREN968=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12848); if (state.failed) return retval;
                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12868);
                    concatenation_wrapper969=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper969.getTree());
                    // OracleParser.g:1222:39: ( xml_passing_clause )?
                    int alt306=2;
                    alt306 = dfa306.predict(input);
                    switch (alt306) {
                        case 1 :
                            // OracleParser.g:0:0: xml_passing_clause
                            {
                            pushFollow(FOLLOW_xml_passing_clause_in_standard_function12870);
                            xml_passing_clause970=xml_passing_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_passing_clause970.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_returning_key_in_standard_function12889);
                    returning_key971=returning_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_content_key_in_standard_function12892);
                    content_key972=content_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    // OracleParser.g:1223:45: ( null_key on_key empty_key )?
                    int alt307=2;
                    int LA307_0 = input.LA(1);

                    if ( (LA307_0==SQL92_RESERVED_NULL) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                        case 1 :
                            // OracleParser.g:1223:46: null_key on_key empty_key
                            {
                            pushFollow(FOLLOW_null_key_in_standard_function12896);
                            null_key973=null_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_key973.getTree());
                            pushFollow(FOLLOW_on_key_in_standard_function12898);
                            on_key974=on_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            pushFollow(FOLLOW_empty_key_in_standard_function12901);
                            empty_key975=empty_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    RIGHT_PAREN976=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12918); if (state.failed) return retval;
                    // OracleParser.g:1225:13: ( PERIOD general_element_part )?
                    int alt308=2;
                    int LA308_0 = input.LA(1);

                    if ( (LA308_0==PERIOD) ) {
                        alt308=1;
                    }
                    switch (alt308) {
                        case 1 :
                            // OracleParser.g:1225:14: PERIOD general_element_part
                            {
                            PERIOD977=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12934); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD977_tree = (Object)adaptor.create(PERIOD977);
                            adaptor.addChild(root_0, PERIOD977_tree);
                            }
                            pushFollow(FOLLOW_general_element_part_in_standard_function12936);
                            general_element_part978=general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part978.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 23 :
                    // OracleParser.g:1226:10: xmlroot_key LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlroot_key_in_standard_function12949);
                    xmlroot_key979=xmlroot_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlroot_key979.getTree(), root_0);
                    LEFT_PAREN980=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12964); if (state.failed) return retval;
                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12983);
                    concatenation_wrapper981=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper981.getTree());
                    pushFollow(FOLLOW_xmlroot_param_version_part_in_standard_function13005);
                    xmlroot_param_version_part982=xmlroot_param_version_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlroot_param_version_part982.getTree());
                    // OracleParser.g:1230:21: ( COMMA xmlroot_param_standalone_part )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==COMMA) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                        case 1 :
                            // OracleParser.g:1230:22: COMMA xmlroot_param_standalone_part
                            {
                            COMMA983=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function13028); if (state.failed) return retval;
                            pushFollow(FOLLOW_xmlroot_param_standalone_part_in_standard_function13031);
                            xmlroot_param_standalone_part984=xmlroot_param_standalone_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlroot_param_standalone_part984.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN985=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function13047); if (state.failed) return retval;
                    // OracleParser.g:1232:13: ( PERIOD general_element_part )?
                    int alt310=2;
                    int LA310_0 = input.LA(1);

                    if ( (LA310_0==PERIOD) ) {
                        alt310=1;
                    }
                    switch (alt310) {
                        case 1 :
                            // OracleParser.g:1232:14: PERIOD general_element_part
                            {
                            PERIOD986=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function13063); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD986_tree = (Object)adaptor.create(PERIOD986);
                            adaptor.addChild(root_0, PERIOD986_tree);
                            }
                            pushFollow(FOLLOW_general_element_part_in_standard_function13065);
                            general_element_part987=general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part987.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 24 :
                    // OracleParser.g:1233:10: xmlserialize_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlserialize_key_in_standard_function13078);
                    xmlserialize_key988=xmlserialize_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlserialize_key988.getTree(), root_0);
                    LEFT_PAREN989=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function13093); if (state.failed) return retval;
                    // OracleParser.g:1235:17: ( document_key | content_key )
                    int alt311=2;
                    int LA311_0 = input.LA(1);

                    if ( (LA311_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("content")))) {
                        int LA311_1 = input.LA(2);

                        if ( ((synpred427_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("document")))) ) {
                            alt311=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("content"))) ) {
                            alt311=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 311, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 311, 0, input);

                        throw nvae;
                    }
                    switch (alt311) {
                        case 1 :
                            // OracleParser.g:1235:18: document_key
                            {
                            pushFollow(FOLLOW_document_key_in_standard_function13113);
                            document_key990=document_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, document_key990.getTree());

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1235:31: content_key
                            {
                            pushFollow(FOLLOW_content_key_in_standard_function13115);
                            content_key991=content_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, content_key991.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function13134);
                    concatenation_wrapper992=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper992.getTree());
                    // OracleParser.g:1236:39: ( as_key type_spec )?
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==SQL92_RESERVED_AS) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            // OracleParser.g:1236:40: as_key type_spec
                            {
                            pushFollow(FOLLOW_as_key_in_standard_function13137);
                            as_key993=as_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            pushFollow(FOLLOW_type_spec_in_standard_function13140);
                            type_spec994=type_spec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec994.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:1237:17: ( xmlserialize_param_enconding_part )?
                    int alt313=2;
                    int LA313_0 = input.LA(1);

                    if ( (LA313_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("version"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                        int LA313_1 = input.LA(2);

                        if ( ((synpred429_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("encoding")))) ) {
                            alt313=1;
                        }
                    }
                    switch (alt313) {
                        case 1 :
                            // OracleParser.g:0:0: xmlserialize_param_enconding_part
                            {
                            pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_standard_function13160);
                            xmlserialize_param_enconding_part995=xmlserialize_param_enconding_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlserialize_param_enconding_part995.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:1238:17: ( xmlserialize_param_version_part )?
                    int alt314=2;
                    alt314 = dfa314.predict(input);
                    switch (alt314) {
                        case 1 :
                            // OracleParser.g:0:0: xmlserialize_param_version_part
                            {
                            pushFollow(FOLLOW_xmlserialize_param_version_part_in_standard_function13179);
                            xmlserialize_param_version_part996=xmlserialize_param_version_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlserialize_param_version_part996.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:1239:17: ( xmlserialize_param_ident_part )?
                    int alt315=2;
                    int LA315_0 = input.LA(1);

                    if ( (LA315_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                        int LA315_1 = input.LA(2);

                        if ( (LA315_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                            int LA315_3 = input.LA(3);

                            if ( (((synpred431_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("no")))||(synpred431_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("indent"))))) ) {
                                alt315=1;
                            }
                        }
                        else if ( (LA315_1==SQL92_RESERVED_SIZE) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                            alt315=1;
                        }
                        else if ( (LA315_1==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                            alt315=1;
                        }
                    }
                    switch (alt315) {
                        case 1 :
                            // OracleParser.g:0:0: xmlserialize_param_ident_part
                            {
                            pushFollow(FOLLOW_xmlserialize_param_ident_part_in_standard_function13198);
                            xmlserialize_param_ident_part997=xmlserialize_param_ident_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlserialize_param_ident_part997.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:1240:17: ( ( hide_key | show_key ) defaults_key )?
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                        alt317=1;
                    }
                    switch (alt317) {
                        case 1 :
                            // OracleParser.g:1240:18: ( hide_key | show_key ) defaults_key
                            {
                            // OracleParser.g:1240:18: ( hide_key | show_key )
                            int alt316=2;
                            int LA316_0 = input.LA(1);

                            if ( (LA316_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("show")))) {
                                int LA316_1 = input.LA(2);

                                if ( ((synpred432_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("hide")))) ) {
                                    alt316=1;
                                }
                                else if ( ((input.LT(1).getText().equalsIgnoreCase("show"))) ) {
                                    alt316=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 316, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 316, 0, input);

                                throw nvae;
                            }
                            switch (alt316) {
                                case 1 :
                                    // OracleParser.g:1240:19: hide_key
                                    {
                                    pushFollow(FOLLOW_hide_key_in_standard_function13219);
                                    hide_key998=hide_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hide_key998.getTree());

                                    }
                                    break;
                                case 2 :
                                    // OracleParser.g:1240:28: show_key
                                    {
                                    pushFollow(FOLLOW_show_key_in_standard_function13221);
                                    show_key999=show_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, show_key999.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_defaults_key_in_standard_function13224);
                            defaults_key1000=defaults_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, defaults_key1000.getTree());

                            }
                            break;

                    }

                    RIGHT_PAREN1001=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function13240); if (state.failed) return retval;
                    // OracleParser.g:1242:13: ( PERIOD general_element_part )?
                    int alt318=2;
                    int LA318_0 = input.LA(1);

                    if ( (LA318_0==PERIOD) ) {
                        alt318=1;
                    }
                    switch (alt318) {
                        case 1 :
                            // OracleParser.g:1242:14: PERIOD general_element_part
                            {
                            PERIOD1002=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function13256); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD1002_tree = (Object)adaptor.create(PERIOD1002);
                            adaptor.addChild(root_0, PERIOD1002_tree);
                            }
                            pushFollow(FOLLOW_general_element_part_in_standard_function13258);
                            general_element_part1003=general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part1003.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 25 :
                    // OracleParser.g:1243:10: xmltable_key LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key xml_table_column ( COMMA xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmltable_key_in_standard_function13271);
                    xmltable_key1004=xmltable_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmltable_key1004.getTree(), root_0);
                    LEFT_PAREN1005=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function13286); if (state.failed) return retval;
                    // OracleParser.g:1245:17: ( xml_namespaces_clause )?
                    int alt319=2;
                    alt319 = dfa319.predict(input);
                    switch (alt319) {
                        case 1 :
                            // OracleParser.g:0:0: xml_namespaces_clause
                            {
                            pushFollow(FOLLOW_xml_namespaces_clause_in_standard_function13305);
                            xml_namespaces_clause1006=xml_namespaces_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_namespaces_clause1006.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function13324);
                    concatenation_wrapper1007=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1007.getTree());
                    // OracleParser.g:1247:17: ( xml_passing_clause )?
                    int alt320=2;
                    int LA320_0 = input.LA(1);

                    if ( (LA320_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("columns")))) {
                        int LA320_1 = input.LA(2);

                        if ( ((synpred437_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("passing")))) ) {
                            alt320=1;
                        }
                    }
                    switch (alt320) {
                        case 1 :
                            // OracleParser.g:0:0: xml_passing_clause
                            {
                            pushFollow(FOLLOW_xml_passing_clause_in_standard_function13342);
                            xml_passing_clause1008=xml_passing_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_passing_clause1008.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:1248:17: ( columns_key xml_table_column ( COMMA xml_table_column ) )?
                    int alt321=2;
                    int LA321_0 = input.LA(1);

                    if ( (LA321_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("columns")))) {
                        alt321=1;
                    }
                    switch (alt321) {
                        case 1 :
                            // OracleParser.g:1248:18: columns_key xml_table_column ( COMMA xml_table_column )
                            {
                            pushFollow(FOLLOW_columns_key_in_standard_function13362);
                            columns_key1009=columns_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            pushFollow(FOLLOW_xml_table_column_in_standard_function13365);
                            xml_table_column1010=xml_table_column();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_table_column1010.getTree());
                            // OracleParser.g:1248:48: ( COMMA xml_table_column )
                            // OracleParser.g:1248:49: COMMA xml_table_column
                            {
                            COMMA1011=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function13368); if (state.failed) return retval;
                            pushFollow(FOLLOW_xml_table_column_in_standard_function13371);
                            xml_table_column1012=xml_table_column();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_table_column1012.getTree());

                            }


                            }
                            break;

                    }

                    RIGHT_PAREN1013=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function13388); if (state.failed) return retval;
                    // OracleParser.g:1250:13: ( PERIOD general_element_part )?
                    int alt322=2;
                    int LA322_0 = input.LA(1);

                    if ( (LA322_0==PERIOD) ) {
                        alt322=1;
                    }
                    switch (alt322) {
                        case 1 :
                            // OracleParser.g:1250:14: PERIOD general_element_part
                            {
                            PERIOD1014=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function13404); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD1014_tree = (Object)adaptor.create(PERIOD1014);
                            adaptor.addChild(root_0, PERIOD1014_tree);
                            }
                            pushFollow(FOLLOW_general_element_part_in_standard_function13406);
                            general_element_part1015=general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part1015.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 926, standard_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "standard_function"

    public static class stantard_function_enabling_over_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stantard_function_enabling_over"
    // OracleParser.g:1253:1: stantard_function_enabling_over : {...}? => REGULAR_ID -> FUNCTION_ENABLING_OVER[$REGULAR_ID] ;
    public final OracleParser.stantard_function_enabling_over_return stantard_function_enabling_over() throws RecognitionException {
        OracleParser.stantard_function_enabling_over_return retval = new OracleParser.stantard_function_enabling_over_return();
        retval.start = input.LT(1);
        int stantard_function_enabling_over_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID1016=null;

        Object REGULAR_ID1016_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 927) ) { return retval; }
            // OracleParser.g:1254:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_OVER[$REGULAR_ID] )
            // OracleParser.g:1254:10: {...}? => REGULAR_ID
            {
            if ( !((enablesOverClause(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "stantard_function_enabling_over", "enablesOverClause(input.LT(1).getText())");
            }
            REGULAR_ID1016=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_stantard_function_enabling_over13431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID1016);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1254:67: -> FUNCTION_ENABLING_OVER[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FUNCTION_ENABLING_OVER, REGULAR_ID1016));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 927, stantard_function_enabling_over_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stantard_function_enabling_over"

    public static class stantard_function_enabling_using_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stantard_function_enabling_using"
    // OracleParser.g:1257:1: stantard_function_enabling_using : {...}? => REGULAR_ID -> FUNCTION_ENABLING_USING[$REGULAR_ID] ;
    public final OracleParser.stantard_function_enabling_using_return stantard_function_enabling_using() throws RecognitionException {
        OracleParser.stantard_function_enabling_using_return retval = new OracleParser.stantard_function_enabling_using_return();
        retval.start = input.LT(1);
        int stantard_function_enabling_using_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID1017=null;

        Object REGULAR_ID1017_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 928) ) { return retval; }
            // OracleParser.g:1258:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_USING[$REGULAR_ID] )
            // OracleParser.g:1258:10: {...}? => REGULAR_ID
            {
            if ( !((enablesUsingClause(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "stantard_function_enabling_using", "enablesUsingClause(input.LT(1).getText())");
            }
            REGULAR_ID1017=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_stantard_function_enabling_using13459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID1017);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1258:68: -> FUNCTION_ENABLING_USING[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FUNCTION_ENABLING_USING, REGULAR_ID1017));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 928, stantard_function_enabling_using_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stantard_function_enabling_using"

    public static class stantard_function_enabling_within_or_over_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stantard_function_enabling_within_or_over"
    // OracleParser.g:1261:1: stantard_function_enabling_within_or_over : {...}? => REGULAR_ID -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID] ;
    public final OracleParser.stantard_function_enabling_within_or_over_return stantard_function_enabling_within_or_over() throws RecognitionException {
        OracleParser.stantard_function_enabling_within_or_over_return retval = new OracleParser.stantard_function_enabling_within_or_over_return();
        retval.start = input.LT(1);
        int stantard_function_enabling_within_or_over_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID1018=null;

        Object REGULAR_ID1018_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 929) ) { return retval; }
            // OracleParser.g:1262:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID] )
            // OracleParser.g:1262:10: {...}? => REGULAR_ID
            {
            if ( !((enablesWithinOrOverClause(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "stantard_function_enabling_within_or_over", "enablesWithinOrOverClause(input.LT(1).getText())");
            }
            REGULAR_ID1018=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over13487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID1018);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1262:75: -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(FUNCTION_ENABLING_WITHIN_OR_OVER, REGULAR_ID1018));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 929, stantard_function_enabling_within_or_over_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stantard_function_enabling_within_or_over"

    public static class stantard_function_pedictions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stantard_function_pedictions"
    // OracleParser.g:1265:1: stantard_function_pedictions : {...}? => REGULAR_ID -> PREDICTION_FUNCTION[$REGULAR_ID] ;
    public final OracleParser.stantard_function_pedictions_return stantard_function_pedictions() throws RecognitionException {
        OracleParser.stantard_function_pedictions_return retval = new OracleParser.stantard_function_pedictions_return();
        retval.start = input.LT(1);
        int stantard_function_pedictions_StartIndex = input.index();
        Object root_0 = null;

        Token REGULAR_ID1019=null;

        Object REGULAR_ID1019_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 930) ) { return retval; }
            // OracleParser.g:1266:5: ({...}? => REGULAR_ID -> PREDICTION_FUNCTION[$REGULAR_ID] )
            // OracleParser.g:1266:10: {...}? => REGULAR_ID
            {
            if ( !((isStandardPredictionFunction(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "stantard_function_pedictions", "isStandardPredictionFunction(input.LT(1).getText())");
            }
            REGULAR_ID1019=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_stantard_function_pedictions13515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID1019);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1266:78: -> PREDICTION_FUNCTION[$REGULAR_ID]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(PREDICTION_FUNCTION, REGULAR_ID1019));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 930, stantard_function_pedictions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stantard_function_pedictions"

    public static class over_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_clause"
    // OracleParser.g:1269:1: over_clause : over_key LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN ;
    public final OracleParser.over_clause_return over_clause() throws RecognitionException {
        OracleParser.over_clause_return retval = new OracleParser.over_clause_return();
        retval.start = input.LT(1);
        int over_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN1021=null;
        Token RIGHT_PAREN1025=null;
        OracleParser_Keys.over_key_return over_key1020 = null;

        OracleParser.query_partition_clause_return query_partition_clause1022 = null;

        OracleParser.order_by_clause_return order_by_clause1023 = null;

        OracleParser.windowing_clause_return windowing_clause1024 = null;


        Object LEFT_PAREN1021_tree=null;
        Object RIGHT_PAREN1025_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 931) ) { return retval; }
            // OracleParser.g:1270:5: ( over_key LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN )
            // OracleParser.g:1270:10: over_key LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_over_key_in_over_clause13540);
            over_key1020=over_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(over_key1020.getTree(), root_0);
            LEFT_PAREN1021=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_over_clause13551); if (state.failed) return retval;
            // OracleParser.g:1272:13: ( query_partition_clause )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("partition")))) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    // OracleParser.g:0:0: query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_over_clause13566);
                    query_partition_clause1022=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause1022.getTree());

                    }
                    break;

            }

            // OracleParser.g:1273:13: ( order_by_clause ( windowing_clause )? )?
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==SQL92_RESERVED_ORDER) ) {
                alt326=1;
            }
            switch (alt326) {
                case 1 :
                    // OracleParser.g:1273:14: order_by_clause ( windowing_clause )?
                    {
                    pushFollow(FOLLOW_order_by_clause_in_over_clause13582);
                    order_by_clause1023=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause1023.getTree());
                    // OracleParser.g:1273:30: ( windowing_clause )?
                    int alt325=2;
                    int LA325_0 = input.LA(1);

                    if ( (LA325_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {
                        alt325=1;
                    }
                    switch (alt325) {
                        case 1 :
                            // OracleParser.g:0:0: windowing_clause
                            {
                            pushFollow(FOLLOW_windowing_clause_in_over_clause13584);
                            windowing_clause1024=windowing_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, windowing_clause1024.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RIGHT_PAREN1025=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_over_clause13597); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 931, over_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "over_clause"

    public static class windowing_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "windowing_clause"
    // OracleParser.g:1277:1: windowing_clause : windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements ) -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) ) -> ^( windowing_type ( windowing_elements )+ ) ;
    public final OracleParser.windowing_clause_return windowing_clause() throws RecognitionException {
        OracleParser.windowing_clause_return retval = new OracleParser.windowing_clause_return();
        retval.start = input.LT(1);
        int windowing_clause_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.windowing_type_return windowing_type1026 = null;

        OracleParser_Keys.between_key_return between_key1027 = null;

        OracleParser.windowing_elements_return windowing_elements1028 = null;

        OracleParser_Keys.and_key_return and_key1029 = null;

        OracleParser.windowing_elements_return windowing_elements1030 = null;

        OracleParser.windowing_elements_return windowing_elements1031 = null;


        RewriteRuleSubtreeStream stream_windowing_type=new RewriteRuleSubtreeStream(adaptor,"rule windowing_type");
        RewriteRuleSubtreeStream stream_between_key=new RewriteRuleSubtreeStream(adaptor,"rule between_key");
        RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");
        RewriteRuleSubtreeStream stream_windowing_elements=new RewriteRuleSubtreeStream(adaptor,"rule windowing_elements");
            int mode = 0;    
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 932) ) { return retval; }
            // OracleParser.g:1279:5: ( windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements ) -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) ) -> ^( windowing_type ( windowing_elements )+ ) )
            // OracleParser.g:1279:10: windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements )
            {
            pushFollow(FOLLOW_windowing_type_in_windowing_clause13626);
            windowing_type1026=windowing_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_windowing_type.add(windowing_type1026.getTree());
            // OracleParser.g:1280:5: ( between_key windowing_elements and_key windowing_elements | windowing_elements )
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==SQL92_RESERVED_BETWEEN) ) {
                alt327=1;
            }
            else if ( ((LA327_0>=UNSIGNED_INTEGER && LA327_0<=MINUS_SIGN)||LA327_0==NATIONAL_CHAR_STRING_LIT||(LA327_0>=EXACT_NUM_LIT && LA327_0<=CHAR_STRING)||LA327_0==CHAR_STRING_PERL||LA327_0==DELIMITED_ID||LA327_0==LEFT_PAREN||LA327_0==PLUS_SIGN||LA327_0==COLON||LA327_0==BINDVAR||LA327_0==INTRODUCER||LA327_0==SQL92_RESERVED_ALL||LA327_0==SQL92_RESERVED_ANY||LA327_0==SQL92_RESERVED_CASE||LA327_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA327_0==SQL92_RESERVED_CURRENT||LA327_0==SQL92_RESERVED_DATE||LA327_0==SQL92_RESERVED_DEFAULT||LA327_0==SQL92_RESERVED_DISTINCT||(LA327_0>=SQL92_RESERVED_EXISTS && LA327_0<=SQL92_RESERVED_FALSE)||LA327_0==SQL92_RESERVED_NULL||LA327_0==SQL92_RESERVED_PRIOR||LA327_0==SQL92_RESERVED_TRUE||LA327_0==REGULAR_ID) ) {
                alt327=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 327, 0, input);

                throw nvae;
            }
            switch (alt327) {
                case 1 :
                    // OracleParser.g:1280:10: between_key windowing_elements and_key windowing_elements
                    {
                    pushFollow(FOLLOW_between_key_in_windowing_clause13637);
                    between_key1027=between_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_between_key.add(between_key1027.getTree());
                    pushFollow(FOLLOW_windowing_elements_in_windowing_clause13639);
                    windowing_elements1028=windowing_elements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_windowing_elements.add(windowing_elements1028.getTree());
                    pushFollow(FOLLOW_and_key_in_windowing_clause13641);
                    and_key1029=and_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_and_key.add(and_key1029.getTree());
                    pushFollow(FOLLOW_windowing_elements_in_windowing_clause13643);
                    windowing_elements1030=windowing_elements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_windowing_elements.add(windowing_elements1030.getTree());
                    if ( state.backtracking==0 ) {
                      mode = 1;
                    }

                    }
                    break;
                case 2 :
                    // OracleParser.g:1281:10: windowing_elements
                    {
                    pushFollow(FOLLOW_windowing_elements_in_windowing_clause13656);
                    windowing_elements1031=windowing_elements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_windowing_elements.add(windowing_elements1031.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: windowing_type, windowing_type, windowing_elements, windowing_elements, between_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1282:5: -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) )
            if (mode == 1) {
                // OracleParser.g:1282:20: ^( windowing_type ^( between_key ( windowing_elements )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_windowing_type.nextNode(), root_1);

                // OracleParser.g:1282:37: ^( between_key ( windowing_elements )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_between_key.nextNode(), root_2);

                if ( !(stream_windowing_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_windowing_elements.hasNext() ) {
                    adaptor.addChild(root_2, stream_windowing_elements.nextTree());

                }
                stream_windowing_elements.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1283:5: -> ^( windowing_type ( windowing_elements )+ )
            {
                // OracleParser.g:1283:8: ^( windowing_type ( windowing_elements )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_windowing_type.nextNode(), root_1);

                if ( !(stream_windowing_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_windowing_elements.hasNext() ) {
                    adaptor.addChild(root_1, stream_windowing_elements.nextTree());

                }
                stream_windowing_elements.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 932, windowing_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "windowing_clause"

    public static class windowing_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "windowing_type"
    // OracleParser.g:1286:1: windowing_type : ( rows_key | range_key );
    public final OracleParser.windowing_type_return windowing_type() throws RecognitionException {
        OracleParser.windowing_type_return retval = new OracleParser.windowing_type_return();
        retval.start = input.LT(1);
        int windowing_type_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.rows_key_return rows_key1032 = null;

        OracleParser_Keys.range_key_return range_key1033 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 933) ) { return retval; }
            // OracleParser.g:1287:5: ( rows_key | range_key )
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("range")))) {
                int LA328_1 = input.LA(2);

                if ( ((synpred444_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("rows")))) ) {
                    alt328=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("range"))) ) {
                    alt328=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 328, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);

                throw nvae;
            }
            switch (alt328) {
                case 1 :
                    // OracleParser.g:1287:10: rows_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rows_key_in_windowing_type13715);
                    rows_key1032=rows_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rows_key1032.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1288:10: range_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_key_in_windowing_type13726);
                    range_key1033=range_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range_key1033.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 933, windowing_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "windowing_type"

    public static class windowing_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "windowing_elements"
    // OracleParser.g:1291:1: windowing_elements : ( unbounded_key preceding_key | current_key row_key | concatenation_wrapper ( preceding_key | following_key ) );
    public final OracleParser.windowing_elements_return windowing_elements() throws RecognitionException {
        OracleParser.windowing_elements_return retval = new OracleParser.windowing_elements_return();
        retval.start = input.LT(1);
        int windowing_elements_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.unbounded_key_return unbounded_key1034 = null;

        OracleParser_Keys.preceding_key_return preceding_key1035 = null;

        OracleParser_Keys.current_key_return current_key1036 = null;

        OracleParser_Keys.row_key_return row_key1037 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper1038 = null;

        OracleParser_Keys.preceding_key_return preceding_key1039 = null;

        OracleParser_Keys.following_key_return following_key1040 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 934) ) { return retval; }
            // OracleParser.g:1292:5: ( unbounded_key preceding_key | current_key row_key | concatenation_wrapper ( preceding_key | following_key ) )
            int alt330=3;
            alt330 = dfa330.predict(input);
            switch (alt330) {
                case 1 :
                    // OracleParser.g:1292:10: unbounded_key preceding_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unbounded_key_in_windowing_elements13746);
                    unbounded_key1034=unbounded_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(unbounded_key1034.getTree(), root_0);
                    pushFollow(FOLLOW_preceding_key_in_windowing_elements13749);
                    preceding_key1035=preceding_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preceding_key1035.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1293:10: current_key row_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_current_key_in_windowing_elements13760);
                    current_key1036=current_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(current_key1036.getTree(), root_0);
                    pushFollow(FOLLOW_row_key_in_windowing_elements13763);
                    row_key1037=row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, row_key1037.getTree());

                    }
                    break;
                case 3 :
                    // OracleParser.g:1294:10: concatenation_wrapper ( preceding_key | following_key )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_concatenation_wrapper_in_windowing_elements13774);
                    concatenation_wrapper1038=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1038.getTree());
                    // OracleParser.g:1294:32: ( preceding_key | following_key )
                    int alt329=2;
                    int LA329_0 = input.LA(1);

                    if ( (LA329_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("following")))) {
                        int LA329_1 = input.LA(2);

                        if ( ((synpred447_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("preceding")))) ) {
                            alt329=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("following"))) ) {
                            alt329=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 329, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 329, 0, input);

                        throw nvae;
                    }
                    switch (alt329) {
                        case 1 :
                            // OracleParser.g:1294:33: preceding_key
                            {
                            pushFollow(FOLLOW_preceding_key_in_windowing_elements13777);
                            preceding_key1039=preceding_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(preceding_key1039.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1294:48: following_key
                            {
                            pushFollow(FOLLOW_following_key_in_windowing_elements13780);
                            following_key1040=following_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(following_key1040.getTree(), root_0);

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 934, windowing_elements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "windowing_elements"

    public static class using_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_clause"
    // OracleParser.g:1297:1: using_clause : using_key ( ASTERISK | using_element ( COMMA using_element )* ) ;
    public final OracleParser.using_clause_return using_clause() throws RecognitionException {
        OracleParser.using_clause_return retval = new OracleParser.using_clause_return();
        retval.start = input.LT(1);
        int using_clause_StartIndex = input.index();
        Object root_0 = null;

        Token ASTERISK1042=null;
        Token COMMA1044=null;
        OracleParser_Keys.using_key_return using_key1041 = null;

        OracleParser.using_element_return using_element1043 = null;

        OracleParser.using_element_return using_element1045 = null;


        Object ASTERISK1042_tree=null;
        Object COMMA1044_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 935) ) { return retval; }
            // OracleParser.g:1298:5: ( using_key ( ASTERISK | using_element ( COMMA using_element )* ) )
            // OracleParser.g:1298:10: using_key ( ASTERISK | using_element ( COMMA using_element )* )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_using_key_in_using_clause13802);
            using_key1041=using_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(using_key1041.getTree(), root_0);
            // OracleParser.g:1299:5: ( ASTERISK | using_element ( COMMA using_element )* )
            int alt332=2;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==ASTERISK) ) {
                alt332=1;
            }
            else if ( ((LA332_0>=UNSIGNED_INTEGER && LA332_0<=MINUS_SIGN)||LA332_0==NATIONAL_CHAR_STRING_LIT||(LA332_0>=EXACT_NUM_LIT && LA332_0<=CHAR_STRING)||LA332_0==CHAR_STRING_PERL||LA332_0==DELIMITED_ID||LA332_0==LEFT_PAREN||LA332_0==PLUS_SIGN||LA332_0==COLON||LA332_0==BINDVAR||LA332_0==INTRODUCER||LA332_0==SQL92_RESERVED_ALL||LA332_0==SQL92_RESERVED_ANY||LA332_0==SQL92_RESERVED_CASE||LA332_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA332_0>=SQL92_RESERVED_CURSOR && LA332_0<=SQL92_RESERVED_DATE)||LA332_0==SQL92_RESERVED_DEFAULT||LA332_0==SQL92_RESERVED_DISTINCT||(LA332_0>=SQL92_RESERVED_EXISTS && LA332_0<=SQL92_RESERVED_FALSE)||LA332_0==SQL92_RESERVED_IN||LA332_0==SQL92_RESERVED_NOT||LA332_0==SQL92_RESERVED_NULL||LA332_0==SQL92_RESERVED_PRIOR||LA332_0==SQL92_RESERVED_TRUE||LA332_0==REGULAR_ID) ) {
                alt332=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 332, 0, input);

                throw nvae;
            }
            switch (alt332) {
                case 1 :
                    // OracleParser.g:1299:10: ASTERISK
                    {
                    ASTERISK1042=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_using_clause13814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK1042_tree = (Object)adaptor.create(ASTERISK1042);
                    adaptor.addChild(root_0, ASTERISK1042_tree);
                    }

                    }
                    break;
                case 2 :
                    // OracleParser.g:1300:10: using_element ( COMMA using_element )*
                    {
                    pushFollow(FOLLOW_using_element_in_using_clause13825);
                    using_element1043=using_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_element1043.getTree());
                    // OracleParser.g:1300:24: ( COMMA using_element )*
                    loop331:
                    do {
                        int alt331=2;
                        int LA331_0 = input.LA(1);

                        if ( (LA331_0==COMMA) ) {
                            int LA331_2 = input.LA(2);

                            if ( (synpred449_OracleParser()) ) {
                                alt331=1;
                            }


                        }


                        switch (alt331) {
                    	case 1 :
                    	    // OracleParser.g:1300:25: COMMA using_element
                    	    {
                    	    COMMA1044=(Token)match(input,COMMA,FOLLOW_COMMA_in_using_clause13828); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_using_element_in_using_clause13831);
                    	    using_element1045=using_element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_element1045.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop331;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 935, using_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_clause"

    public static class using_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_element"
    // OracleParser.g:1304:1: using_element : ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )? -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? ) ;
    public final OracleParser.using_element_return using_element() throws RecognitionException {
        OracleParser.using_element_return retval = new OracleParser.using_element_return();
        retval.start = input.LT(1);
        int using_element_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.in_key_return in_key1046 = null;

        OracleParser_Keys.out_key_return out_key1047 = null;

        OracleParser_Keys.out_key_return out_key1048 = null;

        OracleParser.select_list_elements_return select_list_elements1049 = null;

        OracleParser_Commons.column_alias_return column_alias1050 = null;


        RewriteRuleSubtreeStream stream_column_alias=new RewriteRuleSubtreeStream(adaptor,"rule column_alias");
        RewriteRuleSubtreeStream stream_out_key=new RewriteRuleSubtreeStream(adaptor,"rule out_key");
        RewriteRuleSubtreeStream stream_select_list_elements=new RewriteRuleSubtreeStream(adaptor,"rule select_list_elements");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 936) ) { return retval; }
            // OracleParser.g:1305:5: ( ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )? -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? ) )
            // OracleParser.g:1305:10: ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )?
            {
            // OracleParser.g:1305:10: ( in_key ( out_key )? | out_key )?
            int alt334=3;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==SQL92_RESERVED_IN) ) {
                alt334=1;
            }
            else if ( (LA334_0==REGULAR_ID) ) {
                int LA334_2 = input.LA(2);

                if ( ((synpred452_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("out")))) ) {
                    alt334=2;
                }
            }
            switch (alt334) {
                case 1 :
                    // OracleParser.g:1305:11: in_key ( out_key )?
                    {
                    pushFollow(FOLLOW_in_key_in_using_element13860);
                    in_key1046=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_in_key.add(in_key1046.getTree());
                    // OracleParser.g:1305:18: ( out_key )?
                    int alt333=2;
                    int LA333_0 = input.LA(1);

                    if ( (LA333_0==REGULAR_ID) ) {
                        int LA333_1 = input.LA(2);

                        if ( ((synpred450_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("out")))) ) {
                            alt333=1;
                        }
                    }
                    switch (alt333) {
                        case 1 :
                            // OracleParser.g:0:0: out_key
                            {
                            pushFollow(FOLLOW_out_key_in_using_element13862);
                            out_key1047=out_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_out_key.add(out_key1047.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // OracleParser.g:1305:27: out_key
                    {
                    pushFollow(FOLLOW_out_key_in_using_element13865);
                    out_key1048=out_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_out_key.add(out_key1048.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_select_list_elements_in_using_element13869);
            select_list_elements1049=select_list_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_select_list_elements.add(select_list_elements1049.getTree());
            // OracleParser.g:1305:58: ( column_alias )?
            int alt335=2;
            switch ( input.LA(1) ) {
                case SQL92_RESERVED_AS:
                    {
                    int LA335_1 = input.LA(2);

                    if ( (synpred453_OracleParser()) ) {
                        alt335=1;
                    }
                    }
                    break;
                case INTRODUCER:
                    {
                    int LA335_2 = input.LA(2);

                    if ( (synpred453_OracleParser()) ) {
                        alt335=1;
                    }
                    }
                    break;
                case REGULAR_ID:
                    {
                    int LA335_3 = input.LA(2);

                    if ( (synpred453_OracleParser()) ) {
                        alt335=1;
                    }
                    }
                    break;
                case DELIMITED_ID:
                    {
                    int LA335_4 = input.LA(2);

                    if ( (synpred453_OracleParser()) ) {
                        alt335=1;
                    }
                    }
                    break;
                case NATIONAL_CHAR_STRING_LIT:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                    {
                    int LA335_5 = input.LA(2);

                    if ( (synpred453_OracleParser()) ) {
                        alt335=1;
                    }
                    }
                    break;
            }

            switch (alt335) {
                case 1 :
                    // OracleParser.g:0:0: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_using_element13871);
                    column_alias1050=column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_alias.add(column_alias1050.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: column_alias, select_list_elements, out_key, in_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1306:9: -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? )
            {
                // OracleParser.g:1306:12: ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ELEMENT, "ELEMENT"), root_1);

                // OracleParser.g:1306:22: ( in_key )?
                if ( stream_in_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_in_key.nextTree());

                }
                stream_in_key.reset();
                // OracleParser.g:1306:30: ( out_key )?
                if ( stream_out_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_out_key.nextTree());

                }
                stream_out_key.reset();
                adaptor.addChild(root_1, stream_select_list_elements.nextTree());
                // OracleParser.g:1306:60: ( column_alias )?
                if ( stream_column_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_alias.nextTree());

                }
                stream_column_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 936, using_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_element"

    public static class collect_order_by_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collect_order_by_part"
    // OracleParser.g:1309:1: collect_order_by_part : order_key by_key concatenation_wrapper ;
    public final OracleParser.collect_order_by_part_return collect_order_by_part() throws RecognitionException {
        OracleParser.collect_order_by_part_return retval = new OracleParser.collect_order_by_part_return();
        retval.start = input.LT(1);
        int collect_order_by_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.order_key_return order_key1051 = null;

        OracleParser_Keys.by_key_return by_key1052 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper1053 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 937) ) { return retval; }
            // OracleParser.g:1310:5: ( order_key by_key concatenation_wrapper )
            // OracleParser.g:1310:10: order_key by_key concatenation_wrapper
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_order_key_in_collect_order_by_part13917);
            order_key1051=order_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(order_key1051.getTree(), root_0);
            pushFollow(FOLLOW_by_key_in_collect_order_by_part13920);
            by_key1052=by_key();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_concatenation_wrapper_in_collect_order_by_part13923);
            concatenation_wrapper1053=concatenation_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1053.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 937, collect_order_by_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collect_order_by_part"

    public static class within_or_over_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "within_or_over_part"
    // OracleParser.g:1313:1: within_or_over_part : ( within_key group_key LEFT_PAREN order_by_clause RIGHT_PAREN | over_clause );
    public final OracleParser.within_or_over_part_return within_or_over_part() throws RecognitionException {
        OracleParser.within_or_over_part_return retval = new OracleParser.within_or_over_part_return();
        retval.start = input.LT(1);
        int within_or_over_part_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN1056=null;
        Token RIGHT_PAREN1058=null;
        OracleParser_Keys.within_key_return within_key1054 = null;

        OracleParser_Keys.group_key_return group_key1055 = null;

        OracleParser.order_by_clause_return order_by_clause1057 = null;

        OracleParser.over_clause_return over_clause1059 = null;


        Object LEFT_PAREN1056_tree=null;
        Object RIGHT_PAREN1058_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 938) ) { return retval; }
            // OracleParser.g:1314:5: ( within_key group_key LEFT_PAREN order_by_clause RIGHT_PAREN | over_clause )
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
                int LA336_1 = input.LA(2);

                if ( (LA336_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
                    alt336=2;
                }
                else if ( (LA336_1==SQL92_RESERVED_GROUP) && ((input.LT(1).getText().equalsIgnoreCase("within")))) {
                    alt336=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);

                throw nvae;
            }
            switch (alt336) {
                case 1 :
                    // OracleParser.g:1314:10: within_key group_key LEFT_PAREN order_by_clause RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_within_key_in_within_or_over_part13943);
                    within_key1054=within_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(within_key1054.getTree(), root_0);
                    pushFollow(FOLLOW_group_key_in_within_or_over_part13946);
                    group_key1055=group_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    LEFT_PAREN1056=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_within_or_over_part13949); if (state.failed) return retval;
                    pushFollow(FOLLOW_order_by_clause_in_within_or_over_part13952);
                    order_by_clause1057=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause1057.getTree());
                    RIGHT_PAREN1058=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_within_or_over_part13954); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // OracleParser.g:1315:10: over_clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_over_clause_in_within_or_over_part13966);
                    over_clause1059=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause1059.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 938, within_or_over_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "within_or_over_part"

    public static class cost_matrix_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cost_matrix_clause"
    // OracleParser.g:1318:1: cost_matrix_clause : cost_key ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA cost_class_name )* RIGHT_PAREN values_key expression_list ) ;
    public final OracleParser.cost_matrix_clause_return cost_matrix_clause() throws RecognitionException {
        OracleParser.cost_matrix_clause_return retval = new OracleParser.cost_matrix_clause_return();
        retval.start = input.LT(1);
        int cost_matrix_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN1063=null;
        Token COMMA1065=null;
        Token RIGHT_PAREN1067=null;
        OracleParser_Keys.cost_key_return cost_key1060 = null;

        OracleParser_Keys.model_key_return model_key1061 = null;

        OracleParser_Keys.auto_key_return auto_key1062 = null;

        OracleParser_Commons.cost_class_name_return cost_class_name1064 = null;

        OracleParser_Commons.cost_class_name_return cost_class_name1066 = null;

        OracleParser_Keys.values_key_return values_key1068 = null;

        OracleParser.expression_list_return expression_list1069 = null;


        Object LEFT_PAREN1063_tree=null;
        Object COMMA1065_tree=null;
        Object RIGHT_PAREN1067_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 939) ) { return retval; }
            // OracleParser.g:1319:5: ( cost_key ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA cost_class_name )* RIGHT_PAREN values_key expression_list ) )
            // OracleParser.g:1319:10: cost_key ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA cost_class_name )* RIGHT_PAREN values_key expression_list )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cost_key_in_cost_matrix_clause13986);
            cost_key1060=cost_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(cost_key1060.getTree(), root_0);
            // OracleParser.g:1320:5: ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA cost_class_name )* RIGHT_PAREN values_key expression_list )
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( (LA339_0==PLSQL_NON_RESERVED_MODEL) ) {
                alt339=1;
            }
            else if ( (LA339_0==LEFT_PAREN) ) {
                alt339=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);

                throw nvae;
            }
            switch (alt339) {
                case 1 :
                    // OracleParser.g:1320:10: model_key ( auto_key )?
                    {
                    pushFollow(FOLLOW_model_key_in_cost_matrix_clause13998);
                    model_key1061=model_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, model_key1061.getTree());
                    // OracleParser.g:1320:20: ( auto_key )?
                    int alt337=2;
                    int LA337_0 = input.LA(1);

                    if ( (LA337_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("auto")))) {
                        alt337=1;
                    }
                    switch (alt337) {
                        case 1 :
                            // OracleParser.g:0:0: auto_key
                            {
                            pushFollow(FOLLOW_auto_key_in_cost_matrix_clause14000);
                            auto_key1062=auto_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, auto_key1062.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // OracleParser.g:1321:10: LEFT_PAREN cost_class_name ( COMMA cost_class_name )* RIGHT_PAREN values_key expression_list
                    {
                    LEFT_PAREN1063=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cost_matrix_clause14012); if (state.failed) return retval;
                    pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause14015);
                    cost_class_name1064=cost_class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cost_class_name1064.getTree());
                    // OracleParser.g:1321:38: ( COMMA cost_class_name )*
                    loop338:
                    do {
                        int alt338=2;
                        int LA338_0 = input.LA(1);

                        if ( (LA338_0==COMMA) ) {
                            alt338=1;
                        }


                        switch (alt338) {
                    	case 1 :
                    	    // OracleParser.g:1321:39: COMMA cost_class_name
                    	    {
                    	    COMMA1065=(Token)match(input,COMMA,FOLLOW_COMMA_in_cost_matrix_clause14018); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause14021);
                    	    cost_class_name1066=cost_class_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cost_class_name1066.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop338;
                        }
                    } while (true);

                    RIGHT_PAREN1067=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14025); if (state.failed) return retval;
                    pushFollow(FOLLOW_values_key_in_cost_matrix_clause14028);
                    values_key1068=values_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_list_in_cost_matrix_clause14044);
                    expression_list1069=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1069.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 939, cost_matrix_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cost_matrix_clause"

    public static class xml_passing_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xml_passing_clause"
    // OracleParser.g:1326:1: xml_passing_clause : passing_key ( by_key value_key )? expression_wrapper ( column_alias )? ( COMMA expression_wrapper ( column_alias )? ) ;
    public final OracleParser.xml_passing_clause_return xml_passing_clause() throws RecognitionException {
        OracleParser.xml_passing_clause_return retval = new OracleParser.xml_passing_clause_return();
        retval.start = input.LT(1);
        int xml_passing_clause_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1075=null;
        OracleParser_Keys.passing_key_return passing_key1070 = null;

        OracleParser_Keys.by_key_return by_key1071 = null;

        OracleParser_Keys.value_key_return value_key1072 = null;

        OracleParser.expression_wrapper_return expression_wrapper1073 = null;

        OracleParser_Commons.column_alias_return column_alias1074 = null;

        OracleParser.expression_wrapper_return expression_wrapper1076 = null;

        OracleParser_Commons.column_alias_return column_alias1077 = null;


        Object COMMA1075_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 940) ) { return retval; }
            // OracleParser.g:1327:5: ( passing_key ( by_key value_key )? expression_wrapper ( column_alias )? ( COMMA expression_wrapper ( column_alias )? ) )
            // OracleParser.g:1327:10: passing_key ( by_key value_key )? expression_wrapper ( column_alias )? ( COMMA expression_wrapper ( column_alias )? )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_passing_key_in_xml_passing_clause14070);
            passing_key1070=passing_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(passing_key1070.getTree(), root_0);
            // OracleParser.g:1327:23: ( by_key value_key )?
            int alt340=2;
            int LA340_0 = input.LA(1);

            if ( (LA340_0==SQL92_RESERVED_BY) ) {
                alt340=1;
            }
            switch (alt340) {
                case 1 :
                    // OracleParser.g:1327:24: by_key value_key
                    {
                    pushFollow(FOLLOW_by_key_in_xml_passing_clause14074);
                    by_key1071=by_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_value_key_in_xml_passing_clause14077);
                    value_key1072=value_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, value_key1072.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_wrapper_in_xml_passing_clause14093);
            expression_wrapper1073=expression_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper1073.getTree());
            // OracleParser.g:1328:32: ( column_alias )?
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==NATIONAL_CHAR_STRING_LIT||LA341_0==CHAR_STRING||LA341_0==CHAR_STRING_PERL||LA341_0==DELIMITED_ID||LA341_0==INTRODUCER||LA341_0==SQL92_RESERVED_AS||LA341_0==REGULAR_ID) ) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    // OracleParser.g:0:0: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_xml_passing_clause14095);
                    column_alias1074=column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias1074.getTree());

                    }
                    break;

            }

            // OracleParser.g:1328:46: ( COMMA expression_wrapper ( column_alias )? )
            // OracleParser.g:1328:47: COMMA expression_wrapper ( column_alias )?
            {
            COMMA1075=(Token)match(input,COMMA,FOLLOW_COMMA_in_xml_passing_clause14099); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_wrapper_in_xml_passing_clause14102);
            expression_wrapper1076=expression_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper1076.getTree());
            // OracleParser.g:1328:73: ( column_alias )?
            int alt342=2;
            int LA342_0 = input.LA(1);

            if ( (LA342_0==NATIONAL_CHAR_STRING_LIT||LA342_0==CHAR_STRING||LA342_0==CHAR_STRING_PERL||LA342_0==DELIMITED_ID||LA342_0==INTRODUCER||LA342_0==SQL92_RESERVED_AS) ) {
                alt342=1;
            }
            else if ( (LA342_0==REGULAR_ID) ) {
                int LA342_3 = input.LA(2);

                if ( (synpred460_OracleParser()) ) {
                    alt342=1;
                }
            }
            switch (alt342) {
                case 1 :
                    // OracleParser.g:0:0: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_xml_passing_clause14104);
                    column_alias1077=column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias1077.getTree());

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 940, xml_passing_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xml_passing_clause"

    public static class xml_attributes_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xml_attributes_clause"
    // OracleParser.g:1331:1: xml_attributes_clause : xmlattributes_key LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA xml_multiuse_expression_element )* RIGHT_PAREN ;
    public final OracleParser.xml_attributes_clause_return xml_attributes_clause() throws RecognitionException {
        OracleParser.xml_attributes_clause_return retval = new OracleParser.xml_attributes_clause_return();
        retval.start = input.LT(1);
        int xml_attributes_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN1079=null;
        Token COMMA1085=null;
        Token RIGHT_PAREN1087=null;
        OracleParser_Keys.xmlattributes_key_return xmlattributes_key1078 = null;

        OracleParser_Keys.entityescaping_key_return entityescaping_key1080 = null;

        OracleParser_Keys.noentityescaping_key_return noentityescaping_key1081 = null;

        OracleParser_Keys.schemacheck_key_return schemacheck_key1082 = null;

        OracleParser_Keys.noschemacheck_key_return noschemacheck_key1083 = null;

        OracleParser.xml_multiuse_expression_element_return xml_multiuse_expression_element1084 = null;

        OracleParser.xml_multiuse_expression_element_return xml_multiuse_expression_element1086 = null;


        Object LEFT_PAREN1079_tree=null;
        Object COMMA1085_tree=null;
        Object RIGHT_PAREN1087_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 941) ) { return retval; }
            // OracleParser.g:1332:5: ( xmlattributes_key LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA xml_multiuse_expression_element )* RIGHT_PAREN )
            // OracleParser.g:1332:10: xmlattributes_key LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA xml_multiuse_expression_element )* RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_xmlattributes_key_in_xml_attributes_clause14126);
            xmlattributes_key1078=xmlattributes_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlattributes_key1078.getTree(), root_0);
            LEFT_PAREN1079=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_xml_attributes_clause14137); if (state.failed) return retval;
            // OracleParser.g:1334:13: ( entityescaping_key | noentityescaping_key )?
            int alt343=3;
            int LA343_0 = input.LA(1);

            if ( (LA343_0==REGULAR_ID) ) {
                int LA343_1 = input.LA(2);

                if ( ((synpred461_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("entityescaping")))) ) {
                    alt343=1;
                }
                else if ( ((synpred462_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("noentityescaping")))) ) {
                    alt343=2;
                }
            }
            switch (alt343) {
                case 1 :
                    // OracleParser.g:1334:14: entityescaping_key
                    {
                    pushFollow(FOLLOW_entityescaping_key_in_xml_attributes_clause14153);
                    entityescaping_key1080=entityescaping_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, entityescaping_key1080.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1334:33: noentityescaping_key
                    {
                    pushFollow(FOLLOW_noentityescaping_key_in_xml_attributes_clause14155);
                    noentityescaping_key1081=noentityescaping_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noentityescaping_key1081.getTree());

                    }
                    break;

            }

            // OracleParser.g:1335:13: ( schemacheck_key | noschemacheck_key )?
            int alt344=3;
            int LA344_0 = input.LA(1);

            if ( (LA344_0==REGULAR_ID) ) {
                int LA344_1 = input.LA(2);

                if ( ((synpred463_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("schemacheck")))) ) {
                    alt344=1;
                }
                else if ( ((synpred464_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("noschemacheck")))) ) {
                    alt344=2;
                }
            }
            switch (alt344) {
                case 1 :
                    // OracleParser.g:1335:14: schemacheck_key
                    {
                    pushFollow(FOLLOW_schemacheck_key_in_xml_attributes_clause14172);
                    schemacheck_key1082=schemacheck_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schemacheck_key1082.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1335:30: noschemacheck_key
                    {
                    pushFollow(FOLLOW_noschemacheck_key_in_xml_attributes_clause14174);
                    noschemacheck_key1083=noschemacheck_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noschemacheck_key1083.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14190);
            xml_multiuse_expression_element1084=xml_multiuse_expression_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_multiuse_expression_element1084.getTree());
            // OracleParser.g:1336:45: ( COMMA xml_multiuse_expression_element )*
            loop345:
            do {
                int alt345=2;
                int LA345_0 = input.LA(1);

                if ( (LA345_0==COMMA) ) {
                    alt345=1;
                }


                switch (alt345) {
            	case 1 :
            	    // OracleParser.g:1336:46: COMMA xml_multiuse_expression_element
            	    {
            	    COMMA1085=(Token)match(input,COMMA,FOLLOW_COMMA_in_xml_attributes_clause14193); if (state.failed) return retval;
            	    pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14196);
            	    xml_multiuse_expression_element1086=xml_multiuse_expression_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_multiuse_expression_element1086.getTree());

            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);

            RIGHT_PAREN1087=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14208); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 941, xml_attributes_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xml_attributes_clause"

    public static class xml_namespaces_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xml_namespaces_clause"
    // OracleParser.g:1340:1: xml_namespaces_clause : xmlnamespaces_key LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN ;
    public final OracleParser.xml_namespaces_clause_return xml_namespaces_clause() throws RecognitionException {
        OracleParser.xml_namespaces_clause_return retval = new OracleParser.xml_namespaces_clause_return();
        retval.start = input.LT(1);
        int xml_namespaces_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN1089=null;
        Token COMMA1092=null;
        Token RIGHT_PAREN1096=null;
        OracleParser_Keys.xmlnamespaces_key_return xmlnamespaces_key1088 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper1090 = null;

        OracleParser_Commons.column_alias_return column_alias1091 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper1093 = null;

        OracleParser_Commons.column_alias_return column_alias1094 = null;

        OracleParser.xml_general_default_part_return xml_general_default_part1095 = null;


        Object LEFT_PAREN1089_tree=null;
        Object COMMA1092_tree=null;
        Object RIGHT_PAREN1096_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 942) ) { return retval; }
            // OracleParser.g:1341:5: ( xmlnamespaces_key LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN )
            // OracleParser.g:1341:10: xmlnamespaces_key LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14229);
            xmlnamespaces_key1088=xmlnamespaces_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlnamespaces_key1088.getTree(), root_0);
            LEFT_PAREN1089=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14240); if (state.failed) return retval;
            // OracleParser.g:1343:13: ( concatenation_wrapper column_alias )?
            int alt346=2;
            alt346 = dfa346.predict(input);
            switch (alt346) {
                case 1 :
                    // OracleParser.g:1343:14: concatenation_wrapper column_alias
                    {
                    pushFollow(FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14256);
                    concatenation_wrapper1090=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1090.getTree());
                    pushFollow(FOLLOW_column_alias_in_xml_namespaces_clause14258);
                    column_alias1091=column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias1091.getTree());

                    }
                    break;

            }

            // OracleParser.g:1344:17: ( COMMA concatenation_wrapper column_alias )*
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==COMMA) ) {
                    alt347=1;
                }


                switch (alt347) {
            	case 1 :
            	    // OracleParser.g:1344:18: COMMA concatenation_wrapper column_alias
            	    {
            	    COMMA1092=(Token)match(input,COMMA,FOLLOW_COMMA_in_xml_namespaces_clause14279); if (state.failed) return retval;
            	    pushFollow(FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14282);
            	    concatenation_wrapper1093=concatenation_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1093.getTree());
            	    pushFollow(FOLLOW_column_alias_in_xml_namespaces_clause14284);
            	    column_alias1094=column_alias();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias1094.getTree());

            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);

            // OracleParser.g:1345:13: ( ( default_key )=> xml_general_default_part )?
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==SQL92_RESERVED_DEFAULT) && (synpred468_OracleParser())) {
                alt348=1;
            }
            switch (alt348) {
                case 1 :
                    // OracleParser.g:1345:14: ( default_key )=> xml_general_default_part
                    {
                    pushFollow(FOLLOW_xml_general_default_part_in_xml_namespaces_clause14306);
                    xml_general_default_part1095=xml_general_default_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_general_default_part1095.getTree());

                    }
                    break;

            }

            RIGHT_PAREN1096=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14318); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 942, xml_namespaces_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xml_namespaces_clause"

    public static class xml_table_column_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xml_table_column"
    // OracleParser.g:1349:1: xml_table_column : xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? ) -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? ) ;
    public final OracleParser.xml_table_column_return xml_table_column() throws RecognitionException {
        OracleParser.xml_table_column_return retval = new OracleParser.xml_table_column_return();
        retval.start = input.LT(1);
        int xml_table_column_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Commons.xml_column_name_return xml_column_name1097 = null;

        OracleParser_Keys.for_key_return for_key1098 = null;

        OracleParser_Keys.ordinality_key_return ordinality_key1099 = null;

        OracleParser_Commons.type_spec_return type_spec1100 = null;

        OracleParser_Keys.path_key_return path_key1101 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper1102 = null;

        OracleParser.xml_general_default_part_return xml_general_default_part1103 = null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_concatenation_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule concatenation_wrapper");
        RewriteRuleSubtreeStream stream_xml_column_name=new RewriteRuleSubtreeStream(adaptor,"rule xml_column_name");
        RewriteRuleSubtreeStream stream_path_key=new RewriteRuleSubtreeStream(adaptor,"rule path_key");
        RewriteRuleSubtreeStream stream_ordinality_key=new RewriteRuleSubtreeStream(adaptor,"rule ordinality_key");
        RewriteRuleSubtreeStream stream_xml_general_default_part=new RewriteRuleSubtreeStream(adaptor,"rule xml_general_default_part");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 943) ) { return retval; }
            // OracleParser.g:1350:5: ( xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? ) -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? ) )
            // OracleParser.g:1350:10: xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? )
            {
            pushFollow(FOLLOW_xml_column_name_in_xml_table_column14339);
            xml_column_name1097=xml_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_xml_column_name.add(xml_column_name1097.getTree());
            // OracleParser.g:1351:5: ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? )
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( (LA351_0==SQL92_RESERVED_FOR) ) {
                alt351=1;
            }
            else if ( (LA351_0==DELIMITED_ID||LA351_0==SQL92_RESERVED_DATE||LA351_0==REGULAR_ID) ) {
                alt351=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 351, 0, input);

                throw nvae;
            }
            switch (alt351) {
                case 1 :
                    // OracleParser.g:1351:10: for_key ordinality_key
                    {
                    pushFollow(FOLLOW_for_key_in_xml_table_column14350);
                    for_key1098=for_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_for_key.add(for_key1098.getTree());
                    pushFollow(FOLLOW_ordinality_key_in_xml_table_column14352);
                    ordinality_key1099=ordinality_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ordinality_key.add(ordinality_key1099.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1352:10: type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )?
                    {
                    pushFollow(FOLLOW_type_spec_in_xml_table_column14363);
                    type_spec1100=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec1100.getTree());
                    // OracleParser.g:1352:20: ( path_key concatenation_wrapper )?
                    int alt349=2;
                    int LA349_0 = input.LA(1);

                    if ( (LA349_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("path")))) {
                        alt349=1;
                    }
                    switch (alt349) {
                        case 1 :
                            // OracleParser.g:1352:21: path_key concatenation_wrapper
                            {
                            pushFollow(FOLLOW_path_key_in_xml_table_column14366);
                            path_key1101=path_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_path_key.add(path_key1101.getTree());
                            pushFollow(FOLLOW_concatenation_wrapper_in_xml_table_column14368);
                            concatenation_wrapper1102=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation_wrapper.add(concatenation_wrapper1102.getTree());

                            }
                            break;

                    }

                    // OracleParser.g:1352:54: ( ( default_key )=> xml_general_default_part )?
                    int alt350=2;
                    int LA350_0 = input.LA(1);

                    if ( (LA350_0==SQL92_RESERVED_DEFAULT) && (synpred471_OracleParser())) {
                        alt350=1;
                    }
                    switch (alt350) {
                        case 1 :
                            // OracleParser.g:1352:55: ( default_key )=> xml_general_default_part
                            {
                            pushFollow(FOLLOW_xml_general_default_part_in_xml_table_column14378);
                            xml_general_default_part1103=xml_general_default_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_xml_general_default_part.add(xml_general_default_part1103.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: concatenation_wrapper, xml_general_default_part, xml_column_name, type_spec, ordinality_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1354:9: -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? )
            {
                // OracleParser.g:1354:12: ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_COLUMN, "XML_COLUMN"), root_1);

                adaptor.addChild(root_1, stream_xml_column_name.nextTree());
                // OracleParser.g:1354:41: ( ordinality_key )?
                if ( stream_ordinality_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_ordinality_key.nextTree());

                }
                stream_ordinality_key.reset();
                // OracleParser.g:1354:57: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();
                // OracleParser.g:1354:68: ( concatenation_wrapper )?
                if ( stream_concatenation_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_concatenation_wrapper.nextTree());

                }
                stream_concatenation_wrapper.reset();
                // OracleParser.g:1354:91: ( xml_general_default_part )?
                if ( stream_xml_general_default_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_xml_general_default_part.nextTree());

                }
                stream_xml_general_default_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 943, xml_table_column_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xml_table_column"

    public static class xml_general_default_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xml_general_default_part"
    // OracleParser.g:1357:1: xml_general_default_part : default_key concatenation_wrapper ;
    public final OracleParser.xml_general_default_part_return xml_general_default_part() throws RecognitionException {
        OracleParser.xml_general_default_part_return retval = new OracleParser.xml_general_default_part_return();
        retval.start = input.LT(1);
        int xml_general_default_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.default_key_return default_key1104 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper1105 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 944) ) { return retval; }
            // OracleParser.g:1358:5: ( default_key concatenation_wrapper )
            // OracleParser.g:1358:10: default_key concatenation_wrapper
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_default_key_in_xml_general_default_part14434);
            default_key1104=default_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(default_key1104.getTree(), root_0);
            pushFollow(FOLLOW_concatenation_wrapper_in_xml_general_default_part14437);
            concatenation_wrapper1105=concatenation_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1105.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 944, xml_general_default_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xml_general_default_part"

    public static class xml_multiuse_expression_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xml_multiuse_expression_element"
    // OracleParser.g:1361:1: xml_multiuse_expression_element : expression ( as_key ( id_expression | evalname_key concatenation ) )? -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) ) -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) ) -> ^( XML_ELEMENT ^( EXPR expression ) ) ;
    public final OracleParser.xml_multiuse_expression_element_return xml_multiuse_expression_element() throws RecognitionException {
        OracleParser.xml_multiuse_expression_element_return retval = new OracleParser.xml_multiuse_expression_element_return();
        retval.start = input.LT(1);
        int xml_multiuse_expression_element_StartIndex = input.index();
        Object root_0 = null;

        OracleParser.expression_return expression1106 = null;

        OracleParser_Keys.as_key_return as_key1107 = null;

        OracleParser_Commons.id_expression_return id_expression1108 = null;

        OracleParser_Keys.evalname_key_return evalname_key1109 = null;

        OracleParser.concatenation_return concatenation1110 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_evalname_key=new RewriteRuleSubtreeStream(adaptor,"rule evalname_key");
        RewriteRuleSubtreeStream stream_id_expression=new RewriteRuleSubtreeStream(adaptor,"rule id_expression");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
            int mode = 0;    
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 945) ) { return retval; }
            // OracleParser.g:1363:5: ( expression ( as_key ( id_expression | evalname_key concatenation ) )? -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) ) -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) ) -> ^( XML_ELEMENT ^( EXPR expression ) ) )
            // OracleParser.g:1363:10: expression ( as_key ( id_expression | evalname_key concatenation ) )?
            {
            pushFollow(FOLLOW_expression_in_xml_multiuse_expression_element14465);
            expression1106=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression1106.getTree());
            // OracleParser.g:1363:21: ( as_key ( id_expression | evalname_key concatenation ) )?
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( (LA353_0==SQL92_RESERVED_AS) ) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    // OracleParser.g:1363:22: as_key ( id_expression | evalname_key concatenation )
                    {
                    pushFollow(FOLLOW_as_key_in_xml_multiuse_expression_element14468);
                    as_key1107=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key1107.getTree());
                    // OracleParser.g:1363:29: ( id_expression | evalname_key concatenation )
                    int alt352=2;
                    int LA352_0 = input.LA(1);

                    if ( (LA352_0==REGULAR_ID) ) {
                        int LA352_1 = input.LA(2);

                        if ( (LA352_1==EOF||LA352_1==RIGHT_PAREN||LA352_1==COMMA) ) {
                            alt352=1;
                        }
                        else if ( ((LA352_1>=UNSIGNED_INTEGER && LA352_1<=MINUS_SIGN)||LA352_1==NATIONAL_CHAR_STRING_LIT||(LA352_1>=EXACT_NUM_LIT && LA352_1<=CHAR_STRING)||LA352_1==CHAR_STRING_PERL||LA352_1==DELIMITED_ID||LA352_1==LEFT_PAREN||LA352_1==PLUS_SIGN||LA352_1==COLON||LA352_1==BINDVAR||LA352_1==INTRODUCER||LA352_1==SQL92_RESERVED_ALL||LA352_1==SQL92_RESERVED_ANY||LA352_1==SQL92_RESERVED_CASE||LA352_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA352_1==SQL92_RESERVED_DATE||LA352_1==SQL92_RESERVED_DEFAULT||LA352_1==SQL92_RESERVED_DISTINCT||(LA352_1>=SQL92_RESERVED_EXISTS && LA352_1<=SQL92_RESERVED_FALSE)||LA352_1==SQL92_RESERVED_NULL||LA352_1==SQL92_RESERVED_PRIOR||LA352_1==SQL92_RESERVED_TRUE||LA352_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {
                            alt352=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 352, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA352_0==DELIMITED_ID) ) {
                        alt352=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 352, 0, input);

                        throw nvae;
                    }
                    switch (alt352) {
                        case 1 :
                            // OracleParser.g:1363:30: id_expression
                            {
                            pushFollow(FOLLOW_id_expression_in_xml_multiuse_expression_element14471);
                            id_expression1108=id_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_id_expression.add(id_expression1108.getTree());
                            if ( state.backtracking==0 ) {
                              mode = 1;
                            }

                            }
                            break;
                        case 2 :
                            // OracleParser.g:1363:56: evalname_key concatenation
                            {
                            pushFollow(FOLLOW_evalname_key_in_xml_multiuse_expression_element14475);
                            evalname_key1109=evalname_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_evalname_key.add(evalname_key1109.getTree());
                            pushFollow(FOLLOW_concatenation_in_xml_multiuse_expression_element14477);
                            concatenation1110=concatenation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation.add(concatenation1110.getTree());
                            if ( state.backtracking==0 ) {
                              mode = 2;
                            }

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, expression, evalname_key, concatenation, expression, id_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1364:9: -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) )
            if (mode == 1) {
                // OracleParser.g:1364:25: ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "XML_ELEMENT"), root_1);

                // OracleParser.g:1364:39: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:1364:58: ^( XML_ALIAS[$as_key.start] id_expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ALIAS, (as_key1107!=null?((Token)as_key1107.start):null)), root_2);

                adaptor.addChild(root_2, stream_id_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1365:9: -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) )
            if (mode == 2) {
                // OracleParser.g:1365:25: ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "XML_ELEMENT"), root_1);

                // OracleParser.g:1365:39: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // OracleParser.g:1365:58: ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ALIAS, (as_key1107!=null?((Token)as_key1107.start):null)), root_2);

                // OracleParser.g:1365:85: ^( evalname_key ^( EXPR concatenation ) )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(stream_evalname_key.nextNode(), root_3);

                // OracleParser.g:1365:100: ^( EXPR concatenation )
                {
                Object root_4 = (Object)adaptor.nil();
                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_4);

                adaptor.addChild(root_4, stream_concatenation.nextTree());

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1366:9: -> ^( XML_ELEMENT ^( EXPR expression ) )
            {
                // OracleParser.g:1366:12: ^( XML_ELEMENT ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "XML_ELEMENT"), root_1);

                // OracleParser.g:1366:26: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 945, xml_multiuse_expression_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xml_multiuse_expression_element"

    public static class xmlroot_param_version_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlroot_param_version_part"
    // OracleParser.g:1369:1: xmlroot_param_version_part : version_key ( no_key value_key | expression_wrapper ) ;
    public final OracleParser.xmlroot_param_version_part_return xmlroot_param_version_part() throws RecognitionException {
        OracleParser.xmlroot_param_version_part_return retval = new OracleParser.xmlroot_param_version_part_return();
        retval.start = input.LT(1);
        int xmlroot_param_version_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.version_key_return version_key1111 = null;

        OracleParser_Keys.no_key_return no_key1112 = null;

        OracleParser_Keys.value_key_return value_key1113 = null;

        OracleParser.expression_wrapper_return expression_wrapper1114 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 946) ) { return retval; }
            // OracleParser.g:1370:5: ( version_key ( no_key value_key | expression_wrapper ) )
            // OracleParser.g:1370:10: version_key ( no_key value_key | expression_wrapper )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_version_key_in_xmlroot_param_version_part14588);
            version_key1111=version_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(version_key1111.getTree(), root_0);
            // OracleParser.g:1370:23: ( no_key value_key | expression_wrapper )
            int alt354=2;
            alt354 = dfa354.predict(input);
            switch (alt354) {
                case 1 :
                    // OracleParser.g:1370:24: no_key value_key
                    {
                    pushFollow(FOLLOW_no_key_in_xmlroot_param_version_part14592);
                    no_key1112=no_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_key1112.getTree());
                    pushFollow(FOLLOW_value_key_in_xmlroot_param_version_part14594);
                    value_key1113=value_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, value_key1113.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1370:41: expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_xmlroot_param_version_part14596);
                    expression_wrapper1114=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper1114.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 946, xmlroot_param_version_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlroot_param_version_part"

    public static class xmlroot_param_standalone_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlroot_param_standalone_part"
    // OracleParser.g:1373:1: xmlroot_param_standalone_part : standalone_key ( yes_key | no_key ( value_key )? ) ;
    public final OracleParser.xmlroot_param_standalone_part_return xmlroot_param_standalone_part() throws RecognitionException {
        OracleParser.xmlroot_param_standalone_part_return retval = new OracleParser.xmlroot_param_standalone_part_return();
        retval.start = input.LT(1);
        int xmlroot_param_standalone_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.standalone_key_return standalone_key1115 = null;

        OracleParser_Keys.yes_key_return yes_key1116 = null;

        OracleParser_Keys.no_key_return no_key1117 = null;

        OracleParser_Keys.value_key_return value_key1118 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 947) ) { return retval; }
            // OracleParser.g:1374:5: ( standalone_key ( yes_key | no_key ( value_key )? ) )
            // OracleParser.g:1374:10: standalone_key ( yes_key | no_key ( value_key )? )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_standalone_key_in_xmlroot_param_standalone_part14617);
            standalone_key1115=standalone_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(standalone_key1115.getTree(), root_0);
            // OracleParser.g:1374:26: ( yes_key | no_key ( value_key )? )
            int alt356=2;
            int LA356_0 = input.LA(1);

            if ( (LA356_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("no")))) {
                int LA356_1 = input.LA(2);

                if ( ((synpred475_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("yes")))) ) {
                    alt356=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("no"))) ) {
                    alt356=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 356, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 356, 0, input);

                throw nvae;
            }
            switch (alt356) {
                case 1 :
                    // OracleParser.g:1374:27: yes_key
                    {
                    pushFollow(FOLLOW_yes_key_in_xmlroot_param_standalone_part14621);
                    yes_key1116=yes_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yes_key1116.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1374:35: no_key ( value_key )?
                    {
                    pushFollow(FOLLOW_no_key_in_xmlroot_param_standalone_part14623);
                    no_key1117=no_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_key1117.getTree());
                    // OracleParser.g:1374:42: ( value_key )?
                    int alt355=2;
                    int LA355_0 = input.LA(1);

                    if ( (LA355_0==REGULAR_ID) ) {
                        alt355=1;
                    }
                    switch (alt355) {
                        case 1 :
                            // OracleParser.g:0:0: value_key
                            {
                            pushFollow(FOLLOW_value_key_in_xmlroot_param_standalone_part14625);
                            value_key1118=value_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, value_key1118.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 947, xmlroot_param_standalone_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlroot_param_standalone_part"

    public static class xmlserialize_param_enconding_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlserialize_param_enconding_part"
    // OracleParser.g:1377:1: xmlserialize_param_enconding_part : encoding_key concatenation_wrapper ;
    public final OracleParser.xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part() throws RecognitionException {
        OracleParser.xmlserialize_param_enconding_part_return retval = new OracleParser.xmlserialize_param_enconding_part_return();
        retval.start = input.LT(1);
        int xmlserialize_param_enconding_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.encoding_key_return encoding_key1119 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper1120 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 948) ) { return retval; }
            // OracleParser.g:1378:5: ( encoding_key concatenation_wrapper )
            // OracleParser.g:1378:10: encoding_key concatenation_wrapper
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_encoding_key_in_xmlserialize_param_enconding_part14647);
            encoding_key1119=encoding_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(encoding_key1119.getTree(), root_0);
            pushFollow(FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part14650);
            concatenation_wrapper1120=concatenation_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1120.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 948, xmlserialize_param_enconding_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlserialize_param_enconding_part"

    public static class xmlserialize_param_version_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlserialize_param_version_part"
    // OracleParser.g:1381:1: xmlserialize_param_version_part : version_key concatenation_wrapper ;
    public final OracleParser.xmlserialize_param_version_part_return xmlserialize_param_version_part() throws RecognitionException {
        OracleParser.xmlserialize_param_version_part_return retval = new OracleParser.xmlserialize_param_version_part_return();
        retval.start = input.LT(1);
        int xmlserialize_param_version_part_StartIndex = input.index();
        Object root_0 = null;

        OracleParser_Keys.version_key_return version_key1121 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper1122 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 949) ) { return retval; }
            // OracleParser.g:1382:5: ( version_key concatenation_wrapper )
            // OracleParser.g:1382:10: version_key concatenation_wrapper
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_version_key_in_xmlserialize_param_version_part14670);
            version_key1121=version_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(version_key1121.getTree(), root_0);
            pushFollow(FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part14673);
            concatenation_wrapper1122=concatenation_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1122.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 949, xmlserialize_param_version_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlserialize_param_version_part"

    public static class xmlserialize_param_ident_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlserialize_param_ident_part"
    // OracleParser.g:1385:1: xmlserialize_param_ident_part : ( no_key indent_key | indent_key ( size_key EQUALS_OP concatenation_wrapper )? );
    public final OracleParser.xmlserialize_param_ident_part_return xmlserialize_param_ident_part() throws RecognitionException {
        OracleParser.xmlserialize_param_ident_part_return retval = new OracleParser.xmlserialize_param_ident_part_return();
        retval.start = input.LT(1);
        int xmlserialize_param_ident_part_StartIndex = input.index();
        Object root_0 = null;

        Token EQUALS_OP1127=null;
        OracleParser_Keys.no_key_return no_key1123 = null;

        OracleParser_Keys.indent_key_return indent_key1124 = null;

        OracleParser_Keys.indent_key_return indent_key1125 = null;

        OracleParser_Keys.size_key_return size_key1126 = null;

        OracleParser.concatenation_wrapper_return concatenation_wrapper1128 = null;


        Object EQUALS_OP1127_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 950) ) { return retval; }
            // OracleParser.g:1386:5: ( no_key indent_key | indent_key ( size_key EQUALS_OP concatenation_wrapper )? )
            int alt358=2;
            int LA358_0 = input.LA(1);

            if ( (LA358_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                int LA358_1 = input.LA(2);

                if ( (LA358_1==EOF||LA358_1==RIGHT_PAREN||LA358_1==SQL92_RESERVED_SIZE) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                    alt358=2;
                }
                else if ( (LA358_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                    int LA358_3 = input.LA(3);

                    if ( (LA358_3==EOF) && ((input.LT(1).getText().equalsIgnoreCase("no")))) {
                        alt358=1;
                    }
                    else if ( (LA358_3==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                        int LA358_5 = input.LA(4);

                        if ( (LA358_5==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                            alt358=2;
                        }
                        else if ( (LA358_5==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("no")))) {
                            alt358=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 358, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA358_3==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("no")))) {
                        alt358=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 358, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 358, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 358, 0, input);

                throw nvae;
            }
            switch (alt358) {
                case 1 :
                    // OracleParser.g:1386:10: no_key indent_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_no_key_in_xmlserialize_param_ident_part14693);
                    no_key1123=no_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_key1123.getTree());
                    pushFollow(FOLLOW_indent_key_in_xmlserialize_param_ident_part14695);
                    indent_key1124=indent_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, indent_key1124.getTree());

                    }
                    break;
                case 2 :
                    // OracleParser.g:1387:10: indent_key ( size_key EQUALS_OP concatenation_wrapper )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_indent_key_in_xmlserialize_param_ident_part14706);
                    indent_key1125=indent_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(indent_key1125.getTree(), root_0);
                    // OracleParser.g:1387:22: ( size_key EQUALS_OP concatenation_wrapper )?
                    int alt357=2;
                    int LA357_0 = input.LA(1);

                    if ( (LA357_0==SQL92_RESERVED_SIZE) ) {
                        alt357=1;
                    }
                    switch (alt357) {
                        case 1 :
                            // OracleParser.g:1387:23: size_key EQUALS_OP concatenation_wrapper
                            {
                            pushFollow(FOLLOW_size_key_in_xmlserialize_param_ident_part14710);
                            size_key1126=size_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            EQUALS_OP1127=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part14713); if (state.failed) return retval;
                            pushFollow(FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part14716);
                            concatenation_wrapper1128=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1128.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e){
        	throw e;
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 950, xmlserialize_param_ident_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlserialize_param_ident_part"

    // $ANTLR start synpred6_OracleParser
    public final void synpred6_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:193:10: ( merge_statement )
        // OracleParser.g:193:10: merge_statement
        {
        pushFollow(FOLLOW_merge_statement_in_synpred6_OracleParser738);
        merge_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_OracleParser

    // $ANTLR start synpred7_OracleParser
    public final void synpred7_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:199:11: ( set_key statement_id_key EQUALS_OP quoted_string )
        // OracleParser.g:199:11: set_key statement_id_key EQUALS_OP quoted_string
        {
        pushFollow(FOLLOW_set_key_in_synpred7_OracleParser783);
        set_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_statement_id_key_in_synpred7_OracleParser785);
        statement_id_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_synpred7_OracleParser787); if (state.failed) return ;
        pushFollow(FOLLOW_quoted_string_in_synpred7_OracleParser789);
        quoted_string();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_OracleParser

    // $ANTLR start synpred15_OracleParser
    public final void synpred15_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:214:39: ( siblings_key )
        // OracleParser.g:214:39: siblings_key
        {
        pushFollow(FOLLOW_siblings_key_in_synpred15_OracleParser971);
        siblings_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_OracleParser

    // $ANTLR start synpred16_OracleParser
    public final void synpred16_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:214:28: ( order_key ( siblings_key )? by_key )
        // OracleParser.g:214:29: order_key ( siblings_key )? by_key
        {
        pushFollow(FOLLOW_order_key_in_synpred16_OracleParser969);
        order_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:214:39: ( siblings_key )?
        int alt359=2;
        int LA359_0 = input.LA(1);

        if ( (LA359_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("siblings")))) {
            alt359=1;
        }
        switch (alt359) {
            case 1 :
                // OracleParser.g:0:0: siblings_key
                {
                pushFollow(FOLLOW_siblings_key_in_synpred16_OracleParser971);
                siblings_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_by_key_in_synpred16_OracleParser974);
        by_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_OracleParser

    // $ANTLR start synpred23_OracleParser
    public final void synpred23_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:231:23: ( depth_key )
        // OracleParser.g:231:23: depth_key
        {
        pushFollow(FOLLOW_depth_key_in_synpred23_OracleParser1158);
        depth_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_OracleParser

    // $ANTLR start synpred26_OracleParser
    public final void synpred26_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:232:48: ( nulls_key first_key )
        // OracleParser.g:232:48: nulls_key first_key
        {
        pushFollow(FOLLOW_nulls_key_in_synpred26_OracleParser1194);
        nulls_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_first_key_in_synpred26_OracleParser1196);
        first_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_OracleParser

    // $ANTLR start synpred27_OracleParser
    public final void synpred27_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:232:71: ( nulls_key last_key )
        // OracleParser.g:232:71: nulls_key last_key
        {
        pushFollow(FOLLOW_nulls_key_in_synpred27_OracleParser1201);
        nulls_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_last_key_in_synpred27_OracleParser1203);
        last_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_OracleParser

    // $ANTLR start synpred30_OracleParser
    public final void synpred30_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:233:55: ( nulls_key first_key )
        // OracleParser.g:233:55: nulls_key first_key
        {
        pushFollow(FOLLOW_nulls_key_in_synpred30_OracleParser1234);
        nulls_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_first_key_in_synpred30_OracleParser1236);
        first_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_OracleParser

    // $ANTLR start synpred31_OracleParser
    public final void synpred31_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:233:78: ( nulls_key last_key )
        // OracleParser.g:233:78: nulls_key last_key
        {
        pushFollow(FOLLOW_nulls_key_in_synpred31_OracleParser1241);
        nulls_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_last_key_in_synpred31_OracleParser1243);
        last_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_OracleParser

    // $ANTLR start synpred41_OracleParser
    public final void synpred41_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:258:10: ( distinct_key | unique_key | all_key )
        int alt366=3;
        switch ( input.LA(1) ) {
        case SQL92_RESERVED_DISTINCT:
            {
            alt366=1;
            }
            break;
        case SQL92_RESERVED_UNIQUE:
            {
            alt366=2;
            }
            break;
        case SQL92_RESERVED_ALL:
            {
            alt366=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 366, 0, input);

            throw nvae;
        }

        switch (alt366) {
            case 1 :
                // OracleParser.g:258:11: distinct_key
                {
                pushFollow(FOLLOW_distinct_key_in_synpred41_OracleParser1460);
                distinct_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:258:24: unique_key
                {
                pushFollow(FOLLOW_unique_key_in_synpred41_OracleParser1462);
                unique_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // OracleParser.g:258:35: all_key
                {
                pushFollow(FOLLOW_all_key_in_synpred41_OracleParser1464);
                all_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }}
    // $ANTLR end synpred41_OracleParser

    // $ANTLR start synpred47_OracleParser
    public final void synpred47_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:262:9: ( where_clause )
        // OracleParser.g:262:9: where_clause
        {
        pushFollow(FOLLOW_where_clause_in_synpred47_OracleParser1532);
        where_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_OracleParser

    // $ANTLR start synpred48_OracleParser
    public final void synpred48_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:263:9: ( hierarchical_query_clause )
        // OracleParser.g:263:9: hierarchical_query_clause
        {
        pushFollow(FOLLOW_hierarchical_query_clause_in_synpred48_OracleParser1544);
        hierarchical_query_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_OracleParser

    // $ANTLR start synpred49_OracleParser
    public final void synpred49_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:264:9: ( group_by_clause )
        // OracleParser.g:264:9: group_by_clause
        {
        pushFollow(FOLLOW_group_by_clause_in_synpred49_OracleParser1556);
        group_by_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_OracleParser

    // $ANTLR start synpred50_OracleParser
    public final void synpred50_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:265:9: ( model_clause )
        // OracleParser.g:265:9: model_clause
        {
        pushFollow(FOLLOW_model_clause_in_synpred50_OracleParser1567);
        model_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_OracleParser

    // $ANTLR start synpred52_OracleParser
    public final void synpred52_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:282:10: ( tableview_name PERIOD ASTERISK )
        // OracleParser.g:282:11: tableview_name PERIOD ASTERISK
        {
        pushFollow(FOLLOW_tableview_name_in_synpred52_OracleParser1796);
        tableview_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,PERIOD,FOLLOW_PERIOD_in_synpred52_OracleParser1798); if (state.failed) return ;
        match(input,ASTERISK,FOLLOW_ASTERISK_in_synpred52_OracleParser1800); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_OracleParser

    // $ANTLR start synpred53_OracleParser
    public final void synpred53_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:287:21: ( COMMA table_ref )
        // OracleParser.g:287:21: COMMA table_ref
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred53_OracleParser1865); if (state.failed) return ;
        pushFollow(FOLLOW_table_ref_in_synpred53_OracleParser1868);
        table_ref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_OracleParser

    // $ANTLR start synpred54_OracleParser
    public final void synpred54_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:295:24: ( join_clause )
        // OracleParser.g:295:24: join_clause
        {
        pushFollow(FOLLOW_join_clause_in_synpred54_OracleParser1896);
        join_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_OracleParser

    // $ANTLR start synpred55_OracleParser
    public final void synpred55_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:295:38: ( pivot_clause )
        // OracleParser.g:295:38: pivot_clause
        {
        pushFollow(FOLLOW_pivot_clause_in_synpred55_OracleParser1900);
        pivot_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_OracleParser

    // $ANTLR start synpred56_OracleParser
    public final void synpred56_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:295:51: ( unpivot_clause )
        // OracleParser.g:295:51: unpivot_clause
        {
        pushFollow(FOLLOW_unpivot_clause_in_synpred56_OracleParser1902);
        unpivot_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred56_OracleParser

    // $ANTLR start synpred58_OracleParser
    public final void synpred58_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:301:10: ( LEFT_PAREN ( select_key | with_key ) )
        // OracleParser.g:301:11: LEFT_PAREN ( select_key | with_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred58_OracleParser1956); if (state.failed) return ;
        // OracleParser.g:301:22: ( select_key | with_key )
        int alt367=2;
        int LA367_0 = input.LA(1);

        if ( (LA367_0==SQL92_RESERVED_SELECT) ) {
            alt367=1;
        }
        else if ( (LA367_0==SQL92_RESERVED_WITH) ) {
            alt367=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 367, 0, input);

            throw nvae;
        }
        switch (alt367) {
            case 1 :
                // OracleParser.g:301:23: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred58_OracleParser1959);
                select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:301:34: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred58_OracleParser1961);
                with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred58_OracleParser

    // $ANTLR start synpred59_OracleParser
    public final void synpred59_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:301:77: ( pivot_clause )
        // OracleParser.g:301:77: pivot_clause
        {
        pushFollow(FOLLOW_pivot_clause_in_synpred59_OracleParser1970);
        pivot_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_OracleParser

    // $ANTLR start synpred60_OracleParser
    public final void synpred60_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:301:90: ( unpivot_clause )
        // OracleParser.g:301:90: unpivot_clause
        {
        pushFollow(FOLLOW_unpivot_clause_in_synpred60_OracleParser1972);
        unpivot_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_OracleParser

    // $ANTLR start synpred61_OracleParser
    public final void synpred61_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:302:10: ( LEFT_PAREN )
        // OracleParser.g:302:11: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred61_OracleParser1986); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_OracleParser

    // $ANTLR start synpred63_OracleParser
    public final void synpred63_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:302:85: ( pivot_clause )
        // OracleParser.g:302:85: pivot_clause
        {
        pushFollow(FOLLOW_pivot_clause_in_synpred63_OracleParser2001);
        pivot_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_OracleParser

    // $ANTLR start synpred64_OracleParser
    public final void synpred64_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:302:98: ( unpivot_clause )
        // OracleParser.g:302:98: unpivot_clause
        {
        pushFollow(FOLLOW_unpivot_clause_in_synpred64_OracleParser2003);
        unpivot_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred64_OracleParser

    // $ANTLR start synpred65_OracleParser
    public final void synpred65_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:303:10: ( only_key LEFT_PAREN )
        // OracleParser.g:303:11: only_key LEFT_PAREN
        {
        pushFollow(FOLLOW_only_key_in_synpred65_OracleParser2017);
        only_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred65_OracleParser2019); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred65_OracleParser

    // $ANTLR start synpred66_OracleParser
    public final void synpred66_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:304:39: ( pivot_clause )
        // OracleParser.g:304:39: pivot_clause
        {
        pushFollow(FOLLOW_pivot_clause_in_synpred66_OracleParser2044);
        pivot_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred66_OracleParser

    // $ANTLR start synpred67_OracleParser
    public final void synpred67_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:304:52: ( unpivot_clause )
        // OracleParser.g:304:52: unpivot_clause
        {
        pushFollow(FOLLOW_unpivot_clause_in_synpred67_OracleParser2046);
        unpivot_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred67_OracleParser

    // $ANTLR start synpred68_OracleParser
    public final void synpred68_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:306:9: ( flashback_query_clause )
        // OracleParser.g:306:9: flashback_query_clause
        {
        pushFollow(FOLLOW_flashback_query_clause_in_synpred68_OracleParser2064);
        flashback_query_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_OracleParser

    // $ANTLR start synpred69_OracleParser
    public final void synpred69_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:307:10: ({...}? table_alias )
        // OracleParser.g:307:10: {...}? table_alias
        {
        if ( !((isTableAlias())) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred69_OracleParser", "isTableAlias()");
        }
        pushFollow(FOLLOW_table_alias_in_synpred69_OracleParser2078);
        table_alias();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_OracleParser

    // $ANTLR start synpred70_OracleParser
    public final void synpred70_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:312:10: ( query_partition_clause )
        // OracleParser.g:312:10: query_partition_clause
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred70_OracleParser2138);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred70_OracleParser

    // $ANTLR start synpred73_OracleParser
    public final void synpred73_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:315:9: ( query_partition_clause )
        // OracleParser.g:315:9: query_partition_clause
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred73_OracleParser2175);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_OracleParser

    // $ANTLR start synpred74_OracleParser
    public final void synpred74_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:316:10: ( join_on_part )
        // OracleParser.g:316:10: join_on_part
        {
        pushFollow(FOLLOW_join_on_part_in_synpred74_OracleParser2187);
        join_on_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_OracleParser

    // $ANTLR start synpred75_OracleParser
    public final void synpred75_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:317:10: ( join_using_part )
        // OracleParser.g:317:10: join_using_part
        {
        pushFollow(FOLLOW_join_using_part_in_synpred75_OracleParser2198);
        join_using_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred75_OracleParser

    // $ANTLR start synpred83_OracleParser
    public final void synpred83_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:349:10: ( LEFT_PAREN ( select_key | with_key ) )
        // OracleParser.g:349:11: LEFT_PAREN ( select_key | with_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred83_OracleParser2462); if (state.failed) return ;
        // OracleParser.g:349:22: ( select_key | with_key )
        int alt368=2;
        int LA368_0 = input.LA(1);

        if ( (LA368_0==SQL92_RESERVED_SELECT) ) {
            alt368=1;
        }
        else if ( (LA368_0==SQL92_RESERVED_WITH) ) {
            alt368=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 368, 0, input);

            throw nvae;
        }
        switch (alt368) {
            case 1 :
                // OracleParser.g:349:23: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred83_OracleParser2465);
                select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:349:34: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred83_OracleParser2467);
                with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred83_OracleParser

    // $ANTLR start synpred84_OracleParser
    public final void synpred84_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:350:10: ( LEFT_PAREN )
        // OracleParser.g:350:11: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred84_OracleParser2489); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_OracleParser

    // $ANTLR start synpred85_OracleParser
    public final void synpred85_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:351:22: ( COMMA expression )
        // OracleParser.g:351:22: COMMA expression
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred85_OracleParser2507); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred85_OracleParser2509);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_OracleParser

    // $ANTLR start synpred86_OracleParser
    public final void synpred86_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:357:36: ( scn_key )
        // OracleParser.g:357:36: scn_key
        {
        pushFollow(FOLLOW_scn_key_in_synpred86_OracleParser2566);
        scn_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_OracleParser

    // $ANTLR start synpred87_OracleParser
    public final void synpred87_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:357:10: ( versions_key between_key ( scn_key | timestamp_key ) expression )
        // OracleParser.g:357:10: versions_key between_key ( scn_key | timestamp_key ) expression
        {
        pushFollow(FOLLOW_versions_key_in_synpred87_OracleParser2561);
        versions_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_between_key_in_synpred87_OracleParser2563);
        between_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:357:35: ( scn_key | timestamp_key )
        int alt369=2;
        int LA369_0 = input.LA(1);

        if ( (LA369_0==REGULAR_ID) ) {
            int LA369_1 = input.LA(2);

            if ( ((synpred86_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("scn")))) ) {
                alt369=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("timestamp"))) ) {
                alt369=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 369, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 369, 0, input);

            throw nvae;
        }
        switch (alt369) {
            case 1 :
                // OracleParser.g:357:36: scn_key
                {
                pushFollow(FOLLOW_scn_key_in_synpred87_OracleParser2566);
                scn_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:357:44: timestamp_key
                {
                pushFollow(FOLLOW_timestamp_key_in_synpred87_OracleParser2568);
                timestamp_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_expression_in_synpred87_OracleParser2571);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_OracleParser

    // $ANTLR start synpred88_OracleParser
    public final void synpred88_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:358:25: ( scn_key )
        // OracleParser.g:358:25: scn_key
        {
        pushFollow(FOLLOW_scn_key_in_synpred88_OracleParser2606);
        scn_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_OracleParser

    // $ANTLR start synpred89_OracleParser
    public final void synpred89_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:358:33: ( timestamp_key )
        // OracleParser.g:358:33: timestamp_key
        {
        pushFollow(FOLLOW_timestamp_key_in_synpred89_OracleParser2608);
        timestamp_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_OracleParser

    // $ANTLR start synpred90_OracleParser
    public final void synpred90_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:362:20: ( xml_key )
        // OracleParser.g:362:20: xml_key
        {
        pushFollow(FOLLOW_xml_key_in_synpred90_OracleParser2656);
        xml_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_OracleParser

    // $ANTLR start synpred95_OracleParser
    public final void synpred95_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:388:18: ( select_key )
        // OracleParser.g:388:19: select_key
        {
        pushFollow(FOLLOW_select_key_in_synpred95_OracleParser2957);
        select_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_OracleParser

    // $ANTLR start synpred96_OracleParser
    public final void synpred96_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:389:18: ( any_key )
        // OracleParser.g:389:19: any_key
        {
        pushFollow(FOLLOW_any_key_in_synpred96_OracleParser2983);
        any_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_OracleParser

    // $ANTLR start synpred100_OracleParser
    public final void synpred100_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:404:10: ( expression )
        // OracleParser.g:404:10: expression
        {
        pushFollow(FOLLOW_expression_in_synpred100_OracleParser3168);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_OracleParser

    // $ANTLR start synpred101_OracleParser
    public final void synpred101_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:405:10: ( LEFT_PAREN )
        // OracleParser.g:405:11: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred101_OracleParser3188); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_OracleParser

    // $ANTLR start synpred102_OracleParser
    public final void synpred102_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:410:11: ( include_key )
        // OracleParser.g:410:11: include_key
        {
        pushFollow(FOLLOW_include_key_in_synpred102_OracleParser3225);
        include_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_OracleParser

    // $ANTLR start synpred103_OracleParser
    public final void synpred103_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:410:10: ( ( include_key | exclude_key ) nulls_key )
        // OracleParser.g:410:10: ( include_key | exclude_key ) nulls_key
        {
        // OracleParser.g:410:10: ( include_key | exclude_key )
        int alt370=2;
        int LA370_0 = input.LA(1);

        if ( (LA370_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("exclude")))) {
            int LA370_1 = input.LA(2);

            if ( ((synpred102_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("include")))) ) {
                alt370=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("exclude"))) ) {
                alt370=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 370, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 370, 0, input);

            throw nvae;
        }
        switch (alt370) {
            case 1 :
                // OracleParser.g:410:11: include_key
                {
                pushFollow(FOLLOW_include_key_in_synpred103_OracleParser3225);
                include_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:410:23: exclude_key
                {
                pushFollow(FOLLOW_exclude_key_in_synpred103_OracleParser3227);
                exclude_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_nulls_key_in_synpred103_OracleParser3230);
        nulls_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_OracleParser

    // $ANTLR start synpred110_OracleParser
    public final void synpred110_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:434:14: ( constant )
        // OracleParser.g:434:14: constant
        {
        pushFollow(FOLLOW_constant_in_synpred110_OracleParser3546);
        constant();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_OracleParser

    // $ANTLR start synpred111_OracleParser
    public final void synpred111_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:435:14: ( LEFT_PAREN )
        // OracleParser.g:435:15: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred111_OracleParser3562); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred111_OracleParser

    // $ANTLR start synpred114_OracleParser
    public final void synpred114_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:442:29: ( nocycle_key )
        // OracleParser.g:442:29: nocycle_key
        {
        pushFollow(FOLLOW_nocycle_key_in_synpred114_OracleParser3642);
        nocycle_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_OracleParser

    // $ANTLR start synpred115_OracleParser
    public final void synpred115_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:442:52: ( start_part )
        // OracleParser.g:442:52: start_part
        {
        pushFollow(FOLLOW_start_part_in_synpred115_OracleParser3647);
        start_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_OracleParser

    // $ANTLR start synpred117_OracleParser
    public final void synpred117_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:444:40: ( nocycle_key )
        // OracleParser.g:444:40: nocycle_key
        {
        pushFollow(FOLLOW_nocycle_key_in_synpred117_OracleParser3695);
        nocycle_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_OracleParser

    // $ANTLR start synpred118_OracleParser
    public final void synpred118_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:454:10: ( group_key )
        // OracleParser.g:454:11: group_key
        {
        pushFollow(FOLLOW_group_key_in_synpred118_OracleParser3792);
        group_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred118_OracleParser

    // $ANTLR start synpred119_OracleParser
    public final void synpred119_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:454:61: ( COMMA group_by_elements )
        // OracleParser.g:454:62: COMMA group_by_elements
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred119_OracleParser3805); if (state.failed) return ;
        pushFollow(FOLLOW_group_by_elements_in_synpred119_OracleParser3807);
        group_by_elements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_OracleParser

    // $ANTLR start synpred120_OracleParser
    public final void synpred120_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:454:115: ( having_clause )
        // OracleParser.g:454:115: having_clause
        {
        pushFollow(FOLLOW_having_clause_in_synpred120_OracleParser3817);
        having_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_OracleParser

    // $ANTLR start synpred121_OracleParser
    public final void synpred121_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:456:10: ( having_key )
        // OracleParser.g:456:11: having_key
        {
        pushFollow(FOLLOW_having_key_in_synpred121_OracleParser3855);
        having_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_OracleParser

    // $ANTLR start synpred122_OracleParser
    public final void synpred122_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:456:77: ( COMMA group_by_elements )
        // OracleParser.g:456:78: COMMA group_by_elements
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred122_OracleParser3871); if (state.failed) return ;
        pushFollow(FOLLOW_group_by_elements_in_synpred122_OracleParser3873);
        group_by_elements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_OracleParser

    // $ANTLR start synpred123_OracleParser
    public final void synpred123_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:456:41: ( group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )
        // OracleParser.g:456:41: group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
        {
        pushFollow(FOLLOW_group_key_in_synpred123_OracleParser3863);
        group_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_by_key_in_synpred123_OracleParser3865);
        by_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_group_by_elements_in_synpred123_OracleParser3867);
        group_by_elements();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:456:76: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
        loop376:
        do {
            int alt376=2;
            int LA376_0 = input.LA(1);

            if ( (LA376_0==COMMA) && (synpred122_OracleParser())) {
                alt376=1;
            }


            switch (alt376) {
        	case 1 :
        	    // OracleParser.g:456:77: ( COMMA group_by_elements )=> COMMA group_by_elements
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred123_OracleParser3877); if (state.failed) return ;
        	    pushFollow(FOLLOW_group_by_elements_in_synpred123_OracleParser3879);
        	    group_by_elements();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop376;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred123_OracleParser

    // $ANTLR start synpred124_OracleParser
    public final void synpred124_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:461:10: ( grouping_sets_clause )
        // OracleParser.g:461:10: grouping_sets_clause
        {
        pushFollow(FOLLOW_grouping_sets_clause_in_synpred124_OracleParser3927);
        grouping_sets_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_OracleParser

    // $ANTLR start synpred125_OracleParser
    public final void synpred125_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:462:10: ( rollup_cube_clause )
        // OracleParser.g:462:10: rollup_cube_clause
        {
        pushFollow(FOLLOW_rollup_cube_clause_in_synpred125_OracleParser3938);
        rollup_cube_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_OracleParser

    // $ANTLR start synpred126_OracleParser
    public final void synpred126_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:467:11: ( rollup_key )
        // OracleParser.g:467:11: rollup_key
        {
        pushFollow(FOLLOW_rollup_key_in_synpred126_OracleParser3979);
        rollup_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_OracleParser

    // $ANTLR start synpred129_OracleParser
    public final void synpred129_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:477:11: ( rollup_key )
        // OracleParser.g:477:11: rollup_key
        {
        pushFollow(FOLLOW_rollup_key_in_synpred129_OracleParser4087);
        rollup_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_OracleParser

    // $ANTLR start synpred130_OracleParser
    public final void synpred130_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:477:10: ( rollup_key | cube_key )
        int alt377=2;
        int LA377_0 = input.LA(1);

        if ( (LA377_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("cube")))) {
            int LA377_1 = input.LA(2);

            if ( ((synpred129_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("rollup")))) ) {
                alt377=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("cube"))) ) {
                alt377=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 377, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 377, 0, input);

            throw nvae;
        }
        switch (alt377) {
            case 1 :
                // OracleParser.g:477:11: rollup_key
                {
                pushFollow(FOLLOW_rollup_key_in_synpred130_OracleParser4087);
                rollup_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:477:22: cube_key
                {
                pushFollow(FOLLOW_cube_key_in_synpred130_OracleParser4089);
                cube_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }}
    // $ANTLR end synpred130_OracleParser

    // $ANTLR start synpred131_OracleParser
    public final void synpred131_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:478:10: ( LEFT_PAREN )
        // OracleParser.g:478:11: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred131_OracleParser4105); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred131_OracleParser

    // $ANTLR start synpred132_OracleParser
    public final void synpred132_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:488:20: ( cell_reference_options )
        // OracleParser.g:488:20: cell_reference_options
        {
        pushFollow(FOLLOW_cell_reference_options_in_synpred132_OracleParser4192);
        cell_reference_options();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_OracleParser

    // $ANTLR start synpred134_OracleParser
    public final void synpred134_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:488:64: ( reference_model )
        // OracleParser.g:488:64: reference_model
        {
        pushFollow(FOLLOW_reference_model_in_synpred134_OracleParser4198);
        reference_model();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred134_OracleParser

    // $ANTLR start synpred135_OracleParser
    public final void synpred135_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:493:11: ( ignore_key )
        // OracleParser.g:493:11: ignore_key
        {
        pushFollow(FOLLOW_ignore_key_in_synpred135_OracleParser4247);
        ignore_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred135_OracleParser

    // $ANTLR start synpred136_OracleParser
    public final void synpred136_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:493:10: ( ( ignore_key | keep_key ) nav_key )
        // OracleParser.g:493:10: ( ignore_key | keep_key ) nav_key
        {
        // OracleParser.g:493:10: ( ignore_key | keep_key )
        int alt378=2;
        int LA378_0 = input.LA(1);

        if ( (LA378_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("keep")))) {
            int LA378_1 = input.LA(2);

            if ( ((synpred135_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("ignore")))) ) {
                alt378=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("keep"))) ) {
                alt378=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 378, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 378, 0, input);

            throw nvae;
        }
        switch (alt378) {
            case 1 :
                // OracleParser.g:493:11: ignore_key
                {
                pushFollow(FOLLOW_ignore_key_in_synpred136_OracleParser4247);
                ignore_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:493:23: keep_key
                {
                pushFollow(FOLLOW_keep_key_in_synpred136_OracleParser4250);
                keep_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_nav_key_in_synpred136_OracleParser4254);
        nav_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_OracleParser

    // $ANTLR start synpred137_OracleParser
    public final void synpred137_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:494:23: ( dimension_key )
        // OracleParser.g:494:23: dimension_key
        {
        pushFollow(FOLLOW_dimension_key_in_synpred137_OracleParser4269);
        dimension_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred137_OracleParser

    // $ANTLR start synpred138_OracleParser
    public final void synpred138_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:498:23: ( updated_key )
        // OracleParser.g:498:23: updated_key
        {
        pushFollow(FOLLOW_updated_key_in_synpred138_OracleParser4300);
        updated_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred138_OracleParser

    // $ANTLR start synpred139_OracleParser
    public final void synpred139_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:504:13: ( cell_reference_options )
        // OracleParser.g:504:13: cell_reference_options
        {
        pushFollow(FOLLOW_cell_reference_options_in_synpred139_OracleParser4370);
        cell_reference_options();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred139_OracleParser

    // $ANTLR start synpred140_OracleParser
    public final void synpred140_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:508:11: ( main_key main_model_name )
        // OracleParser.g:508:11: main_key main_model_name
        {
        pushFollow(FOLLOW_main_key_in_synpred140_OracleParser4392);
        main_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_main_model_name_in_synpred140_OracleParser4394);
        main_model_name();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred140_OracleParser

    // $ANTLR start synpred141_OracleParser
    public final void synpred141_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:508:59: ( cell_reference_options )
        // OracleParser.g:508:59: cell_reference_options
        {
        pushFollow(FOLLOW_cell_reference_options_in_synpred141_OracleParser4400);
        cell_reference_options();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_OracleParser

    // $ANTLR start synpred142_OracleParser
    public final void synpred142_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:513:10: ( model_column_partition_part )
        // OracleParser.g:513:10: model_column_partition_part
        {
        pushFollow(FOLLOW_model_column_partition_part_in_synpred142_OracleParser4447);
        model_column_partition_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_OracleParser

    // $ANTLR start synpred145_OracleParser
    public final void synpred145_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:533:10: ( model_rules_part )
        // OracleParser.g:533:10: model_rules_part
        {
        pushFollow(FOLLOW_model_rules_part_in_synpred145_OracleParser4636);
        model_rules_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_OracleParser

    // $ANTLR start synpred149_OracleParser
    public final void synpred149_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:538:32: ( upsert_key ( all_key )? )
        // OracleParser.g:538:32: upsert_key ( all_key )?
        {
        pushFollow(FOLLOW_upsert_key_in_synpred149_OracleParser4695);
        upsert_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:538:43: ( all_key )?
        int alt379=2;
        int LA379_0 = input.LA(1);

        if ( (LA379_0==SQL92_RESERVED_ALL) ) {
            alt379=1;
        }
        switch (alt379) {
            case 1 :
                // OracleParser.g:0:0: all_key
                {
                pushFollow(FOLLOW_all_key_in_synpred149_OracleParser4697);
                all_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred149_OracleParser

    // $ANTLR start synpred150_OracleParser
    public final void synpred150_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:538:56: ( automatic_key )
        // OracleParser.g:538:56: automatic_key
        {
        pushFollow(FOLLOW_automatic_key_in_synpred150_OracleParser4704);
        automatic_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred150_OracleParser

    // $ANTLR start synpred151_OracleParser
    public final void synpred151_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:538:55: ( ( automatic_key | sequential_key ) order_key )
        // OracleParser.g:538:55: ( automatic_key | sequential_key ) order_key
        {
        // OracleParser.g:538:55: ( automatic_key | sequential_key )
        int alt380=2;
        int LA380_0 = input.LA(1);

        if ( (LA380_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("sequential")))) {
            int LA380_1 = input.LA(2);

            if ( ((synpred150_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("automatic")))) ) {
                alt380=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("sequential"))) ) {
                alt380=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 380, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 380, 0, input);

            throw nvae;
        }
        switch (alt380) {
            case 1 :
                // OracleParser.g:538:56: automatic_key
                {
                pushFollow(FOLLOW_automatic_key_in_synpred151_OracleParser4704);
                automatic_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:538:70: sequential_key
                {
                pushFollow(FOLLOW_sequential_key_in_synpred151_OracleParser4706);
                sequential_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_order_key_in_synpred151_OracleParser4709);
        order_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_OracleParser

    // $ANTLR start synpred152_OracleParser
    public final void synpred152_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:538:98: ( model_iterate_clause )
        // OracleParser.g:538:98: model_iterate_clause
        {
        pushFollow(FOLLOW_model_iterate_clause_in_synpred152_OracleParser4713);
        model_iterate_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_OracleParser

    // $ANTLR start synpred154_OracleParser
    public final void synpred154_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:543:34: ( all_key )
        // OracleParser.g:543:35: all_key
        {
        pushFollow(FOLLOW_all_key_in_synpred154_OracleParser4773);
        all_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_OracleParser

    // $ANTLR start synpred155_OracleParser
    public final void synpred155_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:543:22: ( upsert_key ( ( all_key )=> all_key )? )
        // OracleParser.g:543:22: upsert_key ( ( all_key )=> all_key )?
        {
        pushFollow(FOLLOW_upsert_key_in_synpred155_OracleParser4769);
        upsert_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:543:33: ( ( all_key )=> all_key )?
        int alt381=2;
        int LA381_0 = input.LA(1);

        if ( (LA381_0==SQL92_RESERVED_ALL) && (synpred154_OracleParser())) {
            alt381=1;
        }
        switch (alt381) {
            case 1 :
                // OracleParser.g:543:34: ( all_key )=> all_key
                {
                pushFollow(FOLLOW_all_key_in_synpred155_OracleParser4777);
                all_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred155_OracleParser

    // $ANTLR start synpred157_OracleParser
    public final void synpred157_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:555:56: ( until_part )
        // OracleParser.g:555:56: until_part
        {
        pushFollow(FOLLOW_until_part_in_synpred157_OracleParser4913);
        until_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_OracleParser

    // $ANTLR start synpred158_OracleParser
    public final void synpred158_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:565:20: ( siblings_key )
        // OracleParser.g:565:20: siblings_key
        {
        pushFollow(FOLLOW_siblings_key_in_synpred158_OracleParser5004);
        siblings_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_OracleParser

    // $ANTLR start synpred162_OracleParser
    public final void synpred162_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:570:53: ( first_key )
        // OracleParser.g:570:53: first_key
        {
        pushFollow(FOLLOW_first_key_in_synpred162_OracleParser5073);
        first_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_OracleParser

    // $ANTLR start synpred163_OracleParser
    public final void synpred163_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:570:42: ( nulls_key ( first_key | last_key ) )
        // OracleParser.g:570:42: nulls_key ( first_key | last_key )
        {
        pushFollow(FOLLOW_nulls_key_in_synpred163_OracleParser5070);
        nulls_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:570:52: ( first_key | last_key )
        int alt382=2;
        int LA382_0 = input.LA(1);

        if ( (LA382_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("last")))) {
            int LA382_1 = input.LA(2);

            if ( ((synpred162_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first")))) ) {
                alt382=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("last"))) ) {
                alt382=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 382, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 382, 0, input);

            throw nvae;
        }
        switch (alt382) {
            case 1 :
                // OracleParser.g:570:53: first_key
                {
                pushFollow(FOLLOW_first_key_in_synpred163_OracleParser5073);
                first_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:570:63: last_key
                {
                pushFollow(FOLLOW_last_key_in_synpred163_OracleParser5075);
                last_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred163_OracleParser

    // $ANTLR start synpred165_OracleParser
    public final void synpred165_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:575:49: ( for_update_options )
        // OracleParser.g:575:49: for_update_options
        {
        pushFollow(FOLLOW_for_update_options_in_synpred165_OracleParser5140);
        for_update_options();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_OracleParser

    // $ANTLR start synpred167_OracleParser
    public final void synpred167_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:584:10: ( skip_key locked_key )
        // OracleParser.g:584:10: skip_key locked_key
        {
        pushFollow(FOLLOW_skip_key_in_synpred167_OracleParser5212);
        skip_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_locked_key_in_synpred167_OracleParser5214);
        locked_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred167_OracleParser

    // $ANTLR start synpred170_OracleParser
    public final void synpred170_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:594:23: ( static_returning_clause )
        // OracleParser.g:594:23: static_returning_clause
        {
        pushFollow(FOLLOW_static_returning_clause_in_synpred170_OracleParser5298);
        static_returning_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred170_OracleParser

    // $ANTLR start synpred171_OracleParser
    public final void synpred171_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:594:48: ( error_logging_clause )
        // OracleParser.g:594:48: error_logging_clause
        {
        pushFollow(FOLLOW_error_logging_clause_in_synpred171_OracleParser5301);
        error_logging_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_OracleParser

    // $ANTLR start synpred178_OracleParser
    public final void synpred178_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:619:23: ( static_returning_clause )
        // OracleParser.g:619:23: static_returning_clause
        {
        pushFollow(FOLLOW_static_returning_clause_in_synpred178_OracleParser5568);
        static_returning_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_OracleParser

    // $ANTLR start synpred179_OracleParser
    public final void synpred179_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:619:48: ( error_logging_clause )
        // OracleParser.g:619:48: error_logging_clause
        {
        pushFollow(FOLLOW_error_logging_clause_in_synpred179_OracleParser5571);
        error_logging_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_OracleParser

    // $ANTLR start synpred181_OracleParser
    public final void synpred181_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:634:24: ( static_returning_clause )
        // OracleParser.g:634:24: static_returning_clause
        {
        pushFollow(FOLLOW_static_returning_clause_in_synpred181_OracleParser5690);
        static_returning_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_OracleParser

    // $ANTLR start synpred183_OracleParser
    public final void synpred183_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:637:9: ( error_logging_clause )
        // OracleParser.g:637:9: error_logging_clause
        {
        pushFollow(FOLLOW_error_logging_clause_in_synpred183_OracleParser5718);
        error_logging_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_OracleParser

    // $ANTLR start synpred187_OracleParser
    public final void synpred187_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:651:44: ( error_logging_clause )
        // OracleParser.g:651:44: error_logging_clause
        {
        pushFollow(FOLLOW_error_logging_clause_in_synpred187_OracleParser5854);
        error_logging_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_OracleParser

    // $ANTLR start synpred189_OracleParser
    public final void synpred189_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:656:19: ( first_key )
        // OracleParser.g:656:19: first_key
        {
        pushFollow(FOLLOW_first_key_in_synpred189_OracleParser5900);
        first_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_OracleParser

    // $ANTLR start synpred197_OracleParser
    public final void synpred197_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:685:13: ( when_key matched_key )
        // OracleParser.g:685:14: when_key matched_key
        {
        pushFollow(FOLLOW_when_key_in_synpred197_OracleParser6183);
        when_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_matched_key_in_synpred197_OracleParser6185);
        matched_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_OracleParser

    // $ANTLR start synpred199_OracleParser
    public final void synpred199_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:687:13: ( when_key not_key matched_key )
        // OracleParser.g:687:14: when_key not_key matched_key
        {
        pushFollow(FOLLOW_when_key_in_synpred199_OracleParser6218);
        when_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_not_key_in_synpred199_OracleParser6220);
        not_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_matched_key_in_synpred199_OracleParser6222);
        matched_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_OracleParser

    // $ANTLR start synpred201_OracleParser
    public final void synpred201_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:689:9: ( error_logging_clause )
        // OracleParser.g:689:9: error_logging_clause
        {
        pushFollow(FOLLOW_error_logging_clause_in_synpred201_OracleParser6251);
        error_logging_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_OracleParser

    // $ANTLR start synpred212_OracleParser
    public final void synpred212_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:734:10: ( wait_key expression )
        // OracleParser.g:734:10: wait_key expression
        {
        pushFollow(FOLLOW_wait_key_in_synpred212_OracleParser6717);
        wait_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred212_OracleParser6719);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_OracleParser

    // $ANTLR start synpred213_OracleParser
    public final void synpred213_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:741:25: ( partition_extension_clause )
        // OracleParser.g:741:25: partition_extension_clause
        {
        pushFollow(FOLLOW_partition_extension_clause_in_synpred213_OracleParser6766);
        partition_extension_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_OracleParser

    // $ANTLR start synpred219_OracleParser
    public final void synpred219_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:757:15: ( dml_table_expression_clause )
        // OracleParser.g:757:15: dml_table_expression_clause
        {
        pushFollow(FOLLOW_dml_table_expression_clause_in_synpred219_OracleParser6889);
        dml_table_expression_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred219_OracleParser

    // $ANTLR start synpred220_OracleParser
    public final void synpred220_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:759:14: ( table_alias )
        // OracleParser.g:759:14: table_alias
        {
        pushFollow(FOLLOW_table_alias_in_synpred220_OracleParser6925);
        table_alias();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred220_OracleParser

    // $ANTLR start synpred221_OracleParser
    public final void synpred221_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:764:11: ( returning_key )
        // OracleParser.g:764:11: returning_key
        {
        pushFollow(FOLLOW_returning_key_in_synpred221_OracleParser6969);
        returning_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_OracleParser

    // $ANTLR start synpred223_OracleParser
    public final void synpred223_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:771:9: ( error_logging_into_part )
        // OracleParser.g:771:9: error_logging_into_part
        {
        pushFollow(FOLLOW_error_logging_into_part_in_synpred223_OracleParser7048);
        error_logging_into_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_OracleParser

    // $ANTLR start synpred224_OracleParser
    public final void synpred224_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:772:10: ( LEFT_PAREN )
        // OracleParser.g:772:11: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred224_OracleParser7061); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred224_OracleParser

    // $ANTLR start synpred225_OracleParser
    public final void synpred225_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:773:9: ( error_logging_reject_part )
        // OracleParser.g:773:9: error_logging_reject_part
        {
        pushFollow(FOLLOW_error_logging_reject_part_in_synpred225_OracleParser7077);
        error_logging_reject_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred225_OracleParser

    // $ANTLR start synpred226_OracleParser
    public final void synpred226_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:782:34: ( unlimited_key )
        // OracleParser.g:782:35: unlimited_key
        {
        pushFollow(FOLLOW_unlimited_key_in_synpred226_OracleParser7152);
        unlimited_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_OracleParser

    // $ANTLR start synpred230_OracleParser
    public final void synpred230_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:788:25: ( sample_clause )
        // OracleParser.g:788:25: sample_clause
        {
        pushFollow(FOLLOW_sample_clause_in_synpred230_OracleParser7236);
        sample_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_OracleParser

    // $ANTLR start synpred233_OracleParser
    public final void synpred233_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:793:12: ( LEFT_PAREN ( select_key | with_key ) )
        // OracleParser.g:793:13: LEFT_PAREN ( select_key | with_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred233_OracleParser7293); if (state.failed) return ;
        // OracleParser.g:793:24: ( select_key | with_key )
        int alt390=2;
        int LA390_0 = input.LA(1);

        if ( (LA390_0==SQL92_RESERVED_SELECT) ) {
            alt390=1;
        }
        else if ( (LA390_0==SQL92_RESERVED_WITH) ) {
            alt390=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 390, 0, input);

            throw nvae;
        }
        switch (alt390) {
            case 1 :
                // OracleParser.g:793:25: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred233_OracleParser7296);
                select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:793:38: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred233_OracleParser7300);
                with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred233_OracleParser

    // $ANTLR start synpred234_OracleParser
    public final void synpred234_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:801:10: ( read_key only_key )
        // OracleParser.g:801:10: read_key only_key
        {
        pushFollow(FOLLOW_read_key_in_synpred234_OracleParser7391);
        read_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_only_key_in_synpred234_OracleParser7393);
        only_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_OracleParser

    // $ANTLR start synpred235_OracleParser
    public final void synpred235_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:802:32: ( constraint_key constraint_name )
        // OracleParser.g:802:32: constraint_key constraint_name
        {
        pushFollow(FOLLOW_constraint_key_in_synpred235_OracleParser7409);
        constraint_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_constraint_name_in_synpred235_OracleParser7411);
        constraint_name();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_OracleParser

    // $ANTLR start synpred236_OracleParser
    public final void synpred236_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:808:21: ( block_key )
        // OracleParser.g:808:21: block_key
        {
        pushFollow(FOLLOW_block_key_in_synpred236_OracleParser7464);
        block_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_OracleParser

    // $ANTLR start synpred238_OracleParser
    public final void synpred238_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:810:9: ( seed_part )
        // OracleParser.g:810:9: seed_part
        {
        pushFollow(FOLLOW_seed_part_in_synpred238_OracleParser7501);
        seed_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_OracleParser

    // $ANTLR start synpred242_OracleParser
    public final void synpred242_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:841:10: ( cursor_key LEFT_PAREN ( select_key | with_key ) )
        // OracleParser.g:841:11: cursor_key LEFT_PAREN ( select_key | with_key )
        {
        pushFollow(FOLLOW_cursor_key_in_synpred242_OracleParser7743);
        cursor_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred242_OracleParser7745); if (state.failed) return ;
        // OracleParser.g:841:33: ( select_key | with_key )
        int alt391=2;
        int LA391_0 = input.LA(1);

        if ( (LA391_0==SQL92_RESERVED_SELECT) ) {
            alt391=1;
        }
        else if ( (LA391_0==SQL92_RESERVED_WITH) ) {
            alt391=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 391, 0, input);

            throw nvae;
        }
        switch (alt391) {
            case 1 :
                // OracleParser.g:841:34: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred242_OracleParser7748);
                select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:841:45: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred242_OracleParser7750);
                with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred242_OracleParser

    // $ANTLR start synpred243_OracleParser
    public final void synpred243_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:842:35: ( or_key logical_and_expression )
        // OracleParser.g:842:35: or_key logical_and_expression
        {
        pushFollow(FOLLOW_or_key_in_synpred243_OracleParser7771);
        or_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_logical_and_expression_in_synpred243_OracleParser7774);
        logical_and_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_OracleParser

    // $ANTLR start synpred244_OracleParser
    public final void synpred244_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:851:31: ( and_key negated_expression )
        // OracleParser.g:851:31: and_key negated_expression
        {
        pushFollow(FOLLOW_and_key_in_synpred244_OracleParser7837);
        and_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_negated_expression_in_synpred244_OracleParser7840);
        negated_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_OracleParser

    // $ANTLR start synpred248_OracleParser
    public final void synpred248_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:866:14: ( nan_key )
        // OracleParser.g:866:14: nan_key
        {
        pushFollow(FOLLOW_nan_key_in_synpred248_OracleParser8011);
        nan_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_OracleParser

    // $ANTLR start synpred249_OracleParser
    public final void synpred249_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:869:14: ( present_key )
        // OracleParser.g:869:14: present_key
        {
        pushFollow(FOLLOW_present_key_in_synpred249_OracleParser8078);
        present_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_OracleParser

    // $ANTLR start synpred250_OracleParser
    public final void synpred250_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:872:14: ( infinite_key )
        // OracleParser.g:872:14: infinite_key
        {
        pushFollow(FOLLOW_infinite_key_in_synpred250_OracleParser8145);
        infinite_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_OracleParser

    // $ANTLR start synpred251_OracleParser
    public final void synpred251_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:875:14: ( a_key set_key )
        // OracleParser.g:875:14: a_key set_key
        {
        pushFollow(FOLLOW_a_key_in_synpred251_OracleParser8212);
        a_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_set_key_in_synpred251_OracleParser8214);
        set_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_OracleParser

    // $ANTLR start synpred252_OracleParser
    public final void synpred252_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:878:14: ( empty_key )
        // OracleParser.g:878:14: empty_key
        {
        pushFollow(FOLLOW_empty_key_in_synpred252_OracleParser8281);
        empty_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_OracleParser

    // $ANTLR start synpred253_OracleParser
    public final void synpred253_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:881:21: ( type_key )
        // OracleParser.g:881:21: type_key
        {
        pushFollow(FOLLOW_type_key_in_synpred253_OracleParser8350);
        type_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_OracleParser

    // $ANTLR start synpred254_OracleParser
    public final void synpred254_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:881:42: ( only_key )
        // OracleParser.g:881:42: only_key
        {
        pushFollow(FOLLOW_only_key_in_synpred254_OracleParser8355);
        only_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_OracleParser

    // $ANTLR start synpred256_OracleParser
    public final void synpred256_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:862:10: ( is_key ( not_key )? ( null_key | nan_key | present_key | infinite_key | a_key set_key | empty_key | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN ) )
        // OracleParser.g:862:10: is_key ( not_key )? ( null_key | nan_key | present_key | infinite_key | a_key set_key | empty_key | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN )
        {
        pushFollow(FOLLOW_is_key_in_synpred256_OracleParser7922);
        is_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:862:17: ( not_key )?
        int alt392=2;
        int LA392_0 = input.LA(1);

        if ( (LA392_0==SQL92_RESERVED_NOT) ) {
            alt392=1;
        }
        switch (alt392) {
            case 1 :
                // OracleParser.g:862:18: not_key
                {
                pushFollow(FOLLOW_not_key_in_synpred256_OracleParser7925);
                not_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // OracleParser.g:863:9: ( null_key | nan_key | present_key | infinite_key | a_key set_key | empty_key | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN )
        int alt396=7;
        switch ( input.LA(1) ) {
        case SQL92_RESERVED_NULL:
            {
            alt396=1;
            }
            break;
        case REGULAR_ID:
            {
            int LA396_2 = input.LA(2);

            if ( (LA396_2==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("a")))) {
                alt396=5;
            }
            else if ( ((synpred248_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("nan")))) ) {
                alt396=2;
            }
            else if ( ((synpred249_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("present")))) ) {
                alt396=3;
            }
            else if ( ((synpred250_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("infinite")))) ) {
                alt396=4;
            }
            else if ( ((synpred252_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("empty")))) ) {
                alt396=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 396, 2, input);

                throw nvae;
            }
            }
            break;
        case SQL92_RESERVED_OF:
            {
            alt396=7;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 396, 0, input);

            throw nvae;
        }

        switch (alt396) {
            case 1 :
                // OracleParser.g:863:14: null_key
                {
                pushFollow(FOLLOW_null_key_in_synpred256_OracleParser7944);
                null_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:866:14: nan_key
                {
                pushFollow(FOLLOW_nan_key_in_synpred256_OracleParser8011);
                nan_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // OracleParser.g:869:14: present_key
                {
                pushFollow(FOLLOW_present_key_in_synpred256_OracleParser8078);
                present_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // OracleParser.g:872:14: infinite_key
                {
                pushFollow(FOLLOW_infinite_key_in_synpred256_OracleParser8145);
                infinite_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 5 :
                // OracleParser.g:875:14: a_key set_key
                {
                pushFollow(FOLLOW_a_key_in_synpred256_OracleParser8212);
                a_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_set_key_in_synpred256_OracleParser8214);
                set_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 6 :
                // OracleParser.g:878:14: empty_key
                {
                pushFollow(FOLLOW_empty_key_in_synpred256_OracleParser8281);
                empty_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 7 :
                // OracleParser.g:881:14: of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN
                {
                pushFollow(FOLLOW_of_key_in_synpred256_OracleParser8348);
                of_key();

                state._fsp--;
                if (state.failed) return ;
                // OracleParser.g:881:21: ( type_key )?
                int alt393=2;
                int LA393_0 = input.LA(1);

                if ( (LA393_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {
                    alt393=1;
                }
                switch (alt393) {
                    case 1 :
                        // OracleParser.g:0:0: type_key
                        {
                        pushFollow(FOLLOW_type_key_in_synpred256_OracleParser8350);
                        type_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred256_OracleParser8353); if (state.failed) return ;
                // OracleParser.g:881:42: ( only_key )?
                int alt394=2;
                int LA394_0 = input.LA(1);

                if ( (LA394_0==REGULAR_ID) ) {
                    int LA394_1 = input.LA(2);

                    if ( ((synpred254_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("only")))) ) {
                        alt394=1;
                    }
                }
                switch (alt394) {
                    case 1 :
                        // OracleParser.g:0:0: only_key
                        {
                        pushFollow(FOLLOW_only_key_in_synpred256_OracleParser8355);
                        only_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                pushFollow(FOLLOW_type_spec_in_synpred256_OracleParser8358);
                type_spec();

                state._fsp--;
                if (state.failed) return ;
                // OracleParser.g:881:62: ( COMMA type_spec )*
                loop395:
                do {
                    int alt395=2;
                    int LA395_0 = input.LA(1);

                    if ( (LA395_0==COMMA) ) {
                        alt395=1;
                    }


                    switch (alt395) {
                	case 1 :
                	    // OracleParser.g:881:63: COMMA type_spec
                	    {
                	    match(input,COMMA,FOLLOW_COMMA_in_synpred256_OracleParser8361); if (state.failed) return ;
                	    pushFollow(FOLLOW_type_spec_in_synpred256_OracleParser8363);
                	    type_spec();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop395;
                    }
                } while (true);

                match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred256_OracleParser8367); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred256_OracleParser

    // $ANTLR start synpred258_OracleParser
    public final void synpred258_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:891:10: ( multiset_type ( of_key )? concatenation )
        // OracleParser.g:891:10: multiset_type ( of_key )? concatenation
        {
        pushFollow(FOLLOW_multiset_type_in_synpred258_OracleParser8480);
        multiset_type();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:891:24: ( of_key )?
        int alt397=2;
        int LA397_0 = input.LA(1);

        if ( (LA397_0==SQL92_RESERVED_OF) ) {
            alt397=1;
        }
        switch (alt397) {
            case 1 :
                // OracleParser.g:0:0: of_key
                {
                pushFollow(FOLLOW_of_key_in_synpred258_OracleParser8482);
                of_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_concatenation_in_synpred258_OracleParser8485);
        concatenation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_OracleParser

    // $ANTLR start synpred259_OracleParser
    public final void synpred259_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:896:10: ( member_key )
        // OracleParser.g:896:10: member_key
        {
        pushFollow(FOLLOW_member_key_in_synpred259_OracleParser8530);
        member_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_OracleParser

    // $ANTLR start synpred265_OracleParser
    public final void synpred265_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:902:7: ( ( EQUALS_OP | not_equal_op | LESS_THAN_OP | GREATER_THAN_OP | less_than_or_equals_op | greater_than_or_equals_op ) compound_expression )
        // OracleParser.g:902:7: ( EQUALS_OP | not_equal_op | LESS_THAN_OP | GREATER_THAN_OP | less_than_or_equals_op | greater_than_or_equals_op ) compound_expression
        {
        // OracleParser.g:902:7: ( EQUALS_OP | not_equal_op | LESS_THAN_OP | GREATER_THAN_OP | less_than_or_equals_op | greater_than_or_equals_op )
        int alt398=6;
        switch ( input.LA(1) ) {
        case EQUALS_OP:
            {
            alt398=1;
            }
            break;
        case NOT_EQUAL_OP:
        case CARRET_OPERATOR_PART:
        case EXCLAMATION_OPERATOR_PART:
            {
            alt398=2;
            }
            break;
        case LESS_THAN_OP:
            {
            switch ( input.LA(2) ) {
            case GREATER_THAN_OP:
                {
                alt398=2;
                }
                break;
            case EQUALS_OP:
                {
                alt398=5;
                }
                break;
            case UNSIGNED_INTEGER:
            case APPROXIMATE_NUM_LIT:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case EXACT_NUM_LIT:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case DELIMITED_ID:
            case LEFT_PAREN:
            case PLUS_SIGN:
            case COLON:
            case BINDVAR:
            case INTRODUCER:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case REGULAR_ID:
                {
                alt398=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 398, 3, input);

                throw nvae;
            }

            }
            break;
        case GREATER_THAN_OP:
            {
            int LA398_4 = input.LA(2);

            if ( (LA398_4==EQUALS_OP) ) {
                alt398=6;
            }
            else if ( ((LA398_4>=UNSIGNED_INTEGER && LA398_4<=MINUS_SIGN)||LA398_4==NATIONAL_CHAR_STRING_LIT||(LA398_4>=EXACT_NUM_LIT && LA398_4<=CHAR_STRING)||LA398_4==CHAR_STRING_PERL||LA398_4==DELIMITED_ID||LA398_4==LEFT_PAREN||LA398_4==PLUS_SIGN||LA398_4==COLON||LA398_4==BINDVAR||LA398_4==INTRODUCER||LA398_4==SQL92_RESERVED_ALL||LA398_4==SQL92_RESERVED_ANY||LA398_4==SQL92_RESERVED_CASE||LA398_4==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA398_4==SQL92_RESERVED_DATE||LA398_4==SQL92_RESERVED_DEFAULT||LA398_4==SQL92_RESERVED_DISTINCT||(LA398_4>=SQL92_RESERVED_EXISTS && LA398_4<=SQL92_RESERVED_FALSE)||LA398_4==SQL92_RESERVED_NULL||LA398_4==SQL92_RESERVED_PRIOR||LA398_4==SQL92_RESERVED_TRUE||LA398_4==REGULAR_ID) ) {
                alt398=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 398, 4, input);

                throw nvae;
            }
            }
            break;
        case LESS_THAN_OR_EQUALS_OP:
            {
            alt398=5;
            }
            break;
        case GREATER_THAN_OR_EQUALS_OP:
            {
            alt398=6;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 398, 0, input);

            throw nvae;
        }

        switch (alt398) {
            case 1 :
                // OracleParser.g:902:9: EQUALS_OP
                {
                match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_synpred265_OracleParser8571); if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:902:22: not_equal_op
                {
                pushFollow(FOLLOW_not_equal_op_in_synpred265_OracleParser8576);
                not_equal_op();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // OracleParser.g:902:38: LESS_THAN_OP
                {
                match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_synpred265_OracleParser8581); if (state.failed) return ;

                }
                break;
            case 4 :
                // OracleParser.g:902:54: GREATER_THAN_OP
                {
                match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_synpred265_OracleParser8586); if (state.failed) return ;

                }
                break;
            case 5 :
                // OracleParser.g:902:73: less_than_or_equals_op
                {
                pushFollow(FOLLOW_less_than_or_equals_op_in_synpred265_OracleParser8591);
                less_than_or_equals_op();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 6 :
                // OracleParser.g:902:99: greater_than_or_equals_op
                {
                pushFollow(FOLLOW_greater_than_or_equals_op_in_synpred265_OracleParser8596);
                greater_than_or_equals_op();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_compound_expression_in_synpred265_OracleParser8601);
        compound_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_OracleParser

    // $ANTLR start synpred269_OracleParser
    public final void synpred269_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:915:38: ( like_escape_part )
        // OracleParser.g:915:38: like_escape_part
        {
        pushFollow(FOLLOW_like_escape_part_in_synpred269_OracleParser8819);
        like_escape_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_OracleParser

    // $ANTLR start synpred270_OracleParser
    public final void synpred270_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:908:10: ( ( not_key )? ( in_key in_elements | between_key between_elements | like_type concatenation ( like_escape_part )? ) )
        // OracleParser.g:908:10: ( not_key )? ( in_key in_elements | between_key between_elements | like_type concatenation ( like_escape_part )? )
        {
        // OracleParser.g:908:10: ( not_key )?
        int alt399=2;
        int LA399_0 = input.LA(1);

        if ( (LA399_0==SQL92_RESERVED_NOT) ) {
            alt399=1;
        }
        switch (alt399) {
            case 1 :
                // OracleParser.g:908:11: not_key
                {
                pushFollow(FOLLOW_not_key_in_synpred270_OracleParser8649);
                not_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // OracleParser.g:909:9: ( in_key in_elements | between_key between_elements | like_type concatenation ( like_escape_part )? )
        int alt401=3;
        int LA401_0 = input.LA(1);

        if ( (LA401_0==SQL92_RESERVED_IN) ) {
            alt401=1;
        }
        else if ( (LA401_0==SQL92_RESERVED_BETWEEN) ) {
            alt401=2;
        }
        else if ( (LA401_0==SQL92_RESERVED_LIKE) ) {
            alt401=3;
        }
        else if ( (LA401_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("like4"))||(input.LT(1).getText().equalsIgnoreCase("like2"))||(input.LT(1).getText().equalsIgnoreCase("likec"))))) {
            alt401=3;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 401, 0, input);

            throw nvae;
        }
        switch (alt401) {
            case 1 :
                // OracleParser.g:909:14: in_key in_elements
                {
                pushFollow(FOLLOW_in_key_in_synpred270_OracleParser8669);
                in_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_in_elements_in_synpred270_OracleParser8671);
                in_elements();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:912:14: between_key between_elements
                {
                pushFollow(FOLLOW_between_key_in_synpred270_OracleParser8742);
                between_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_between_elements_in_synpred270_OracleParser8744);
                between_elements();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // OracleParser.g:915:14: like_type concatenation ( like_escape_part )?
                {
                pushFollow(FOLLOW_like_type_in_synpred270_OracleParser8815);
                like_type();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_concatenation_in_synpred270_OracleParser8817);
                concatenation();

                state._fsp--;
                if (state.failed) return ;
                // OracleParser.g:915:38: ( like_escape_part )?
                int alt400=2;
                int LA400_0 = input.LA(1);

                if ( (LA400_0==REGULAR_ID) ) {
                    alt400=1;
                }
                switch (alt400) {
                    case 1 :
                        // OracleParser.g:0:0: like_escape_part
                        {
                        pushFollow(FOLLOW_like_escape_part_in_synpred270_OracleParser8819);
                        like_escape_part();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred270_OracleParser

    // $ANTLR start synpred272_OracleParser
    public final void synpred272_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:924:10: ( likec_key )
        // OracleParser.g:924:10: likec_key
        {
        pushFollow(FOLLOW_likec_key_in_synpred272_OracleParser8939);
        likec_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_OracleParser

    // $ANTLR start synpred273_OracleParser
    public final void synpred273_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:925:10: ( like2_key )
        // OracleParser.g:925:10: like2_key
        {
        pushFollow(FOLLOW_like2_key_in_synpred273_OracleParser8950);
        like2_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_OracleParser

    // $ANTLR start synpred276_OracleParser
    public final void synpred276_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:936:10: ( ( LEFT_PAREN )+ ( select_key | with_key ) )
        // OracleParser.g:936:11: ( LEFT_PAREN )+ ( select_key | with_key )
        {
        // OracleParser.g:936:11: ( LEFT_PAREN )+
        int cnt402=0;
        loop402:
        do {
            int alt402=2;
            int LA402_0 = input.LA(1);

            if ( (LA402_0==LEFT_PAREN) ) {
                alt402=1;
            }


            switch (alt402) {
        	case 1 :
        	    // OracleParser.g:0:0: LEFT_PAREN
        	    {
        	    match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred276_OracleParser9028); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt402 >= 1 ) break loop402;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(402, input);
                    throw eee;
            }
            cnt402++;
        } while (true);

        // OracleParser.g:936:23: ( select_key | with_key )
        int alt403=2;
        int LA403_0 = input.LA(1);

        if ( (LA403_0==SQL92_RESERVED_SELECT) ) {
            alt403=1;
        }
        else if ( (LA403_0==SQL92_RESERVED_WITH) ) {
            alt403=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 403, 0, input);

            throw nvae;
        }
        switch (alt403) {
            case 1 :
                // OracleParser.g:936:24: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred276_OracleParser9032);
                select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:936:35: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred276_OracleParser9034);
                with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred276_OracleParser

    // $ANTLR start synpred278_OracleParser
    public final void synpred278_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:938:10: ( LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN )
        // OracleParser.g:938:10: LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred278_OracleParser9069); if (state.failed) return ;
        pushFollow(FOLLOW_concatenation_wrapper_in_synpred278_OracleParser9071);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:938:43: ( COMMA concatenation_wrapper )*
        loop404:
        do {
            int alt404=2;
            int LA404_0 = input.LA(1);

            if ( (LA404_0==COMMA) ) {
                alt404=1;
            }


            switch (alt404) {
        	case 1 :
        	    // OracleParser.g:938:44: COMMA concatenation_wrapper
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred278_OracleParser9074); if (state.failed) return ;
        	    pushFollow(FOLLOW_concatenation_wrapper_in_synpred278_OracleParser9076);
        	    concatenation_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop404;
            }
        } while (true);

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred278_OracleParser9080); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_OracleParser

    // $ANTLR start synpred279_OracleParser
    public final void synpred279_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:940:10: ( constant )
        // OracleParser.g:940:10: constant
        {
        pushFollow(FOLLOW_constant_in_synpred279_OracleParser9109);
        constant();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_OracleParser

    // $ANTLR start synpred281_OracleParser
    public final void synpred281_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:954:31: ( concatenation_op additive_expression )
        // OracleParser.g:954:31: concatenation_op additive_expression
        {
        pushFollow(FOLLOW_concatenation_op_in_synpred281_OracleParser9258);
        concatenation_op();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_additive_expression_in_synpred281_OracleParser9261);
        additive_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_OracleParser

    // $ANTLR start synpred282_OracleParser
    public final void synpred282_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:963:9: ( special_function )
        // OracleParser.g:963:9: special_function
        {
        pushFollow(FOLLOW_special_function_in_synpred282_OracleParser9318);
        special_function();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_OracleParser

    // $ANTLR start synpred284_OracleParser
    public final void synpred284_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:964:27: ( ( PLUS_SIGN | MINUS_SIGN ) multiply_expression )
        // OracleParser.g:964:27: ( PLUS_SIGN | MINUS_SIGN ) multiply_expression
        {
        if ( input.LA(1)==MINUS_SIGN||input.LA(1)==PLUS_SIGN ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_multiply_expression_in_synpred284_OracleParser9348);
        multiply_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_OracleParser

    // $ANTLR start synpred286_OracleParser
    public final void synpred286_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:972:32: ( ( ASTERISK | SOLIDUS ) datetime_expression )
        // OracleParser.g:972:32: ( ASTERISK | SOLIDUS ) datetime_expression
        {
        if ( input.LA(1)==ASTERISK||input.LA(1)==SOLIDUS ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_datetime_expression_in_synpred286_OracleParser9403);
        datetime_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_OracleParser

    // $ANTLR start synpred287_OracleParser
    public final void synpred287_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:977:18: ( local_key )
        // OracleParser.g:977:18: local_key
        {
        pushFollow(FOLLOW_local_key_in_synpred287_OracleParser9445);
        local_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_OracleParser

    // $ANTLR start synpred288_OracleParser
    public final void synpred288_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:977:10: ( at_key ( local_key | time_key zone_key concatenation_wrapper ) )
        // OracleParser.g:977:10: at_key ( local_key | time_key zone_key concatenation_wrapper )
        {
        pushFollow(FOLLOW_at_key_in_synpred288_OracleParser9442);
        at_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:977:17: ( local_key | time_key zone_key concatenation_wrapper )
        int alt405=2;
        int LA405_0 = input.LA(1);

        if ( (LA405_0==REGULAR_ID) ) {
            int LA405_1 = input.LA(2);

            if ( (LA405_1==EOF) ) {
                alt405=1;
            }
            else if ( (LA405_1==REGULAR_ID) ) {
                alt405=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 405, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 405, 0, input);

            throw nvae;
        }
        switch (alt405) {
            case 1 :
                // OracleParser.g:977:18: local_key
                {
                pushFollow(FOLLOW_local_key_in_synpred288_OracleParser9445);
                local_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:977:28: time_key zone_key concatenation_wrapper
                {
                pushFollow(FOLLOW_time_key_in_synpred288_OracleParser9447);
                time_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_zone_key_in_synpred288_OracleParser9449);
                zone_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_concatenation_wrapper_in_synpred288_OracleParser9451);
                concatenation_wrapper();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred288_OracleParser

    // $ANTLR start synpred289_OracleParser
    public final void synpred289_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:979:10: ( interval_expression )
        // OracleParser.g:979:11: interval_expression
        {
        pushFollow(FOLLOW_interval_expression_in_synpred289_OracleParser9497);
        interval_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_OracleParser

    // $ANTLR start synpred291_OracleParser
    public final void synpred291_OracleParser_fragment() throws RecognitionException {   
        OracleParser.concatenation_wrapper_return cn2 = null;


        // OracleParser.g:985:92: ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )
        // OracleParser.g:985:92: LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred291_OracleParser9572); if (state.failed) return ;
        pushFollow(FOLLOW_concatenation_wrapper_in_synpred291_OracleParser9576);
        cn2=concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred291_OracleParser9578); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_OracleParser

    // $ANTLR start synpred292_OracleParser
    public final void synpred292_OracleParser_fragment() throws RecognitionException {   
        OracleParser.concatenation_wrapper_return cn1 = null;

        OracleParser.concatenation_wrapper_return cn2 = null;


        // OracleParser.g:985:10: ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? )
        // OracleParser.g:985:10: day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
        {
        pushFollow(FOLLOW_day_key_in_synpred292_OracleParser9551);
        day_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:985:21: ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )?
        int alt406=2;
        int LA406_0 = input.LA(1);

        if ( (LA406_0==LEFT_PAREN) ) {
            alt406=1;
        }
        switch (alt406) {
            case 1 :
                // OracleParser.g:985:22: LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN
                {
                match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred292_OracleParser9557); if (state.failed) return ;
                pushFollow(FOLLOW_concatenation_wrapper_in_synpred292_OracleParser9561);
                cn1=concatenation_wrapper();

                state._fsp--;
                if (state.failed) return ;
                match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred292_OracleParser9563); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_to_key_in_synpred292_OracleParser9567);
        to_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_second_key_in_synpred292_OracleParser9569);
        second_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:985:91: ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
        int alt407=2;
        int LA407_0 = input.LA(1);

        if ( (LA407_0==LEFT_PAREN) ) {
            alt407=1;
        }
        switch (alt407) {
            case 1 :
                // OracleParser.g:985:92: LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN
                {
                match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred292_OracleParser9572); if (state.failed) return ;
                pushFollow(FOLLOW_concatenation_wrapper_in_synpred292_OracleParser9576);
                cn2=concatenation_wrapper();

                state._fsp--;
                if (state.failed) return ;
                match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred292_OracleParser9578); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred292_OracleParser

    // $ANTLR start synpred294_OracleParser
    public final void synpred294_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:993:10: ( LEFT_BRACKET model_expression_element RIGHT_BRACKET )
        // OracleParser.g:993:10: LEFT_BRACKET model_expression_element RIGHT_BRACKET
        {
        match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_synpred294_OracleParser9683); if (state.failed) return ;
        pushFollow(FOLLOW_model_expression_element_in_synpred294_OracleParser9685);
        model_expression_element();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_synpred294_OracleParser9687); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_OracleParser

    // $ANTLR start synpred295_OracleParser
    public final void synpred295_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:998:11: ( any_key )
        // OracleParser.g:998:12: any_key
        {
        pushFollow(FOLLOW_any_key_in_synpred295_OracleParser9735);
        any_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_OracleParser

    // $ANTLR start synpred296_OracleParser
    public final void synpred296_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:998:59: ( any_key )
        // OracleParser.g:998:60: any_key
        {
        pushFollow(FOLLOW_any_key_in_synpred296_OracleParser9750);
        any_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_OracleParser

    // $ANTLR start synpred303_OracleParser
    public final void synpred303_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1020:10: ( increment_key )
        // OracleParser.g:1020:10: increment_key
        {
        pushFollow(FOLLOW_increment_key_in_synpred303_OracleParser10028);
        increment_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_OracleParser

    // $ANTLR start synpred305_OracleParser
    public final void synpred305_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1027:18: ( select_key )
        // OracleParser.g:1027:19: select_key
        {
        pushFollow(FOLLOW_select_key_in_synpred305_OracleParser10104);
        select_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_OracleParser

    // $ANTLR start synpred306_OracleParser
    public final void synpred306_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1028:18: ( LEFT_PAREN )
        // OracleParser.g:1028:19: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred306_OracleParser10128); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_OracleParser

    // $ANTLR start synpred312_OracleParser
    public final void synpred312_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1043:10: ({...}? => new_key unary_expression )
        // OracleParser.g:1043:10: {...}? => new_key unary_expression
        {
        if ( !((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred312_OracleParser", "input.LT(1).getText().equalsIgnoreCase(\"new\") && !input.LT(2).getText().equals(\".\")");
        }
        pushFollow(FOLLOW_new_key_in_synpred312_OracleParser10299);
        new_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_unary_expression_in_synpred312_OracleParser10302);
        unary_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_OracleParser

    // $ANTLR start synpred314_OracleParser
    public final void synpred314_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1045:10: ( all_key unary_expression )
        // OracleParser.g:1045:10: all_key unary_expression
        {
        pushFollow(FOLLOW_all_key_in_synpred314_OracleParser10327);
        all_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_unary_expression_in_synpred314_OracleParser10330);
        unary_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_OracleParser

    // $ANTLR start synpred315_OracleParser
    public final void synpred315_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1046:10: ({...}? case_statement[false] )
        // OracleParser.g:1046:10: {...}? case_statement[false]
        {
        if ( !(((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred315_OracleParser", "(input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE)");
        }
        pushFollow(FOLLOW_case_statement_in_synpred315_OracleParser10343);
        case_statement(false);

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_OracleParser

    // $ANTLR start synpred316_OracleParser
    public final void synpred316_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1047:10: ( quantified_expression )
        // OracleParser.g:1047:10: quantified_expression
        {
        pushFollow(FOLLOW_quantified_expression_in_synpred316_OracleParser10355);
        quantified_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_OracleParser

    // $ANTLR start synpred317_OracleParser
    public final void synpred317_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1048:10: ( standard_function )
        // OracleParser.g:1048:10: standard_function
        {
        pushFollow(FOLLOW_standard_function_in_synpred317_OracleParser10366);
        standard_function();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred317_OracleParser

    // $ANTLR start synpred319_OracleParser
    public final void synpred319_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1057:10: ( ( label_name )? case_key when_key )
        // OracleParser.g:1057:11: ( label_name )? case_key when_key
        {
        // OracleParser.g:1057:11: ( label_name )?
        int alt413=2;
        int LA413_0 = input.LA(1);

        if ( (LA413_0==DELIMITED_ID||LA413_0==REGULAR_ID) ) {
            alt413=1;
        }
        switch (alt413) {
            case 1 :
                // OracleParser.g:0:0: label_name
                {
                pushFollow(FOLLOW_label_name_in_synpred319_OracleParser10423);
                label_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_case_key_in_synpred319_OracleParser10426);
        case_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_when_key_in_synpred319_OracleParser10428);
        when_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_OracleParser

    // $ANTLR start synpred324_OracleParser
    public final void synpred324_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1067:27: ( label_name )
        // OracleParser.g:1067:27: label_name
        {
        pushFollow(FOLLOW_label_name_in_synpred324_OracleParser10510);
        label_name();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred324_OracleParser

    // $ANTLR start synpred325_OracleParser
    public final void synpred325_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1072:54: ({...}? seq_of_statements )
        // OracleParser.g:1072:54: {...}? seq_of_statements
        {
        if ( !((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred325_OracleParser", "$case_statement::isStatement");
        }
        pushFollow(FOLLOW_seq_of_statements_in_synpred325_OracleParser10576);
        seq_of_statements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_OracleParser

    // $ANTLR start synpred330_OracleParser
    public final void synpred330_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1079:27: ( label_name )
        // OracleParser.g:1079:27: label_name
        {
        pushFollow(FOLLOW_label_name_in_synpred330_OracleParser10645);
        label_name();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_OracleParser

    // $ANTLR start synpred331_OracleParser
    public final void synpred331_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1084:49: ({...}? seq_of_statements )
        // OracleParser.g:1084:49: {...}? seq_of_statements
        {
        if ( !((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred331_OracleParser", "$case_statement::isStatement");
        }
        pushFollow(FOLLOW_seq_of_statements_in_synpred331_OracleParser10702);
        seq_of_statements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred331_OracleParser

    // $ANTLR start synpred332_OracleParser
    public final void synpred332_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1088:21: ({...}? seq_of_statements )
        // OracleParser.g:1088:21: {...}? seq_of_statements
        {
        if ( !((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred332_OracleParser", "$case_statement::isStatement");
        }
        pushFollow(FOLLOW_seq_of_statements_in_synpred332_OracleParser10733);
        seq_of_statements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_OracleParser

    // $ANTLR start synpred333_OracleParser
    public final void synpred333_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1097:10: ( table_element outer_join_sign )
        // OracleParser.g:1097:11: table_element outer_join_sign
        {
        pushFollow(FOLLOW_table_element_in_synpred333_OracleParser10769);
        table_element();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_outer_join_sign_in_synpred333_OracleParser10771);
        outer_join_sign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_OracleParser

    // $ANTLR start synpred335_OracleParser
    public final void synpred335_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1099:10: ( constant )
        // OracleParser.g:1099:10: constant
        {
        pushFollow(FOLLOW_constant_in_synpred335_OracleParser10800);
        constant();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_OracleParser

    // $ANTLR start synpred336_OracleParser
    public final void synpred336_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1100:10: ( general_element )
        // OracleParser.g:1100:10: general_element
        {
        pushFollow(FOLLOW_general_element_in_synpred336_OracleParser10811);
        general_element();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_OracleParser

    // $ANTLR start synpred338_OracleParser
    public final void synpred338_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1103:15: ( select_key | with_key )
        int alt414=2;
        int LA414_0 = input.LA(1);

        if ( (LA414_0==SQL92_RESERVED_SELECT) ) {
            alt414=1;
        }
        else if ( (LA414_0==SQL92_RESERVED_WITH) ) {
            alt414=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 414, 0, input);

            throw nvae;
        }
        switch (alt414) {
            case 1 :
                // OracleParser.g:1103:17: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred338_OracleParser10852);
                select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1103:30: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred338_OracleParser10856);
                with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }}
    // $ANTLR end synpred338_OracleParser

    // $ANTLR start synpred339_OracleParser
    public final void synpred339_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1103:64: ( subquery_operation_part )
        // OracleParser.g:1103:64: subquery_operation_part
        {
        pushFollow(FOLLOW_subquery_operation_part_in_synpred339_OracleParser10865);
        subquery_operation_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_OracleParser

    // $ANTLR start synpred346_OracleParser
    public final void synpred346_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1122:12: ( LEFT_PAREN ( select_key | with_key ) )
        // OracleParser.g:1122:13: LEFT_PAREN ( select_key | with_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred346_OracleParser11069); if (state.failed) return ;
        // OracleParser.g:1122:24: ( select_key | with_key )
        int alt415=2;
        int LA415_0 = input.LA(1);

        if ( (LA415_0==SQL92_RESERVED_SELECT) ) {
            alt415=1;
        }
        else if ( (LA415_0==SQL92_RESERVED_WITH) ) {
            alt415=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 415, 0, input);

            throw nvae;
        }
        switch (alt415) {
            case 1 :
                // OracleParser.g:1122:25: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred346_OracleParser11072);
                select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1122:36: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred346_OracleParser11074);
                with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred346_OracleParser

    // $ANTLR start synpred347_OracleParser
    public final void synpred347_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1128:61: ( over_clause )
        // OracleParser.g:1128:61: over_clause
        {
        pushFollow(FOLLOW_over_clause_in_synpred347_OracleParser11143);
        over_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred347_OracleParser

    // $ANTLR start synpred348_OracleParser
    public final void synpred348_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1128:10: ( stantard_function_enabling_over function_argument ( over_clause )? )
        // OracleParser.g:1128:10: stantard_function_enabling_over function_argument ( over_clause )?
        {
        pushFollow(FOLLOW_stantard_function_enabling_over_in_synpred348_OracleParser11138);
        stantard_function_enabling_over();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_function_argument_in_synpred348_OracleParser11141);
        function_argument();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1128:61: ( over_clause )?
        int alt416=2;
        int LA416_0 = input.LA(1);

        if ( (LA416_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
            alt416=1;
        }
        switch (alt416) {
            case 1 :
                // OracleParser.g:0:0: over_clause
                {
                pushFollow(FOLLOW_over_clause_in_synpred348_OracleParser11143);
                over_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred348_OracleParser

    // $ANTLR start synpred349_OracleParser
    public final void synpred349_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1129:62: ( using_clause )
        // OracleParser.g:1129:62: using_clause
        {
        pushFollow(FOLLOW_using_clause_in_synpred349_OracleParser11160);
        using_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_OracleParser

    // $ANTLR start synpred350_OracleParser
    public final void synpred350_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1129:10: ( stantard_function_enabling_using function_argument ( using_clause )? )
        // OracleParser.g:1129:10: stantard_function_enabling_using function_argument ( using_clause )?
        {
        pushFollow(FOLLOW_stantard_function_enabling_using_in_synpred350_OracleParser11155);
        stantard_function_enabling_using();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_function_argument_in_synpred350_OracleParser11158);
        function_argument();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1129:62: ( using_clause )?
        int alt417=2;
        int LA417_0 = input.LA(1);

        if ( (LA417_0==PLSQL_NON_RESERVED_USING) ) {
            alt417=1;
        }
        switch (alt417) {
            case 1 :
                // OracleParser.g:0:0: using_clause
                {
                pushFollow(FOLLOW_using_clause_in_synpred350_OracleParser11160);
                using_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred350_OracleParser

    // $ANTLR start synpred352_OracleParser
    public final void synpred352_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1132:31: ( distinct_key )
        // OracleParser.g:1132:31: distinct_key
        {
        pushFollow(FOLLOW_distinct_key_in_synpred352_OracleParser11213);
        distinct_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred352_OracleParser

    // $ANTLR start synpred354_OracleParser
    public final void synpred354_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1132:55: ( all_key )
        // OracleParser.g:1132:55: all_key
        {
        pushFollow(FOLLOW_all_key_in_synpred354_OracleParser11217);
        all_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred354_OracleParser

    // $ANTLR start synpred355_OracleParser
    public final void synpred355_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1133:26: ( over_clause )
        // OracleParser.g:1133:26: over_clause
        {
        pushFollow(FOLLOW_over_clause_in_synpred355_OracleParser11240);
        over_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred355_OracleParser

    // $ANTLR start synpred356_OracleParser
    public final void synpred356_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1130:10: ( count_key LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )? )
        // OracleParser.g:1130:10: count_key LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )?
        {
        pushFollow(FOLLOW_count_key_in_synpred356_OracleParser11172);
        count_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred356_OracleParser11187); if (state.failed) return ;
        // OracleParser.g:1132:17: ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper )
        int alt419=2;
        int LA419_0 = input.LA(1);

        if ( (LA419_0==ASTERISK) ) {
            alt419=1;
        }
        else if ( ((LA419_0>=UNSIGNED_INTEGER && LA419_0<=MINUS_SIGN)||LA419_0==NATIONAL_CHAR_STRING_LIT||(LA419_0>=EXACT_NUM_LIT && LA419_0<=CHAR_STRING)||LA419_0==CHAR_STRING_PERL||LA419_0==DELIMITED_ID||LA419_0==LEFT_PAREN||LA419_0==PLUS_SIGN||LA419_0==COLON||LA419_0==BINDVAR||LA419_0==INTRODUCER||LA419_0==SQL92_RESERVED_ALL||LA419_0==SQL92_RESERVED_ANY||LA419_0==SQL92_RESERVED_CASE||LA419_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA419_0==SQL92_RESERVED_DATE||LA419_0==SQL92_RESERVED_DEFAULT||LA419_0==SQL92_RESERVED_DISTINCT||(LA419_0>=SQL92_RESERVED_EXISTS && LA419_0<=SQL92_RESERVED_FALSE)||LA419_0==SQL92_RESERVED_NULL||LA419_0==SQL92_RESERVED_PRIOR||LA419_0==SQL92_RESERVED_TRUE||LA419_0==SQL92_RESERVED_UNIQUE||LA419_0==REGULAR_ID) ) {
            alt419=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 419, 0, input);

            throw nvae;
        }
        switch (alt419) {
            case 1 :
                // OracleParser.g:1132:19: ASTERISK
                {
                match(input,ASTERISK,FOLLOW_ASTERISK_in_synpred356_OracleParser11208); if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1132:30: ( distinct_key | unique_key | all_key )? concatenation_wrapper
                {
                // OracleParser.g:1132:30: ( distinct_key | unique_key | all_key )?
                int alt418=4;
                alt418 = dfa418.predict(input);
                switch (alt418) {
                    case 1 :
                        // OracleParser.g:1132:31: distinct_key
                        {
                        pushFollow(FOLLOW_distinct_key_in_synpred356_OracleParser11213);
                        distinct_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // OracleParser.g:1132:44: unique_key
                        {
                        pushFollow(FOLLOW_unique_key_in_synpred356_OracleParser11215);
                        unique_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 3 :
                        // OracleParser.g:1132:55: all_key
                        {
                        pushFollow(FOLLOW_all_key_in_synpred356_OracleParser11217);
                        all_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                pushFollow(FOLLOW_concatenation_wrapper_in_synpred356_OracleParser11221);
                concatenation_wrapper();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred356_OracleParser11237); if (state.failed) return ;
        // OracleParser.g:1133:26: ( over_clause )?
        int alt420=2;
        int LA420_0 = input.LA(1);

        if ( (LA420_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
            alt420=1;
        }
        switch (alt420) {
            case 1 :
                // OracleParser.g:0:0: over_clause
                {
                pushFollow(FOLLOW_over_clause_in_synpred356_OracleParser11240);
                over_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred356_OracleParser

    // $ANTLR start synpred357_OracleParser
    public final void synpred357_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1134:11: ( cast_key )
        // OracleParser.g:1134:11: cast_key
        {
        pushFollow(FOLLOW_cast_key_in_synpred357_OracleParser11253);
        cast_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_OracleParser

    // $ANTLR start synpred359_OracleParser
    public final void synpred359_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1136:19: ( multiset_key LEFT_PAREN ( select_key | with_key ) )
        // OracleParser.g:1136:20: multiset_key LEFT_PAREN ( select_key | with_key )
        {
        pushFollow(FOLLOW_multiset_key_in_synpred359_OracleParser11295);
        multiset_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred359_OracleParser11297); if (state.failed) return ;
        // OracleParser.g:1136:44: ( select_key | with_key )
        int alt421=2;
        int LA421_0 = input.LA(1);

        if ( (LA421_0==SQL92_RESERVED_SELECT) ) {
            alt421=1;
        }
        else if ( (LA421_0==SQL92_RESERVED_WITH) ) {
            alt421=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 421, 0, input);

            throw nvae;
        }
        switch (alt421) {
            case 1 :
                // OracleParser.g:1136:45: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred359_OracleParser11300);
                select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1136:56: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred359_OracleParser11302);
                with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred359_OracleParser

    // $ANTLR start synpred360_OracleParser
    public final void synpred360_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1134:10: ( ( cast_key | xmlcast_key ) LEFT_PAREN ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN ) | concatenation_wrapper ) as_key type_spec RIGHT_PAREN )
        // OracleParser.g:1134:10: ( cast_key | xmlcast_key ) LEFT_PAREN ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN ) | concatenation_wrapper ) as_key type_spec RIGHT_PAREN
        {
        // OracleParser.g:1134:10: ( cast_key | xmlcast_key )
        int alt422=2;
        int LA422_0 = input.LA(1);

        if ( (LA422_0==REGULAR_ID) ) {
            int LA422_1 = input.LA(2);

            if ( ((synpred357_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("cast")))) ) {
                alt422=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlcast"))) ) {
                alt422=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 422, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 422, 0, input);

            throw nvae;
        }
        switch (alt422) {
            case 1 :
                // OracleParser.g:1134:11: cast_key
                {
                pushFollow(FOLLOW_cast_key_in_synpred360_OracleParser11253);
                cast_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1134:21: xmlcast_key
                {
                pushFollow(FOLLOW_xmlcast_key_in_synpred360_OracleParser11256);
                xmlcast_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred360_OracleParser11273); if (state.failed) return ;
        // OracleParser.g:1136:17: ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN ) | concatenation_wrapper )
        int alt423=2;
        alt423 = dfa423.predict(input);
        switch (alt423) {
            case 1 :
                // OracleParser.g:1136:19: ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN )
                {
                // OracleParser.g:1136:70: ( multiset_key LEFT_PAREN subquery RIGHT_PAREN )
                // OracleParser.g:1136:71: multiset_key LEFT_PAREN subquery RIGHT_PAREN
                {
                pushFollow(FOLLOW_multiset_key_in_synpred360_OracleParser11309);
                multiset_key();

                state._fsp--;
                if (state.failed) return ;
                match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred360_OracleParser11312); if (state.failed) return ;
                pushFollow(FOLLOW_subquery_in_synpred360_OracleParser11315);
                subquery();

                state._fsp--;
                if (state.failed) return ;
                match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred360_OracleParser11317); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                // OracleParser.g:1137:19: concatenation_wrapper
                {
                pushFollow(FOLLOW_concatenation_wrapper_in_synpred360_OracleParser11339);
                concatenation_wrapper();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_as_key_in_synpred360_OracleParser11375);
        as_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_type_spec_in_synpred360_OracleParser11378);
        type_spec();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred360_OracleParser11392); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred360_OracleParser

    // $ANTLR start synpred361_OracleParser
    public final void synpred361_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1141:10: ( chr_key LEFT_PAREN concatenation_wrapper using_key nchar_cs_key RIGHT_PAREN )
        // OracleParser.g:1141:10: chr_key LEFT_PAREN concatenation_wrapper using_key nchar_cs_key RIGHT_PAREN
        {
        pushFollow(FOLLOW_chr_key_in_synpred361_OracleParser11404);
        chr_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred361_OracleParser11419); if (state.failed) return ;
        pushFollow(FOLLOW_concatenation_wrapper_in_synpred361_OracleParser11439);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_using_key_in_synpred361_OracleParser11441);
        using_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nchar_cs_key_in_synpred361_OracleParser11444);
        nchar_cs_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred361_OracleParser11459); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred361_OracleParser

    // $ANTLR start synpred362_OracleParser
    public final void synpred362_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1147:18: ( distinct_key )
        // OracleParser.g:1147:18: distinct_key
        {
        pushFollow(FOLLOW_distinct_key_in_synpred362_OracleParser11507);
        distinct_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred362_OracleParser

    // $ANTLR start synpred365_OracleParser
    public final void synpred365_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1145:10: ( collect_key LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN )
        // OracleParser.g:1145:10: collect_key LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN
        {
        pushFollow(FOLLOW_collect_key_in_synpred365_OracleParser11471);
        collect_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred365_OracleParser11486); if (state.failed) return ;
        // OracleParser.g:1147:17: ( distinct_key | unique_key )?
        int alt424=3;
        alt424 = dfa424.predict(input);
        switch (alt424) {
            case 1 :
                // OracleParser.g:1147:18: distinct_key
                {
                pushFollow(FOLLOW_distinct_key_in_synpred365_OracleParser11507);
                distinct_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1147:31: unique_key
                {
                pushFollow(FOLLOW_unique_key_in_synpred365_OracleParser11509);
                unique_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_concatenation_wrapper_in_synpred365_OracleParser11513);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1147:66: ( collect_order_by_part )?
        int alt425=2;
        int LA425_0 = input.LA(1);

        if ( (LA425_0==SQL92_RESERVED_ORDER) ) {
            alt425=1;
        }
        switch (alt425) {
            case 1 :
                // OracleParser.g:0:0: collect_order_by_part
                {
                pushFollow(FOLLOW_collect_order_by_part_in_synpred365_OracleParser11515);
                collect_order_by_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred365_OracleParser11530); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred365_OracleParser

    // $ANTLR start synpred366_OracleParser
    public final void synpred366_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1150:31: ( within_or_over_part )
        // OracleParser.g:1150:31: within_or_over_part
        {
        pushFollow(FOLLOW_within_or_over_part_in_synpred366_OracleParser11560);
        within_or_over_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred366_OracleParser

    // $ANTLR start synpred367_OracleParser
    public final void synpred367_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1149:10: ( stantard_function_enabling_within_or_over function_argument ( within_or_over_part )+ )
        // OracleParser.g:1149:10: stantard_function_enabling_within_or_over function_argument ( within_or_over_part )+
        {
        pushFollow(FOLLOW_stantard_function_enabling_within_or_over_in_synpred367_OracleParser11542);
        stantard_function_enabling_within_or_over();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_function_argument_in_synpred367_OracleParser11558);
        function_argument();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1150:31: ( within_or_over_part )+
        int cnt426=0;
        loop426:
        do {
            int alt426=2;
            int LA426_0 = input.LA(1);

            if ( (LA426_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("over"))||(input.LT(1).getText().equalsIgnoreCase("within"))))) {
                alt426=1;
            }


            switch (alt426) {
        	case 1 :
        	    // OracleParser.g:0:0: within_or_over_part
        	    {
        	    pushFollow(FOLLOW_within_or_over_part_in_synpred367_OracleParser11560);
        	    within_or_over_part();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt426 >= 1 ) break loop426;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(426, input);
                    throw eee;
            }
            cnt426++;
        } while (true);


        }
    }
    // $ANTLR end synpred367_OracleParser

    // $ANTLR start synpred368_OracleParser
    public final void synpred368_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1153:40: ( canonical_key )
        // OracleParser.g:1153:40: canonical_key
        {
        pushFollow(FOLLOW_canonical_key_in_synpred368_OracleParser11610);
        canonical_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_OracleParser

    // $ANTLR start synpred369_OracleParser
    public final void synpred369_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1153:54: ( compatibility_key )
        // OracleParser.g:1153:54: compatibility_key
        {
        pushFollow(FOLLOW_compatibility_key_in_synpred369_OracleParser11612);
        compatibility_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred369_OracleParser

    // $ANTLR start synpred370_OracleParser
    public final void synpred370_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1151:10: ( decompose_key LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN )
        // OracleParser.g:1151:10: decompose_key LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN
        {
        pushFollow(FOLLOW_decompose_key_in_synpred370_OracleParser11572);
        decompose_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred370_OracleParser11587); if (state.failed) return ;
        pushFollow(FOLLOW_concatenation_wrapper_in_synpred370_OracleParser11607);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1153:39: ( canonical_key | compatibility_key )?
        int alt427=3;
        int LA427_0 = input.LA(1);

        if ( (LA427_0==REGULAR_ID) ) {
            int LA427_1 = input.LA(2);

            if ( ((synpred368_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("canonical")))) ) {
                alt427=1;
            }
            else if ( ((synpred369_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("compatibility")))) ) {
                alt427=2;
            }
        }
        switch (alt427) {
            case 1 :
                // OracleParser.g:1153:40: canonical_key
                {
                pushFollow(FOLLOW_canonical_key_in_synpred370_OracleParser11610);
                canonical_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1153:54: compatibility_key
                {
                pushFollow(FOLLOW_compatibility_key_in_synpred370_OracleParser11612);
                compatibility_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred370_OracleParser11629); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred370_OracleParser

    // $ANTLR start synpred371_OracleParser
    public final void synpred371_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1155:10: ( extract_key LEFT_PAREN REGULAR_ID from_key concatenation_wrapper RIGHT_PAREN )
        // OracleParser.g:1155:10: extract_key LEFT_PAREN REGULAR_ID from_key concatenation_wrapper RIGHT_PAREN
        {
        pushFollow(FOLLOW_extract_key_in_synpred371_OracleParser11641);
        extract_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred371_OracleParser11656); if (state.failed) return ;
        match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_synpred371_OracleParser11675); if (state.failed) return ;
        pushFollow(FOLLOW_from_key_in_synpred371_OracleParser11677);
        from_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_concatenation_wrapper_in_synpred371_OracleParser11680);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred371_OracleParser11695); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred371_OracleParser

    // $ANTLR start synpred372_OracleParser
    public final void synpred372_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1159:11: ( first_value_key )
        // OracleParser.g:1159:11: first_value_key
        {
        pushFollow(FOLLOW_first_value_key_in_synpred372_OracleParser11708);
        first_value_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred372_OracleParser

    // $ANTLR start synpred373_OracleParser
    public final void synpred373_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1161:40: ( ignore_key nulls_key )
        // OracleParser.g:1161:40: ignore_key nulls_key
        {
        pushFollow(FOLLOW_ignore_key_in_synpred373_OracleParser11750);
        ignore_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nulls_key_in_synpred373_OracleParser11753);
        nulls_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred373_OracleParser

    // $ANTLR start synpred374_OracleParser
    public final void synpred374_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1159:10: ( ( first_value_key | last_value_key ) LEFT_PAREN concatenation_wrapper ( ignore_key nulls_key )? RIGHT_PAREN over_clause )
        // OracleParser.g:1159:10: ( first_value_key | last_value_key ) LEFT_PAREN concatenation_wrapper ( ignore_key nulls_key )? RIGHT_PAREN over_clause
        {
        // OracleParser.g:1159:10: ( first_value_key | last_value_key )
        int alt428=2;
        int LA428_0 = input.LA(1);

        if ( (LA428_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("last_value")))) {
            int LA428_1 = input.LA(2);

            if ( ((synpred372_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first_value")))) ) {
                alt428=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("last_value"))) ) {
                alt428=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 428, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 428, 0, input);

            throw nvae;
        }
        switch (alt428) {
            case 1 :
                // OracleParser.g:1159:11: first_value_key
                {
                pushFollow(FOLLOW_first_value_key_in_synpred374_OracleParser11708);
                first_value_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1159:28: last_value_key
                {
                pushFollow(FOLLOW_last_value_key_in_synpred374_OracleParser11711);
                last_value_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred374_OracleParser11728); if (state.failed) return ;
        pushFollow(FOLLOW_concatenation_wrapper_in_synpred374_OracleParser11747);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1161:39: ( ignore_key nulls_key )?
        int alt429=2;
        int LA429_0 = input.LA(1);

        if ( (LA429_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("ignore")))) {
            alt429=1;
        }
        switch (alt429) {
            case 1 :
                // OracleParser.g:1161:40: ignore_key nulls_key
                {
                pushFollow(FOLLOW_ignore_key_in_synpred374_OracleParser11750);
                ignore_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_nulls_key_in_synpred374_OracleParser11753);
                nulls_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred374_OracleParser11770); if (state.failed) return ;
        pushFollow(FOLLOW_over_clause_in_synpred374_OracleParser11773);
        over_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred374_OracleParser

    // $ANTLR start synpred375_OracleParser
    public final void synpred375_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1163:11: ( first_value_key )
        // OracleParser.g:1163:11: first_value_key
        {
        pushFollow(FOLLOW_first_value_key_in_synpred375_OracleParser11785);
        first_value_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_OracleParser

    // $ANTLR start synpred376_OracleParser
    public final void synpred376_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1165:14: ( respect_or_ignore_nulls )
        // OracleParser.g:1165:14: respect_or_ignore_nulls
        {
        pushFollow(FOLLOW_respect_or_ignore_nulls_in_synpred376_OracleParser11820);
        respect_or_ignore_nulls();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred376_OracleParser

    // $ANTLR start synpred377_OracleParser
    public final void synpred377_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1163:10: ( ( first_value_key | last_value_key ) function_argument_analytic ( respect_or_ignore_nulls )? over_clause )
        // OracleParser.g:1163:10: ( first_value_key | last_value_key ) function_argument_analytic ( respect_or_ignore_nulls )? over_clause
        {
        // OracleParser.g:1163:10: ( first_value_key | last_value_key )
        int alt430=2;
        int LA430_0 = input.LA(1);

        if ( (LA430_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("last_value")))) {
            int LA430_1 = input.LA(2);

            if ( ((synpred375_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first_value")))) ) {
                alt430=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("last_value"))) ) {
                alt430=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 430, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 430, 0, input);

            throw nvae;
        }
        switch (alt430) {
            case 1 :
                // OracleParser.g:1163:11: first_value_key
                {
                pushFollow(FOLLOW_first_value_key_in_synpred377_OracleParser11785);
                first_value_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1163:28: last_value_key
                {
                pushFollow(FOLLOW_last_value_key_in_synpred377_OracleParser11788);
                last_value_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_function_argument_analytic_in_synpred377_OracleParser11805);
        function_argument_analytic();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1165:14: ( respect_or_ignore_nulls )?
        int alt431=2;
        int LA431_0 = input.LA(1);

        if ( (LA431_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
            int LA431_1 = input.LA(2);

            if ( (LA431_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("respect"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                alt431=1;
            }
        }
        switch (alt431) {
            case 1 :
                // OracleParser.g:0:0: respect_or_ignore_nulls
                {
                pushFollow(FOLLOW_respect_or_ignore_nulls_in_synpred377_OracleParser11820);
                respect_or_ignore_nulls();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_over_clause_in_synpred377_OracleParser11823);
        over_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred377_OracleParser

    // $ANTLR start synpred379_OracleParser
    public final void synpred379_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1168:64: ( cost_matrix_clause )
        // OracleParser.g:1168:64: cost_matrix_clause
        {
        pushFollow(FOLLOW_cost_matrix_clause_in_synpred379_OracleParser11877);
        cost_matrix_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred379_OracleParser

    // $ANTLR start synpred381_OracleParser
    public final void synpred381_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1166:10: ( stantard_function_pedictions LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN )
        // OracleParser.g:1166:10: stantard_function_pedictions LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN
        {
        pushFollow(FOLLOW_stantard_function_pedictions_in_synpred381_OracleParser11834);
        stantard_function_pedictions();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred381_OracleParser11849); if (state.failed) return ;
        pushFollow(FOLLOW_expression_wrapper_in_synpred381_OracleParser11868);
        expression_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1168:36: ( COMMA expression_wrapper )*
        loop432:
        do {
            int alt432=2;
            int LA432_0 = input.LA(1);

            if ( (LA432_0==COMMA) ) {
                alt432=1;
            }


            switch (alt432) {
        	case 1 :
        	    // OracleParser.g:1168:37: COMMA expression_wrapper
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred381_OracleParser11871); if (state.failed) return ;
        	    pushFollow(FOLLOW_expression_wrapper_in_synpred381_OracleParser11873);
        	    expression_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop432;
            }
        } while (true);

        // OracleParser.g:1168:64: ( cost_matrix_clause )?
        int alt433=2;
        int LA433_0 = input.LA(1);

        if ( (LA433_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("cost")))) {
            alt433=1;
        }
        switch (alt433) {
            case 1 :
                // OracleParser.g:0:0: cost_matrix_clause
                {
                pushFollow(FOLLOW_cost_matrix_clause_in_synpred381_OracleParser11877);
                cost_matrix_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // OracleParser.g:1168:84: ( using_clause )?
        int alt434=2;
        int LA434_0 = input.LA(1);

        if ( (LA434_0==PLSQL_NON_RESERVED_USING) ) {
            alt434=1;
        }
        switch (alt434) {
            case 1 :
                // OracleParser.g:0:0: using_clause
                {
                pushFollow(FOLLOW_using_clause_in_synpred381_OracleParser11880);
                using_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred381_OracleParser11896); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_OracleParser

    // $ANTLR start synpred382_OracleParser
    public final void synpred382_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1172:49: ( char_cs_key )
        // OracleParser.g:1172:49: char_cs_key
        {
        pushFollow(FOLLOW_char_cs_key_in_synpred382_OracleParser11950);
        char_cs_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_OracleParser

    // $ANTLR start synpred385_OracleParser
    public final void synpred385_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1170:10: ( translate_key LEFT_PAREN expression_wrapper ( using_key ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN )
        // OracleParser.g:1170:10: translate_key LEFT_PAREN expression_wrapper ( using_key ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN
        {
        pushFollow(FOLLOW_translate_key_in_synpred385_OracleParser11908);
        translate_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred385_OracleParser11923); if (state.failed) return ;
        pushFollow(FOLLOW_expression_wrapper_in_synpred385_OracleParser11943);
        expression_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1172:36: ( using_key ( char_cs_key | nchar_cs_key ) )?
        int alt437=2;
        int LA437_0 = input.LA(1);

        if ( (LA437_0==PLSQL_NON_RESERVED_USING) ) {
            alt437=1;
        }
        switch (alt437) {
            case 1 :
                // OracleParser.g:1172:37: using_key ( char_cs_key | nchar_cs_key )
                {
                pushFollow(FOLLOW_using_key_in_synpred385_OracleParser11946);
                using_key();

                state._fsp--;
                if (state.failed) return ;
                // OracleParser.g:1172:48: ( char_cs_key | nchar_cs_key )
                int alt436=2;
                int LA436_0 = input.LA(1);

                if ( (LA436_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nchar_cs")))) {
                    int LA436_1 = input.LA(2);

                    if ( ((synpred382_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("char_cs")))) ) {
                        alt436=1;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("nchar_cs"))) ) {
                        alt436=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 436, 1, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 436, 0, input);

                    throw nvae;
                }
                switch (alt436) {
                    case 1 :
                        // OracleParser.g:1172:49: char_cs_key
                        {
                        pushFollow(FOLLOW_char_cs_key_in_synpred385_OracleParser11950);
                        char_cs_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // OracleParser.g:1172:61: nchar_cs_key
                        {
                        pushFollow(FOLLOW_nchar_cs_key_in_synpred385_OracleParser11952);
                        nchar_cs_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }

        // OracleParser.g:1173:21: ( COMMA expression_wrapper )*
        loop438:
        do {
            int alt438=2;
            int LA438_0 = input.LA(1);

            if ( (LA438_0==COMMA) ) {
                alt438=1;
            }


            switch (alt438) {
        	case 1 :
        	    // OracleParser.g:1173:22: COMMA expression_wrapper
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred385_OracleParser11979); if (state.failed) return ;
        	    pushFollow(FOLLOW_expression_wrapper_in_synpred385_OracleParser11981);
        	    expression_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop438;
            }
        } while (true);

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred385_OracleParser11998); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_OracleParser

    // $ANTLR start synpred386_OracleParser
    public final void synpred386_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1177:44: ( ref_key )
        // OracleParser.g:1177:44: ref_key
        {
        pushFollow(FOLLOW_ref_key_in_synpred386_OracleParser12049);
        ref_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_OracleParser

    // $ANTLR start synpred387_OracleParser
    public final void synpred387_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1175:10: ( treat_key LEFT_PAREN expression_wrapper as_key ( ref_key )? type_spec RIGHT_PAREN )
        // OracleParser.g:1175:10: treat_key LEFT_PAREN expression_wrapper as_key ( ref_key )? type_spec RIGHT_PAREN
        {
        pushFollow(FOLLOW_treat_key_in_synpred387_OracleParser12010);
        treat_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred387_OracleParser12025); if (state.failed) return ;
        pushFollow(FOLLOW_expression_wrapper_in_synpred387_OracleParser12044);
        expression_wrapper();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_as_key_in_synpred387_OracleParser12046);
        as_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1177:44: ( ref_key )?
        int alt439=2;
        int LA439_0 = input.LA(1);

        if ( (LA439_0==REGULAR_ID) ) {
            int LA439_1 = input.LA(2);

            if ( ((synpred386_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("ref")))) ) {
                alt439=1;
            }
        }
        switch (alt439) {
            case 1 :
                // OracleParser.g:0:0: ref_key
                {
                pushFollow(FOLLOW_ref_key_in_synpred387_OracleParser12049);
                ref_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_type_spec_in_synpred387_OracleParser12052);
        type_spec();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred387_OracleParser12067); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred387_OracleParser

    // $ANTLR start synpred388_OracleParser
    public final void synpred388_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1181:19: ( leading_key )
        // OracleParser.g:1181:19: leading_key
        {
        pushFollow(FOLLOW_leading_key_in_synpred388_OracleParser12115);
        leading_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_OracleParser

    // $ANTLR start synpred389_OracleParser
    public final void synpred389_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1181:31: ( trailing_key )
        // OracleParser.g:1181:31: trailing_key
        {
        pushFollow(FOLLOW_trailing_key_in_synpred389_OracleParser12117);
        trailing_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_OracleParser

    // $ANTLR start synpred390_OracleParser
    public final void synpred390_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1181:44: ( both_key )
        // OracleParser.g:1181:44: both_key
        {
        pushFollow(FOLLOW_both_key_in_synpred390_OracleParser12119);
        both_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_OracleParser

    // $ANTLR start synpred393_OracleParser
    public final void synpred393_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1179:10: ( trim_key LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN )
        // OracleParser.g:1179:10: trim_key LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN
        {
        pushFollow(FOLLOW_trim_key_in_synpred393_OracleParser12079);
        trim_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred393_OracleParser12094); if (state.failed) return ;
        // OracleParser.g:1181:17: ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )?
        int alt444=2;
        alt444 = dfa444.predict(input);
        switch (alt444) {
            case 1 :
                // OracleParser.g:1181:18: ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key
                {
                // OracleParser.g:1181:18: ( leading_key | trailing_key | both_key )?
                int alt442=4;
                int LA442_0 = input.LA(1);

                if ( (LA442_0==REGULAR_ID) ) {
                    int LA442_1 = input.LA(2);

                    if ( ((synpred388_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("leading")))) ) {
                        alt442=1;
                    }
                    else if ( ((synpred389_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("trailing")))) ) {
                        alt442=2;
                    }
                    else if ( ((synpred390_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("both")))) ) {
                        alt442=3;
                    }
                }
                switch (alt442) {
                    case 1 :
                        // OracleParser.g:1181:19: leading_key
                        {
                        pushFollow(FOLLOW_leading_key_in_synpred393_OracleParser12115);
                        leading_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // OracleParser.g:1181:31: trailing_key
                        {
                        pushFollow(FOLLOW_trailing_key_in_synpred393_OracleParser12117);
                        trailing_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 3 :
                        // OracleParser.g:1181:44: both_key
                        {
                        pushFollow(FOLLOW_both_key_in_synpred393_OracleParser12119);
                        both_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // OracleParser.g:1181:55: ( quoted_string )?
                int alt443=2;
                int LA443_0 = input.LA(1);

                if ( (LA443_0==NATIONAL_CHAR_STRING_LIT||LA443_0==CHAR_STRING||LA443_0==CHAR_STRING_PERL) ) {
                    alt443=1;
                }
                switch (alt443) {
                    case 1 :
                        // OracleParser.g:0:0: quoted_string
                        {
                        pushFollow(FOLLOW_quoted_string_in_synpred393_OracleParser12123);
                        quoted_string();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                pushFollow(FOLLOW_from_key_in_synpred393_OracleParser12126);
                from_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_concatenation_wrapper_in_synpred393_OracleParser12146);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred393_OracleParser12160); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_OracleParser

    // $ANTLR start synpred396_OracleParser
    public final void synpred396_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1184:10: ( xmlagg_key LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )? )
        // OracleParser.g:1184:10: xmlagg_key LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )?
        {
        pushFollow(FOLLOW_xmlagg_key_in_synpred396_OracleParser12172);
        xmlagg_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred396_OracleParser12187); if (state.failed) return ;
        pushFollow(FOLLOW_expression_wrapper_in_synpred396_OracleParser12207);
        expression_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1186:36: ( order_by_clause )?
        int alt445=2;
        int LA445_0 = input.LA(1);

        if ( (LA445_0==SQL92_RESERVED_ORDER) ) {
            alt445=1;
        }
        switch (alt445) {
            case 1 :
                // OracleParser.g:0:0: order_by_clause
                {
                pushFollow(FOLLOW_order_by_clause_in_synpred396_OracleParser12209);
                order_by_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred396_OracleParser12225); if (state.failed) return ;
        // OracleParser.g:1188:13: ( PERIOD general_element_part )?
        int alt446=2;
        int LA446_0 = input.LA(1);

        if ( (LA446_0==PERIOD) ) {
            alt446=1;
        }
        switch (alt446) {
            case 1 :
                // OracleParser.g:1188:14: PERIOD general_element_part
                {
                match(input,PERIOD,FOLLOW_PERIOD_in_synpred396_OracleParser12241); if (state.failed) return ;
                pushFollow(FOLLOW_general_element_part_in_synpred396_OracleParser12243);
                general_element_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred396_OracleParser

    // $ANTLR start synpred397_OracleParser
    public final void synpred397_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1189:11: ( xmlcolattval_key )
        // OracleParser.g:1189:11: xmlcolattval_key
        {
        pushFollow(FOLLOW_xmlcolattval_key_in_synpred397_OracleParser12257);
        xmlcolattval_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_OracleParser

    // $ANTLR start synpred400_OracleParser
    public final void synpred400_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1189:10: ( ( xmlcolattval_key | xmlforest_key ) LEFT_PAREN xml_multiuse_expression_element ( COMMA xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )? )
        // OracleParser.g:1189:10: ( xmlcolattval_key | xmlforest_key ) LEFT_PAREN xml_multiuse_expression_element ( COMMA xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )?
        {
        // OracleParser.g:1189:10: ( xmlcolattval_key | xmlforest_key )
        int alt447=2;
        int LA447_0 = input.LA(1);

        if ( (LA447_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("xmlforest")))) {
            int LA447_1 = input.LA(2);

            if ( ((synpred397_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlcolattval")))) ) {
                alt447=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlforest"))) ) {
                alt447=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 447, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 447, 0, input);

            throw nvae;
        }
        switch (alt447) {
            case 1 :
                // OracleParser.g:1189:11: xmlcolattval_key
                {
                pushFollow(FOLLOW_xmlcolattval_key_in_synpred400_OracleParser12257);
                xmlcolattval_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1189:29: xmlforest_key
                {
                pushFollow(FOLLOW_xmlforest_key_in_synpred400_OracleParser12260);
                xmlforest_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred400_OracleParser12277); if (state.failed) return ;
        pushFollow(FOLLOW_xml_multiuse_expression_element_in_synpred400_OracleParser12296);
        xml_multiuse_expression_element();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1191:49: ( COMMA xml_multiuse_expression_element )*
        loop448:
        do {
            int alt448=2;
            int LA448_0 = input.LA(1);

            if ( (LA448_0==COMMA) ) {
                alt448=1;
            }


            switch (alt448) {
        	case 1 :
        	    // OracleParser.g:1191:50: COMMA xml_multiuse_expression_element
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred400_OracleParser12299); if (state.failed) return ;
        	    pushFollow(FOLLOW_xml_multiuse_expression_element_in_synpred400_OracleParser12302);
        	    xml_multiuse_expression_element();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop448;
            }
        } while (true);

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred400_OracleParser12318); if (state.failed) return ;
        // OracleParser.g:1193:13: ( PERIOD general_element_part )?
        int alt449=2;
        int LA449_0 = input.LA(1);

        if ( (LA449_0==PERIOD) ) {
            alt449=1;
        }
        switch (alt449) {
            case 1 :
                // OracleParser.g:1193:14: PERIOD general_element_part
                {
                match(input,PERIOD,FOLLOW_PERIOD_in_synpred400_OracleParser12334); if (state.failed) return ;
                pushFollow(FOLLOW_general_element_part_in_synpred400_OracleParser12336);
                general_element_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred400_OracleParser

    // $ANTLR start synpred401_OracleParser
    public final void synpred401_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1196:18: ( entityescaping_key )
        // OracleParser.g:1196:18: entityescaping_key
        {
        pushFollow(FOLLOW_entityescaping_key_in_synpred401_OracleParser12384);
        entityescaping_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_OracleParser

    // $ANTLR start synpred402_OracleParser
    public final void synpred402_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1196:37: ( noentityescaping_key )
        // OracleParser.g:1196:37: noentityescaping_key
        {
        pushFollow(FOLLOW_noentityescaping_key_in_synpred402_OracleParser12386);
        noentityescaping_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_OracleParser

    // $ANTLR start synpred403_OracleParser
    public final void synpred403_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1197:18: ( name_key )
        // OracleParser.g:1197:18: name_key
        {
        pushFollow(FOLLOW_name_key_in_synpred403_OracleParser12407);
        name_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_OracleParser

    // $ANTLR start synpred404_OracleParser
    public final void synpred404_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1197:27: ( evalname_key )
        // OracleParser.g:1197:27: evalname_key
        {
        pushFollow(FOLLOW_evalname_key_in_synpred404_OracleParser12409);
        evalname_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_OracleParser

    // $ANTLR start synpred405_OracleParser
    public final void synpred405_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1198:18: ({...}? COMMA xml_attributes_clause )
        // OracleParser.g:1198:18: {...}? COMMA xml_attributes_clause
        {
        if ( !((input.LT(2).getText().equalsIgnoreCase("xmlattributes"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred405_OracleParser", "input.LT(2).getText().equalsIgnoreCase(\"xmlattributes\")");
        }
        match(input,COMMA,FOLLOW_COMMA_in_synpred405_OracleParser12434); if (state.failed) return ;
        pushFollow(FOLLOW_xml_attributes_clause_in_synpred405_OracleParser12437);
        xml_attributes_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_OracleParser

    // $ANTLR start synpred409_OracleParser
    public final void synpred409_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1194:10: ( xmlelement_key LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA xml_attributes_clause )? ( COMMA expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )? )
        // OracleParser.g:1194:10: xmlelement_key LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA xml_attributes_clause )? ( COMMA expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )?
        {
        pushFollow(FOLLOW_xmlelement_key_in_synpred409_OracleParser12349);
        xmlelement_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred409_OracleParser12364); if (state.failed) return ;
        // OracleParser.g:1196:17: ( entityescaping_key | noentityescaping_key )?
        int alt451=3;
        int LA451_0 = input.LA(1);

        if ( (LA451_0==REGULAR_ID) ) {
            int LA451_1 = input.LA(2);

            if ( ((synpred401_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("entityescaping")))) ) {
                alt451=1;
            }
            else if ( ((synpred402_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("noentityescaping")))) ) {
                alt451=2;
            }
        }
        switch (alt451) {
            case 1 :
                // OracleParser.g:1196:18: entityescaping_key
                {
                pushFollow(FOLLOW_entityescaping_key_in_synpred409_OracleParser12384);
                entityescaping_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1196:37: noentityescaping_key
                {
                pushFollow(FOLLOW_noentityescaping_key_in_synpred409_OracleParser12386);
                noentityescaping_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // OracleParser.g:1197:17: ( name_key | evalname_key )?
        int alt452=3;
        int LA452_0 = input.LA(1);

        if ( (LA452_0==REGULAR_ID) ) {
            int LA452_1 = input.LA(2);

            if ( ((synpred403_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("name")))) ) {
                alt452=1;
            }
            else if ( ((synpred404_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("evalname")))) ) {
                alt452=2;
            }
        }
        switch (alt452) {
            case 1 :
                // OracleParser.g:1197:18: name_key
                {
                pushFollow(FOLLOW_name_key_in_synpred409_OracleParser12407);
                name_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1197:27: evalname_key
                {
                pushFollow(FOLLOW_evalname_key_in_synpred409_OracleParser12409);
                evalname_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_expression_wrapper_in_synpred409_OracleParser12413);
        expression_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1198:17: ({...}? COMMA xml_attributes_clause )?
        int alt453=2;
        int LA453_0 = input.LA(1);

        if ( (LA453_0==COMMA) ) {
            int LA453_1 = input.LA(2);

            if ( ((synpred405_OracleParser()&&(input.LT(2).getText().equalsIgnoreCase("xmlattributes")))) ) {
                alt453=1;
            }
        }
        switch (alt453) {
            case 1 :
                // OracleParser.g:1198:18: {...}? COMMA xml_attributes_clause
                {
                if ( !((input.LT(2).getText().equalsIgnoreCase("xmlattributes"))) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred409_OracleParser", "input.LT(2).getText().equalsIgnoreCase(\"xmlattributes\")");
                }
                match(input,COMMA,FOLLOW_COMMA_in_synpred409_OracleParser12434); if (state.failed) return ;
                pushFollow(FOLLOW_xml_attributes_clause_in_synpred409_OracleParser12437);
                xml_attributes_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // OracleParser.g:1199:17: ( COMMA expression_wrapper ( column_alias )? )*
        loop455:
        do {
            int alt455=2;
            int LA455_0 = input.LA(1);

            if ( (LA455_0==COMMA) ) {
                alt455=1;
            }


            switch (alt455) {
        	case 1 :
        	    // OracleParser.g:1199:18: COMMA expression_wrapper ( column_alias )?
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred409_OracleParser12458); if (state.failed) return ;
        	    pushFollow(FOLLOW_expression_wrapper_in_synpred409_OracleParser12461);
        	    expression_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // OracleParser.g:1199:44: ( column_alias )?
        	    int alt454=2;
        	    int LA454_0 = input.LA(1);

        	    if ( (LA454_0==NATIONAL_CHAR_STRING_LIT||LA454_0==CHAR_STRING||LA454_0==CHAR_STRING_PERL||LA454_0==DELIMITED_ID||LA454_0==INTRODUCER||LA454_0==SQL92_RESERVED_AS||LA454_0==REGULAR_ID) ) {
        	        alt454=1;
        	    }
        	    switch (alt454) {
        	        case 1 :
        	            // OracleParser.g:0:0: column_alias
        	            {
        	            pushFollow(FOLLOW_column_alias_in_synpred409_OracleParser12463);
        	            column_alias();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }
        	            break;

        	    }


        	    }
        	    break;

        	default :
        	    break loop455;
            }
        } while (true);

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred409_OracleParser12480); if (state.failed) return ;
        // OracleParser.g:1201:13: ( PERIOD general_element_part )?
        int alt456=2;
        int LA456_0 = input.LA(1);

        if ( (LA456_0==PERIOD) ) {
            alt456=1;
        }
        switch (alt456) {
            case 1 :
                // OracleParser.g:1201:14: PERIOD general_element_part
                {
                match(input,PERIOD,FOLLOW_PERIOD_in_synpred409_OracleParser12496); if (state.failed) return ;
                pushFollow(FOLLOW_general_element_part_in_synpred409_OracleParser12498);
                general_element_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred409_OracleParser

    // $ANTLR start synpred410_OracleParser
    public final void synpred410_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1205:17: ( xml_passing_clause )
        // OracleParser.g:1205:17: xml_passing_clause
        {
        pushFollow(FOLLOW_xml_passing_clause_in_synpred410_OracleParser12563);
        xml_passing_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred410_OracleParser

    // $ANTLR start synpred411_OracleParser
    public final void synpred411_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1202:10: ( xmlexists_key LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN )
        // OracleParser.g:1202:10: xmlexists_key LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN
        {
        pushFollow(FOLLOW_xmlexists_key_in_synpred411_OracleParser12511);
        xmlexists_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred411_OracleParser12526); if (state.failed) return ;
        pushFollow(FOLLOW_expression_wrapper_in_synpred411_OracleParser12545);
        expression_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1205:17: ( xml_passing_clause )?
        int alt457=2;
        int LA457_0 = input.LA(1);

        if ( (LA457_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {
            alt457=1;
        }
        switch (alt457) {
            case 1 :
                // OracleParser.g:0:0: xml_passing_clause
                {
                pushFollow(FOLLOW_xml_passing_clause_in_synpred411_OracleParser12563);
                xml_passing_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred411_OracleParser12578); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred411_OracleParser

    // $ANTLR start synpred412_OracleParser
    public final void synpred412_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1209:18: ( document_key )
        // OracleParser.g:1209:18: document_key
        {
        pushFollow(FOLLOW_document_key_in_synpred412_OracleParser12626);
        document_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_OracleParser

    // $ANTLR start synpred413_OracleParser
    public final void synpred413_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1209:66: ( wellformed_key )
        // OracleParser.g:1209:66: wellformed_key
        {
        pushFollow(FOLLOW_wellformed_key_in_synpred413_OracleParser12633);
        wellformed_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred413_OracleParser

    // $ANTLR start synpred415_OracleParser
    public final void synpred415_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1207:10: ( xmlparse_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )? )
        // OracleParser.g:1207:10: xmlparse_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )?
        {
        pushFollow(FOLLOW_xmlparse_key_in_synpred415_OracleParser12590);
        xmlparse_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred415_OracleParser12605); if (state.failed) return ;
        // OracleParser.g:1209:17: ( document_key | content_key )
        int alt458=2;
        int LA458_0 = input.LA(1);

        if ( (LA458_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("content")))) {
            int LA458_1 = input.LA(2);

            if ( ((synpred412_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("document")))) ) {
                alt458=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("content"))) ) {
                alt458=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 458, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 458, 0, input);

            throw nvae;
        }
        switch (alt458) {
            case 1 :
                // OracleParser.g:1209:18: document_key
                {
                pushFollow(FOLLOW_document_key_in_synpred415_OracleParser12626);
                document_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1209:31: content_key
                {
                pushFollow(FOLLOW_content_key_in_synpred415_OracleParser12628);
                content_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_concatenation_wrapper_in_synpred415_OracleParser12631);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1209:66: ( wellformed_key )?
        int alt459=2;
        int LA459_0 = input.LA(1);

        if ( (LA459_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("wellformed")))) {
            alt459=1;
        }
        switch (alt459) {
            case 1 :
                // OracleParser.g:0:0: wellformed_key
                {
                pushFollow(FOLLOW_wellformed_key_in_synpred415_OracleParser12633);
                wellformed_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred415_OracleParser12648); if (state.failed) return ;
        // OracleParser.g:1211:13: ( PERIOD general_element_part )?
        int alt460=2;
        int LA460_0 = input.LA(1);

        if ( (LA460_0==PERIOD) ) {
            alt460=1;
        }
        switch (alt460) {
            case 1 :
                // OracleParser.g:1211:14: PERIOD general_element_part
                {
                match(input,PERIOD,FOLLOW_PERIOD_in_synpred415_OracleParser12664); if (state.failed) return ;
                pushFollow(FOLLOW_general_element_part_in_synpred415_OracleParser12666);
                general_element_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred415_OracleParser

    // $ANTLR start synpred416_OracleParser
    public final void synpred416_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1214:22: ( name_key id )
        // OracleParser.g:1214:22: name_key id
        {
        pushFollow(FOLLOW_name_key_in_synpred416_OracleParser12719);
        name_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_id_in_synpred416_OracleParser12721);
        id();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_OracleParser

    // $ANTLR start synpred419_OracleParser
    public final void synpred419_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1212:10: ( xmlpi_key LEFT_PAREN ( name_key id | evalname_key concatenation_wrapper ) ( COMMA concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )? )
        // OracleParser.g:1212:10: xmlpi_key LEFT_PAREN ( name_key id | evalname_key concatenation_wrapper ) ( COMMA concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )?
        {
        pushFollow(FOLLOW_xmlpi_key_in_synpred419_OracleParser12679);
        xmlpi_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred419_OracleParser12694); if (state.failed) return ;
        // OracleParser.g:1214:17: ( name_key id | evalname_key concatenation_wrapper )
        int alt461=2;
        alt461 = dfa461.predict(input);
        switch (alt461) {
            case 1 :
                // OracleParser.g:1214:22: name_key id
                {
                pushFollow(FOLLOW_name_key_in_synpred419_OracleParser12719);
                name_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_id_in_synpred419_OracleParser12721);
                id();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1215:22: evalname_key concatenation_wrapper
                {
                pushFollow(FOLLOW_evalname_key_in_synpred419_OracleParser12744);
                evalname_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_concatenation_wrapper_in_synpred419_OracleParser12746);
                concatenation_wrapper();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // OracleParser.g:1217:17: ( COMMA concatenation_wrapper )?
        int alt462=2;
        int LA462_0 = input.LA(1);

        if ( (LA462_0==COMMA) ) {
            alt462=1;
        }
        switch (alt462) {
            case 1 :
                // OracleParser.g:1217:18: COMMA concatenation_wrapper
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred419_OracleParser12783); if (state.failed) return ;
                pushFollow(FOLLOW_concatenation_wrapper_in_synpred419_OracleParser12786);
                concatenation_wrapper();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred419_OracleParser12802); if (state.failed) return ;
        // OracleParser.g:1219:13: ( PERIOD general_element_part )?
        int alt463=2;
        int LA463_0 = input.LA(1);

        if ( (LA463_0==PERIOD) ) {
            alt463=1;
        }
        switch (alt463) {
            case 1 :
                // OracleParser.g:1219:14: PERIOD general_element_part
                {
                match(input,PERIOD,FOLLOW_PERIOD_in_synpred419_OracleParser12818); if (state.failed) return ;
                pushFollow(FOLLOW_general_element_part_in_synpred419_OracleParser12820);
                general_element_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred419_OracleParser

    // $ANTLR start synpred420_OracleParser
    public final void synpred420_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1222:39: ( xml_passing_clause )
        // OracleParser.g:1222:39: xml_passing_clause
        {
        pushFollow(FOLLOW_xml_passing_clause_in_synpred420_OracleParser12870);
        xml_passing_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred420_OracleParser

    // $ANTLR start synpred423_OracleParser
    public final void synpred423_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1220:10: ( xmlquery_key LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key content_key ( null_key on_key empty_key )? RIGHT_PAREN ( PERIOD general_element_part )? )
        // OracleParser.g:1220:10: xmlquery_key LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key content_key ( null_key on_key empty_key )? RIGHT_PAREN ( PERIOD general_element_part )?
        {
        pushFollow(FOLLOW_xmlquery_key_in_synpred423_OracleParser12833);
        xmlquery_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred423_OracleParser12848); if (state.failed) return ;
        pushFollow(FOLLOW_concatenation_wrapper_in_synpred423_OracleParser12868);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1222:39: ( xml_passing_clause )?
        int alt464=2;
        alt464 = dfa464.predict(input);
        switch (alt464) {
            case 1 :
                // OracleParser.g:0:0: xml_passing_clause
                {
                pushFollow(FOLLOW_xml_passing_clause_in_synpred423_OracleParser12870);
                xml_passing_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_returning_key_in_synpred423_OracleParser12889);
        returning_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_content_key_in_synpred423_OracleParser12892);
        content_key();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1223:45: ( null_key on_key empty_key )?
        int alt465=2;
        int LA465_0 = input.LA(1);

        if ( (LA465_0==SQL92_RESERVED_NULL) ) {
            alt465=1;
        }
        switch (alt465) {
            case 1 :
                // OracleParser.g:1223:46: null_key on_key empty_key
                {
                pushFollow(FOLLOW_null_key_in_synpred423_OracleParser12896);
                null_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_on_key_in_synpred423_OracleParser12898);
                on_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_empty_key_in_synpred423_OracleParser12901);
                empty_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred423_OracleParser12918); if (state.failed) return ;
        // OracleParser.g:1225:13: ( PERIOD general_element_part )?
        int alt466=2;
        int LA466_0 = input.LA(1);

        if ( (LA466_0==PERIOD) ) {
            alt466=1;
        }
        switch (alt466) {
            case 1 :
                // OracleParser.g:1225:14: PERIOD general_element_part
                {
                match(input,PERIOD,FOLLOW_PERIOD_in_synpred423_OracleParser12934); if (state.failed) return ;
                pushFollow(FOLLOW_general_element_part_in_synpred423_OracleParser12936);
                general_element_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred423_OracleParser

    // $ANTLR start synpred426_OracleParser
    public final void synpred426_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1226:10: ( xmlroot_key LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )? )
        // OracleParser.g:1226:10: xmlroot_key LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )?
        {
        pushFollow(FOLLOW_xmlroot_key_in_synpred426_OracleParser12949);
        xmlroot_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred426_OracleParser12964); if (state.failed) return ;
        pushFollow(FOLLOW_concatenation_wrapper_in_synpred426_OracleParser12983);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_xmlroot_param_version_part_in_synpred426_OracleParser13005);
        xmlroot_param_version_part();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1230:21: ( COMMA xmlroot_param_standalone_part )?
        int alt467=2;
        int LA467_0 = input.LA(1);

        if ( (LA467_0==COMMA) ) {
            alt467=1;
        }
        switch (alt467) {
            case 1 :
                // OracleParser.g:1230:22: COMMA xmlroot_param_standalone_part
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred426_OracleParser13028); if (state.failed) return ;
                pushFollow(FOLLOW_xmlroot_param_standalone_part_in_synpred426_OracleParser13031);
                xmlroot_param_standalone_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred426_OracleParser13047); if (state.failed) return ;
        // OracleParser.g:1232:13: ( PERIOD general_element_part )?
        int alt468=2;
        int LA468_0 = input.LA(1);

        if ( (LA468_0==PERIOD) ) {
            alt468=1;
        }
        switch (alt468) {
            case 1 :
                // OracleParser.g:1232:14: PERIOD general_element_part
                {
                match(input,PERIOD,FOLLOW_PERIOD_in_synpred426_OracleParser13063); if (state.failed) return ;
                pushFollow(FOLLOW_general_element_part_in_synpred426_OracleParser13065);
                general_element_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred426_OracleParser

    // $ANTLR start synpred427_OracleParser
    public final void synpred427_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1235:18: ( document_key )
        // OracleParser.g:1235:18: document_key
        {
        pushFollow(FOLLOW_document_key_in_synpred427_OracleParser13113);
        document_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred427_OracleParser

    // $ANTLR start synpred429_OracleParser
    public final void synpred429_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1237:17: ( xmlserialize_param_enconding_part )
        // OracleParser.g:1237:17: xmlserialize_param_enconding_part
        {
        pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_synpred429_OracleParser13160);
        xmlserialize_param_enconding_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred429_OracleParser

    // $ANTLR start synpred430_OracleParser
    public final void synpred430_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1238:17: ( xmlserialize_param_version_part )
        // OracleParser.g:1238:17: xmlserialize_param_version_part
        {
        pushFollow(FOLLOW_xmlserialize_param_version_part_in_synpred430_OracleParser13179);
        xmlserialize_param_version_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred430_OracleParser

    // $ANTLR start synpred431_OracleParser
    public final void synpred431_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1239:17: ( xmlserialize_param_ident_part )
        // OracleParser.g:1239:17: xmlserialize_param_ident_part
        {
        pushFollow(FOLLOW_xmlserialize_param_ident_part_in_synpred431_OracleParser13198);
        xmlserialize_param_ident_part();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred431_OracleParser

    // $ANTLR start synpred432_OracleParser
    public final void synpred432_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1240:19: ( hide_key )
        // OracleParser.g:1240:19: hide_key
        {
        pushFollow(FOLLOW_hide_key_in_synpred432_OracleParser13219);
        hide_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred432_OracleParser

    // $ANTLR start synpred433_OracleParser
    public final void synpred433_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1240:18: ( ( hide_key | show_key ) defaults_key )
        // OracleParser.g:1240:18: ( hide_key | show_key ) defaults_key
        {
        // OracleParser.g:1240:18: ( hide_key | show_key )
        int alt469=2;
        int LA469_0 = input.LA(1);

        if ( (LA469_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("show")))) {
            int LA469_1 = input.LA(2);

            if ( ((synpred432_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("hide")))) ) {
                alt469=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("show"))) ) {
                alt469=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 469, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 469, 0, input);

            throw nvae;
        }
        switch (alt469) {
            case 1 :
                // OracleParser.g:1240:19: hide_key
                {
                pushFollow(FOLLOW_hide_key_in_synpred433_OracleParser13219);
                hide_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1240:28: show_key
                {
                pushFollow(FOLLOW_show_key_in_synpred433_OracleParser13221);
                show_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_defaults_key_in_synpred433_OracleParser13224);
        defaults_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred433_OracleParser

    // $ANTLR start synpred435_OracleParser
    public final void synpred435_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1233:10: ( xmlserialize_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )? )
        // OracleParser.g:1233:10: xmlserialize_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )?
        {
        pushFollow(FOLLOW_xmlserialize_key_in_synpred435_OracleParser13078);
        xmlserialize_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred435_OracleParser13093); if (state.failed) return ;
        // OracleParser.g:1235:17: ( document_key | content_key )
        int alt470=2;
        int LA470_0 = input.LA(1);

        if ( (LA470_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("content")))) {
            int LA470_1 = input.LA(2);

            if ( ((synpred427_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("document")))) ) {
                alt470=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("content"))) ) {
                alt470=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 470, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 470, 0, input);

            throw nvae;
        }
        switch (alt470) {
            case 1 :
                // OracleParser.g:1235:18: document_key
                {
                pushFollow(FOLLOW_document_key_in_synpred435_OracleParser13113);
                document_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // OracleParser.g:1235:31: content_key
                {
                pushFollow(FOLLOW_content_key_in_synpred435_OracleParser13115);
                content_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_concatenation_wrapper_in_synpred435_OracleParser13134);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1236:39: ( as_key type_spec )?
        int alt471=2;
        int LA471_0 = input.LA(1);

        if ( (LA471_0==SQL92_RESERVED_AS) ) {
            alt471=1;
        }
        switch (alt471) {
            case 1 :
                // OracleParser.g:1236:40: as_key type_spec
                {
                pushFollow(FOLLOW_as_key_in_synpred435_OracleParser13137);
                as_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_type_spec_in_synpred435_OracleParser13140);
                type_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // OracleParser.g:1237:17: ( xmlserialize_param_enconding_part )?
        int alt472=2;
        int LA472_0 = input.LA(1);

        if ( (LA472_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("version"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
            int LA472_1 = input.LA(2);

            if ( ((synpred429_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("encoding")))) ) {
                alt472=1;
            }
        }
        switch (alt472) {
            case 1 :
                // OracleParser.g:0:0: xmlserialize_param_enconding_part
                {
                pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_synpred435_OracleParser13160);
                xmlserialize_param_enconding_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // OracleParser.g:1238:17: ( xmlserialize_param_version_part )?
        int alt473=2;
        alt473 = dfa473.predict(input);
        switch (alt473) {
            case 1 :
                // OracleParser.g:0:0: xmlserialize_param_version_part
                {
                pushFollow(FOLLOW_xmlserialize_param_version_part_in_synpred435_OracleParser13179);
                xmlserialize_param_version_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // OracleParser.g:1239:17: ( xmlserialize_param_ident_part )?
        int alt474=2;
        int LA474_0 = input.LA(1);

        if ( (LA474_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
            int LA474_1 = input.LA(2);

            if ( (LA474_1==SQL92_RESERVED_SIZE) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                alt474=1;
            }
            else if ( (LA474_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                int LA474_4 = input.LA(3);

                if ( (((synpred431_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("indent")))||(synpred431_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("no"))))) ) {
                    alt474=1;
                }
            }
            else if ( (LA474_1==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                alt474=1;
            }
        }
        switch (alt474) {
            case 1 :
                // OracleParser.g:0:0: xmlserialize_param_ident_part
                {
                pushFollow(FOLLOW_xmlserialize_param_ident_part_in_synpred435_OracleParser13198);
                xmlserialize_param_ident_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // OracleParser.g:1240:17: ( ( hide_key | show_key ) defaults_key )?
        int alt476=2;
        int LA476_0 = input.LA(1);

        if ( (LA476_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
            alt476=1;
        }
        switch (alt476) {
            case 1 :
                // OracleParser.g:1240:18: ( hide_key | show_key ) defaults_key
                {
                // OracleParser.g:1240:18: ( hide_key | show_key )
                int alt475=2;
                int LA475_0 = input.LA(1);

                if ( (LA475_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("show")))) {
                    int LA475_1 = input.LA(2);

                    if ( ((synpred432_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("hide")))) ) {
                        alt475=1;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("show"))) ) {
                        alt475=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 475, 1, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 475, 0, input);

                    throw nvae;
                }
                switch (alt475) {
                    case 1 :
                        // OracleParser.g:1240:19: hide_key
                        {
                        pushFollow(FOLLOW_hide_key_in_synpred435_OracleParser13219);
                        hide_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // OracleParser.g:1240:28: show_key
                        {
                        pushFollow(FOLLOW_show_key_in_synpred435_OracleParser13221);
                        show_key();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                pushFollow(FOLLOW_defaults_key_in_synpred435_OracleParser13224);
                defaults_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred435_OracleParser13240); if (state.failed) return ;
        // OracleParser.g:1242:13: ( PERIOD general_element_part )?
        int alt477=2;
        int LA477_0 = input.LA(1);

        if ( (LA477_0==PERIOD) ) {
            alt477=1;
        }
        switch (alt477) {
            case 1 :
                // OracleParser.g:1242:14: PERIOD general_element_part
                {
                match(input,PERIOD,FOLLOW_PERIOD_in_synpred435_OracleParser13256); if (state.failed) return ;
                pushFollow(FOLLOW_general_element_part_in_synpred435_OracleParser13258);
                general_element_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred435_OracleParser

    // $ANTLR start synpred436_OracleParser
    public final void synpred436_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1245:17: ( xml_namespaces_clause )
        // OracleParser.g:1245:17: xml_namespaces_clause
        {
        pushFollow(FOLLOW_xml_namespaces_clause_in_synpred436_OracleParser13305);
        xml_namespaces_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred436_OracleParser

    // $ANTLR start synpred437_OracleParser
    public final void synpred437_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1247:17: ( xml_passing_clause )
        // OracleParser.g:1247:17: xml_passing_clause
        {
        pushFollow(FOLLOW_xml_passing_clause_in_synpred437_OracleParser13342);
        xml_passing_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred437_OracleParser

    // $ANTLR start synpred438_OracleParser
    public final void synpred438_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1248:18: ( columns_key xml_table_column ( COMMA xml_table_column ) )
        // OracleParser.g:1248:18: columns_key xml_table_column ( COMMA xml_table_column )
        {
        pushFollow(FOLLOW_columns_key_in_synpred438_OracleParser13362);
        columns_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_xml_table_column_in_synpred438_OracleParser13365);
        xml_table_column();

        state._fsp--;
        if (state.failed) return ;
        // OracleParser.g:1248:48: ( COMMA xml_table_column )
        // OracleParser.g:1248:49: COMMA xml_table_column
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred438_OracleParser13368); if (state.failed) return ;
        pushFollow(FOLLOW_xml_table_column_in_synpred438_OracleParser13371);
        xml_table_column();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred438_OracleParser

    // $ANTLR start synpred440_OracleParser
    public final void synpred440_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1272:13: ( query_partition_clause )
        // OracleParser.g:1272:13: query_partition_clause
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred440_OracleParser13566);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred440_OracleParser

    // $ANTLR start synpred441_OracleParser
    public final void synpred441_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1273:30: ( windowing_clause )
        // OracleParser.g:1273:30: windowing_clause
        {
        pushFollow(FOLLOW_windowing_clause_in_synpred441_OracleParser13584);
        windowing_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred441_OracleParser

    // $ANTLR start synpred444_OracleParser
    public final void synpred444_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1287:10: ( rows_key )
        // OracleParser.g:1287:10: rows_key
        {
        pushFollow(FOLLOW_rows_key_in_synpred444_OracleParser13715);
        rows_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred444_OracleParser

    // $ANTLR start synpred445_OracleParser
    public final void synpred445_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1292:10: ( unbounded_key preceding_key )
        // OracleParser.g:1292:10: unbounded_key preceding_key
        {
        pushFollow(FOLLOW_unbounded_key_in_synpred445_OracleParser13746);
        unbounded_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_preceding_key_in_synpred445_OracleParser13749);
        preceding_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred445_OracleParser

    // $ANTLR start synpred447_OracleParser
    public final void synpred447_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1294:33: ( preceding_key )
        // OracleParser.g:1294:33: preceding_key
        {
        pushFollow(FOLLOW_preceding_key_in_synpred447_OracleParser13777);
        preceding_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred447_OracleParser

    // $ANTLR start synpred449_OracleParser
    public final void synpred449_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1300:25: ( COMMA using_element )
        // OracleParser.g:1300:25: COMMA using_element
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred449_OracleParser13828); if (state.failed) return ;
        pushFollow(FOLLOW_using_element_in_synpred449_OracleParser13831);
        using_element();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred449_OracleParser

    // $ANTLR start synpred450_OracleParser
    public final void synpred450_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1305:18: ( out_key )
        // OracleParser.g:1305:18: out_key
        {
        pushFollow(FOLLOW_out_key_in_synpred450_OracleParser13862);
        out_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred450_OracleParser

    // $ANTLR start synpred452_OracleParser
    public final void synpred452_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1305:27: ( out_key )
        // OracleParser.g:1305:27: out_key
        {
        pushFollow(FOLLOW_out_key_in_synpred452_OracleParser13865);
        out_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred452_OracleParser

    // $ANTLR start synpred453_OracleParser
    public final void synpred453_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1305:58: ( column_alias )
        // OracleParser.g:1305:58: column_alias
        {
        pushFollow(FOLLOW_column_alias_in_synpred453_OracleParser13871);
        column_alias();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred453_OracleParser

    // $ANTLR start synpred454_OracleParser
    public final void synpred454_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1314:10: ( within_key group_key LEFT_PAREN order_by_clause RIGHT_PAREN )
        // OracleParser.g:1314:10: within_key group_key LEFT_PAREN order_by_clause RIGHT_PAREN
        {
        pushFollow(FOLLOW_within_key_in_synpred454_OracleParser13943);
        within_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_group_key_in_synpred454_OracleParser13946);
        group_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred454_OracleParser13949); if (state.failed) return ;
        pushFollow(FOLLOW_order_by_clause_in_synpred454_OracleParser13952);
        order_by_clause();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred454_OracleParser13954); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred454_OracleParser

    // $ANTLR start synpred455_OracleParser
    public final void synpred455_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1320:20: ( auto_key )
        // OracleParser.g:1320:20: auto_key
        {
        pushFollow(FOLLOW_auto_key_in_synpred455_OracleParser14000);
        auto_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred455_OracleParser

    // $ANTLR start synpred460_OracleParser
    public final void synpred460_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1328:73: ( column_alias )
        // OracleParser.g:1328:73: column_alias
        {
        pushFollow(FOLLOW_column_alias_in_synpred460_OracleParser14104);
        column_alias();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred460_OracleParser

    // $ANTLR start synpred461_OracleParser
    public final void synpred461_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1334:14: ( entityescaping_key )
        // OracleParser.g:1334:14: entityescaping_key
        {
        pushFollow(FOLLOW_entityescaping_key_in_synpred461_OracleParser14153);
        entityescaping_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred461_OracleParser

    // $ANTLR start synpred462_OracleParser
    public final void synpred462_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1334:33: ( noentityescaping_key )
        // OracleParser.g:1334:33: noentityescaping_key
        {
        pushFollow(FOLLOW_noentityescaping_key_in_synpred462_OracleParser14155);
        noentityescaping_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred462_OracleParser

    // $ANTLR start synpred463_OracleParser
    public final void synpred463_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1335:14: ( schemacheck_key )
        // OracleParser.g:1335:14: schemacheck_key
        {
        pushFollow(FOLLOW_schemacheck_key_in_synpred463_OracleParser14172);
        schemacheck_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred463_OracleParser

    // $ANTLR start synpred464_OracleParser
    public final void synpred464_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1335:30: ( noschemacheck_key )
        // OracleParser.g:1335:30: noschemacheck_key
        {
        pushFollow(FOLLOW_noschemacheck_key_in_synpred464_OracleParser14174);
        noschemacheck_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred464_OracleParser

    // $ANTLR start synpred466_OracleParser
    public final void synpred466_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1343:14: ( concatenation_wrapper column_alias )
        // OracleParser.g:1343:14: concatenation_wrapper column_alias
        {
        pushFollow(FOLLOW_concatenation_wrapper_in_synpred466_OracleParser14256);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_column_alias_in_synpred466_OracleParser14258);
        column_alias();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred466_OracleParser

    // $ANTLR start synpred468_OracleParser
    public final void synpred468_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1345:14: ( default_key )
        // OracleParser.g:1345:15: default_key
        {
        pushFollow(FOLLOW_default_key_in_synpred468_OracleParser14302);
        default_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred468_OracleParser

    // $ANTLR start synpred470_OracleParser
    public final void synpred470_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1352:21: ( path_key concatenation_wrapper )
        // OracleParser.g:1352:21: path_key concatenation_wrapper
        {
        pushFollow(FOLLOW_path_key_in_synpred470_OracleParser14366);
        path_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_concatenation_wrapper_in_synpred470_OracleParser14368);
        concatenation_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred470_OracleParser

    // $ANTLR start synpred471_OracleParser
    public final void synpred471_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1352:55: ( default_key )
        // OracleParser.g:1352:56: default_key
        {
        pushFollow(FOLLOW_default_key_in_synpred471_OracleParser14374);
        default_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred471_OracleParser

    // $ANTLR start synpred474_OracleParser
    public final void synpred474_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1370:24: ( no_key value_key )
        // OracleParser.g:1370:24: no_key value_key
        {
        pushFollow(FOLLOW_no_key_in_synpred474_OracleParser14592);
        no_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_value_key_in_synpred474_OracleParser14594);
        value_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred474_OracleParser

    // $ANTLR start synpred475_OracleParser
    public final void synpred475_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1374:27: ( yes_key )
        // OracleParser.g:1374:27: yes_key
        {
        pushFollow(FOLLOW_yes_key_in_synpred475_OracleParser14621);
        yes_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred475_OracleParser

    // $ANTLR start synpred477_OracleParser
    public final void synpred477_OracleParser_fragment() throws RecognitionException {   
        // OracleParser.g:1386:10: ( no_key indent_key )
        // OracleParser.g:1386:10: no_key indent_key
        {
        pushFollow(FOLLOW_no_key_in_synpred477_OracleParser14693);
        no_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_indent_key_in_synpred477_OracleParser14695);
        indent_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred477_OracleParser

    // Delegated rules
    public OracleParser_Keys.record_key_return record_key() throws RecognitionException { return gKeys.record_key(); }
    public OracleParser_Keys.exclusive_key_return exclusive_key() throws RecognitionException { return gKeys.exclusive_key(); }
    public OracleParser_Keys.rtrim_key_return rtrim_key() throws RecognitionException { return gKeys.rtrim_key(); }
    public OracleParser_Keys.mode_key_return mode_key() throws RecognitionException { return gKeys.mode_key(); }
    public OracleParser_Keys.passing_key_return passing_key() throws RecognitionException { return gKeys.passing_key(); }
    public OracleParser_Keys.compatibility_key_return compatibility_key() throws RecognitionException { return gKeys.compatibility_key(); }
    public OracleParser_Keys.statement_key_return statement_key() throws RecognitionException { return gKeys.statement_key(); }
    public OracleParser_Keys.nominvalue_key_return nominvalue_key() throws RecognitionException { return gKeys.nominvalue_key(); }
    public OracleParser_Commons.attribute_name_return attribute_name() throws RecognitionException { return gCommons.attribute_name(); }
    public OracleParser_Keys.link_key_return link_key() throws RecognitionException { return gKeys.link_key(); }
    public OracleParser_Keys.month_key_return month_key() throws RecognitionException { return gKeys.month_key(); }
    public OracleParser_Keys.insert_key_return insert_key() throws RecognitionException { return gKeys.insert_key(); }
    public OracleParser_Keys.restrict_references_key_return restrict_references_key() throws RecognitionException { return gKeys.restrict_references_key(); }
    public OracleParser_Keys.last_key_return last_key() throws RecognitionException { return gKeys.last_key(); }
    public OracleParser_Commons.not_equal_op_return not_equal_op() throws RecognitionException { return gCommons.not_equal_op(); }
    public OracleParser_Keys.as_key_return as_key() throws RecognitionException { return gKeys.as_key(); }
    public OracleParser_Keys.grant_key_return grant_key() throws RecognitionException { return gKeys.grant_key(); }
    public OracleParser_Keys.time_key_return time_key() throws RecognitionException { return gKeys.time_key(); }
    public OracleParser_Commons.package_name_return package_name() throws RecognitionException { return gCommons.package_name(); }
    public OracleParser_Commons.procedure_name_return procedure_name() throws RecognitionException { return gCommons.procedure_name(); }
    public OracleParser_Keys.to_date_key_return to_date_key() throws RecognitionException { return gKeys.to_date_key(); }
    public OracleParser_Keys.concat_key_return concat_key() throws RecognitionException { return gKeys.concat_key(); }
    public OracleParser_Commons.reference_model_name_return reference_model_name() throws RecognitionException { return gCommons.reference_model_name(); }
    public OracleParser_Keys.minute_key_return minute_key() throws RecognitionException { return gKeys.minute_key(); }
    public OracleParser_Keys.settings_key_return settings_key() throws RecognitionException { return gKeys.settings_key(); }
    public OracleParser_Commons.variable_name_return variable_name() throws RecognitionException { return gCommons.variable_name(); }
    public OracleParser_Keys.name_key_return name_key() throws RecognitionException { return gKeys.name_key(); }
    public OracleParser_Keys.numeric_key_return numeric_key() throws RecognitionException { return gKeys.numeric_key(); }
    public OracleParser_Keys.logon_key_return logon_key() throws RecognitionException { return gKeys.logon_key(); }
    public OracleParser_Keys.using_key_return using_key() throws RecognitionException { return gKeys.using_key(); }
    public OracleParser_Commons.quoted_string_return quoted_string() throws RecognitionException { return gCommons.quoted_string(); }
    public OracleParser_Keys.real_key_return real_key() throws RecognitionException { return gKeys.real_key(); }
    public OracleParser_Keys.hide_key_return hide_key() throws RecognitionException { return gKeys.hide_key(); }
    public OracleParser_Keys.new_key_return new_key() throws RecognitionException { return gKeys.new_key(); }
    public OracleParser_Keys.explain_key_return explain_key() throws RecognitionException { return gKeys.explain_key(); }
    public OracleParser_Keys.force_key_return force_key() throws RecognitionException { return gKeys.force_key(); }
    public OracleParser_Keys.dbtimezone_key_return dbtimezone_key() throws RecognitionException { return gKeys.dbtimezone_key(); }
    public OracleParser_Keys.decompose_key_return decompose_key() throws RecognitionException { return gKeys.decompose_key(); }
    public OracleParser_Commons.function_argument_analytic_return function_argument_analytic() throws RecognitionException { return gCommons.function_argument_analytic(); }
    public OracleParser_Keys.int_key_return int_key() throws RecognitionException { return gKeys.int_key(); }
    public OracleParser_Keys.defaults_key_return defaults_key() throws RecognitionException { return gKeys.defaults_key(); }
    public OracleParser_Keys.after_key_return after_key() throws RecognitionException { return gKeys.after_key(); }
    public OracleParser_Keys.whenever_key_return whenever_key() throws RecognitionException { return gKeys.whenever_key(); }
    public OracleParser_Keys.delete_key_return delete_key() throws RecognitionException { return gKeys.delete_key(); }
    public OracleParser_Keys.binary_double_min_normal_key_return binary_double_min_normal_key() throws RecognitionException { return gKeys.binary_double_min_normal_key(); }
    public OracleParser_Keys.octet_length_key_return octet_length_key() throws RecognitionException { return gKeys.octet_length_key(); }
    public OracleParser_Keys.set_key_return set_key() throws RecognitionException { return gKeys.set_key(); }
    public OracleParser_Keys.immediate_key_return immediate_key() throws RecognitionException { return gKeys.immediate_key(); }
    public OracleParser_Keys.show_key_return show_key() throws RecognitionException { return gKeys.show_key(); }
    public OracleParser_Keys.sqlerror_key_return sqlerror_key() throws RecognitionException { return gKeys.sqlerror_key(); }
    public OracleParser_Keys.binary_double_min_subnormal_key_return binary_double_min_subnormal_key() throws RecognitionException { return gKeys.binary_double_min_subnormal_key(); }
    public OracleParser_Keys.interval_key_return interval_key() throws RecognitionException { return gKeys.interval_key(); }
    public OracleParser_Keys.dump_key_return dump_key() throws RecognitionException { return gKeys.dump_key(); }
    public OracleParser_Keys.open_key_return open_key() throws RecognitionException { return gKeys.open_key(); }
    public OracleParser_Keys.yes_key_return yes_key() throws RecognitionException { return gKeys.yes_key(); }
    public OracleParser_Keys.content_key_return content_key() throws RecognitionException { return gKeys.content_key(); }
    public OracleParser_Keys.rules_key_return rules_key() throws RecognitionException { return gKeys.rules_key(); }
    public OracleParser_Commons.table_element_return table_element() throws RecognitionException { return gCommons.table_element(); }
    public OracleParser_Keys.reject_key_return reject_key() throws RecognitionException { return gKeys.reject_key(); }
    public OracleParser_Keys.binary_float_max_normal_key_return binary_float_max_normal_key() throws RecognitionException { return gKeys.binary_float_max_normal_key(); }
    public OracleParser_Keys.timeout_key_return timeout_key() throws RecognitionException { return gKeys.timeout_key(); }
    public OracleParser_Keys.dec_key_return dec_key() throws RecognitionException { return gKeys.dec_key(); }
    public OracleParser_Keys.errors_key_return errors_key() throws RecognitionException { return gKeys.errors_key(); }
    public OracleParser_Keys.trim_key_return trim_key() throws RecognitionException { return gKeys.trim_key(); }
    public OracleParser_Keys.schemacheck_key_return schemacheck_key() throws RecognitionException { return gKeys.schemacheck_key(); }
    public OracleParser_Keys.inout_key_return inout_key() throws RecognitionException { return gKeys.inout_key(); }
    public OracleParser_Keys.leading_key_return leading_key() throws RecognitionException { return gKeys.leading_key(); }
    public OracleParser_Keys.null_key_return null_key() throws RecognitionException { return gKeys.null_key(); }
    public OracleParser_Keys.convert_key_return convert_key() throws RecognitionException { return gKeys.convert_key(); }
    public OracleParser_Keys.binary_double_key_return binary_double_key() throws RecognitionException { return gKeys.binary_double_key(); }
    public OracleParser_Keys.function_key_return function_key() throws RecognitionException { return gKeys.function_key(); }
    public OracleParser_Keys.day_key_return day_key() throws RecognitionException { return gKeys.day_key(); }
    public OracleParser_Keys.extract_key_return extract_key() throws RecognitionException { return gKeys.extract_key(); }
    public OracleParser_Keys.exception_key_return exception_key() throws RecognitionException { return gKeys.exception_key(); }
    public OracleParser_Keys.startup_key_return startup_key() throws RecognitionException { return gKeys.startup_key(); }
    public OracleParser_Commons.char_set_name_return char_set_name() throws RecognitionException { return gCommons.char_set_name(); }
    public OracleParser_Keys.nocycle_key_return nocycle_key() throws RecognitionException { return gKeys.nocycle_key(); }
    public OracleParser_Keys.corrupt_xid_all_key_return corrupt_xid_all_key() throws RecognitionException { return gKeys.corrupt_xid_all_key(); }
    public OracleParser_Keys.initcap_key_return initcap_key() throws RecognitionException { return gKeys.initcap_key(); }
    public OracleParser_Keys.agent_key_return agent_key() throws RecognitionException { return gKeys.agent_key(); }
    public OracleParser_Keys.nclob_key_return nclob_key() throws RecognitionException { return gKeys.nclob_key(); }
    public OracleParser_Keys.count_key_return count_key() throws RecognitionException { return gKeys.count_key(); }
    public OracleParser_Keys.maxvalue_key_return maxvalue_key() throws RecognitionException { return gKeys.maxvalue_key(); }
    public OracleParser_Keys.varying_key_return varying_key() throws RecognitionException { return gKeys.varying_key(); }
    public OracleParser_Commons.parameter_name_return parameter_name() throws RecognitionException { return gCommons.parameter_name(); }
    public OracleParser_Keys.parameters_key_return parameters_key() throws RecognitionException { return gKeys.parameters_key(); }
    public OracleParser_Keys.xmlcolattval_key_return xmlcolattval_key() throws RecognitionException { return gKeys.xmlcolattval_key(); }
    public OracleParser_Keys.noschemacheck_key_return noschemacheck_key() throws RecognitionException { return gKeys.noschemacheck_key(); }
    public OracleParser_Commons.label_name_return label_name() throws RecognitionException { return gCommons.label_name(); }
    public OracleParser_Keys.vsize_key_return vsize_key() throws RecognitionException { return gKeys.vsize_key(); }
    public OracleParser_Keys.multiset_key_return multiset_key() throws RecognitionException { return gKeys.multiset_key(); }
    public OracleParser_Keys.timestamp_tz_unconstrained_key_return timestamp_tz_unconstrained_key() throws RecognitionException { return gKeys.timestamp_tz_unconstrained_key(); }
    public OracleParser_Keys.all_key_return all_key() throws RecognitionException { return gKeys.all_key(); }
    public OracleParser_Keys.partition_key_return partition_key() throws RecognitionException { return gKeys.partition_key(); }
    public OracleParser_Keys.intersect_key_return intersect_key() throws RecognitionException { return gKeys.intersect_key(); }
    public OracleParser_Commons.keep_clause_return keep_clause() throws RecognitionException { return gCommons.keep_clause(); }
    public OracleParser_Keys.except_key_return except_key() throws RecognitionException { return gKeys.except_key(); }
    public OracleParser_Keys.disassociate_key_return disassociate_key() throws RecognitionException { return gKeys.disassociate_key(); }
    public OracleParser_Keys.exists_key_return exists_key() throws RecognitionException { return gKeys.exists_key(); }
    public OracleParser_Keys.in_key_return in_key() throws RecognitionException { return gKeys.in_key(); }
    public OracleParser_Keys.to_char_key_return to_char_key() throws RecognitionException { return gKeys.to_char_key(); }
    public OracleParser_Keys.the_key_return the_key() throws RecognitionException { return gKeys.the_key(); }
    public OracleParser_Keys.success_key_return success_key() throws RecognitionException { return gKeys.success_key(); }
    public OracleParser_Keys.range_key_return range_key() throws RecognitionException { return gKeys.range_key(); }
    public OracleParser_Keys.values_key_return values_key() throws RecognitionException { return gKeys.values_key(); }
    public OracleParser_Keys.document_key_return document_key() throws RecognitionException { return gKeys.document_key(); }
    public OracleParser_Keys.partial_key_return partial_key() throws RecognitionException { return gKeys.partial_key(); }
    public OracleParser_Keys.limit_key_return limit_key() throws RecognitionException { return gKeys.limit_key(); }
    public OracleParser_Keys.noaudit_key_return noaudit_key() throws RecognitionException { return gKeys.noaudit_key(); }
    public OracleParser_Keys.rename_key_return rename_key() throws RecognitionException { return gKeys.rename_key(); }
    public OracleParser_Keys.smallint_key_return smallint_key() throws RecognitionException { return gKeys.smallint_key(); }
    public OracleParser_Commons.table_var_name_return table_var_name() throws RecognitionException { return gCommons.table_var_name(); }
    public OracleParser_Keys.identified_key_return identified_key() throws RecognitionException { return gKeys.identified_key(); }
    public OracleParser_Keys.clob_key_return clob_key() throws RecognitionException { return gKeys.clob_key(); }
    public OracleParser_Keys.ltrim_key_return ltrim_key() throws RecognitionException { return gKeys.ltrim_key(); }
    public OracleParser_Keys.ceil_key_return ceil_key() throws RecognitionException { return gKeys.ceil_key(); }
    public OracleParser_Keys.lpad_key_return lpad_key() throws RecognitionException { return gKeys.lpad_key(); }
    public OracleParser_Commons.datatype_return datatype() throws RecognitionException { return gCommons.datatype(); }
    public OracleParser_Keys.nchar_cs_key_return nchar_cs_key() throws RecognitionException { return gKeys.nchar_cs_key(); }
    public OracleParser_Keys.revoke_key_return revoke_key() throws RecognitionException { return gKeys.revoke_key(); }
    public OracleParser_Keys.encoding_key_return encoding_key() throws RecognitionException { return gKeys.encoding_key(); }
    public OracleParser_Keys.xmlquery_key_return xmlquery_key() throws RecognitionException { return gKeys.xmlquery_key(); }
    public OracleParser_Keys.cost_key_return cost_key() throws RecognitionException { return gKeys.cost_key(); }
    public OracleParser_Keys.full_key_return full_key() throws RecognitionException { return gKeys.full_key(); }
    public OracleParser_Keys.version_key_return version_key() throws RecognitionException { return gKeys.version_key(); }
    public OracleParser_Keys.any_key_return any_key() throws RecognitionException { return gKeys.any_key(); }
    public OracleParser_Keys.main_key_return main_key() throws RecognitionException { return gKeys.main_key(); }
    public OracleParser_Keys.table_key_return table_key() throws RecognitionException { return gKeys.table_key(); }
    public OracleParser_Keys.create_key_return create_key() throws RecognitionException { return gKeys.create_key(); }
    public OracleParser_Keys.some_key_return some_key() throws RecognitionException { return gKeys.some_key(); }
    public OracleParser_Keys.sets_key_return sets_key() throws RecognitionException { return gKeys.sets_key(); }
    public OracleParser_Keys.nulls_key_return nulls_key() throws RecognitionException { return gKeys.nulls_key(); }
    public OracleParser_Keys.element_key_return element_key() throws RecognitionException { return gKeys.element_key(); }
    public OracleParser_Keys.binary_float_min_subnormal_key_return binary_float_min_subnormal_key() throws RecognitionException { return gKeys.binary_float_min_subnormal_key(); }
    public OracleParser_Keys.substring_key_return substring_key() throws RecognitionException { return gKeys.substring_key(); }
    public OracleParser_Keys.dml_key_return dml_key() throws RecognitionException { return gKeys.dml_key(); }
    public OracleParser_Commons.alias_quoted_string_return alias_quoted_string() throws RecognitionException { return gCommons.alias_quoted_string(); }
    public OracleParser_Keys.when_key_return when_key() throws RecognitionException { return gKeys.when_key(); }
    public OracleParser_Commons.current_of_clause_return current_of_clause() throws RecognitionException { return gCommons.current_of_clause(); }
    public OracleParser_Keys.measures_key_return measures_key() throws RecognitionException { return gKeys.measures_key(); }
    public OracleParser_Keys.result_cache_key_return result_cache_key() throws RecognitionException { return gKeys.result_cache_key(); }
    public OracleParser_Keys.execute_key_return execute_key() throws RecognitionException { return gKeys.execute_key(); }
    public OracleParser_Keys.nowait_key_return nowait_key() throws RecognitionException { return gKeys.nowait_key(); }
    public OracleParser_Keys.attribute_key_return attribute_key() throws RecognitionException { return gKeys.attribute_key(); }
    public OracleParser_Keys.snapshot_key_return snapshot_key() throws RecognitionException { return gKeys.snapshot_key(); }
    public OracleParser_Keys.timestamp_unconstrained_key_return timestamp_unconstrained_key() throws RecognitionException { return gKeys.timestamp_unconstrained_key(); }
    public OracleParser_Keys.write_key_return write_key() throws RecognitionException { return gKeys.write_key(); }
    public OracleParser_Keys.siblings_key_return siblings_key() throws RecognitionException { return gKeys.siblings_key(); }
    public OracleParser_Keys.begin_key_return begin_key() throws RecognitionException { return gKeys.begin_key(); }
    public OracleParser_Keys.first_value_key_return first_value_key() throws RecognitionException { return gKeys.first_value_key(); }
    public OracleParser_Keys.iterate_key_return iterate_key() throws RecognitionException { return gKeys.iterate_key(); }
    public OracleParser_Keys.byte_key_return byte_key() throws RecognitionException { return gKeys.byte_key(); }
    public OracleParser_Keys.case_key_return case_key() throws RecognitionException { return gKeys.case_key(); }
    public OracleParser_Keys.signtype_key_return signtype_key() throws RecognitionException { return gKeys.signtype_key(); }
    public OracleParser_Keys.right_key_return right_key() throws RecognitionException { return gKeys.right_key(); }
    public OracleParser_Keys.xmlpi_key_return xmlpi_key() throws RecognitionException { return gKeys.xmlpi_key(); }
    public OracleParser_Keys.ddl_key_return ddl_key() throws RecognitionException { return gKeys.ddl_key(); }
    public OracleParser_Keys.pragma_key_return pragma_key() throws RecognitionException { return gKeys.pragma_key(); }
    public OracleParser_Keys.treat_key_return treat_key() throws RecognitionException { return gKeys.treat_key(); }
    public OracleParser_Keys.character_length_key_return character_length_key() throws RecognitionException { return gKeys.character_length_key(); }
    public OracleParser_Keys.sqrt_key_return sqrt_key() throws RecognitionException { return gKeys.sqrt_key(); }
    public OracleParser_Keys.nextval_key_return nextval_key() throws RecognitionException { return gKeys.nextval_key(); }
    public OracleParser_Keys.increment_key_return increment_key() throws RecognitionException { return gKeys.increment_key(); }
    public OracleParser_Keys.invalidate_key_return invalidate_key() throws RecognitionException { return gKeys.invalidate_key(); }
    public OracleParser_Keys.last_value_key_return last_value_key() throws RecognitionException { return gKeys.last_value_key(); }
    public OracleParser_Keys.dsinterval_unconstrained_key_return dsinterval_unconstrained_key() throws RecognitionException { return gKeys.dsinterval_unconstrained_key(); }
    public OracleParser_Keys.relies_on_key_return relies_on_key() throws RecognitionException { return gKeys.relies_on_key(); }
    public OracleParser_Keys.cross_key_return cross_key() throws RecognitionException { return gKeys.cross_key(); }
    public OracleParser_Keys.pivot_key_return pivot_key() throws RecognitionException { return gKeys.pivot_key(); }
    public OracleParser_Keys.union_key_return union_key() throws RecognitionException { return gKeys.union_key(); }
    public OracleParser_Keys.outer_key_return outer_key() throws RecognitionException { return gKeys.outer_key(); }
    public OracleParser_Keys.automatic_key_return automatic_key() throws RecognitionException { return gKeys.automatic_key(); }
    public OracleParser_Keys.timestamp_ltz_unconstrained_key_return timestamp_ltz_unconstrained_key() throws RecognitionException { return gKeys.timestamp_ltz_unconstrained_key(); }
    public OracleParser_Keys.library_key_return library_key() throws RecognitionException { return gKeys.library_key(); }
    public OracleParser_Keys.upper_key_return upper_key() throws RecognitionException { return gKeys.upper_key(); }
    public OracleParser_Keys.instead_key_return instead_key() throws RecognitionException { return gKeys.instead_key(); }
    public OracleParser_Keys.second_key_return second_key() throws RecognitionException { return gKeys.second_key(); }
    public OracleParser_Commons.exception_name_return exception_name() throws RecognitionException { return gCommons.exception_name(); }
    public OracleParser_Keys.xml_key_return xml_key() throws RecognitionException { return gKeys.xml_key(); }
    public OracleParser_Commons.constraint_name_return constraint_name() throws RecognitionException { return gCommons.constraint_name(); }
    public OracleParser_Keys.oradata_key_return oradata_key() throws RecognitionException { return gKeys.oradata_key(); }
    public OracleParser_Keys.for_key_return for_key() throws RecognitionException { return gKeys.for_key(); }
    public OracleParser_Keys.under_key_return under_key() throws RecognitionException { return gKeys.under_key(); }
    public OracleParser_Keys.seed_key_return seed_key() throws RecognitionException { return gKeys.seed_key(); }
    public OracleParser_Keys.before_key_return before_key() throws RecognitionException { return gKeys.before_key(); }
    public OracleParser_Commons.function_argument_modeling_return function_argument_modeling() throws RecognitionException { return gCommons.function_argument_modeling(); }
    public OracleParser_Keys.log_key_return log_key() throws RecognitionException { return gKeys.log_key(); }
    public OracleParser_Keys.exclude_key_return exclude_key() throws RecognitionException { return gKeys.exclude_key(); }
    public OracleParser_Keys.infinite_key_return infinite_key() throws RecognitionException { return gKeys.infinite_key(); }
    public OracleParser_Keys.body_key_return body_key() throws RecognitionException { return gKeys.body_key(); }
    public OracleParser_Keys.search_key_return search_key() throws RecognitionException { return gKeys.search_key(); }
    public OracleParser_Keys.soundex_key_return soundex_key() throws RecognitionException { return gKeys.soundex_key(); }
    public OracleParser_Keys.call_key_return call_key() throws RecognitionException { return gKeys.call_key(); }
    public OracleParser_Keys.upsert_key_return upsert_key() throws RecognitionException { return gKeys.upsert_key(); }
    public OracleParser_Keys.percent_notfound_key_return percent_notfound_key() throws RecognitionException { return gKeys.percent_notfound_key(); }
    public OracleParser_Keys.over_key_return over_key() throws RecognitionException { return gKeys.over_key(); }
    public OracleParser_Keys.compound_key_return compound_key() throws RecognitionException { return gKeys.compound_key(); }
    public OracleParser_Keys.binary_float_max_subnormal_key_return binary_float_max_subnormal_key() throws RecognitionException { return gKeys.binary_float_max_subnormal_key(); }
    public OracleParser_Keys.size_key_return size_key() throws RecognitionException { return gKeys.size_key(); }
    public OracleParser_Keys.rowidtochar_key_return rowidtochar_key() throws RecognitionException { return gKeys.rowidtochar_key(); }
    public OracleParser_Keys.session_key_return session_key() throws RecognitionException { return gKeys.session_key(); }
    public OracleParser_Commons.rollback_segment_name_return rollback_segment_name() throws RecognitionException { return gCommons.rollback_segment_name(); }
    public OracleParser_Keys.only_key_return only_key() throws RecognitionException { return gKeys.only_key(); }
    public OracleParser_Keys.indexed_key_return indexed_key() throws RecognitionException { return gKeys.indexed_key(); }
    public OracleParser_Keys.current_timestamp_key_return current_timestamp_key() throws RecognitionException { return gKeys.current_timestamp_key(); }
    public OracleParser_Keys.precision_key_return precision_key() throws RecognitionException { return gKeys.precision_key(); }
    public OracleParser_Keys.value_key_return value_key() throws RecognitionException { return gKeys.value_key(); }
    public OracleParser_Keys.resumable_key_return resumable_key() throws RecognitionException { return gKeys.resumable_key(); }
    public OracleParser_Keys.xmlparse_key_return xmlparse_key() throws RecognitionException { return gKeys.xmlparse_key(); }
    public OracleParser_Keys.likec_key_return likec_key() throws RecognitionException { return gKeys.likec_key(); }
    public OracleParser_Commons.cost_class_name_return cost_class_name() throws RecognitionException { return gCommons.cost_class_name(); }
    public OracleParser_Keys.rollback_key_return rollback_key() throws RecognitionException { return gKeys.rollback_key(); }
    public OracleParser_Keys.bit_length_key_return bit_length_key() throws RecognitionException { return gKeys.bit_length_key(); }
    public OracleParser_Keys.rollup_key_return rollup_key() throws RecognitionException { return gKeys.rollup_key(); }
    public OracleParser_Keys.none_key_return none_key() throws RecognitionException { return gKeys.none_key(); }
    public OracleParser_Keys.between_key_return between_key() throws RecognitionException { return gKeys.between_key(); }
    public OracleParser_Commons.constant_return constant() throws RecognitionException { return gCommons.constant(); }
    public OracleParser_Keys.keep_key_return keep_key() throws RecognitionException { return gKeys.keep_key(); }
    public OracleParser_Keys.within_key_return within_key() throws RecognitionException { return gKeys.within_key(); }
    public OracleParser_Keys.at_key_return at_key() throws RecognitionException { return gKeys.at_key(); }
    public OracleParser_Keys.deterministic_key_return deterministic_key() throws RecognitionException { return gKeys.deterministic_key(); }
    public OracleParser_Keys.audit_key_return audit_key() throws RecognitionException { return gKeys.audit_key(); }
    public OracleParser_Commons.main_model_name_return main_model_name() throws RecognitionException { return gCommons.main_model_name(); }
    public OracleParser_Keys.length_key_return length_key() throws RecognitionException { return gKeys.length_key(); }
    public OracleParser_Keys.transaction_key_return transaction_key() throws RecognitionException { return gKeys.transaction_key(); }
    public OracleParser_Keys.level_key_return level_key() throws RecognitionException { return gKeys.level_key(); }
    public OracleParser_Keys.timezone_abbr_key_return timezone_abbr_key() throws RecognitionException { return gKeys.timezone_abbr_key(); }
    public OracleParser_Keys.respect_key_return respect_key() throws RecognitionException { return gKeys.respect_key(); }
    public OracleParser_Keys.max_key_return max_key() throws RecognitionException { return gKeys.max_key(); }
    public OracleParser_Keys.simple_integer_key_return simple_integer_key() throws RecognitionException { return gKeys.simple_integer_key(); }
    public OracleParser_Keys.cycle_key_return cycle_key() throws RecognitionException { return gKeys.cycle_key(); }
    public OracleParser_Keys.order_key_return order_key() throws RecognitionException { return gKeys.order_key(); }
    public OracleParser_Keys.versions_key_return versions_key() throws RecognitionException { return gKeys.versions_key(); }
    public OracleParser_Keys.xmlserialize_key_return xmlserialize_key() throws RecognitionException { return gKeys.xmlserialize_key(); }
    public OracleParser_Keys.elsif_key_return elsif_key() throws RecognitionException { return gKeys.elsif_key(); }
    public OracleParser_Keys.nothing_key_return nothing_key() throws RecognitionException { return gKeys.nothing_key(); }
    public OracleParser_Keys.join_key_return join_key() throws RecognitionException { return gKeys.join_key(); }
    public OracleParser_Keys.desc_key_return desc_key() throws RecognitionException { return gKeys.desc_key(); }
    public OracleParser_Keys.type_key_return type_key() throws RecognitionException { return gKeys.type_key(); }
    public OracleParser_Keys.nchar_key_return nchar_key() throws RecognitionException { return gKeys.nchar_key(); }
    public OracleParser_Keys.sample_key_return sample_key() throws RecognitionException { return gKeys.sample_key(); }
    public OracleParser_Keys.shutdown_key_return shutdown_key() throws RecognitionException { return gKeys.shutdown_key(); }
    public OracleParser_Keys.where_key_return where_key() throws RecognitionException { return gKeys.where_key(); }
    public OracleParser_Keys.depth_key_return depth_key() throws RecognitionException { return gKeys.depth_key(); }
    public OracleParser_Keys.columns_key_return columns_key() throws RecognitionException { return gKeys.columns_key(); }
    public OracleParser_Commons.type_spec_return type_spec() throws RecognitionException { return gCommons.type_spec(); }
    public OracleParser_Commons.schema_name_return schema_name() throws RecognitionException { return gCommons.schema_name(); }
    public OracleParser_Keys.translate_key_return translate_key() throws RecognitionException { return gKeys.translate_key(); }
    public OracleParser_Keys.bit_key_return bit_key() throws RecognitionException { return gKeys.bit_key(); }
    public OracleParser_Keys.empty_key_return empty_key() throws RecognitionException { return gKeys.empty_key(); }
    public OracleParser_Keys.while_key_return while_key() throws RecognitionException { return gKeys.while_key(); }
    public OracleParser_Keys.to_number_key_return to_number_key() throws RecognitionException { return gKeys.to_number_key(); }
    public OracleParser_Keys.to_key_return to_key() throws RecognitionException { return gKeys.to_key(); }
    public OracleParser_Keys.fetch_key_return fetch_key() throws RecognitionException { return gKeys.fetch_key(); }
    public OracleParser_Keys.avg_key_return avg_key() throws RecognitionException { return gKeys.avg_key(); }
    public OracleParser_Commons.general_element_return general_element() throws RecognitionException { return gCommons.general_element(); }
    public OracleParser_Keys.segment_key_return segment_key() throws RecognitionException { return gKeys.segment_key(); }
    public OracleParser_Keys.long_key_return long_key() throws RecognitionException { return gKeys.long_key(); }
    public OracleParser_Keys.constraints_key_return constraints_key() throws RecognitionException { return gKeys.constraints_key(); }
    public OracleParser_Keys.percent_isopen_key_return percent_isopen_key() throws RecognitionException { return gKeys.percent_isopen_key(); }
    public OracleParser_Keys.cache_key_return cache_key() throws RecognitionException { return gKeys.cache_key(); }
    public OracleParser_Keys.wellformed_key_return wellformed_key() throws RecognitionException { return gKeys.wellformed_key(); }
    public OracleParser_Keys.positive_key_return positive_key() throws RecognitionException { return gKeys.positive_key(); }
    public OracleParser_Keys.binary_double_max_subnormal_key_return binary_double_max_subnormal_key() throws RecognitionException { return gKeys.binary_double_max_subnormal_key(); }
    public OracleParser_Commons.routine_name_return routine_name() throws RecognitionException { return gCommons.routine_name(); }
    public OracleParser_Keys.object_key_return object_key() throws RecognitionException { return gKeys.object_key(); }
    public OracleParser_Keys.raw_key_return raw_key() throws RecognitionException { return gKeys.raw_key(); }
    public OracleParser_Keys.sequence_key_return sequence_key() throws RecognitionException { return gKeys.sequence_key(); }
    public OracleParser_Keys.add_key_return add_key() throws RecognitionException { return gKeys.add_key(); }
    public OracleParser_Keys.grouping_key_return grouping_key() throws RecognitionException { return gKeys.grouping_key(); }
    public OracleParser_Commons.outer_join_sign_return outer_join_sign() throws RecognitionException { return gCommons.outer_join_sign(); }
    public OracleParser_Keys.abs_key_return abs_key() throws RecognitionException { return gKeys.abs_key(); }
    public OracleParser_Commons.precision_part_return precision_part() throws RecognitionException { return gCommons.precision_part(); }
    public OracleParser_Keys.global_key_return global_key() throws RecognitionException { return gKeys.global_key(); }
    public OracleParser_Keys.instantiable_key_return instantiable_key() throws RecognitionException { return gKeys.instantiable_key(); }
    public OracleParser_Keys.minvalue_key_return minvalue_key() throws RecognitionException { return gKeys.minvalue_key(); }
    public OracleParser_Keys.submultiset_key_return submultiset_key() throws RecognitionException { return gKeys.submultiset_key(); }
    public OracleParser_Keys.binary_float_min_normal_key_return binary_float_min_normal_key() throws RecognitionException { return gKeys.binary_float_min_normal_key(); }
    public OracleParser_Keys.percent_found_key_return percent_found_key() throws RecognitionException { return gKeys.percent_found_key(); }
    public OracleParser_Keys.stddev_key_return stddev_key() throws RecognitionException { return gKeys.stddev_key(); }
    public OracleParser_Keys.declare_key_return declare_key() throws RecognitionException { return gKeys.declare_key(); }
    public OracleParser_Keys.xmlelement_key_return xmlelement_key() throws RecognitionException { return gKeys.xmlelement_key(); }
    public OracleParser_Keys.plan_key_return plan_key() throws RecognitionException { return gKeys.plan_key(); }
    public OracleParser_Keys.hextoraw_key_return hextoraw_key() throws RecognitionException { return gKeys.hextoraw_key(); }
    public OracleParser_Keys.exceptions_key_return exceptions_key() throws RecognitionException { return gKeys.exceptions_key(); }
    public OracleParser_Keys.raise_key_return raise_key() throws RecognitionException { return gKeys.raise_key(); }
    public OracleParser_Commons.tableview_name_return tableview_name() throws RecognitionException { return gCommons.tableview_name(); }
    public OracleParser_Keys.asc_key_return asc_key() throws RecognitionException { return gKeys.asc_key(); }
    public OracleParser_Keys.truncate_key_return truncate_key() throws RecognitionException { return gKeys.truncate_key(); }
    public OracleParser_Keys.collate_key_return collate_key() throws RecognitionException { return gKeys.collate_key(); }
    public OracleParser_Commons.argument_return argument() throws RecognitionException { return gCommons.argument(); }
    public OracleParser_Keys.timezone_minute_key_return timezone_minute_key() throws RecognitionException { return gKeys.timezone_minute_key(); }
    public OracleParser_Keys.userenv_key_return userenv_key() throws RecognitionException { return gKeys.userenv_key(); }
    public OracleParser_Keys.canonical_key_return canonical_key() throws RecognitionException { return gKeys.canonical_key(); }
    public OracleParser_Keys.servererror_key_return servererror_key() throws RecognitionException { return gKeys.servererror_key(); }
    public OracleParser_Keys.save_key_return save_key() throws RecognitionException { return gKeys.save_key(); }
    public OracleParser_Keys.minus_key_return minus_key() throws RecognitionException { return gKeys.minus_key(); }
    public OracleParser_Keys.else_key_return else_key() throws RecognitionException { return gKeys.else_key(); }
    public OracleParser_Keys.model_key_return model_key() throws RecognitionException { return gKeys.model_key(); }
    public OracleParser_Keys.ordinality_key_return ordinality_key() throws RecognitionException { return gKeys.ordinality_key(); }
    public OracleParser_Keys.committed_key_return committed_key() throws RecognitionException { return gKeys.committed_key(); }
    public OracleParser_Keys.language_key_return language_key() throws RecognitionException { return gKeys.language_key(); }
    public OracleParser_Keys.binary_double_nan_key_return binary_double_nan_key() throws RecognitionException { return gKeys.binary_double_nan_key(); }
    public OracleParser_Keys.lock_key_return lock_key() throws RecognitionException { return gKeys.lock_key(); }
    public OracleParser_Keys.trunc_key_return trunc_key() throws RecognitionException { return gKeys.trunc_key(); }
    public OracleParser_Commons.respect_or_ignore_nulls_return respect_or_ignore_nulls() throws RecognitionException { return gCommons.respect_or_ignore_nulls(); }
    public OracleParser_Keys.drop_key_return drop_key() throws RecognitionException { return gKeys.drop_key(); }
    public OracleParser_Keys.rowid_key_return rowid_key() throws RecognitionException { return gKeys.rowid_key(); }
    public OracleParser_Keys.associate_key_return associate_key() throws RecognitionException { return gKeys.associate_key(); }
    public OracleParser_Keys.session_user_key_return session_user_key() throws RecognitionException { return gKeys.session_user_key(); }
    public OracleParser_Keys.coalesce_key_return coalesce_key() throws RecognitionException { return gKeys.coalesce_key(); }
    public OracleParser_Keys.national_key_return national_key() throws RecognitionException { return gKeys.national_key(); }
    public OracleParser_Keys.into_key_return into_key() throws RecognitionException { return gKeys.into_key(); }
    public OracleParser_Keys.current_user_key_return current_user_key() throws RecognitionException { return gKeys.current_user_key(); }
    public OracleParser_Keys.trigger_key_return trigger_key() throws RecognitionException { return gKeys.trigger_key(); }
    public OracleParser_Keys.role_key_return role_key() throws RecognitionException { return gKeys.role_key(); }
    public OracleParser_Keys.share_key_return share_key() throws RecognitionException { return gKeys.share_key(); }
    public OracleParser_Keys.schema_key_return schema_key() throws RecognitionException { return gKeys.schema_key(); }
    public OracleParser_Keys.check_key_return check_key() throws RecognitionException { return gKeys.check_key(); }
    public OracleParser_Keys.serveroutput_key_return serveroutput_key() throws RecognitionException { return gKeys.serveroutput_key(); }
    public OracleParser_Keys.binary_float_infinity_key_return binary_float_infinity_key() throws RecognitionException { return gKeys.binary_float_infinity_key(); }
    public OracleParser_Keys.external_key_return external_key() throws RecognitionException { return gKeys.external_key(); }
    public OracleParser_Commons.savepoint_name_return savepoint_name() throws RecognitionException { return gCommons.savepoint_name(); }
    public OracleParser_Commons.record_name_return record_name() throws RecognitionException { return gCommons.record_name(); }
    public OracleParser_Keys.chartorowid_key_return chartorowid_key() throws RecognitionException { return gKeys.chartorowid_key(); }
    public OracleParser_Keys.context_key_return context_key() throws RecognitionException { return gKeys.context_key(); }
    public OracleParser_Keys.merge_key_return merge_key() throws RecognitionException { return gKeys.merge_key(); }
    public OracleParser_Keys.min_key_return min_key() throws RecognitionException { return gKeys.min_key(); }
    public OracleParser_Keys.block_key_return block_key() throws RecognitionException { return gKeys.block_key(); }
    public OracleParser_Keys.ascii_key_return ascii_key() throws RecognitionException { return gKeys.ascii_key(); }
    public OracleParser_Keys.constructor_key_return constructor_key() throws RecognitionException { return gKeys.constructor_key(); }
    public OracleParser_Keys.nav_key_return nav_key() throws RecognitionException { return gKeys.nav_key(); }
    public OracleParser_Keys.advise_key_return advise_key() throws RecognitionException { return gKeys.advise_key(); }
    public OracleParser_Keys.sign_key_return sign_key() throws RecognitionException { return gKeys.sign_key(); }
    public OracleParser_Keys.constant_key_return constant_key() throws RecognitionException { return gKeys.constant_key(); }
    public OracleParser_Keys.character_key_return character_key() throws RecognitionException { return gKeys.character_key(); }
    public OracleParser_Keys.preceding_key_return preceding_key() throws RecognitionException { return gKeys.preceding_key(); }
    public OracleParser_Keys.c_key_return c_key() throws RecognitionException { return gKeys.c_key(); }
    public OracleParser_Keys.xmltable_key_return xmltable_key() throws RecognitionException { return gKeys.xmltable_key(); }
    public OracleParser_Commons.function_argument_return function_argument() throws RecognitionException { return gCommons.function_argument(); }
    public OracleParser_Keys.unique_key_return unique_key() throws RecognitionException { return gKeys.unique_key(); }
    public OracleParser_Commons.greater_than_or_equals_op_return greater_than_or_equals_op() throws RecognitionException { return gCommons.greater_than_or_equals_op(); }
    public OracleParser_Keys.integer_key_return integer_key() throws RecognitionException { return gKeys.integer_key(); }
    public OracleParser_Keys.lower_key_return lower_key() throws RecognitionException { return gKeys.lower_key(); }
    public OracleParser_Keys.binary_double_max_normal_key_return binary_double_max_normal_key() throws RecognitionException { return gKeys.binary_double_max_normal_key(); }
    public OracleParser_Keys.procedure_key_return procedure_key() throws RecognitionException { return gKeys.procedure_key(); }
    public OracleParser_Keys.left_key_return left_key() throws RecognitionException { return gKeys.left_key(); }
    public OracleParser_Keys.variance_key_return variance_key() throws RecognitionException { return gKeys.variance_key(); }
    public OracleParser_Keys.statistics_key_return statistics_key() throws RecognitionException { return gKeys.statistics_key(); }
    public OracleParser_Keys.boolean_key_return boolean_key() throws RecognitionException { return gKeys.boolean_key(); }
    public OracleParser_Keys.nullif_key_return nullif_key() throws RecognitionException { return gKeys.nullif_key(); }
    public OracleParser_Keys.escape_key_return escape_key() throws RecognitionException { return gKeys.escape_key(); }
    public OracleParser_Keys.skip_key_return skip_key() throws RecognitionException { return gKeys.skip_key(); }
    public OracleParser_Keys.scn_key_return scn_key() throws RecognitionException { return gKeys.scn_key(); }
    public OracleParser_Keys.default_key_return default_key() throws RecognitionException { return gKeys.default_key(); }
    public OracleParser_Keys.include_key_return include_key() throws RecognitionException { return gKeys.include_key(); }
    public OracleParser_Keys.subpartition_key_return subpartition_key() throws RecognitionException { return gKeys.subpartition_key(); }
    public OracleParser_Keys.power_key_return power_key() throws RecognitionException { return gKeys.power_key(); }
    public OracleParser_Keys.sessiontimezone_key_return sessiontimezone_key() throws RecognitionException { return gKeys.sessiontimezone_key(); }
    public OracleParser_Keys.forall_key_return forall_key() throws RecognitionException { return gKeys.forall_key(); }
    public OracleParser_Keys.of_key_return of_key() throws RecognitionException { return gKeys.of_key(); }
    public OracleParser_Keys.oid_key_return oid_key() throws RecognitionException { return gKeys.oid_key(); }
    public OracleParser_Keys.replace_key_return replace_key() throws RecognitionException { return gKeys.replace_key(); }
    public OracleParser_Commons.cursor_name_return cursor_name() throws RecognitionException { return gCommons.cursor_name(); }
    public OracleParser_Commons.sequence_name_return sequence_name() throws RecognitionException { return gCommons.sequence_name(); }
    public OracleParser_Keys.a_key_return a_key() throws RecognitionException { return gKeys.a_key(); }
    public OracleParser_Keys.positiven_key_return positiven_key() throws RecognitionException { return gKeys.positiven_key(); }
    public OracleParser_Keys.deferred_key_return deferred_key() throws RecognitionException { return gKeys.deferred_key(); }
    public OracleParser_Keys.guard_key_return guard_key() throws RecognitionException { return gKeys.guard_key(); }
    public OracleParser_Keys.xmlcast_key_return xmlcast_key() throws RecognitionException { return gKeys.xmlcast_key(); }
    public OracleParser_Keys.present_key_return present_key() throws RecognitionException { return gKeys.present_key(); }
    public OracleParser_Keys.instr_key_return instr_key() throws RecognitionException { return gKeys.instr_key(); }
    public OracleParser_Keys.greatest_key_return greatest_key() throws RecognitionException { return gKeys.greatest_key(); }
    public OracleParser_Keys.nocopy_key_return nocopy_key() throws RecognitionException { return gKeys.nocopy_key(); }
    public OracleParser_Keys.trailing_key_return trailing_key() throws RecognitionException { return gKeys.trailing_key(); }
    public OracleParser_Keys.yminterval_unconstrained_key_return yminterval_unconstrained_key() throws RecognitionException { return gKeys.yminterval_unconstrained_key(); }
    public OracleParser_Keys.java_key_return java_key() throws RecognitionException { return gKeys.java_key(); }
    public OracleParser_Commons.trigger_name_return trigger_name() throws RecognitionException { return gCommons.trigger_name(); }
    public OracleParser_Keys.match_key_return match_key() throws RecognitionException { return gKeys.match_key(); }
    public OracleParser_Keys.reference_key_return reference_key() throws RecognitionException { return gKeys.reference_key(); }
    public OracleParser_Keys.mlslabel_key_return mlslabel_key() throws RecognitionException { return gKeys.mlslabel_key(); }
    public OracleParser_Keys.final_key_return final_key() throws RecognitionException { return gKeys.final_key(); }
    public OracleParser_Keys.varchar_key_return varchar_key() throws RecognitionException { return gKeys.varchar_key(); }
    public OracleParser_Keys.urowid_key_return urowid_key() throws RecognitionException { return gKeys.urowid_key(); }
    public OracleParser_Keys.least_key_return least_key() throws RecognitionException { return gKeys.least_key(); }
    public OracleParser_Keys.or_key_return or_key() throws RecognitionException { return gKeys.or_key(); }
    public OracleParser_Keys.end_key_return end_key() throws RecognitionException { return gKeys.end_key(); }
    public OracleParser_Keys.char_key_return char_key() throws RecognitionException { return gKeys.char_key(); }
    public OracleParser_Keys.overriding_key_return overriding_key() throws RecognitionException { return gKeys.overriding_key(); }
    public OracleParser_Keys.decrement_key_return decrement_key() throws RecognitionException { return gKeys.decrement_key(); }
    public OracleParser_Keys.xmlagg_key_return xmlagg_key() throws RecognitionException { return gKeys.xmlagg_key(); }
    public OracleParser_Commons.bind_variable_return bind_variable() throws RecognitionException { return gCommons.bind_variable(); }
    public OracleParser_Keys.char_length_key_return char_length_key() throws RecognitionException { return gKeys.char_length_key(); }
    public OracleParser_Keys.is_key_return is_key() throws RecognitionException { return gKeys.is_key(); }
    public OracleParser_Keys.continue_key_return continue_key() throws RecognitionException { return gKeys.continue_key(); }
    public OracleParser_Keys.referencing_key_return referencing_key() throws RecognitionException { return gKeys.referencing_key(); }
    public OracleParser_Keys.sysdate_interval_key_return sysdate_interval_key() throws RecognitionException { return gKeys.sysdate_interval_key(); }
    public OracleParser_Keys.current_date_key_return current_date_key() throws RecognitionException { return gKeys.current_date_key(); }
    public OracleParser_Keys.ignore_key_return ignore_key() throws RecognitionException { return gKeys.ignore_key(); }
    public OracleParser_Keys.having_key_return having_key() throws RecognitionException { return gKeys.having_key(); }
    public OracleParser_Keys.hash_key_return hash_key() throws RecognitionException { return gKeys.hash_key(); }
    public OracleParser_Keys.both_key_return both_key() throws RecognitionException { return gKeys.both_key(); }
    public OracleParser_Keys.if_key_return if_key() throws RecognitionException { return gKeys.if_key(); }
    public OracleParser_Keys.parallel_enable_key_return parallel_enable_key() throws RecognitionException { return gKeys.parallel_enable_key(); }
    public OracleParser_Keys.loop_key_return loop_key() throws RecognitionException { return gKeys.loop_key(); }
    public OracleParser_Keys.xmlnamespaces_key_return xmlnamespaces_key() throws RecognitionException { return gKeys.xmlnamespaces_key(); }
    public OracleParser_Keys.compile_key_return compile_key() throws RecognitionException { return gKeys.compile_key(); }
    public OracleParser_Keys.wait_key_return wait_key() throws RecognitionException { return gKeys.wait_key(); }
    public OracleParser_Keys.current_key_return current_key() throws RecognitionException { return gKeys.current_key(); }
    public OracleParser_Keys.modify_key_return modify_key() throws RecognitionException { return gKeys.modify_key(); }
    public OracleParser_Keys.by_key_return by_key() throws RecognitionException { return gKeys.by_key(); }
    public OracleParser_Keys.cascade_key_return cascade_key() throws RecognitionException { return gKeys.cascade_key(); }
    public OracleParser_Keys.binary_float_key_return binary_float_key() throws RecognitionException { return gKeys.binary_float_key(); }
    public OracleParser_Keys.float_key_return float_key() throws RecognitionException { return gKeys.float_key(); }
    public OracleParser_Keys.dense_rank_key_return dense_rank_key() throws RecognitionException { return gKeys.dense_rank_key(); }
    public OracleParser_Keys.enable_key_return enable_key() throws RecognitionException { return gKeys.enable_key(); }
    public OracleParser_Keys.batch_key_return batch_key() throws RecognitionException { return gKeys.batch_key(); }
    public OracleParser_Keys.inline_key_return inline_key() throws RecognitionException { return gKeys.inline_key(); }
    public OracleParser_Commons.function_name_return function_name() throws RecognitionException { return gCommons.function_name(); }
    public OracleParser_Keys.update_key_return update_key() throws RecognitionException { return gKeys.update_key(); }
    public OracleParser_Keys.unpivot_key_return unpivot_key() throws RecognitionException { return gKeys.unpivot_key(); }
    public OracleParser_Keys.cluster_key_return cluster_key() throws RecognitionException { return gKeys.cluster_key(); }
    public OracleParser_Keys.natural_key_return natural_key() throws RecognitionException { return gKeys.natural_key(); }
    public OracleParser_Keys.local_key_return local_key() throws RecognitionException { return gKeys.local_key(); }
    public OracleParser_Commons.partition_extension_clause_return partition_extension_clause() throws RecognitionException { return gCommons.partition_extension_clause(); }
    public OracleParser_Keys.exception_init_key_return exception_init_key() throws RecognitionException { return gKeys.exception_init_key(); }
    public OracleParser_Keys.xmlroot_key_return xmlroot_key() throws RecognitionException { return gKeys.xmlroot_key(); }
    public OracleParser_Commons.where_clause_return where_clause() throws RecognitionException { return gCommons.where_clause(); }
    public OracleParser_Keys.date_key_return date_key() throws RecognitionException { return gKeys.date_key(); }
    public OracleParser_Commons.native_datatype_element_return native_datatype_element() throws RecognitionException { return gCommons.native_datatype_element(); }
    public OracleParser_Keys.constraint_key_return constraint_key() throws RecognitionException { return gKeys.constraint_key(); }
    public OracleParser_Keys.noorder_key_return noorder_key() throws RecognitionException { return gKeys.noorder_key(); }
    public OracleParser_Keys.evalname_key_return evalname_key() throws RecognitionException { return gKeys.evalname_key(); }
    public OracleParser_Commons.type_name_return type_name() throws RecognitionException { return gCommons.type_name(); }
    public OracleParser_Keys.option_key_return option_key() throws RecognitionException { return gKeys.option_key(); }
    public OracleParser_Keys.nested_key_return nested_key() throws RecognitionException { return gKeys.nested_key(); }
    public OracleParser_Keys.logoff_key_return logoff_key() throws RecognitionException { return gKeys.logoff_key(); }
    public OracleParser_Keys.data_key_return data_key() throws RecognitionException { return gKeys.data_key(); }
    public OracleParser_Keys.timezone_hour_key_return timezone_hour_key() throws RecognitionException { return gKeys.timezone_hour_key(); }
    public OracleParser_Keys.sqldata_key_return sqldata_key() throws RecognitionException { return gKeys.sqldata_key(); }
    public OracleParser_Keys.indices_key_return indices_key() throws RecognitionException { return gKeys.indices_key(); }
    public OracleParser_Keys.parallel_key_return parallel_key() throws RecognitionException { return gKeys.parallel_key(); }
    public OracleParser_Keys.with_key_return with_key() throws RecognitionException { return gKeys.with_key(); }
    public OracleParser_Keys.unknown_key_return unknown_key() throws RecognitionException { return gKeys.unknown_key(); }
    public OracleParser_Keys.warning_key_return warning_key() throws RecognitionException { return gKeys.warning_key(); }
    public OracleParser_Keys.nan_key_return nan_key() throws RecognitionException { return gKeys.nan_key(); }
    public OracleParser_Keys.follows_key_return follows_key() throws RecognitionException { return gKeys.follows_key(); }
    public OracleParser_Keys.varchar2_key_return varchar2_key() throws RecognitionException { return gKeys.varchar2_key(); }
    public OracleParser_Keys.db_role_change_key_return db_role_change_key() throws RecognitionException { return gKeys.db_role_change_key(); }
    public OracleParser_Keys.like2_key_return like2_key() throws RecognitionException { return gKeys.like2_key(); }
    public OracleParser_Keys.uid_key_return uid_key() throws RecognitionException { return gKeys.uid_key(); }
    public OracleParser_Keys.system_key_return system_key() throws RecognitionException { return gKeys.system_key(); }
    public OracleParser_Keys.database_key_return database_key() throws RecognitionException { return gKeys.database_key(); }
    public OracleParser_Keys.rawtohex_key_return rawtohex_key() throws RecognitionException { return gKeys.rawtohex_key(); }
    public OracleParser_Commons.implementation_type_name_return implementation_type_name() throws RecognitionException { return gCommons.implementation_type_name(); }
    public OracleParser_Keys.including_key_return including_key() throws RecognitionException { return gKeys.including_key(); }
    public OracleParser_Commons.link_name_return link_name() throws RecognitionException { return gCommons.link_name(); }
    public OracleParser_Keys.string_key_return string_key() throws RecognitionException { return gKeys.string_key(); }
    public OracleParser_Keys.select_key_return select_key() throws RecognitionException { return gKeys.select_key(); }
    public OracleParser_Keys.rows_key_return rows_key() throws RecognitionException { return gKeys.rows_key(); }
    public OracleParser_Keys.updated_key_return updated_key() throws RecognitionException { return gKeys.updated_key(); }
    public OracleParser_Keys.corrupt_xid_key_return corrupt_xid_key() throws RecognitionException { return gKeys.corrupt_xid_key(); }
    public OracleParser_Keys.binary_float_nan_key_return binary_float_nan_key() throws RecognitionException { return gKeys.binary_float_nan_key(); }
    public OracleParser_Keys.oserror_key_return oserror_key() throws RecognitionException { return gKeys.oserror_key(); }
    public OracleParser_Keys.rpad_key_return rpad_key() throws RecognitionException { return gKeys.rpad_key(); }
    public OracleParser_Keys.floor_key_return floor_key() throws RecognitionException { return gKeys.floor_key(); }
    public OracleParser_Keys.index_key_return index_key() throws RecognitionException { return gKeys.index_key(); }
    public OracleParser_Keys.read_key_return read_key() throws RecognitionException { return gKeys.read_key(); }
    public OracleParser_Keys.naturaln_key_return naturaln_key() throws RecognitionException { return gKeys.naturaln_key(); }
    public OracleParser_Keys.inner_key_return inner_key() throws RecognitionException { return gKeys.inner_key(); }
    public OracleParser_Keys.validate_key_return validate_key() throws RecognitionException { return gKeys.validate_key(); }
    public OracleParser_Keys.disable_key_return disable_key() throws RecognitionException { return gKeys.disable_key(); }
    public OracleParser_Commons.xml_column_name_return xml_column_name() throws RecognitionException { return gCommons.xml_column_name(); }
    public OracleParser_Keys.isolation_key_return isolation_key() throws RecognitionException { return gKeys.isolation_key(); }
    public OracleParser_Keys.member_key_return member_key() throws RecognitionException { return gKeys.member_key(); }
    public OracleParser_Keys.authid_key_return authid_key() throws RecognitionException { return gKeys.authid_key(); }
    public OracleParser_Keys.close_key_return close_key() throws RecognitionException { return gKeys.close_key(); }
    public OracleParser_Keys.no_key_return no_key() throws RecognitionException { return gKeys.no_key(); }
    public OracleParser_Keys.definer_key_return definer_key() throws RecognitionException { return gKeys.definer_key(); }
    public OracleParser_Keys.following_key_return following_key() throws RecognitionException { return gKeys.following_key(); }
    public OracleParser_Keys.like4_key_return like4_key() throws RecognitionException { return gKeys.like4_key(); }
    public OracleParser_Keys.cursor_key_return cursor_key() throws RecognitionException { return gKeys.cursor_key(); }
    public OracleParser_Keys.dimension_key_return dimension_key() throws RecognitionException { return gKeys.dimension_key(); }
    public OracleParser_Keys.extend_key_return extend_key() throws RecognitionException { return gKeys.extend_key(); }
    public OracleParser_Keys.true_key_return true_key() throws RecognitionException { return gKeys.true_key(); }
    public OracleParser_Keys.corresponding_key_return corresponding_key() throws RecognitionException { return gKeys.corresponding_key(); }
    public OracleParser_Keys.serially_reusable_key_return serially_reusable_key() throws RecognitionException { return gKeys.serially_reusable_key(); }
    public OracleParser_Keys.binary_double_infinity_key_return binary_double_infinity_key() throws RecognitionException { return gKeys.binary_double_infinity_key(); }
    public OracleParser_Commons.numeric_return numeric() throws RecognitionException { return gCommons.numeric(); }
    public OracleParser_Keys.unlimited_key_return unlimited_key() throws RecognitionException { return gKeys.unlimited_key(); }
    public OracleParser_Keys.savepoint_key_return savepoint_key() throws RecognitionException { return gKeys.savepoint_key(); }
    public OracleParser_Keys.distinct_key_return distinct_key() throws RecognitionException { return gKeys.distinct_key(); }
    public OracleParser_Keys.xmlattributes_key_return xmlattributes_key() throws RecognitionException { return gKeys.xmlattributes_key(); }
    public OracleParser_Keys.query_key_return query_key() throws RecognitionException { return gKeys.query_key(); }
    public OracleParser_Keys.specification_key_return specification_key() throws RecognitionException { return gKeys.specification_key(); }
    public OracleParser_Keys.timestamp_key_return timestamp_key() throws RecognitionException { return gKeys.timestamp_key(); }
    public OracleParser_Keys.out_key_return out_key() throws RecognitionException { return gKeys.out_key(); }
    public OracleParser_Keys.like_key_return like_key() throws RecognitionException { return gKeys.like_key(); }
    public OracleParser_Keys.substitutable_key_return substitutable_key() throws RecognitionException { return gKeys.substitutable_key(); }
    public OracleParser_Commons.id_expression_return id_expression() throws RecognitionException { return gCommons.id_expression(); }
    public OracleParser_Commons.column_name_return column_name() throws RecognitionException { return gCommons.column_name(); }
    public OracleParser_Keys.group_key_return group_key() throws RecognitionException { return gKeys.group_key(); }
    public OracleParser_Keys.bfile_key_return bfile_key() throws RecognitionException { return gKeys.bfile_key(); }
    public OracleParser_Commons.less_than_or_equals_op_return less_than_or_equals_op() throws RecognitionException { return gCommons.less_than_or_equals_op(); }
    public OracleParser_Keys.old_key_return old_key() throws RecognitionException { return gKeys.old_key(); }
    public OracleParser_Keys.timezone_region_key_return timezone_region_key() throws RecognitionException { return gKeys.timezone_region_key(); }
    public OracleParser_Keys.start_key_return start_key() throws RecognitionException { return gKeys.start_key(); }
    public OracleParser_Commons.general_element_part_return general_element_part() throws RecognitionException { return gCommons.general_element_part(); }
    public OracleParser_Keys.blob_key_return blob_key() throws RecognitionException { return gKeys.blob_key(); }
    public OracleParser_Keys.hour_key_return hour_key() throws RecognitionException { return gKeys.hour_key(); }
    public OracleParser_Keys.false_key_return false_key() throws RecognitionException { return gKeys.false_key(); }
    public OracleParser_Keys.use_key_return use_key() throws RecognitionException { return gKeys.use_key(); }
    public OracleParser_Keys.sequential_key_return sequential_key() throws RecognitionException { return gKeys.sequential_key(); }
    public OracleParser_Keys.map_key_return map_key() throws RecognitionException { return gKeys.map_key(); }
    public OracleParser_Keys.locked_key_return locked_key() throws RecognitionException { return gKeys.locked_key(); }
    public OracleParser_Keys.prior_key_return prior_key() throws RecognitionException { return gKeys.prior_key(); }
    public OracleParser_Keys.path_key_return path_key() throws RecognitionException { return gKeys.path_key(); }
    public OracleParser_Keys.reverse_key_return reverse_key() throws RecognitionException { return gKeys.reverse_key(); }
    public OracleParser_Keys.bulk_key_return bulk_key() throws RecognitionException { return gKeys.bulk_key(); }
    public OracleParser_Keys.xmlforest_key_return xmlforest_key() throws RecognitionException { return gKeys.xmlforest_key(); }
    public OracleParser_Keys.subtype_key_return subtype_key() throws RecognitionException { return gKeys.subtype_key(); }
    public OracleParser_Keys.char_cs_key_return char_cs_key() throws RecognitionException { return gKeys.char_cs_key(); }
    public OracleParser_Keys.number_key_return number_key() throws RecognitionException { return gKeys.number_key(); }
    public OracleParser_Keys.work_key_return work_key() throws RecognitionException { return gKeys.work_key(); }
    public OracleParser_Keys.entityescaping_key_return entityescaping_key() throws RecognitionException { return gKeys.entityescaping_key(); }
    public OracleParser_Keys.pls_integer_key_return pls_integer_key() throws RecognitionException { return gKeys.pls_integer_key(); }
    public OracleParser_Keys.sum_key_return sum_key() throws RecognitionException { return gKeys.sum_key(); }
    public OracleParser_Keys.noentityescaping_key_return noentityescaping_key() throws RecognitionException { return gKeys.noentityescaping_key(); }
    public OracleParser_Keys.off_key_return off_key() throws RecognitionException { return gKeys.off_key(); }
    public OracleParser_Commons.index_name_return index_name() throws RecognitionException { return gCommons.index_name(); }
    public OracleParser_Keys.substr_key_return substr_key() throws RecognitionException { return gKeys.substr_key(); }
    public OracleParser_Keys.round_key_return round_key() throws RecognitionException { return gKeys.round_key(); }
    public OracleParser_Keys.matched_key_return matched_key() throws RecognitionException { return gKeys.matched_key(); }
    public OracleParser_Keys.serializable_key_return serializable_key() throws RecognitionException { return gKeys.serializable_key(); }
    public OracleParser_Keys.variable_key_return variable_key() throws RecognitionException { return gKeys.variable_key(); }
    public OracleParser_Keys.parent_key_return parent_key() throws RecognitionException { return gKeys.parent_key(); }
    public OracleParser_Commons.into_clause_return into_clause() throws RecognitionException { return gCommons.into_clause(); }
    public OracleParser_Keys.varray_key_return varray_key() throws RecognitionException { return gKeys.varray_key(); }
    public OracleParser_Keys.year_key_return year_key() throws RecognitionException { return gKeys.year_key(); }
    public OracleParser_Keys.return_key_return return_key() throws RecognitionException { return gKeys.return_key(); }
    public OracleParser_Keys.cast_key_return cast_key() throws RecognitionException { return gKeys.cast_key(); }
    public OracleParser_Keys.debug_key_return debug_key() throws RecognitionException { return gKeys.debug_key(); }
    public OracleParser_Keys.position_key_return position_key() throws RecognitionException { return gKeys.position_key(); }
    public OracleParser_Keys.reuse_key_return reuse_key() throws RecognitionException { return gKeys.reuse_key(); }
    public OracleParser_Commons.collection_name_return collection_name() throws RecognitionException { return gCommons.collection_name(); }
    public OracleParser_Keys.connect_by_root_key_return connect_by_root_key() throws RecognitionException { return gKeys.connect_by_root_key(); }
    public OracleParser_Keys.percent_type_key_return percent_type_key() throws RecognitionException { return gKeys.percent_type_key(); }
    public OracleParser_Keys.xmlexists_key_return xmlexists_key() throws RecognitionException { return gKeys.xmlexists_key(); }
    public OracleParser_Keys.result_key_return result_key() throws RecognitionException { return gKeys.result_key(); }
    public OracleParser_Keys.indicator_key_return indicator_key() throws RecognitionException { return gKeys.indicator_key(); }
    public OracleParser_Commons.concatenation_op_return concatenation_op() throws RecognitionException { return gCommons.concatenation_op(); }
    public OracleParser_Keys.current_time_key_return current_time_key() throws RecognitionException { return gKeys.current_time_key(); }
    public OracleParser_Keys.from_key_return from_key() throws RecognitionException { return gKeys.from_key(); }
    public OracleParser_Keys.breadth_key_return breadth_key() throws RecognitionException { return gKeys.breadth_key(); }
    public OracleParser_Keys.percent_rowtype_key_return percent_rowtype_key() throws RecognitionException { return gKeys.percent_rowtype_key(); }
    public OracleParser_Keys.decode_key_return decode_key() throws RecognitionException { return gKeys.decode_key(); }
    public OracleParser_Keys.standalone_key_return standalone_key() throws RecognitionException { return gKeys.standalone_key(); }
    public OracleParser_Keys.single_key_return single_key() throws RecognitionException { return gKeys.single_key(); }
    public OracleParser_Keys.cube_key_return cube_key() throws RecognitionException { return gKeys.cube_key(); }
    public OracleParser_Keys.nocache_key_return nocache_key() throws RecognitionException { return gKeys.nocache_key(); }
    public OracleParser_Keys.until_key_return until_key() throws RecognitionException { return gKeys.until_key(); }
    public OracleParser_Keys.system_user_key_return system_user_key() throws RecognitionException { return gKeys.system_user_key(); }
    public OracleParser_Keys.self_key_return self_key() throws RecognitionException { return gKeys.self_key(); }
    public OracleParser_Keys.then_key_return then_key() throws RecognitionException { return gKeys.then_key(); }
    public OracleParser_Keys.indent_key_return indent_key() throws RecognitionException { return gKeys.indent_key(); }
    public OracleParser_Keys.unbounded_key_return unbounded_key() throws RecognitionException { return gKeys.unbounded_key(); }
    public OracleParser_Keys.pipelined_key_return pipelined_key() throws RecognitionException { return gKeys.pipelined_key(); }
    public OracleParser_Keys.suspend_key_return suspend_key() throws RecognitionException { return gKeys.suspend_key(); }
    public OracleParser_Keys.ref_key_return ref_key() throws RecognitionException { return gKeys.ref_key(); }
    public OracleParser_Commons.table_alias_return table_alias() throws RecognitionException { return gCommons.table_alias(); }
    public OracleParser_Keys.alter_key_return alter_key() throws RecognitionException { return gKeys.alter_key(); }
    public OracleParser_Keys.array_key_return array_key() throws RecognitionException { return gKeys.array_key(); }
    public OracleParser_Commons.id_return id() throws RecognitionException { return gCommons.id(); }
    public OracleParser_Keys.autonomous_transaction_key_return autonomous_transaction_key() throws RecognitionException { return gKeys.autonomous_transaction_key(); }
    public OracleParser_Keys.decimal_key_return decimal_key() throws RecognitionException { return gKeys.decimal_key(); }
    public OracleParser_Commons.aggregate_function_name_return aggregate_function_name() throws RecognitionException { return gCommons.aggregate_function_name(); }
    public OracleParser_Keys.static_key_return static_key() throws RecognitionException { return gKeys.static_key(); }
    public OracleParser_Keys.nomaxvalue_key_return nomaxvalue_key() throws RecognitionException { return gKeys.nomaxvalue_key(); }
    public OracleParser_Keys.customdatum_key_return customdatum_key() throws RecognitionException { return gKeys.customdatum_key(); }
    public OracleParser_Keys.on_key_return on_key() throws RecognitionException { return gKeys.on_key(); }
    public OracleParser_Keys.percent_rowcount_key_return percent_rowcount_key() throws RecognitionException { return gKeys.percent_rowcount_key(); }
    public OracleParser_Keys.returning_key_return returning_key() throws RecognitionException { return gKeys.returning_key(); }
    public OracleParser_Keys.row_key_return row_key() throws RecognitionException { return gKeys.row_key(); }
    public OracleParser_Keys.collect_key_return collect_key() throws RecognitionException { return gKeys.collect_key(); }
    public OracleParser_Keys.connect_key_return connect_key() throws RecognitionException { return gKeys.connect_key(); }
    public OracleParser_Keys.sysdate_key_return sysdate_key() throws RecognitionException { return gKeys.sysdate_key(); }
    public OracleParser_Keys.goto_key_return goto_key() throws RecognitionException { return gKeys.goto_key(); }
    public OracleParser_Commons.column_alias_return column_alias() throws RecognitionException { return gCommons.column_alias(); }
    public OracleParser_Keys.aggregate_key_return aggregate_key() throws RecognitionException { return gKeys.aggregate_key(); }
    public OracleParser_Keys.commit_key_return commit_key() throws RecognitionException { return gKeys.commit_key(); }
    public OracleParser_Keys.failure_key_return failure_key() throws RecognitionException { return gKeys.failure_key(); }
    public OracleParser_Keys.package_key_return package_key() throws RecognitionException { return gKeys.package_key(); }
    public OracleParser_Keys.user_key_return user_key() throws RecognitionException { return gKeys.user_key(); }
    public OracleParser_Keys.nvarchar2_key_return nvarchar2_key() throws RecognitionException { return gKeys.nvarchar2_key(); }
    public OracleParser_Keys.analyze_key_return analyze_key() throws RecognitionException { return gKeys.analyze_key(); }
    public OracleParser_Keys.binary_integer_key_return binary_integer_key() throws RecognitionException { return gKeys.binary_integer_key(); }
    public OracleParser_Keys.each_key_return each_key() throws RecognitionException { return gKeys.each_key(); }
    public OracleParser_Keys.first_key_return first_key() throws RecognitionException { return gKeys.first_key(); }
    public OracleParser_Keys.not_key_return not_key() throws RecognitionException { return gKeys.not_key(); }
    public OracleParser_Keys.comment_key_return comment_key() throws RecognitionException { return gKeys.comment_key(); }
    public OracleParser_Keys.auto_key_return auto_key() throws RecognitionException { return gKeys.auto_key(); }
    public OracleParser_Keys.chr_key_return chr_key() throws RecognitionException { return gKeys.chr_key(); }
    public OracleParser_Commons.query_name_return query_name() throws RecognitionException { return gCommons.query_name(); }
    public OracleParser_Keys.statement_id_key_return statement_id_key() throws RecognitionException { return gKeys.statement_id_key(); }
    public OracleParser_Keys.exit_key_return exit_key() throws RecognitionException { return gKeys.exit_key(); }
    public OracleParser_Keys.double_key_return double_key() throws RecognitionException { return gKeys.double_key(); }
    public OracleParser_Keys.module_key_return module_key() throws RecognitionException { return gKeys.module_key(); }
    public OracleParser_Keys.and_key_return and_key() throws RecognitionException { return gKeys.and_key(); }
    public OracleParser_Keys.zone_key_return zone_key() throws RecognitionException { return gKeys.zone_key(); }
    public OracleParser_Keys.mod_key_return mod_key() throws RecognitionException { return gKeys.mod_key(); }
    public OracleParser_Keys.nvl_key_return nvl_key() throws RecognitionException { return gKeys.nvl_key(); }

    public final boolean synpred167_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred454_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred454_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred440_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred440_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred377_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred431_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred431_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred471_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred471_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred365_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred365_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred376_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred477_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred477_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred445_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred445_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred463_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred463_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred426_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred426_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred470_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred470_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred438_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred438_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred359_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred453_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred453_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred436_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred370_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred370_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred420_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred420_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred455_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred455_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred452_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred452_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred435_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred435_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred432_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred432_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred427_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred427_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred468_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred468_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred419_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred419_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred372_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred372_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred410_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred410_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred450_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred450_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred360_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred360_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred369_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred369_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred474_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred474_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred475_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred475_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred441_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred441_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred374_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred374_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred462_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred462_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred449_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred449_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred433_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred433_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred444_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred444_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred366_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred366_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred373_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred373_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred430_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred430_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred460_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred460_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred466_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred466_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred379_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred464_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred464_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred461_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred461_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred437_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred437_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred447_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred447_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_OracleParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_OracleParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA17 dfa17 = new DFA17(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA192 dfa192 = new DFA192(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA216 dfa216 = new DFA216(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA226 dfa226 = new DFA226(this);
    protected DFA241 dfa241 = new DFA241(this);
    protected DFA248 dfa248 = new DFA248(this);
    protected DFA254 dfa254 = new DFA254(this);
    protected DFA255 dfa255 = new DFA255(this);
    protected DFA258 dfa258 = new DFA258(this);
    protected DFA257 dfa257 = new DFA257(this);
    protected DFA323 dfa323 = new DFA323(this);
    protected DFA263 dfa263 = new DFA263(this);
    protected DFA264 dfa264 = new DFA264(this);
    protected DFA265 dfa265 = new DFA265(this);
    protected DFA267 dfa267 = new DFA267(this);
    protected DFA269 dfa269 = new DFA269(this);
    protected DFA270 dfa270 = new DFA270(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA287 dfa287 = new DFA287(this);
    protected DFA303 dfa303 = new DFA303(this);
    protected DFA306 dfa306 = new DFA306(this);
    protected DFA314 dfa314 = new DFA314(this);
    protected DFA319 dfa319 = new DFA319(this);
    protected DFA330 dfa330 = new DFA330(this);
    protected DFA346 dfa346 = new DFA346(this);
    protected DFA354 dfa354 = new DFA354(this);
    protected DFA418 dfa418 = new DFA418(this);
    protected DFA423 dfa423 = new DFA423(this);
    protected DFA424 dfa424 = new DFA424(this);
    protected DFA444 dfa444 = new DFA444(this);
    protected DFA461 dfa461 = new DFA461(this);
    protected DFA464 dfa464 = new DFA464(this);
    protected DFA473 dfa473 = new DFA473(this);
    static final String DFA17_eotS =
        "\73\uffff";
    static final String DFA17_eofS =
        "\4\uffff\1\3\6\uffff\2\33\21\uffff\2\33\33\uffff";
    static final String DFA17_minS =
        "\1\74\1\64\2\uffff\1\51\3\64\2\51\1\64\4\51\5\uffff\2\51\3\64\3"+
        "\uffff\2\64\2\51\1\64\2\51\1\64\10\51\2\uffff\2\51\1\64\2\uffff"+
        "\2\64\6\51";
    static final String DFA17_maxS =
        "\2\u00ba\2\uffff\13\u00ba\5\uffff\5\u00ba\3\uffff\20\u00ba\2\uffff"+
        "\3\u00ba\2\uffff\10\u00ba";
    static final String DFA17_acceptS =
        "\2\uffff\2\2\13\uffff\5\1\5\uffff\3\1\20\uffff\2\1\3\uffff\2\1"+
        "\10\uffff";
    static final String DFA17_specialS =
        "\1\17\1\52\2\uffff\1\20\1\51\1\13\1\23\1\4\1\5\1\24\1\43\1\50\1"+
        "\34\1\45\5\uffff\1\33\1\44\1\7\1\6\1\16\3\uffff\1\2\1\3\1\11\1\14"+
        "\1\25\1\15\1\12\1\26\1\21\1\22\1\31\1\41\1\32\1\42\1\35\1\46\2\uffff"+
        "\1\36\1\47\1\10\2\uffff\1\1\1\0\1\54\1\53\1\30\1\40\1\27\1\37}>";
    static final String[] DFA17_transitionS = {
            "\1\2\175\uffff\1\1",
            "\1\3\35\uffff\1\3\147\uffff\1\4",
            "",
            "",
            "\1\3\15\uffff\1\3\4\uffff\1\5\135\uffff\1\3\37\uffff\1\6",
            "\1\11\35\uffff\1\7\147\uffff\1\10",
            "\1\14\35\uffff\1\12\147\uffff\1\13",
            "\1\16\u0085\uffff\1\15",
            "\1\17\15\uffff\1\3\4\uffff\1\23\35\uffff\1\3\1\20\22\uffff"+
            "\1\21\113\uffff\1\22",
            "\1\17\15\uffff\1\3\4\uffff\1\23\35\uffff\1\3\1\20\22\uffff"+
            "\1\21\113\uffff\1\22",
            "\1\25\u0085\uffff\1\24",
            "\1\26\15\uffff\1\32\4\uffff\1\27\135\uffff\1\31\37\uffff\1"+
            "\30",
            "\1\26\15\uffff\1\32\4\uffff\1\27\135\uffff\1\31\37\uffff\1"+
            "\30",
            "\1\34\12\uffff\1\11\u0085\uffff\1\10",
            "\1\34\12\uffff\1\11\u0085\uffff\1\10",
            "",
            "",
            "",
            "",
            "",
            "\1\35\12\uffff\1\14\u0085\uffff\1\13",
            "\1\35\12\uffff\1\14\u0085\uffff\1\13",
            "\1\37\u0085\uffff\1\36",
            "\1\42\35\uffff\1\40\147\uffff\1\41",
            "\1\45\35\uffff\1\43\147\uffff\1\44",
            "",
            "",
            "",
            "\1\47\u0085\uffff\1\46",
            "\1\51\u0085\uffff\1\50",
            "\1\26\15\uffff\1\32\4\uffff\1\27\135\uffff\1\31\37\uffff\1"+
            "\30",
            "\1\26\15\uffff\1\32\4\uffff\1\27\135\uffff\1\31\37\uffff\1"+
            "\30",
            "\1\53\u0085\uffff\1\52",
            "\1\3\15\uffff\1\54\4\uffff\1\3\35\uffff\1\55\137\uffff\1\3",
            "\1\3\15\uffff\1\54\4\uffff\1\3\35\uffff\1\55\137\uffff\1\3",
            "\1\57\u0085\uffff\1\56",
            "\1\60\22\uffff\1\61\145\uffff\1\3\27\uffff\1\62",
            "\1\60\22\uffff\1\61\145\uffff\1\3\27\uffff\1\62",
            "\1\34\12\uffff\1\11\u0085\uffff\1\10",
            "\1\34\12\uffff\1\11\u0085\uffff\1\10",
            "\1\35\12\uffff\1\14\u0085\uffff\1\13",
            "\1\35\12\uffff\1\14\u0085\uffff\1\13",
            "\1\63\12\uffff\1\42\u0085\uffff\1\41",
            "\1\63\12\uffff\1\42\u0085\uffff\1\41",
            "",
            "",
            "\1\64\12\uffff\1\45\u0085\uffff\1\44",
            "\1\64\12\uffff\1\45\u0085\uffff\1\44",
            "\1\66\u0085\uffff\1\65",
            "",
            "",
            "\1\70\u0085\uffff\1\67",
            "\1\72\u0085\uffff\1\71",
            "\1\60\22\uffff\1\61\145\uffff\1\3\27\uffff\1\62",
            "\1\60\22\uffff\1\61\145\uffff\1\3\27\uffff\1\62",
            "\1\63\12\uffff\1\42\u0085\uffff\1\41",
            "\1\63\12\uffff\1\42\u0085\uffff\1\41",
            "\1\64\12\uffff\1\45\u0085\uffff\1\44",
            "\1\64\12\uffff\1\45\u0085\uffff\1\44"
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "232:70: ( nulls_key last_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_52 = input.LA(1);

                         
                        int index17_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_52==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 57;}

                        else if ( (LA17_52==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 58;}

                         
                        input.seek(index17_52);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA17_51 = input.LA(1);

                         
                        int index17_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_51==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 55;}

                        else if ( (LA17_51==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 56;}

                         
                        input.seek(index17_51);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA17_28 = input.LA(1);

                         
                        int index17_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_28==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 38;}

                        else if ( (LA17_28==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 39;}

                         
                        input.seek(index17_28);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA17_29 = input.LA(1);

                         
                        int index17_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_29==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 40;}

                        else if ( (LA17_29==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 41;}

                         
                        input.seek(index17_29);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA17_8 = input.LA(1);

                         
                        int index17_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_8==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA17_8==SQL92_RESERVED_ASC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 16;}

                        else if ( (LA17_8==SQL92_RESERVED_DESC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 17;}

                        else if ( (LA17_8==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA17_8==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 19;}

                        else if ( (LA17_8==LEFT_PAREN||LA17_8==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                         
                        input.seek(index17_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA17_9 = input.LA(1);

                         
                        int index17_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_9==LEFT_PAREN||LA17_9==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                        else if ( (LA17_9==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA17_9==SQL92_RESERVED_ASC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 16;}

                        else if ( (LA17_9==SQL92_RESERVED_DESC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 17;}

                        else if ( (LA17_9==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA17_9==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 19;}

                         
                        input.seek(index17_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA17_23 = input.LA(1);

                         
                        int index17_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_23==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 32;}

                        else if ( (LA17_23==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 33;}

                        else if ( (LA17_23==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 34;}

                         
                        input.seek(index17_23);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA17_22 = input.LA(1);

                         
                        int index17_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_22==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 30;}

                        else if ( (LA17_22==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 31;}

                         
                        input.seek(index17_22);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA17_48 = input.LA(1);

                         
                        int index17_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_48==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 53;}

                        else if ( (LA17_48==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 54;}

                         
                        input.seek(index17_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA17_30 = input.LA(1);

                         
                        int index17_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_30==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 24;}

                        else if ( (LA17_30==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 23;}

                        else if ( (LA17_30==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 25;}

                        else if ( (LA17_30==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 26;}

                        else if ( (LA17_30==EOF) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 27;}

                        else if ( (LA17_30==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 22;}

                         
                        input.seek(index17_30);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA17_34 = input.LA(1);

                         
                        int index17_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_34==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 44;}

                        else if ( (LA17_34==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 45;}

                        else if ( (LA17_34==PERIOD||LA17_34==COMMA||LA17_34==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                         
                        input.seek(index17_34);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA17_6 = input.LA(1);

                         
                        int index17_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_6==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 10;}

                        else if ( (LA17_6==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 11;}

                        else if ( (LA17_6==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 12;}

                         
                        input.seek(index17_6);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA17_31 = input.LA(1);

                         
                        int index17_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_31==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 23;}

                        else if ( (LA17_31==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 24;}

                        else if ( (LA17_31==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 22;}

                        else if ( (LA17_31==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 25;}

                        else if ( (LA17_31==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 26;}

                        else if ( (LA17_31==EOF) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 27;}

                         
                        input.seek(index17_31);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA17_33 = input.LA(1);

                         
                        int index17_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_33==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 44;}

                        else if ( (LA17_33==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 45;}

                        else if ( (LA17_33==PERIOD||LA17_33==COMMA||LA17_33==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                         
                        input.seek(index17_33);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA17_24 = input.LA(1);

                         
                        int index17_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_24==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 35;}

                        else if ( (LA17_24==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 36;}

                        else if ( (LA17_24==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 37;}

                         
                        input.seek(index17_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA17_0 = input.LA(1);

                         
                        int index17_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 1;}

                        else if ( (LA17_0==COMMA) ) {s = 2;}

                         
                        input.seek(index17_0);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA17_4 = input.LA(1);

                         
                        int index17_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_4==EOF||LA17_4==PERIOD||LA17_4==LEFT_PAREN||LA17_4==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                        else if ( (LA17_4==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 5;}

                        else if ( (LA17_4==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 6;}

                         
                        input.seek(index17_4);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA17_36 = input.LA(1);

                         
                        int index17_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_36==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 48;}

                        else if ( (LA17_36==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                        else if ( (LA17_36==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 49;}

                        else if ( (LA17_36==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 50;}

                         
                        input.seek(index17_36);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA17_37 = input.LA(1);

                         
                        int index17_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_37==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 48;}

                        else if ( (LA17_37==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 49;}

                        else if ( (LA17_37==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 50;}

                        else if ( (LA17_37==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                         
                        input.seek(index17_37);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA17_7 = input.LA(1);

                         
                        int index17_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_7==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 13;}

                        else if ( (LA17_7==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 14;}

                         
                        input.seek(index17_7);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA17_10 = input.LA(1);

                         
                        int index17_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_10==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 20;}

                        else if ( (LA17_10==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 21;}

                         
                        input.seek(index17_10);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA17_32 = input.LA(1);

                         
                        int index17_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_32==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 42;}

                        else if ( (LA17_32==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 43;}

                         
                        input.seek(index17_32);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA17_35 = input.LA(1);

                         
                        int index17_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_35==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 46;}

                        else if ( (LA17_35==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 47;}

                         
                        input.seek(index17_35);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA17_57 = input.LA(1);

                         
                        int index17_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_57==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 36;}

                        else if ( (LA17_57==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 37;}

                        else if ( (LA17_57==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 52;}

                         
                        input.seek(index17_57);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA17_55 = input.LA(1);

                         
                        int index17_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_55==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 33;}

                        else if ( (LA17_55==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 34;}

                        else if ( (LA17_55==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 51;}

                         
                        input.seek(index17_55);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA17_38 = input.LA(1);

                         
                        int index17_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_38==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 8;}

                        else if ( (LA17_38==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 9;}

                        else if ( (LA17_38==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 28;}

                         
                        input.seek(index17_38);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA17_40 = input.LA(1);

                         
                        int index17_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_40==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 11;}

                        else if ( (LA17_40==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 12;}

                        else if ( (LA17_40==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 29;}

                         
                        input.seek(index17_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA17_20 = input.LA(1);

                         
                        int index17_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_20==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 29;}

                        else if ( (LA17_20==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 11;}

                        else if ( (LA17_20==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 12;}

                         
                        input.seek(index17_20);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA17_13 = input.LA(1);

                         
                        int index17_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_13==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 28;}

                        else if ( (LA17_13==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 8;}

                        else if ( (LA17_13==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 9;}

                         
                        input.seek(index17_13);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA17_42 = input.LA(1);

                         
                        int index17_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_42==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 51;}

                        else if ( (LA17_42==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 33;}

                        else if ( (LA17_42==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 34;}

                         
                        input.seek(index17_42);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA17_46 = input.LA(1);

                         
                        int index17_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_46==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 52;}

                        else if ( (LA17_46==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 36;}

                        else if ( (LA17_46==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 37;}

                         
                        input.seek(index17_46);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA17_58 = input.LA(1);

                         
                        int index17_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_58==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 36;}

                        else if ( (LA17_58==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 37;}

                        else if ( (LA17_58==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 52;}

                         
                        input.seek(index17_58);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA17_56 = input.LA(1);

                         
                        int index17_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_56==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 33;}

                        else if ( (LA17_56==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 34;}

                        else if ( (LA17_56==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 51;}

                         
                        input.seek(index17_56);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA17_39 = input.LA(1);

                         
                        int index17_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_39==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 8;}

                        else if ( (LA17_39==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 9;}

                        else if ( (LA17_39==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 28;}

                         
                        input.seek(index17_39);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA17_41 = input.LA(1);

                         
                        int index17_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_41==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 11;}

                        else if ( (LA17_41==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 12;}

                        else if ( (LA17_41==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 29;}

                         
                        input.seek(index17_41);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA17_11 = input.LA(1);

                         
                        int index17_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_11==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 22;}

                        else if ( (LA17_11==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 23;}

                        else if ( (LA17_11==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 24;}

                        else if ( (LA17_11==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 25;}

                        else if ( (LA17_11==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 26;}

                        else if ( (LA17_11==EOF) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 27;}

                         
                        input.seek(index17_11);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA17_21 = input.LA(1);

                         
                        int index17_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_21==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 29;}

                        else if ( (LA17_21==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 11;}

                        else if ( (LA17_21==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 12;}

                         
                        input.seek(index17_21);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA17_14 = input.LA(1);

                         
                        int index17_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_14==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 28;}

                        else if ( (LA17_14==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 8;}

                        else if ( (LA17_14==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 9;}

                         
                        input.seek(index17_14);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA17_43 = input.LA(1);

                         
                        int index17_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_43==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 51;}

                        else if ( (LA17_43==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 33;}

                        else if ( (LA17_43==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 34;}

                         
                        input.seek(index17_43);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA17_47 = input.LA(1);

                         
                        int index17_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_47==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 52;}

                        else if ( (LA17_47==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 36;}

                        else if ( (LA17_47==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 37;}

                         
                        input.seek(index17_47);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA17_12 = input.LA(1);

                         
                        int index17_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_12==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 22;}

                        else if ( (LA17_12==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 23;}

                        else if ( (LA17_12==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 24;}

                        else if ( (LA17_12==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 25;}

                        else if ( (LA17_12==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 26;}

                        else if ( (LA17_12==EOF) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 27;}

                         
                        input.seek(index17_12);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA17_5 = input.LA(1);

                         
                        int index17_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_5==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 7;}

                        else if ( (LA17_5==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 8;}

                        else if ( (LA17_5==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 9;}

                         
                        input.seek(index17_5);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA17_1 = input.LA(1);

                         
                        int index17_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_1==DELIMITED_ID||LA17_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                        else if ( (LA17_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index17_1);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA17_54 = input.LA(1);

                         
                        int index17_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_54==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 49;}

                        else if ( (LA17_54==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 50;}

                        else if ( (LA17_54==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 48;}

                        else if ( (LA17_54==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                         
                        input.seek(index17_54);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA17_53 = input.LA(1);

                         
                        int index17_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA17_53==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                        else if ( (LA17_53==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 48;}

                        else if ( (LA17_53==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 49;}

                        else if ( (LA17_53==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 50;}

                         
                        input.seek(index17_53);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA21_eotS =
        "\73\uffff";
    static final String DFA21_eofS =
        "\3\uffff\1\4\4\uffff\2\24\23\uffff\2\24\34\uffff";
    static final String DFA21_minS =
        "\1\74\1\64\1\uffff\1\51\1\uffff\3\64\2\51\1\64\4\51\3\64\3\uffff"+
        "\2\51\5\uffff\1\64\2\51\1\64\2\51\1\64\2\51\1\64\4\51\2\uffff\2"+
        "\51\1\64\2\uffff\2\51\2\64\6\51";
    static final String DFA21_maxS =
        "\2\u00ba\1\uffff\1\u00ba\1\uffff\15\u00ba\3\uffff\2\u00ba\5\uffff"+
        "\16\u00ba\2\uffff\3\u00ba\2\uffff\12\u00ba";
    static final String DFA21_acceptS =
        "\2\uffff\1\2\1\uffff\1\2\15\uffff\3\1\2\uffff\5\1\16\uffff\2\1"+
        "\3\uffff\2\1\12\uffff";
    static final String DFA21_specialS =
        "\1\6\1\7\1\uffff\1\52\1\uffff\1\15\1\51\1\23\1\43\1\50\1\24\1\4"+
        "\1\5\1\34\1\45\1\11\1\10\1\20\3\uffff\1\33\1\44\5\uffff\1\2\1\13"+
        "\1\16\1\25\1\17\1\14\1\26\1\21\1\22\1\3\1\32\1\42\1\35\1\46\2\uffff"+
        "\1\36\1\47\1\12\2\uffff\1\31\1\41\1\1\1\0\1\54\1\53\1\30\1\40\1"+
        "\27\1\37}>";
    static final String[] DFA21_transitionS = {
            "\1\2\175\uffff\1\1",
            "\1\4\35\uffff\1\4\147\uffff\1\3",
            "",
            "\1\4\15\uffff\1\4\4\uffff\1\6\135\uffff\1\4\37\uffff\1\5",
            "",
            "\1\11\35\uffff\1\7\147\uffff\1\10",
            "\1\14\35\uffff\1\12\147\uffff\1\13",
            "\1\16\u0085\uffff\1\15",
            "\1\17\15\uffff\1\23\4\uffff\1\20\135\uffff\1\22\37\uffff\1"+
            "\21",
            "\1\17\15\uffff\1\23\4\uffff\1\20\135\uffff\1\22\37\uffff\1"+
            "\21",
            "\1\26\u0085\uffff\1\25",
            "\1\27\15\uffff\1\4\4\uffff\1\33\35\uffff\1\4\1\30\22\uffff"+
            "\1\31\113\uffff\1\32",
            "\1\27\15\uffff\1\4\4\uffff\1\33\35\uffff\1\4\1\30\22\uffff"+
            "\1\31\113\uffff\1\32",
            "\1\34\12\uffff\1\11\u0085\uffff\1\10",
            "\1\34\12\uffff\1\11\u0085\uffff\1\10",
            "\1\36\u0085\uffff\1\35",
            "\1\41\35\uffff\1\37\147\uffff\1\40",
            "\1\44\35\uffff\1\42\147\uffff\1\43",
            "",
            "",
            "",
            "\1\45\12\uffff\1\14\u0085\uffff\1\13",
            "\1\45\12\uffff\1\14\u0085\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "\1\47\u0085\uffff\1\46",
            "\1\17\15\uffff\1\23\4\uffff\1\20\135\uffff\1\22\37\uffff\1"+
            "\21",
            "\1\17\15\uffff\1\23\4\uffff\1\20\135\uffff\1\22\37\uffff\1"+
            "\21",
            "\1\51\u0085\uffff\1\50",
            "\1\4\15\uffff\1\52\4\uffff\1\4\35\uffff\1\53\137\uffff\1\4",
            "\1\4\15\uffff\1\52\4\uffff\1\4\35\uffff\1\53\137\uffff\1\4",
            "\1\55\u0085\uffff\1\54",
            "\1\56\22\uffff\1\57\145\uffff\1\4\27\uffff\1\60",
            "\1\56\22\uffff\1\57\145\uffff\1\4\27\uffff\1\60",
            "\1\62\u0085\uffff\1\61",
            "\1\34\12\uffff\1\11\u0085\uffff\1\10",
            "\1\34\12\uffff\1\11\u0085\uffff\1\10",
            "\1\63\12\uffff\1\41\u0085\uffff\1\40",
            "\1\63\12\uffff\1\41\u0085\uffff\1\40",
            "",
            "",
            "\1\64\12\uffff\1\44\u0085\uffff\1\43",
            "\1\64\12\uffff\1\44\u0085\uffff\1\43",
            "\1\66\u0085\uffff\1\65",
            "",
            "",
            "\1\45\12\uffff\1\14\u0085\uffff\1\13",
            "\1\45\12\uffff\1\14\u0085\uffff\1\13",
            "\1\70\u0085\uffff\1\67",
            "\1\72\u0085\uffff\1\71",
            "\1\56\22\uffff\1\57\145\uffff\1\4\27\uffff\1\60",
            "\1\56\22\uffff\1\57\145\uffff\1\4\27\uffff\1\60",
            "\1\63\12\uffff\1\41\u0085\uffff\1\40",
            "\1\63\12\uffff\1\41\u0085\uffff\1\40",
            "\1\64\12\uffff\1\44\u0085\uffff\1\43",
            "\1\64\12\uffff\1\44\u0085\uffff\1\43"
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "233:77: ( nulls_key last_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_52 = input.LA(1);

                         
                        int index21_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_52==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 57;}

                        else if ( (LA21_52==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 58;}

                         
                        input.seek(index21_52);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_51 = input.LA(1);

                         
                        int index21_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_51==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 55;}

                        else if ( (LA21_51==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 56;}

                         
                        input.seek(index21_51);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_28 = input.LA(1);

                         
                        int index21_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_28==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 38;}

                        else if ( (LA21_28==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 39;}

                         
                        input.seek(index21_28);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA21_37 = input.LA(1);

                         
                        int index21_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_37==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 49;}

                        else if ( (LA21_37==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 50;}

                         
                        input.seek(index21_37);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_11==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 23;}

                        else if ( (LA21_11==SQL92_RESERVED_ASC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 24;}

                        else if ( (LA21_11==SQL92_RESERVED_DESC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 25;}

                        else if ( (LA21_11==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 26;}

                        else if ( (LA21_11==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 27;}

                        else if ( (LA21_11==LEFT_PAREN||LA21_11==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_12==LEFT_PAREN||LA21_12==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                        else if ( (LA21_12==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 23;}

                        else if ( (LA21_12==SQL92_RESERVED_ASC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 24;}

                        else if ( (LA21_12==SQL92_RESERVED_DESC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 25;}

                        else if ( (LA21_12==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 26;}

                        else if ( (LA21_12==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 27;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA21_0 = input.LA(1);

                         
                        int index21_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 1;}

                        else if ( (LA21_0==COMMA) ) {s = 2;}

                         
                        input.seek(index21_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA21_1 = input.LA(1);

                         
                        int index21_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 3;}

                        else if ( (LA21_1==DELIMITED_ID||LA21_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index21_1);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA21_16 = input.LA(1);

                         
                        int index21_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_16==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 31;}

                        else if ( (LA21_16==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 32;}

                        else if ( (LA21_16==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 33;}

                         
                        input.seek(index21_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_15==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 29;}

                        else if ( (LA21_15==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 30;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA21_46 = input.LA(1);

                         
                        int index21_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_46==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 53;}

                        else if ( (LA21_46==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 54;}

                         
                        input.seek(index21_46);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA21_29 = input.LA(1);

                         
                        int index21_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_29==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 17;}

                        else if ( (LA21_29==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 16;}

                        else if ( (LA21_29==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA21_29==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 19;}

                        else if ( (LA21_29==EOF) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 20;}

                        else if ( (LA21_29==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 15;}

                         
                        input.seek(index21_29);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA21_33 = input.LA(1);

                         
                        int index21_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_33==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 42;}

                        else if ( (LA21_33==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 43;}

                        else if ( (LA21_33==PERIOD||LA21_33==COMMA||LA21_33==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index21_33);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA21_5 = input.LA(1);

                         
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_5==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 7;}

                        else if ( (LA21_5==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 8;}

                        else if ( (LA21_5==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 9;}

                         
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA21_30 = input.LA(1);

                         
                        int index21_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_30==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 16;}

                        else if ( (LA21_30==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 17;}

                        else if ( (LA21_30==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 15;}

                        else if ( (LA21_30==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA21_30==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 19;}

                        else if ( (LA21_30==EOF) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 20;}

                         
                        input.seek(index21_30);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA21_32 = input.LA(1);

                         
                        int index21_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_32==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 42;}

                        else if ( (LA21_32==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 43;}

                        else if ( (LA21_32==PERIOD||LA21_32==COMMA||LA21_32==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index21_32);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA21_17 = input.LA(1);

                         
                        int index21_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_17==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 34;}

                        else if ( (LA21_17==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 35;}

                        else if ( (LA21_17==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 36;}

                         
                        input.seek(index21_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA21_35 = input.LA(1);

                         
                        int index21_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_35==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 46;}

                        else if ( (LA21_35==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                        else if ( (LA21_35==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 47;}

                        else if ( (LA21_35==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 48;}

                         
                        input.seek(index21_35);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA21_36 = input.LA(1);

                         
                        int index21_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_36==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 46;}

                        else if ( (LA21_36==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 47;}

                        else if ( (LA21_36==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 48;}

                        else if ( (LA21_36==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index21_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA21_7 = input.LA(1);

                         
                        int index21_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_7==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 13;}

                        else if ( (LA21_7==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 14;}

                         
                        input.seek(index21_7);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_10==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 21;}

                        else if ( (LA21_10==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 22;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA21_31 = input.LA(1);

                         
                        int index21_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_31==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 40;}

                        else if ( (LA21_31==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 41;}

                         
                        input.seek(index21_31);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA21_34 = input.LA(1);

                         
                        int index21_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_34==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 44;}

                        else if ( (LA21_34==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 45;}

                         
                        input.seek(index21_34);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA21_57 = input.LA(1);

                         
                        int index21_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_57==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 35;}

                        else if ( (LA21_57==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 36;}

                        else if ( (LA21_57==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 52;}

                         
                        input.seek(index21_57);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA21_55 = input.LA(1);

                         
                        int index21_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_55==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 32;}

                        else if ( (LA21_55==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 33;}

                        else if ( (LA21_55==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 51;}

                         
                        input.seek(index21_55);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA21_49 = input.LA(1);

                         
                        int index21_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_49==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 11;}

                        else if ( (LA21_49==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 12;}

                        else if ( (LA21_49==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 37;}

                         
                        input.seek(index21_49);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA21_38 = input.LA(1);

                         
                        int index21_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_38==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 8;}

                        else if ( (LA21_38==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 9;}

                        else if ( (LA21_38==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 28;}

                         
                        input.seek(index21_38);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA21_21 = input.LA(1);

                         
                        int index21_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_21==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 37;}

                        else if ( (LA21_21==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 11;}

                        else if ( (LA21_21==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 12;}

                         
                        input.seek(index21_21);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_13==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 28;}

                        else if ( (LA21_13==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 8;}

                        else if ( (LA21_13==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 9;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA21_40 = input.LA(1);

                         
                        int index21_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_40==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 51;}

                        else if ( (LA21_40==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 32;}

                        else if ( (LA21_40==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 33;}

                         
                        input.seek(index21_40);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA21_44 = input.LA(1);

                         
                        int index21_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_44==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 52;}

                        else if ( (LA21_44==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 35;}

                        else if ( (LA21_44==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 36;}

                         
                        input.seek(index21_44);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA21_58 = input.LA(1);

                         
                        int index21_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_58==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 35;}

                        else if ( (LA21_58==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 36;}

                        else if ( (LA21_58==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 52;}

                         
                        input.seek(index21_58);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA21_56 = input.LA(1);

                         
                        int index21_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_56==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 32;}

                        else if ( (LA21_56==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 33;}

                        else if ( (LA21_56==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 51;}

                         
                        input.seek(index21_56);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA21_50 = input.LA(1);

                         
                        int index21_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_50==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 11;}

                        else if ( (LA21_50==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 12;}

                        else if ( (LA21_50==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 37;}

                         
                        input.seek(index21_50);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA21_39 = input.LA(1);

                         
                        int index21_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_39==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 8;}

                        else if ( (LA21_39==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 9;}

                        else if ( (LA21_39==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 28;}

                         
                        input.seek(index21_39);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_8==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 15;}

                        else if ( (LA21_8==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 16;}

                        else if ( (LA21_8==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 17;}

                        else if ( (LA21_8==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA21_8==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 19;}

                        else if ( (LA21_8==EOF) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 20;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA21_22 = input.LA(1);

                         
                        int index21_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_22==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 37;}

                        else if ( (LA21_22==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 11;}

                        else if ( (LA21_22==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 12;}

                         
                        input.seek(index21_22);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_14==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 28;}

                        else if ( (LA21_14==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 8;}

                        else if ( (LA21_14==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 9;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA21_41 = input.LA(1);

                         
                        int index21_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_41==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 51;}

                        else if ( (LA21_41==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 32;}

                        else if ( (LA21_41==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 33;}

                         
                        input.seek(index21_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA21_45 = input.LA(1);

                         
                        int index21_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_45==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 52;}

                        else if ( (LA21_45==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 35;}

                        else if ( (LA21_45==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 36;}

                         
                        input.seek(index21_45);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_9==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 15;}

                        else if ( (LA21_9==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 16;}

                        else if ( (LA21_9==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 17;}

                        else if ( (LA21_9==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA21_9==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 19;}

                        else if ( (LA21_9==EOF) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 20;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA21_6 = input.LA(1);

                         
                        int index21_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_6==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 10;}

                        else if ( (LA21_6==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 11;}

                        else if ( (LA21_6==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 12;}

                         
                        input.seek(index21_6);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA21_3 = input.LA(1);

                         
                        int index21_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_3==EOF||LA21_3==PERIOD||LA21_3==LEFT_PAREN||LA21_3==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                        else if ( (LA21_3==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 5;}

                        else if ( (LA21_3==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 6;}

                         
                        input.seek(index21_3);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA21_54 = input.LA(1);

                         
                        int index21_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_54==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 47;}

                        else if ( (LA21_54==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 48;}

                        else if ( (LA21_54==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 46;}

                        else if ( (LA21_54==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index21_54);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA21_53 = input.LA(1);

                         
                        int index21_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_53==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                        else if ( (LA21_53==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 46;}

                        else if ( (LA21_53==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 47;}

                        else if ( (LA21_53==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 48;}

                         
                        input.seek(index21_53);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA29_eotS =
        "\33\uffff";
    static final String DFA29_eofS =
        "\33\uffff";
    static final String DFA29_minS =
        "\1\4\1\0\1\uffff\1\0\27\uffff";
    static final String DFA29_maxS =
        "\1\u00ba\1\0\1\uffff\1\0\27\uffff";
    static final String DFA29_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\26\uffff";
    static final String DFA29_specialS =
        "\1\0\1\1\1\uffff\1\2\27\uffff}>";
    static final String[] DFA29_transitionS = {
            "\3\4\36\uffff\1\4\4\uffff\2\4\5\uffff\1\4\2\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\2\4\4\uffff\1\4\2\uffff\1\4\16\uffff\1\4\3\uffff"+
            "\1\3\2\uffff\1\4\5\uffff\1\4\5\uffff\1\4\3\uffff\2\4\1\uffff"+
            "\1\4\2\uffff\1\1\5\uffff\2\4\25\uffff\1\4\1\uffff\1\4\6\uffff"+
            "\1\4\15\uffff\1\4\1\uffff\1\2\24\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "258:9: ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_0 = input.LA(1);

                         
                        int index29_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_0==SQL92_RESERVED_DISTINCT) ) {s = 1;}

                        else if ( (LA29_0==SQL92_RESERVED_UNIQUE) && (synpred41_OracleParser())) {s = 2;}

                        else if ( (LA29_0==SQL92_RESERVED_ALL) ) {s = 3;}

                        else if ( ((LA29_0>=UNSIGNED_INTEGER && LA29_0<=MINUS_SIGN)||LA29_0==NATIONAL_CHAR_STRING_LIT||(LA29_0>=EXACT_NUM_LIT && LA29_0<=CHAR_STRING)||LA29_0==CHAR_STRING_PERL||LA29_0==DELIMITED_ID||LA29_0==LEFT_PAREN||(LA29_0>=ASTERISK && LA29_0<=PLUS_SIGN)||LA29_0==COLON||LA29_0==BINDVAR||LA29_0==INTRODUCER||LA29_0==SQL92_RESERVED_ANY||LA29_0==SQL92_RESERVED_CASE||LA29_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA29_0>=SQL92_RESERVED_CURSOR && LA29_0<=SQL92_RESERVED_DATE)||LA29_0==SQL92_RESERVED_DEFAULT||(LA29_0>=SQL92_RESERVED_EXISTS && LA29_0<=SQL92_RESERVED_FALSE)||LA29_0==SQL92_RESERVED_NOT||LA29_0==SQL92_RESERVED_NULL||LA29_0==SQL92_RESERVED_PRIOR||LA29_0==SQL92_RESERVED_TRUE||LA29_0==REGULAR_ID) ) {s = 4;}

                         
                        input.seek(index29_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_1 = input.LA(1);

                         
                        int index29_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_OracleParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index29_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_3 = input.LA(1);

                         
                        int index29_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_OracleParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index29_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\32\uffff";
    static final String DFA38_eofS =
        "\32\uffff";
    static final String DFA38_minS =
        "\1\4\3\0\26\uffff";
    static final String DFA38_maxS =
        "\1\u00ba\3\0\26\uffff";
    static final String DFA38_acceptS =
        "\4\uffff\1\2\24\uffff\1\1";
    static final String DFA38_specialS =
        "\1\uffff\1\0\1\1\1\2\26\uffff}>";
    static final String[] DFA38_transitionS = {
            "\3\4\36\uffff\1\4\4\uffff\2\4\5\uffff\1\4\2\uffff\1\3\2\uffff"+
            "\1\4\3\uffff\1\4\4\uffff\1\4\2\uffff\1\4\16\uffff\1\1\3\uffff"+
            "\1\4\2\uffff\1\4\5\uffff\1\4\5\uffff\1\4\3\uffff\2\4\1\uffff"+
            "\1\4\2\uffff\1\4\5\uffff\2\4\25\uffff\1\4\1\uffff\1\4\6\uffff"+
            "\1\4\15\uffff\1\4\26\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "281:1: select_list_elements : ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_1 = input.LA(1);

                         
                        int index38_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_OracleParser()) ) {s = 25;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index38_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA38_2 = input.LA(1);

                         
                        int index38_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_OracleParser()) ) {s = 25;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index38_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA38_3 = input.LA(1);

                         
                        int index38_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_OracleParser()) ) {s = 25;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index38_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\13\uffff";
    static final String DFA46_eofS =
        "\13\uffff";
    static final String DFA46_minS =
        "\1\64\6\0\4\uffff";
    static final String DFA46_maxS =
        "\1\u00ba\6\0\4\uffff";
    static final String DFA46_acceptS =
        "\7\uffff\1\1\1\4\1\2\1\3";
    static final String DFA46_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\4\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\6\2\uffff\1\3\32\uffff\1\4\114\uffff\1\1\1\2\31\uffff\1"+
            "\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "301:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_1 = input.LA(1);

                         
                        int index46_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_OracleParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_2 = input.LA(1);

                         
                        int index46_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_OracleParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_3 = input.LA(1);

                         
                        int index46_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_OracleParser()) ) {s = 7;}

                        else if ( (synpred61_OracleParser()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_4 = input.LA(1);

                         
                        int index46_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_OracleParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_5 = input.LA(1);

                         
                        int index46_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_OracleParser()) ) {s = 7;}

                        else if ( ((synpred65_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("only")))) ) {s = 10;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA46_6 = input.LA(1);

                         
                        int index46_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_OracleParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\101\uffff";
    static final String DFA42_eofS =
        "\1\2\100\uffff";
    static final String DFA42_minS =
        "\1\6\1\0\77\uffff";
    static final String DFA42_maxS =
        "\1\u00ba\1\0\77\uffff";
    static final String DFA42_acceptS =
        "\2\uffff\1\3\74\uffff\1\1\1\2";
    static final String DFA42_specialS =
        "\1\uffff\1\0\77\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\2\36\uffff\1\2\5\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\4\2\7\uffff\5\2\1\uffff\10\2\5\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\2\6\uffff\1\2\7\uffff\3\2\2\uffff\2\2\5\uffff"+
            "\2\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\2\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\2\2\1\uffff\1\2\5\uffff\5\2\3\uffff\4\2\1\uffff\3\2\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "301:76: ( pivot_clause | unpivot_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_1 = input.LA(1);

                         
                        int index42_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred59_OracleParser()&&((input.LT(1).getText().equalsIgnoreCase("pivot"))))) ) {s = 63;}

                        else if ( ((synpred60_OracleParser()&&((input.LT(1).getText().equalsIgnoreCase("unpivot"))))) ) {s = 64;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA44_eotS =
        "\101\uffff";
    static final String DFA44_eofS =
        "\1\2\100\uffff";
    static final String DFA44_minS =
        "\1\6\1\0\77\uffff";
    static final String DFA44_maxS =
        "\1\u00ba\1\0\77\uffff";
    static final String DFA44_acceptS =
        "\2\uffff\1\3\74\uffff\1\1\1\2";
    static final String DFA44_specialS =
        "\1\uffff\1\0\77\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\2\36\uffff\1\2\5\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\4\2\7\uffff\5\2\1\uffff\10\2\5\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\2\6\uffff\1\2\7\uffff\3\2\2\uffff\2\2\5\uffff"+
            "\2\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\2\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\2\2\1\uffff\1\2\5\uffff\5\2\3\uffff\4\2\1\uffff\3\2\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "302:84: ( pivot_clause | unpivot_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_1 = input.LA(1);

                         
                        int index44_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred63_OracleParser()&&((input.LT(1).getText().equalsIgnoreCase("pivot"))))) ) {s = 63;}

                        else if ( ((synpred64_OracleParser()&&((input.LT(1).getText().equalsIgnoreCase("unpivot"))))) ) {s = 64;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index44_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA45_eotS =
        "\101\uffff";
    static final String DFA45_eofS =
        "\1\2\100\uffff";
    static final String DFA45_minS =
        "\1\6\1\0\77\uffff";
    static final String DFA45_maxS =
        "\1\u00ba\1\0\77\uffff";
    static final String DFA45_acceptS =
        "\2\uffff\1\3\74\uffff\1\1\1\2";
    static final String DFA45_specialS =
        "\1\uffff\1\0\77\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\2\36\uffff\1\2\5\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\4\2\7\uffff\5\2\1\uffff\10\2\5\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\2\6\uffff\1\2\7\uffff\3\2\2\uffff\2\2\5\uffff"+
            "\2\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\2\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\2\2\1\uffff\1\2\5\uffff\5\2\3\uffff\4\2\1\uffff\3\2\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "304:38: ( pivot_clause | unpivot_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA45_1 = input.LA(1);

                         
                        int index45_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred66_OracleParser()&&((input.LT(1).getText().equalsIgnoreCase("pivot"))))) ) {s = 63;}

                        else if ( ((synpred67_OracleParser()&&((input.LT(1).getText().equalsIgnoreCase("unpivot"))))) ) {s = 64;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index45_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA58_eotS =
        "\33\uffff";
    static final String DFA58_eofS =
        "\33\uffff";
    static final String DFA58_minS =
        "\1\4\1\0\31\uffff";
    static final String DFA58_maxS =
        "\1\u00ba\1\0\31\uffff";
    static final String DFA58_acceptS =
        "\2\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA58_specialS =
        "\1\uffff\1\0\31\uffff}>";
    static final String[] DFA58_transitionS = {
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\1\3\uffff\1\2\4\uffff\1\2\2\uffff\1\2\16\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\5\uffff\1\2\3\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\2\2\25\uffff\1\2\1\uffff\1\2\6\uffff"+
            "\1\2\15\uffff\1\2\26\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "349:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_1 = input.LA(1);

                         
                        int index58_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_OracleParser()) ) {s = 25;}

                        else if ( (synpred84_OracleParser()) ) {s = 26;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index58_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA69_eotS =
        "\33\uffff";
    static final String DFA69_eofS =
        "\33\uffff";
    static final String DFA69_minS =
        "\1\4\1\uffff\2\0\27\uffff";
    static final String DFA69_maxS =
        "\1\u00ba\1\uffff\2\0\27\uffff";
    static final String DFA69_acceptS =
        "\1\uffff\1\1\2\uffff\1\3\25\uffff\1\2";
    static final String DFA69_specialS =
        "\1\0\1\uffff\1\1\1\2\27\uffff}>";
    static final String[] DFA69_transitionS = {
            "\3\4\36\uffff\1\4\4\uffff\2\4\5\uffff\1\4\2\uffff\1\4\2\uffff"+
            "\1\2\3\uffff\1\4\4\uffff\1\4\2\uffff\1\4\16\uffff\1\4\3\uffff"+
            "\1\4\2\uffff\1\3\5\uffff\1\4\5\uffff\1\4\3\uffff\2\4\1\uffff"+
            "\1\4\2\uffff\1\4\5\uffff\2\4\25\uffff\1\4\1\uffff\1\4\6\uffff"+
            "\1\4\4\uffff\1\1\10\uffff\1\4\26\uffff\1\4",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "388:13: ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA69_0 = input.LA(1);

                         
                        int index69_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA69_0==SQL92_RESERVED_SELECT) && (synpred95_OracleParser())) {s = 1;}

                        else if ( (LA69_0==LEFT_PAREN) ) {s = 2;}

                        else if ( (LA69_0==SQL92_RESERVED_ANY) ) {s = 3;}

                        else if ( ((LA69_0>=UNSIGNED_INTEGER && LA69_0<=MINUS_SIGN)||LA69_0==NATIONAL_CHAR_STRING_LIT||(LA69_0>=EXACT_NUM_LIT && LA69_0<=CHAR_STRING)||LA69_0==CHAR_STRING_PERL||LA69_0==DELIMITED_ID||LA69_0==PLUS_SIGN||LA69_0==COLON||LA69_0==BINDVAR||LA69_0==INTRODUCER||LA69_0==SQL92_RESERVED_ALL||LA69_0==SQL92_RESERVED_CASE||LA69_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA69_0>=SQL92_RESERVED_CURSOR && LA69_0<=SQL92_RESERVED_DATE)||LA69_0==SQL92_RESERVED_DEFAULT||LA69_0==SQL92_RESERVED_DISTINCT||(LA69_0>=SQL92_RESERVED_EXISTS && LA69_0<=SQL92_RESERVED_FALSE)||LA69_0==SQL92_RESERVED_NOT||LA69_0==SQL92_RESERVED_NULL||LA69_0==SQL92_RESERVED_PRIOR||LA69_0==SQL92_RESERVED_TRUE||LA69_0==REGULAR_ID) ) {s = 4;}

                         
                        input.seek(index69_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA69_2 = input.LA(1);

                         
                        int index69_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_OracleParser()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index69_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA69_3 = input.LA(1);

                         
                        int index69_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_OracleParser()) ) {s = 26;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index69_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA71_eotS =
        "\32\uffff";
    static final String DFA71_eofS =
        "\32\uffff";
    static final String DFA71_minS =
        "\1\4\27\uffff\1\0\1\uffff";
    static final String DFA71_maxS =
        "\1\u00ba\27\uffff\1\0\1\uffff";
    static final String DFA71_acceptS =
        "\1\uffff\1\1\27\uffff\1\2";
    static final String DFA71_specialS =
        "\30\uffff\1\0\1\uffff}>";
    static final String[] DFA71_transitionS = {
            "\3\1\36\uffff\1\1\4\uffff\2\1\5\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\1\30\3\uffff\1\1\4\uffff\1\1\2\uffff\1\1\16\uffff\1\1\3\uffff"+
            "\1\1\2\uffff\1\1\5\uffff\1\1\5\uffff\1\1\3\uffff\2\1\1\uffff"+
            "\1\1\2\uffff\1\1\5\uffff\2\1\25\uffff\1\1\1\uffff\1\1\6\uffff"+
            "\1\1\15\uffff\1\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "403:1: pivot_in_clause_elements : ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_24 = input.LA(1);

                         
                        int index71_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_OracleParser()) ) {s = 1;}

                        else if ( (synpred101_OracleParser()) ) {s = 25;}

                         
                        input.seek(index71_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA92_eotS =
        "\33\uffff";
    static final String DFA92_eofS =
        "\33\uffff";
    static final String DFA92_minS =
        "\1\4\1\0\31\uffff";
    static final String DFA92_maxS =
        "\1\u00ba\1\0\31\uffff";
    static final String DFA92_acceptS =
        "\2\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA92_specialS =
        "\1\uffff\1\0\31\uffff}>";
    static final String[] DFA92_transitionS = {
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\1\2\16\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\5\uffff\1\2\3\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\2\2\25\uffff\1\2\1\uffff\1\2\6\uffff"+
            "\1\2\15\uffff\1\2\26\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "460:1: group_by_elements : ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_1 = input.LA(1);

                         
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred124_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("grouping")))) ) {s = 25;}

                        else if ( (((synpred125_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("rollup")))||(synpred125_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("cube"))))) ) {s = 26;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA96_eotS =
        "\33\uffff";
    static final String DFA96_eofS =
        "\33\uffff";
    static final String DFA96_minS =
        "\1\4\2\0\30\uffff";
    static final String DFA96_maxS =
        "\1\u00ba\2\0\30\uffff";
    static final String DFA96_acceptS =
        "\3\uffff\1\3\25\uffff\1\1\1\2";
    static final String DFA96_specialS =
        "\1\uffff\1\0\1\1\30\uffff}>";
    static final String[] DFA96_transitionS = {
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\2\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\3\uffff\2\3\1\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\2\3\25\uffff\1\3\1\uffff\1\3\6\uffff"+
            "\1\3\15\uffff\1\3\26\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "476:1: grouping_sets_elements : ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA96_1 = input.LA(1);

                         
                        int index96_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred130_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("cube")))||(synpred130_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("rollup"))))) ) {s = 25;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index96_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA96_2 = input.LA(1);

                         
                        int index96_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_OracleParser()) ) {s = 26;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index96_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA98_eotS =
        "\12\uffff";
    static final String DFA98_eofS =
        "\12\uffff";
    static final String DFA98_minS =
        "\1\u00ba\1\64\1\uffff\1\u0090\3\uffff\1\136\2\uffff";
    static final String DFA98_maxS =
        "\2\u00ba\1\uffff\1\u00ba\3\uffff\1\u00ba\2\uffff";
    static final String DFA98_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\2\2\1\uffff\2\2";
    static final String DFA98_specialS =
        "\1\uffff\1\1\1\uffff\1\0\3\uffff\1\2\2\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\1",
            "\1\6\35\uffff\1\5\3\uffff\1\4\7\uffff\1\2\133\uffff\1\3",
            "",
            "\1\10\51\uffff\1\7",
            "",
            "",
            "",
            "\1\11\133\uffff\1\4",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "488:44: ( return_rows_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA98_3 = input.LA(1);

                         
                        int index98_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA98_3==REGULAR_ID) ) {s = 7;}

                        else if ( (LA98_3==SQL92_RESERVED_ON) && ((input.LT(1).getText().equalsIgnoreCase("reference")))) {s = 8;}

                         
                        input.seek(index98_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA98_1 = input.LA(1);

                         
                        int index98_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA98_1==SQL92_RESERVED_BY) && (((input.LT(1).getText().equalsIgnoreCase("dimension"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {s = 2;}

                        else if ( (LA98_1==REGULAR_ID) ) {s = 3;}

                        else if ( (LA98_1==SQL92_RESERVED_ALL) ) {s = 4;}

                        else if ( (LA98_1==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 5;}

                        else if ( (LA98_1==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 6;}

                         
                        input.seek(index98_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA98_7 = input.LA(1);

                         
                        int index98_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA98_7==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 9;}

                        else if ( (LA98_7==REGULAR_ID) ) {s = 4;}

                         
                        input.seek(index98_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA99_eotS =
        "\15\uffff";
    static final String DFA99_eofS =
        "\15\uffff";
    static final String DFA99_minS =
        "\1\u00ba\1\64\1\uffff\1\64\2\u0090\2\51\2\uffff\1\64\2\51";
    static final String DFA99_maxS =
        "\2\u00ba\1\uffff\5\u00ba\2\uffff\3\u00ba";
    static final String DFA99_acceptS =
        "\2\uffff\1\2\5\uffff\1\2\1\1\3\uffff";
    static final String DFA99_specialS =
        "\1\3\1\1\1\uffff\1\2\1\11\1\4\1\6\1\10\2\uffff\1\0\1\5\1\7}>";
    static final String[] DFA99_transitionS = {
            "\1\1",
            "\1\5\35\uffff\1\3\13\uffff\1\2\133\uffff\1\4",
            "",
            "\1\7\u0085\uffff\1\6",
            "\1\11\51\uffff\1\10",
            "\1\11\51\uffff\1\10",
            "\1\12\12\uffff\1\5\u0085\uffff\1\4",
            "\1\12\12\uffff\1\5\u0085\uffff\1\4",
            "",
            "",
            "\1\14\u0085\uffff\1\13",
            "\1\12\12\uffff\1\5\u0085\uffff\1\4",
            "\1\12\12\uffff\1\5\u0085\uffff\1\4"
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "()* loopback of 488:64: ( reference_model )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_10 = input.LA(1);

                         
                        int index99_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_10==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 11;}

                        else if ( (LA99_10==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 12;}

                         
                        input.seek(index99_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA99_1 = input.LA(1);

                         
                        int index99_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_1==SQL92_RESERVED_BY) && (((input.LT(1).getText().equalsIgnoreCase("dimension"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {s = 2;}

                        else if ( (LA99_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 3;}

                        else if ( (LA99_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 4;}

                        else if ( (LA99_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 5;}

                         
                        input.seek(index99_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA99_3 = input.LA(1);

                         
                        int index99_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_3==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 6;}

                        else if ( (LA99_3==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 7;}

                         
                        input.seek(index99_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA99_0 = input.LA(1);

                         
                        int index99_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("dimension"))||(input.LT(1).getText().equalsIgnoreCase("main"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {s = 1;}

                         
                        input.seek(index99_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA99_5 = input.LA(1);

                         
                        int index99_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_5==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 8;}

                        else if ( (LA99_5==SQL92_RESERVED_ON) && ((input.LT(1).getText().equalsIgnoreCase("reference")))) {s = 9;}

                         
                        input.seek(index99_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA99_11 = input.LA(1);

                         
                        int index99_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_11==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 4;}

                        else if ( (LA99_11==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 5;}

                        else if ( (LA99_11==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 10;}

                         
                        input.seek(index99_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA99_6 = input.LA(1);

                         
                        int index99_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_6==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 10;}

                        else if ( (LA99_6==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 4;}

                        else if ( (LA99_6==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 5;}

                         
                        input.seek(index99_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA99_12 = input.LA(1);

                         
                        int index99_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_12==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 4;}

                        else if ( (LA99_12==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 5;}

                        else if ( (LA99_12==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 10;}

                         
                        input.seek(index99_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA99_7 = input.LA(1);

                         
                        int index99_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_7==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 10;}

                        else if ( (LA99_7==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 4;}

                        else if ( (LA99_7==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 5;}

                         
                        input.seek(index99_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA99_4 = input.LA(1);

                         
                        int index99_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_4==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 8;}

                        else if ( (LA99_4==SQL92_RESERVED_ON) && ((input.LT(1).getText().equalsIgnoreCase("reference")))) {s = 9;}

                         
                        input.seek(index99_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA117_eotS =
        "\30\uffff";
    static final String DFA117_eofS =
        "\30\uffff";
    static final String DFA117_minS =
        "\1\4\1\0\26\uffff";
    static final String DFA117_maxS =
        "\1\u00ba\1\0\26\uffff";
    static final String DFA117_acceptS =
        "\2\uffff\1\2\24\uffff\1\1";
    static final String DFA117_specialS =
        "\1\uffff\1\0\26\uffff}>";
    static final String[] DFA117_transitionS = {
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\1\2\16\uffff\1\2\3\uffff"+
            "\1\1\2\uffff\1\2\5\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\2\2\27\uffff\1\2\6\uffff\1\2\15\uffff"+
            "\1\2\26\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "543:33: ( ( all_key )=> all_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_OracleParser()) ) {s = 23;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index117_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\34\uffff";
    static final String DFA125_eofS =
        "\1\2\33\uffff";
    static final String DFA125_minS =
        "\1\70\1\4\1\uffff\1\0\30\uffff";
    static final String DFA125_maxS =
        "\2\u00ba\1\uffff\1\0\30\uffff";
    static final String DFA125_acceptS =
        "\2\uffff\1\2\1\uffff\27\2\1\1";
    static final String DFA125_specialS =
        "\1\1\1\2\1\uffff\1\0\30\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\2\3\uffff\1\2\22\uffff\1\2\41\uffff\2\2\5\uffff\1\2\32\uffff"+
            "\1\2\26\uffff\1\2\1\uffff\1\2\15\uffff\1\1",
            "\2\23\1\6\36\uffff\1\25\4\uffff\1\23\1\25\5\uffff\1\25\2\uffff"+
            "\1\14\2\uffff\1\32\3\uffff\1\7\4\uffff\1\22\2\uffff\1\21\16"+
            "\uffff\1\20\3\uffff\1\13\2\uffff\1\17\3\uffff\1\4\1\uffff\1"+
            "\15\5\uffff\1\11\2\uffff\1\5\1\uffff\1\24\1\uffff\1\31\2\uffff"+
            "\1\12\5\uffff\1\16\1\30\27\uffff\1\26\6\uffff\1\10\15\uffff"+
            "\1\27\26\uffff\1\3",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "570:41: ( nulls_key ( first_key | last_key ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_3 = input.LA(1);

                         
                        int index125_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred163_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("nulls")))) ) {s = 27;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("log"))||(input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range")))) ) {s = 26;}

                         
                        input.seek(index125_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA125_0 = input.LA(1);

                         
                        int index125_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("log"))||(input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 1;}

                        else if ( (LA125_0==EOF||LA125_0==RIGHT_PAREN||LA125_0==COMMA||LA125_0==EQUALS_OP||(LA125_0>=SQL92_RESERVED_ELSE && LA125_0<=SQL92_RESERVED_END)||LA125_0==SQL92_RESERVED_FOR||LA125_0==SQL92_RESERVED_ORDER||LA125_0==SQL92_RESERVED_WHEN||LA125_0==SQL92_RESERVED_WITH) ) {s = 2;}

                         
                        input.seek(index125_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA125_1 = input.LA(1);

                         
                        int index125_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("log"))||(input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 3;}

                        else if ( (LA125_1==SQL92_RESERVED_BETWEEN) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 4;}

                        else if ( (LA125_1==SQL92_RESERVED_CURRENT) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 5;}

                        else if ( (LA125_1==MINUS_SIGN) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 6;}

                        else if ( (LA125_1==PLUS_SIGN) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 7;}

                        else if ( (LA125_1==SQL92_RESERVED_PRIOR) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 8;}

                        else if ( (LA125_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 9;}

                        else if ( (LA125_1==SQL92_RESERVED_DISTINCT) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 10;}

                        else if ( (LA125_1==SQL92_RESERVED_ALL) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 11;}

                        else if ( (LA125_1==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 12;}

                        else if ( (LA125_1==SQL92_RESERVED_CASE) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 13;}

                        else if ( (LA125_1==SQL92_RESERVED_EXISTS) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 14;}

                        else if ( (LA125_1==SQL92_RESERVED_ANY) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 15;}

                        else if ( (LA125_1==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 16;}

                        else if ( (LA125_1==BINDVAR) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 17;}

                        else if ( (LA125_1==COLON) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 18;}

                        else if ( ((LA125_1>=UNSIGNED_INTEGER && LA125_1<=APPROXIMATE_NUM_LIT)||LA125_1==EXACT_NUM_LIT) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 19;}

                        else if ( (LA125_1==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 20;}

                        else if ( (LA125_1==NATIONAL_CHAR_STRING_LIT||LA125_1==CHAR_STRING||LA125_1==CHAR_STRING_PERL) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 21;}

                        else if ( (LA125_1==SQL92_RESERVED_NULL) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 22;}

                        else if ( (LA125_1==SQL92_RESERVED_TRUE) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 23;}

                        else if ( (LA125_1==SQL92_RESERVED_FALSE) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 24;}

                        else if ( (LA125_1==SQL92_RESERVED_DEFAULT) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 25;}

                        else if ( (LA125_1==LEFT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 26;}

                         
                        input.seek(index125_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\31\uffff";
    static final String DFA159_eofS =
        "\1\3\30\uffff";
    static final String DFA159_minS =
        "\1\161\1\4\2\uffff\5\4\1\64\1\67\1\45\2\uffff\1\51\1\64\1\51\2"+
        "\uffff\2\51\1\64\3\51";
    static final String DFA159_maxS =
        "\2\u00ba\2\uffff\10\u00ba\2\uffff\3\u00ba\2\uffff\6\u00ba";
    static final String DFA159_acceptS =
        "\2\uffff\2\3\10\uffff\2\2\3\uffff\2\1\6\uffff";
    static final String DFA159_specialS =
        "\1\4\11\uffff\1\1\3\uffff\1\0\1\uffff\1\3\5\uffff\1\2\2\uffff}>";
    static final String[] DFA159_transitionS = {
            "\2\3\67\uffff\1\1\17\uffff\1\2",
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\3\uffff\2\3\1\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\2\3\25\uffff\1\4\1\uffff\1\3\6\uffff"+
            "\1\3\15\uffff\1\3\26\uffff\1\5",
            "",
            "",
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\4\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\2\3\25\uffff\1\3\1\uffff\1\3\6\uffff"+
            "\1\3\15\uffff\1\3\26\uffff\1\6",
            "\3\3\36\uffff\1\3\3\uffff\3\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\2\uffff\2\3\1\uffff\1\3\2\uffff\1\3\2\uffff\1\3\1\uffff"+
            "\5\3\1\uffff\6\3\1\uffff\1\3\3\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\1\3\5\uffff\1\3\4\uffff\1\3\1\uffff\1\3\2\uffff"+
            "\1\3\5\uffff\2\3\11\uffff\1\3\5\uffff\2\3\4\uffff\1\3\1\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\13\uffff\1\7\1\uffff\1\3\26\uffff"+
            "\1\3",
            "\3\3\36\uffff\1\3\3\uffff\3\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\2\uffff\2\3\1\uffff\1\3\2\uffff\1\3\2\uffff\1\3\1\uffff"+
            "\5\3\1\uffff\6\3\1\uffff\1\3\3\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\1\3\5\uffff\1\3\4\uffff\1\3\1\uffff\1\3\2\uffff"+
            "\1\3\5\uffff\2\3\11\uffff\1\3\5\uffff\2\3\4\uffff\1\3\1\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\13\uffff\1\10\1\uffff\1\3\26\uffff"+
            "\1\3",
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\3\uffff\2\3\1\uffff"+
            "\2\3\1\uffff\1\3\5\uffff\2\3\14\uffff\1\3\4\uffff\1\3\3\uffff"+
            "\1\3\1\uffff\1\3\6\uffff\1\3\4\uffff\1\3\10\uffff\1\3\2\uffff"+
            "\1\11\5\uffff\1\3\15\uffff\1\3",
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\3\uffff\2\3\1\uffff"+
            "\2\3\1\uffff\1\3\5\uffff\2\3\14\uffff\1\12\4\uffff\1\3\3\uffff"+
            "\1\3\1\uffff\1\3\6\uffff\1\3\4\uffff\1\3\10\uffff\1\3\2\uffff"+
            "\1\3\5\uffff\1\3\15\uffff\1\3",
            "\1\3\2\uffff\1\3\32\uffff\1\3\114\uffff\2\3\31\uffff\1\13",
            "\1\14\36\uffff\1\3\56\uffff\1\3\41\uffff\1\15\2\uffff\1\3"+
            "\17\uffff\1\3",
            "\1\3\3\uffff\1\3\1\uffff\1\3\5\uffff\1\3\2\uffff\1\20\2\uffff"+
            "\1\3\6\uffff\1\3\23\uffff\1\17\147\uffff\1\16",
            "",
            "",
            "\1\21\12\uffff\1\3\2\uffff\1\3\27\uffff\1\22\2\uffff\1\3\45"+
            "\uffff\1\3\101\uffff\1\3",
            "\1\24\u0085\uffff\1\23",
            "\1\21\45\uffff\1\22\152\uffff\1\3",
            "",
            "",
            "\1\25\12\uffff\1\20\u0085\uffff\1\26",
            "\1\25\12\uffff\1\20\u0085\uffff\1\26",
            "\1\30\u0085\uffff\1\27",
            "\1\21\45\uffff\1\22\152\uffff\1\3",
            "\1\25\12\uffff\1\20\u0085\uffff\1\26",
            "\1\25\12\uffff\1\20\u0085\uffff\1\26"
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "684:9: ( ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )? | ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )? )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_14 = input.LA(1);

                         
                        int index159_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_14==DELIMITED_ID||LA159_14==LEFT_PAREN||LA159_14==INTRODUCER||LA159_14==SQL92_RESERVED_FOR||LA159_14==REGULAR_ID) ) {s = 3;}

                        else if ( (LA159_14==PERIOD) && (synpred197_OracleParser())) {s = 17;}

                        else if ( (LA159_14==EQUALS_OP) && (synpred197_OracleParser())) {s = 18;}

                         
                        input.seek(index159_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_10 = input.LA(1);

                         
                        int index159_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_10==SQL92_RESERVED_ALL||LA159_10==SQL92_RESERVED_INTO||LA159_10==SQL92_RESERVED_WHEN||LA159_10==REGULAR_ID) ) {s = 3;}

                        else if ( (LA159_10==LEFT_PAREN) && (synpred199_OracleParser())) {s = 12;}

                        else if ( (LA159_10==SQL92_RESERVED_VALUES) && (synpred199_OracleParser())) {s = 13;}

                         
                        input.seek(index159_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA159_22 = input.LA(1);

                         
                        int index159_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_22==REGULAR_ID) ) {s = 3;}

                        else if ( (LA159_22==PERIOD) && (synpred197_OracleParser())) {s = 17;}

                        else if ( (LA159_22==EQUALS_OP) && (synpred197_OracleParser())) {s = 18;}

                         
                        input.seek(index159_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA159_16 = input.LA(1);

                         
                        int index159_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_16==REGULAR_ID) ) {s = 3;}

                        else if ( (LA159_16==PERIOD) && (synpred197_OracleParser())) {s = 17;}

                        else if ( (LA159_16==EQUALS_OP) && (synpred197_OracleParser())) {s = 18;}

                         
                        input.seek(index159_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA159_0 = input.LA(1);

                         
                        int index159_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_0==SQL92_RESERVED_WHEN) ) {s = 1;}

                        else if ( (LA159_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("log")))) {s = 2;}

                        else if ( (LA159_0==EOF||(LA159_0>=SQL92_RESERVED_ELSE && LA159_0<=SQL92_RESERVED_END)) ) {s = 3;}

                         
                        input.seek(index159_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA158_eotS =
        "\22\uffff";
    static final String DFA158_eofS =
        "\1\3\21\uffff";
    static final String DFA158_minS =
        "\1\161\1\4\2\uffff\2\4\1\64\1\45\1\64\4\51\1\uffff\1\64\3\51";
    static final String DFA158_maxS =
        "\2\u00ba\2\uffff\11\u00ba\1\uffff\4\u00ba";
    static final String DFA158_acceptS =
        "\2\uffff\2\2\11\uffff\1\1\4\uffff";
    static final String DFA158_specialS =
        "\1\0\21\uffff}>";
    static final String[] DFA158_transitionS = {
            "\2\3\67\uffff\1\1\17\uffff\1\2",
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\3\uffff\2\3\1\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\2\3\25\uffff\1\3\1\uffff\1\3\6\uffff"+
            "\1\3\15\uffff\1\3\26\uffff\1\4",
            "",
            "",
            "\3\3\36\uffff\1\3\3\uffff\3\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\2\uffff\2\3\1\uffff\1\3\2\uffff\1\3\2\uffff\1\3\1\uffff"+
            "\5\3\1\uffff\6\3\1\uffff\1\3\3\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\1\3\5\uffff\1\3\4\uffff\1\3\1\uffff\1\3\2\uffff"+
            "\1\3\5\uffff\2\3\11\uffff\1\3\5\uffff\2\3\4\uffff\1\3\1\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\13\uffff\1\5\1\uffff\1\3\26\uffff"+
            "\1\3",
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\3\uffff\2\3\1\uffff"+
            "\2\3\1\uffff\1\3\5\uffff\2\3\14\uffff\1\3\4\uffff\1\3\3\uffff"+
            "\1\3\1\uffff\1\3\6\uffff\1\3\4\uffff\1\3\10\uffff\1\3\2\uffff"+
            "\1\6\5\uffff\1\3\15\uffff\1\3",
            "\1\3\2\uffff\1\3\32\uffff\1\3\114\uffff\2\3\31\uffff\1\7",
            "\1\3\3\uffff\1\3\1\uffff\1\3\5\uffff\1\3\2\uffff\1\12\2\uffff"+
            "\1\3\6\uffff\1\3\23\uffff\1\10\147\uffff\1\11",
            "\1\14\u0085\uffff\1\13",
            "\1\15\12\uffff\1\3\2\uffff\1\3\27\uffff\1\15\2\uffff\1\3\45"+
            "\uffff\1\3\101\uffff\1\3",
            "\1\15\45\uffff\1\15\152\uffff\1\3",
            "\1\16\12\uffff\1\12\u0085\uffff\1\17",
            "\1\16\12\uffff\1\12\u0085\uffff\1\17",
            "",
            "\1\21\u0085\uffff\1\20",
            "\1\15\45\uffff\1\15\152\uffff\1\3",
            "\1\16\12\uffff\1\12\u0085\uffff\1\17",
            "\1\16\12\uffff\1\12\u0085\uffff\1\17"
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "687:67: ( merge_update_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_0 = input.LA(1);

                         
                        int index158_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA158_0==SQL92_RESERVED_WHEN) ) {s = 1;}

                        else if ( (LA158_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("log")))) {s = 2;}

                        else if ( (LA158_0==EOF||(LA158_0>=SQL92_RESERVED_ELSE && LA158_0<=SQL92_RESERVED_END)) ) {s = 3;}

                         
                        input.seek(index158_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA176_eotS =
        "\17\uffff";
    static final String DFA176_eofS =
        "\1\5\16\uffff";
    static final String DFA176_minS =
        "\1\45\1\uffff\1\0\14\uffff";
    static final String DFA176_maxS =
        "\1\u00ba\1\uffff\1\0\14\uffff";
    static final String DFA176_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\11\uffff";
    static final String DFA176_specialS =
        "\2\uffff\1\0\14\uffff}>";
    static final String[] DFA176_transitionS = {
            "\1\1\5\uffff\1\1\5\uffff\1\1\2\uffff\1\1\2\uffff\1\5\32\uffff"+
            "\1\1\36\uffff\2\5\22\uffff\1\5\24\uffff\1\5\14\uffff\1\5\2\uffff"+
            "\3\5\15\uffff\1\2",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "759:14: ( table_alias )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA176_2 = input.LA(1);

                         
                        int index176_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_OracleParser()) ) {s = 1;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("returning"))||(input.LT(1).getText().equalsIgnoreCase("log"))||(input.LT(1).getText().equalsIgnoreCase("return"))||(input.LT(1).getText().equalsIgnoreCase("set")))) ) {s = 5;}

                         
                        input.seek(index176_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA179_eotS =
        "\15\uffff";
    static final String DFA179_eofS =
        "\1\2\14\uffff";
    static final String DFA179_minS =
        "\1\4\1\64\1\uffff\1\64\2\0\2\51\1\uffff\1\64\1\0\2\51";
    static final String DFA179_maxS =
        "\2\u00ba\1\uffff\1\u00ba\2\0\2\u00ba\1\uffff\1\u00ba\1\0\2\u00ba";
    static final String DFA179_acceptS =
        "\2\uffff\1\2\5\uffff\1\1\4\uffff";
    static final String DFA179_specialS =
        "\4\uffff\1\1\1\0\4\uffff\1\2\2\uffff}>";
    static final String[] DFA179_transitionS = {
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\1\2\16\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\5\uffff\1\2\3\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\2\2\2\uffff\2\2\16\uffff\1\1\6\uffff"+
            "\1\2\1\uffff\1\2\6\uffff\1\2\4\uffff\1\2\10\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\15\uffff\1\2",
            "\1\5\2\uffff\1\2\32\uffff\1\3\114\uffff\2\2\31\uffff\1\4",
            "",
            "\1\7\u0085\uffff\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\11\12\uffff\1\5\u0085\uffff\1\12",
            "\1\11\12\uffff\1\5\u0085\uffff\1\12",
            "",
            "\1\14\u0085\uffff\1\13",
            "\1\uffff",
            "\1\11\12\uffff\1\5\u0085\uffff\1\12",
            "\1\11\12\uffff\1\5\u0085\uffff\1\12"
    };

    static final short[] DFA179_eot = DFA.unpackEncodedString(DFA179_eotS);
    static final short[] DFA179_eof = DFA.unpackEncodedString(DFA179_eofS);
    static final char[] DFA179_min = DFA.unpackEncodedStringToUnsignedChars(DFA179_minS);
    static final char[] DFA179_max = DFA.unpackEncodedStringToUnsignedChars(DFA179_maxS);
    static final short[] DFA179_accept = DFA.unpackEncodedString(DFA179_acceptS);
    static final short[] DFA179_special = DFA.unpackEncodedString(DFA179_specialS);
    static final short[][] DFA179_transition;

    static {
        int numStates = DFA179_transitionS.length;
        DFA179_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA179_transition[i] = DFA.unpackEncodedString(DFA179_transitionS[i]);
        }
    }

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = DFA179_eot;
            this.eof = DFA179_eof;
            this.min = DFA179_min;
            this.max = DFA179_max;
            this.accept = DFA179_accept;
            this.special = DFA179_special;
            this.transition = DFA179_transition;
        }
        public String getDescription() {
            return "771:9: ( error_logging_into_part )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA179_5 = input.LA(1);

                         
                        int index179_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_OracleParser()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index179_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA179_4 = input.LA(1);

                         
                        int index179_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_OracleParser()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index179_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA179_10 = input.LA(1);

                         
                        int index179_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_OracleParser()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index179_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA180_eotS =
        "\40\uffff";
    static final String DFA180_eofS =
        "\1\31\37\uffff";
    static final String DFA180_minS =
        "\1\4\2\uffff\1\0\24\uffff\1\0\7\uffff";
    static final String DFA180_maxS =
        "\1\u00ba\2\uffff\1\0\24\uffff\1\0\7\uffff";
    static final String DFA180_acceptS =
        "\1\uffff\2\1\1\uffff\24\1\1\uffff\1\2\6\uffff";
    static final String DFA180_specialS =
        "\1\0\2\uffff\1\1\24\uffff\1\2\7\uffff}>";
    static final String[] DFA180_transitionS = {
            "\2\21\1\4\36\uffff\1\23\4\uffff\1\21\1\23\5\uffff\1\23\2\uffff"+
            "\1\12\2\uffff\1\30\3\uffff\1\5\4\uffff\1\20\2\uffff\1\17\16"+
            "\uffff\1\16\3\uffff\1\11\2\uffff\1\15\5\uffff\1\13\5\uffff\1"+
            "\7\3\uffff\1\1\1\22\1\uffff\1\27\2\uffff\1\10\1\uffff\2\31\2"+
            "\uffff\1\14\1\26\16\uffff\1\31\6\uffff\1\2\1\uffff\1\24\6\uffff"+
            "\1\6\4\uffff\1\31\10\uffff\1\25\6\uffff\1\31\1\uffff\1\31\15"+
            "\uffff\1\3",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
    static final short[][] DFA180_transition;

    static {
        int numStates = DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "772:9: ( ( LEFT_PAREN )=> expression_wrapper )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA180_0 = input.LA(1);

                         
                        int index180_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_0==SQL92_RESERVED_CURSOR) && (synpred224_OracleParser())) {s = 1;}

                        else if ( (LA180_0==SQL92_RESERVED_NOT) && (synpred224_OracleParser())) {s = 2;}

                        else if ( (LA180_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("reject")))) {s = 3;}

                        else if ( (LA180_0==MINUS_SIGN) && (synpred224_OracleParser())) {s = 4;}

                        else if ( (LA180_0==PLUS_SIGN) && (synpred224_OracleParser())) {s = 5;}

                        else if ( (LA180_0==SQL92_RESERVED_PRIOR) && (synpred224_OracleParser())) {s = 6;}

                        else if ( (LA180_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (synpred224_OracleParser())) {s = 7;}

                        else if ( (LA180_0==SQL92_RESERVED_DISTINCT) && (synpred224_OracleParser())) {s = 8;}

                        else if ( (LA180_0==SQL92_RESERVED_ALL) && (synpred224_OracleParser())) {s = 9;}

                        else if ( (LA180_0==DELIMITED_ID) && (synpred224_OracleParser())) {s = 10;}

                        else if ( (LA180_0==SQL92_RESERVED_CASE) && (synpred224_OracleParser())) {s = 11;}

                        else if ( (LA180_0==SQL92_RESERVED_EXISTS) && (synpred224_OracleParser())) {s = 12;}

                        else if ( (LA180_0==SQL92_RESERVED_ANY) && (synpred224_OracleParser())) {s = 13;}

                        else if ( (LA180_0==INTRODUCER) && (synpred224_OracleParser())) {s = 14;}

                        else if ( (LA180_0==BINDVAR) && (synpred224_OracleParser())) {s = 15;}

                        else if ( (LA180_0==COLON) && (synpred224_OracleParser())) {s = 16;}

                        else if ( ((LA180_0>=UNSIGNED_INTEGER && LA180_0<=APPROXIMATE_NUM_LIT)||LA180_0==EXACT_NUM_LIT) && (synpred224_OracleParser())) {s = 17;}

                        else if ( (LA180_0==SQL92_RESERVED_DATE) && (synpred224_OracleParser())) {s = 18;}

                        else if ( (LA180_0==NATIONAL_CHAR_STRING_LIT||LA180_0==CHAR_STRING||LA180_0==CHAR_STRING_PERL) && (synpred224_OracleParser())) {s = 19;}

                        else if ( (LA180_0==SQL92_RESERVED_NULL) && (synpred224_OracleParser())) {s = 20;}

                        else if ( (LA180_0==SQL92_RESERVED_TRUE) && (synpred224_OracleParser())) {s = 21;}

                        else if ( (LA180_0==SQL92_RESERVED_FALSE) && (synpred224_OracleParser())) {s = 22;}

                        else if ( (LA180_0==SQL92_RESERVED_DEFAULT) && (synpred224_OracleParser())) {s = 23;}

                        else if ( (LA180_0==LEFT_PAREN) ) {s = 24;}

                        else if ( (LA180_0==EOF||(LA180_0>=SQL92_RESERVED_ELSE && LA180_0<=SQL92_RESERVED_END)||LA180_0==SQL92_RESERVED_INTO||LA180_0==SQL92_RESERVED_SELECT||LA180_0==SQL92_RESERVED_WHEN||LA180_0==SQL92_RESERVED_WITH) ) {s = 25;}

                         
                        input.seek(index180_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA180_3 = input.LA(1);

                         
                        int index180_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlparse")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("minvalue")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlelement")))||((synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(synpred224_OracleParser()&&(isStandardPredictionFunction(input.LT(1).getText())))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("count")))||synpred224_OracleParser()||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("sessiontimezone")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("chr")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("dbtimezone")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("last_value")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlserialize")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("translate")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlexists")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlcolattval")))||(synpred224_OracleParser()&&((input.LT(1).getText() + input.LT(2).getText() + input.LT(3).getText()).equalsIgnoreCase("sysdate-interval")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlcast")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("interval")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlagg")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlpi")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("maxvalue")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("collect")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlquery")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlroot")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("trim")))||(synpred224_OracleParser()&&(enablesUsingClause(input.LT(1).getText())))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first_value")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("cast")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("extract")))||(synpred224_OracleParser()&&(enablesWithinOrOverClause(input.LT(1).getText())))||(synpred224_OracleParser()&&(enablesOverClause(input.LT(1).getText())))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("some")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("last_value")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first_value")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmltable")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("treat")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("timestamp")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("decompose")))||(synpred224_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlforest")))||(synpred224_OracleParser()&&((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE))))) ) {s = 23;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("reject"))) ) {s = 25;}

                         
                        input.seek(index180_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA180_24 = input.LA(1);

                         
                        int index180_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_OracleParser()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 180, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA184_eotS =
        "\101\uffff";
    static final String DFA184_eofS =
        "\1\2\100\uffff";
    static final String DFA184_minS =
        "\1\6\1\0\77\uffff";
    static final String DFA184_maxS =
        "\1\u00ba\1\0\77\uffff";
    static final String DFA184_acceptS =
        "\2\uffff\1\2\75\uffff\1\1";
    static final String DFA184_specialS =
        "\1\uffff\1\0\77\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\2\36\uffff\1\2\5\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\4\2\7\uffff\5\2\1\uffff\10\2\5\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\2\6\uffff\1\2\7\uffff\3\2\2\uffff\2\2\5\uffff"+
            "\2\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\2\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\2\2\1\uffff\1\2\2\uffff\1\2\2\uffff\5\2\3\uffff\4\2\1\uffff"+
            "\3\2\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "788:25: ( sample_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA184_1 = input.LA(1);

                         
                        int index184_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred230_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("sample")))) ) {s = 64;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index184_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 184, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA192_eotS =
        "\101\uffff";
    static final String DFA192_eofS =
        "\1\2\100\uffff";
    static final String DFA192_minS =
        "\1\6\1\0\77\uffff";
    static final String DFA192_maxS =
        "\1\u00ba\1\0\77\uffff";
    static final String DFA192_acceptS =
        "\2\uffff\1\2\75\uffff\1\1";
    static final String DFA192_specialS =
        "\1\uffff\1\0\77\uffff}>";
    static final String[] DFA192_transitionS = {
            "\1\2\36\uffff\1\2\5\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\4\2\7\uffff\5\2\1\uffff\10\2\5\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\2\6\uffff\1\2\7\uffff\3\2\2\uffff\2\2\5\uffff"+
            "\2\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\2\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\2\2\1\uffff\1\2\2\uffff\1\2\2\uffff\5\2\3\uffff\4\2\1\uffff"+
            "\3\2\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "810:9: ( seed_part )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA192_1 = input.LA(1);

                         
                        int index192_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred238_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("seed")))) ) {s = 64;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index192_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 192, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA209_eotS =
        "\13\uffff";
    static final String DFA209_eofS =
        "\1\1\12\uffff";
    static final String DFA209_minS =
        "\1\6\1\uffff\10\0\1\uffff";
    static final String DFA209_maxS =
        "\1\u00ba\1\uffff\10\0\1\uffff";
    static final String DFA209_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA209_specialS =
        "\2\uffff\1\2\1\0\1\5\1\7\1\1\1\3\1\4\1\6\1\uffff}>";
    static final String[] DFA209_transitionS = {
            "\1\1\36\uffff\1\1\5\uffff\1\1\5\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\2\1\1\uffff\4\1\7\uffff\1\10\1\4\1\11\1\3\1\6\1\uffff\1\5\1"+
            "\7\2\1\1\2\3\1\5\uffff\1\1\1\uffff\2\1\1\uffff\1\1\6\uffff\1"+
            "\1\7\uffff\3\1\2\uffff\2\1\5\uffff\2\1\2\uffff\2\1\2\uffff\1"+
            "\1\3\uffff\4\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\2"+
            "\1\6\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\uffff\1\1\5\uffff\5"+
            "\1\3\uffff\4\1\1\uffff\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA209_eot = DFA.unpackEncodedString(DFA209_eotS);
    static final short[] DFA209_eof = DFA.unpackEncodedString(DFA209_eofS);
    static final char[] DFA209_min = DFA.unpackEncodedStringToUnsignedChars(DFA209_minS);
    static final char[] DFA209_max = DFA.unpackEncodedStringToUnsignedChars(DFA209_maxS);
    static final short[] DFA209_accept = DFA.unpackEncodedString(DFA209_acceptS);
    static final short[] DFA209_special = DFA.unpackEncodedString(DFA209_specialS);
    static final short[][] DFA209_transition;

    static {
        int numStates = DFA209_transitionS.length;
        DFA209_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA209_transition[i] = DFA.unpackEncodedString(DFA209_transitionS[i]);
        }
    }

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;
        }
        public String getDescription() {
            return "()* loopback of 902:5: ( ( EQUALS_OP | not_equal_op | LESS_THAN_OP | GREATER_THAN_OP | less_than_or_equals_op | greater_than_or_equals_op ) compound_expression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA209_3 = input.LA(1);

                         
                        int index209_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_OracleParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index209_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA209_6 = input.LA(1);

                         
                        int index209_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_OracleParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index209_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA209_2 = input.LA(1);

                         
                        int index209_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_OracleParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index209_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA209_7 = input.LA(1);

                         
                        int index209_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_OracleParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index209_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA209_8 = input.LA(1);

                         
                        int index209_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_OracleParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index209_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA209_4 = input.LA(1);

                         
                        int index209_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_OracleParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index209_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA209_9 = input.LA(1);

                         
                        int index209_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_OracleParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index209_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA209_5 = input.LA(1);

                         
                        int index209_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_OracleParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index209_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 209, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA216_eotS =
        "\20\uffff";
    static final String DFA216_eofS =
        "\20\uffff";
    static final String DFA216_minS =
        "\1\4\2\0\15\uffff";
    static final String DFA216_maxS =
        "\1\u00ba\2\0\15\uffff";
    static final String DFA216_acceptS =
        "\3\uffff\1\3\6\uffff\1\4\1\uffff\1\5\1\uffff\1\1\1\2";
    static final String DFA216_specialS =
        "\1\uffff\1\0\1\1\15\uffff}>";
    static final String[] DFA216_transitionS = {
            "\2\3\37\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\14\2\uffff"+
            "\1\1\10\uffff\1\12\2\uffff\1\12\16\uffff\1\14\27\uffff\1\3\1"+
            "\uffff\1\3\11\uffff\1\3\27\uffff\1\3\24\uffff\1\3\26\uffff\1"+
            "\2",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA216_eot = DFA.unpackEncodedString(DFA216_eotS);
    static final short[] DFA216_eof = DFA.unpackEncodedString(DFA216_eofS);
    static final char[] DFA216_min = DFA.unpackEncodedStringToUnsignedChars(DFA216_minS);
    static final char[] DFA216_max = DFA.unpackEncodedStringToUnsignedChars(DFA216_maxS);
    static final short[] DFA216_accept = DFA.unpackEncodedString(DFA216_acceptS);
    static final short[] DFA216_special = DFA.unpackEncodedString(DFA216_specialS);
    static final short[][] DFA216_transition;

    static {
        int numStates = DFA216_transitionS.length;
        DFA216_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
        }
    }

    class DFA216 extends DFA {

        public DFA216(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 216;
            this.eot = DFA216_eot;
            this.eof = DFA216_eof;
            this.min = DFA216_min;
            this.max = DFA216_max;
            this.accept = DFA216_accept;
            this.special = DFA216_special;
            this.transition = DFA216_transition;
        }
        public String getDescription() {
            return "934:1: in_elements : ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> subquery | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST ( concatenation_wrapper )+ ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA216_1 = input.LA(1);

                         
                        int index216_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_OracleParser()) ) {s = 14;}

                        else if ( (synpred278_OracleParser()) ) {s = 15;}

                         
                        input.seek(index216_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA216_2 = input.LA(1);

                         
                        int index216_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred279_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("dbtimezone")))||(synpred279_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("timestamp")))||(synpred279_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("interval")))||(synpred279_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("maxvalue")))||(synpred279_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("minvalue")))||(synpred279_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("sessiontimezone"))))) ) {s = 3;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index216_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 216, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA220_eotS =
        "\26\uffff";
    static final String DFA220_eofS =
        "\1\uffff\1\2\20\uffff\2\21\2\uffff";
    static final String DFA220_minS =
        "\2\4\1\uffff\1\4\16\uffff\1\4\1\6\1\0\1\uffff";
    static final String DFA220_maxS =
        "\2\u00ba\1\uffff\1\u00ba\16\uffff\2\u00ba\1\0\1\uffff";
    static final String DFA220_acceptS =
        "\2\uffff\1\2\1\uffff\16\2\3\uffff\1\1";
    static final String DFA220_specialS =
        "\1\uffff\1\0\22\uffff\1\1\1\uffff}>";
    static final String[] DFA220_transitionS = {
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\1\2\16\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\2\2\27\uffff\1\2\6\uffff\1\2\15\uffff"+
            "\1\2\26\uffff\1\1",
            "\2\14\1\3\36\uffff\1\2\3\uffff\1\21\1\14\1\2\5\uffff\1\2\2"+
            "\uffff\1\2\2\uffff\2\2\1\uffff\4\2\2\uffff\1\13\2\uffff\1\13"+
            "\1\uffff\5\2\1\uffff\10\2\3\uffff\1\7\1\uffff\1\2\1\12\2\2\1"+
            "\uffff\1\2\1\uffff\1\10\4\uffff\1\2\1\5\4\uffff\1\15\1\uffff"+
            "\3\2\1\6\1\uffff\2\2\2\uffff\1\11\1\20\1\uffff\2\2\2\uffff\2"+
            "\2\2\uffff\1\2\3\uffff\4\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1"+
            "\16\1\uffff\1\2\1\uffff\2\2\1\uffff\1\4\4\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\2\2\1\17\1\2\5\uffff\5\2\3\uffff\4\2\1\uffff\4"+
            "\2",
            "",
            "\3\21\36\uffff\1\21\4\uffff\2\21\5\uffff\1\21\2\uffff\1\21"+
            "\2\uffff\1\21\3\uffff\1\21\4\uffff\1\21\2\uffff\1\21\16\uffff"+
            "\1\21\3\uffff\1\21\2\uffff\1\21\5\uffff\1\21\5\uffff\1\21\4"+
            "\uffff\1\21\1\uffff\1\21\2\uffff\1\21\5\uffff\2\21\27\uffff"+
            "\1\21\6\uffff\1\21\15\uffff\1\21\26\uffff\1\22",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\3\21\36\uffff\1\21\3\uffff\2\21\1\23\5\uffff\1\21\2\uffff"+
            "\1\21\2\uffff\2\21\1\uffff\4\21\2\uffff\1\21\2\uffff\1\21\1"+
            "\uffff\5\21\1\uffff\10\21\3\uffff\1\21\1\uffff\4\21\1\uffff"+
            "\1\21\1\uffff\1\21\4\uffff\2\21\4\uffff\1\21\1\uffff\4\21\1"+
            "\uffff\2\21\2\uffff\2\21\1\uffff\2\21\2\uffff\2\21\2\uffff\1"+
            "\21\3\uffff\4\21\1\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff"+
            "\1\21\1\uffff\2\21\1\uffff\1\21\4\uffff\1\21\2\uffff\1\21\3"+
            "\uffff\4\21\5\uffff\5\21\3\uffff\4\21\1\uffff\4\21",
            "\1\21\36\uffff\1\21\5\uffff\1\21\5\uffff\1\21\2\uffff\1\21"+
            "\2\uffff\2\21\1\uffff\4\21\7\uffff\5\21\1\uffff\10\21\5\uffff"+
            "\1\21\1\uffff\2\21\1\uffff\1\21\6\uffff\1\21\7\uffff\3\21\2"+
            "\uffff\2\21\5\uffff\2\21\2\uffff\2\21\2\uffff\1\21\3\uffff\4"+
            "\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\2\21\6\uffff"+
            "\1\21\2\uffff\1\21\3\uffff\2\21\1\uffff\1\21\5\uffff\5\21\3"+
            "\uffff\4\21\1\uffff\3\21\1\24",
            "\1\uffff",
            ""
    };

    static final short[] DFA220_eot = DFA.unpackEncodedString(DFA220_eotS);
    static final short[] DFA220_eof = DFA.unpackEncodedString(DFA220_eofS);
    static final char[] DFA220_min = DFA.unpackEncodedStringToUnsignedChars(DFA220_minS);
    static final char[] DFA220_max = DFA.unpackEncodedStringToUnsignedChars(DFA220_maxS);
    static final short[] DFA220_accept = DFA.unpackEncodedString(DFA220_acceptS);
    static final short[] DFA220_special = DFA.unpackEncodedString(DFA220_specialS);
    static final short[][] DFA220_transition;

    static {
        int numStates = DFA220_transitionS.length;
        DFA220_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA220_transition[i] = DFA.unpackEncodedString(DFA220_transitionS[i]);
        }
    }

    class DFA220 extends DFA {

        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = DFA220_eot;
            this.eof = DFA220_eof;
            this.min = DFA220_min;
            this.max = DFA220_max;
            this.accept = DFA220_accept;
            this.special = DFA220_special;
            this.transition = DFA220_transition;
        }
        public String getDescription() {
            return "962:1: additive_expression : ( special_function -> ^( SPECIAL_FUNC special_function ) | ( multiply_expression ( ( PLUS_SIGN | MINUS_SIGN ) multiply_expression )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA220_1 = input.LA(1);

                         
                        int index220_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA220_1==MINUS_SIGN) ) {s = 3;}

                        else if ( (LA220_1==EOF||LA220_1==NATIONAL_CHAR_STRING_LIT||LA220_1==CHAR_STRING||LA220_1==CHAR_STRING_PERL||LA220_1==DELIMITED_ID||(LA220_1>=LEFT_PAREN && LA220_1<=RIGHT_PAREN)||(LA220_1>=ASTERISK && LA220_1<=SOLIDUS)||(LA220_1>=LESS_THAN_OR_EQUALS_OP && LA220_1<=CARRET_OPERATOR_PART)||(LA220_1>=EXCLAMATION_OPERATOR_PART && LA220_1<=INTRODUCER)||LA220_1==SQL92_RESERVED_AND||(LA220_1>=SQL92_RESERVED_AS && LA220_1<=SQL92_RESERVED_ASC)||LA220_1==SQL92_RESERVED_BETWEEN||LA220_1==SQL92_RESERVED_CONNECT||(LA220_1>=SQL92_RESERVED_DEFAULT && LA220_1<=SQL92_RESERVED_DESC)||(LA220_1>=SQL92_RESERVED_ELSE && LA220_1<=SQL92_RESERVED_END)||(LA220_1>=SQL92_RESERVED_FOR && LA220_1<=SQL92_RESERVED_FROM)||(LA220_1>=SQL92_RESERVED_GROUP && LA220_1<=SQL92_RESERVED_HAVING)||LA220_1==SQL92_RESERVED_IN||(LA220_1>=SQL92_RESERVED_INTERSECT && LA220_1<=SQL92_RESERVED_LIKE)||LA220_1==PLSQL_RESERVED_MINUS||LA220_1==SQL92_RESERVED_NOT||LA220_1==SQL92_RESERVED_ON||(LA220_1>=SQL92_RESERVED_OR && LA220_1<=SQL92_RESERVED_ORDER)||LA220_1==SQL92_RESERVED_SELECT||LA220_1==PLSQL_RESERVED_START||(LA220_1>=SQL92_RESERVED_THEN && LA220_1<=SQL92_RESERVED_TO)||LA220_1==SQL92_RESERVED_UNION||(LA220_1>=SQL92_RESERVED_WHEN && LA220_1<=PLSQL_NON_RESERVED_MODEL)||(LA220_1>=JOIN && LA220_1<=FULL)||(LA220_1>=CROSS && LA220_1<=REGULAR_ID)) ) {s = 2;}

                        else if ( (LA220_1==SQL92_RESERVED_PRIOR) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 4;}

                        else if ( (LA220_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 5;}

                        else if ( (LA220_1==SQL92_RESERVED_DISTINCT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 6;}

                        else if ( (LA220_1==SQL92_RESERVED_ALL) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))))) {s = 7;}

                        else if ( (LA220_1==SQL92_RESERVED_CASE) ) {s = 8;}

                        else if ( (LA220_1==SQL92_RESERVED_EXISTS) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 9;}

                        else if ( (LA220_1==SQL92_RESERVED_ANY) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 10;}

                        else if ( (LA220_1==COLON||LA220_1==BINDVAR) ) {s = 11;}

                        else if ( ((LA220_1>=UNSIGNED_INTEGER && LA220_1<=APPROXIMATE_NUM_LIT)||LA220_1==EXACT_NUM_LIT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 12;}

                        else if ( (LA220_1==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 13;}

                        else if ( (LA220_1==SQL92_RESERVED_NULL) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 14;}

                        else if ( (LA220_1==SQL92_RESERVED_TRUE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 15;}

                        else if ( (LA220_1==SQL92_RESERVED_FALSE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 16;}

                        else if ( (LA220_1==PERIOD) ) {s = 17;}

                         
                        input.seek(index220_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA220_20 = input.LA(1);

                         
                        int index220_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred282_OracleParser()&&((input.LT(1).getText() + input.LT(2).getText() + input.LT(3).getText()).equalsIgnoreCase("sysdate-interval")))) ) {s = 21;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index220_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 220, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA226_eotS =
        "\100\uffff";
    static final String DFA226_eofS =
        "\1\2\77\uffff";
    static final String DFA226_minS =
        "\1\6\1\0\76\uffff";
    static final String DFA226_maxS =
        "\1\u00ba\1\0\76\uffff";
    static final String DFA226_acceptS =
        "\2\uffff\1\2\74\uffff\1\1";
    static final String DFA226_specialS =
        "\1\uffff\1\0\76\uffff}>";
    static final String[] DFA226_transitionS = {
            "\1\2\36\uffff\1\2\5\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\1\1\2\1\uffff\4\2\7\uffff\5\2\1\uffff\10\2\5\uffff\1\2\1"+
            "\uffff\2\2\1\uffff\1\2\6\uffff\1\2\7\uffff\3\2\2\uffff\2\2\5"+
            "\uffff\2\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\1\2\2"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\2\2\6\uffff\1\2\2\uffff\1\2\3"+
            "\uffff\2\2\1\uffff\1\2\5\uffff\5\2\3\uffff\4\2\1\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA226_eot = DFA.unpackEncodedString(DFA226_eotS);
    static final short[] DFA226_eof = DFA.unpackEncodedString(DFA226_eofS);
    static final char[] DFA226_min = DFA.unpackEncodedStringToUnsignedChars(DFA226_minS);
    static final char[] DFA226_max = DFA.unpackEncodedStringToUnsignedChars(DFA226_maxS);
    static final short[] DFA226_accept = DFA.unpackEncodedString(DFA226_acceptS);
    static final short[] DFA226_special = DFA.unpackEncodedString(DFA226_specialS);
    static final short[][] DFA226_transition;

    static {
        int numStates = DFA226_transitionS.length;
        DFA226_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA226_transition[i] = DFA.unpackEncodedString(DFA226_transitionS[i]);
        }
    }

    class DFA226 extends DFA {

        public DFA226(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 226;
            this.eot = DFA226_eot;
            this.eof = DFA226_eof;
            this.min = DFA226_min;
            this.max = DFA226_max;
            this.accept = DFA226_accept;
            this.special = DFA226_special;
            this.transition = DFA226_transition;
        }
        public String getDescription() {
            return "985:91: ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA226_1 = input.LA(1);

                         
                        int index226_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_OracleParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index226_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 226, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA241_eotS =
        "\32\uffff";
    static final String DFA241_eofS =
        "\32\uffff";
    static final String DFA241_minS =
        "\1\4\4\uffff\1\0\1\uffff\2\0\21\uffff";
    static final String DFA241_maxS =
        "\1\u00ba\4\uffff\1\0\1\uffff\2\0\21\uffff";
    static final String DFA241_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\uffff\1\6\2\uffff\1\10\1\11\1\uffff"+
        "\1\13\12\uffff\1\5\1\12\1\7";
    static final String DFA241_specialS =
        "\5\uffff\1\0\1\uffff\1\1\1\2\21\uffff}>";
    static final String[] DFA241_transitionS = {
            "\2\14\1\1\36\uffff\1\14\4\uffff\2\14\5\uffff\1\14\2\uffff\1"+
            "\10\2\uffff\1\14\3\uffff\1\2\4\uffff\1\14\2\uffff\1\14\16\uffff"+
            "\1\14\3\uffff\1\7\2\uffff\1\12\5\uffff\1\11\5\uffff\1\4\4\uffff"+
            "\1\14\1\uffff\1\14\2\uffff\1\6\5\uffff\1\12\1\14\27\uffff\1"+
            "\14\6\uffff\1\3\15\uffff\1\14\26\uffff\1\5",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA241_eot = DFA.unpackEncodedString(DFA241_eotS);
    static final short[] DFA241_eof = DFA.unpackEncodedString(DFA241_eofS);
    static final char[] DFA241_min = DFA.unpackEncodedStringToUnsignedChars(DFA241_minS);
    static final char[] DFA241_max = DFA.unpackEncodedStringToUnsignedChars(DFA241_maxS);
    static final short[] DFA241_accept = DFA.unpackEncodedString(DFA241_acceptS);
    static final short[] DFA241_special = DFA.unpackEncodedString(DFA241_specialS);
    static final short[][] DFA241_transition;

    static {
        int numStates = DFA241_transitionS.length;
        DFA241_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA241_transition[i] = DFA.unpackEncodedString(DFA241_transitionS[i]);
        }
    }

    class DFA241 extends DFA {

        public DFA241(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 241;
            this.eot = DFA241_eot;
            this.eof = DFA241_eof;
            this.min = DFA241_min;
            this.max = DFA241_max;
            this.accept = DFA241_accept;
            this.special = DFA241_special;
            this.transition = DFA241_transition;
        }
        public String getDescription() {
            return "1034:1: unary_expression options {backtrack=true; } : ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key unary_expression | connect_by_root_key unary_expression | {...}? => new_key unary_expression | distinct_key unary_expression | all_key unary_expression | {...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA241_5 = input.LA(1);

                         
                        int index241_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred312_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 23;}

                        else if ( ((synpred315_OracleParser()&&((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE)))) ) {s = 9;}

                        else if ( ((synpred316_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("some")))) ) {s = 10;}

                        else if ( (((synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first_value")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("treat")))||(synpred317_OracleParser()&&(enablesWithinOrOverClause(input.LT(1).getText())))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first_value")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("collect")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlcolattval")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("extract")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlparse")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("trim")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlroot")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlforest")))||(synpred317_OracleParser()&&(isStandardPredictionFunction(input.LT(1).getText())))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("cast")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("decompose")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlexists")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("count")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlpi")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlagg")))||(synpred317_OracleParser()&&(enablesOverClause(input.LT(1).getText())))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlelement")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlquery")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("last_value")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlcast")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("chr")))||(synpred317_OracleParser()&&(enablesUsingClause(input.LT(1).getText())))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("last_value")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmltable")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlserialize")))||(synpred317_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("translate"))))) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index241_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA241_7 = input.LA(1);

                         
                        int index241_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_OracleParser()) ) {s = 25;}

                        else if ( (synpred316_OracleParser()) ) {s = 10;}

                         
                        input.seek(index241_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA241_8 = input.LA(1);

                         
                        int index241_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred315_OracleParser()&&((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE)))) ) {s = 9;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index241_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 241, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA248_eotS =
        "\37\uffff";
    static final String DFA248_eofS =
        "\37\uffff";
    static final String DFA248_minS =
        "\1\4\2\uffff\1\0\4\uffff\1\0\26\uffff";
    static final String DFA248_maxS =
        "\1\u00ba\2\uffff\1\0\4\uffff\1\0\26\uffff";
    static final String DFA248_acceptS =
        "\1\uffff\1\1\7\uffff\1\2\25\uffff";
    static final String DFA248_specialS =
        "\3\uffff\1\0\4\uffff\1\1\26\uffff}>";
    static final String[] DFA248_transitionS = {
            "\3\11\36\uffff\1\11\4\uffff\2\11\5\uffff\1\11\2\uffff\1\11"+
            "\2\uffff\1\3\3\uffff\1\11\4\uffff\1\11\2\uffff\1\11\16\uffff"+
            "\1\11\3\uffff\1\11\2\uffff\1\11\5\uffff\1\11\5\uffff\1\11\3"+
            "\uffff\2\11\1\uffff\1\11\1\1\1\uffff\1\11\5\uffff\2\11\14\uffff"+
            "\1\1\4\uffff\1\1\3\uffff\1\11\1\uffff\1\11\6\uffff\1\11\4\uffff"+
            "\1\1\10\uffff\1\11\2\uffff\1\1\5\uffff\1\1\15\uffff\1\10",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA248_eot = DFA.unpackEncodedString(DFA248_eotS);
    static final short[] DFA248_eof = DFA.unpackEncodedString(DFA248_eofS);
    static final char[] DFA248_min = DFA.unpackEncodedStringToUnsignedChars(DFA248_minS);
    static final char[] DFA248_max = DFA.unpackEncodedStringToUnsignedChars(DFA248_maxS);
    static final short[] DFA248_accept = DFA.unpackEncodedString(DFA248_acceptS);
    static final short[] DFA248_special = DFA.unpackEncodedString(DFA248_specialS);
    static final short[][] DFA248_transition;

    static {
        int numStates = DFA248_transitionS.length;
        DFA248_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA248_transition[i] = DFA.unpackEncodedString(DFA248_transitionS[i]);
        }
    }

    class DFA248 extends DFA {

        public DFA248(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 248;
            this.eot = DFA248_eot;
            this.eof = DFA248_eof;
            this.min = DFA248_min;
            this.max = DFA248_max;
            this.accept = DFA248_accept;
            this.special = DFA248_special;
            this.transition = DFA248_transition;
        }
        public String getDescription() {
            return "1072:53: ({...}? seq_of_statements | ew2= expression_wrapper )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA248_3 = input.LA(1);

                         
                        int index248_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred325_OracleParser()&&(((case_statement_scope)case_statement_stack.peek()).isStatement))) ) {s = 1;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index248_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA248_8 = input.LA(1);

                         
                        int index248_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred325_OracleParser()&&(((case_statement_scope)case_statement_stack.peek()).isStatement))&&(input.LT(1).getText().equalsIgnoreCase("explain")))||((synpred325_OracleParser()&&(((case_statement_scope)case_statement_stack.peek()).isStatement))&&(input.LT(1).getText().equalsIgnoreCase("merge"))))) ) {s = 1;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index248_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 248, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA254_eotS =
        "\37\uffff";
    static final String DFA254_eofS =
        "\37\uffff";
    static final String DFA254_minS =
        "\1\4\2\uffff\1\0\4\uffff\1\0\26\uffff";
    static final String DFA254_maxS =
        "\1\u00ba\2\uffff\1\0\4\uffff\1\0\26\uffff";
    static final String DFA254_acceptS =
        "\1\uffff\1\1\7\uffff\1\2\25\uffff";
    static final String DFA254_specialS =
        "\3\uffff\1\0\4\uffff\1\1\26\uffff}>";
    static final String[] DFA254_transitionS = {
            "\3\11\36\uffff\1\11\4\uffff\2\11\5\uffff\1\11\2\uffff\1\11"+
            "\2\uffff\1\3\3\uffff\1\11\4\uffff\1\11\2\uffff\1\11\16\uffff"+
            "\1\11\3\uffff\1\11\2\uffff\1\11\5\uffff\1\11\5\uffff\1\11\3"+
            "\uffff\2\11\1\uffff\1\11\1\1\1\uffff\1\11\5\uffff\2\11\14\uffff"+
            "\1\1\4\uffff\1\1\3\uffff\1\11\1\uffff\1\11\6\uffff\1\11\4\uffff"+
            "\1\1\10\uffff\1\11\2\uffff\1\1\5\uffff\1\1\15\uffff\1\10",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA254_eot = DFA.unpackEncodedString(DFA254_eotS);
    static final short[] DFA254_eof = DFA.unpackEncodedString(DFA254_eofS);
    static final char[] DFA254_min = DFA.unpackEncodedStringToUnsignedChars(DFA254_minS);
    static final char[] DFA254_max = DFA.unpackEncodedStringToUnsignedChars(DFA254_maxS);
    static final short[] DFA254_accept = DFA.unpackEncodedString(DFA254_acceptS);
    static final short[] DFA254_special = DFA.unpackEncodedString(DFA254_specialS);
    static final short[][] DFA254_transition;

    static {
        int numStates = DFA254_transitionS.length;
        DFA254_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA254_transition[i] = DFA.unpackEncodedString(DFA254_transitionS[i]);
        }
    }

    class DFA254 extends DFA {

        public DFA254(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 254;
            this.eot = DFA254_eot;
            this.eof = DFA254_eof;
            this.min = DFA254_min;
            this.max = DFA254_max;
            this.accept = DFA254_accept;
            this.special = DFA254_special;
            this.transition = DFA254_transition;
        }
        public String getDescription() {
            return "1084:48: ({...}? seq_of_statements | expression_wrapper )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA254_3 = input.LA(1);

                         
                        int index254_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred331_OracleParser()&&(((case_statement_scope)case_statement_stack.peek()).isStatement))) ) {s = 1;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index254_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA254_8 = input.LA(1);

                         
                        int index254_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred331_OracleParser()&&(((case_statement_scope)case_statement_stack.peek()).isStatement))&&(input.LT(1).getText().equalsIgnoreCase("explain")))||((synpred331_OracleParser()&&(((case_statement_scope)case_statement_stack.peek()).isStatement))&&(input.LT(1).getText().equalsIgnoreCase("merge"))))) ) {s = 1;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index254_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 254, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA255_eotS =
        "\37\uffff";
    static final String DFA255_eofS =
        "\37\uffff";
    static final String DFA255_minS =
        "\1\4\2\uffff\1\0\4\uffff\1\0\26\uffff";
    static final String DFA255_maxS =
        "\1\u00ba\2\uffff\1\0\4\uffff\1\0\26\uffff";
    static final String DFA255_acceptS =
        "\1\uffff\1\1\7\uffff\1\2\25\uffff";
    static final String DFA255_specialS =
        "\3\uffff\1\0\4\uffff\1\1\26\uffff}>";
    static final String[] DFA255_transitionS = {
            "\3\11\36\uffff\1\11\4\uffff\2\11\5\uffff\1\11\2\uffff\1\11"+
            "\2\uffff\1\3\3\uffff\1\11\4\uffff\1\11\2\uffff\1\11\16\uffff"+
            "\1\11\3\uffff\1\11\2\uffff\1\11\5\uffff\1\11\5\uffff\1\11\3"+
            "\uffff\2\11\1\uffff\1\11\1\1\1\uffff\1\11\5\uffff\2\11\14\uffff"+
            "\1\1\4\uffff\1\1\3\uffff\1\11\1\uffff\1\11\6\uffff\1\11\4\uffff"+
            "\1\1\10\uffff\1\11\2\uffff\1\1\5\uffff\1\1\15\uffff\1\10",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA255_eot = DFA.unpackEncodedString(DFA255_eotS);
    static final short[] DFA255_eof = DFA.unpackEncodedString(DFA255_eofS);
    static final char[] DFA255_min = DFA.unpackEncodedStringToUnsignedChars(DFA255_minS);
    static final char[] DFA255_max = DFA.unpackEncodedStringToUnsignedChars(DFA255_maxS);
    static final short[] DFA255_accept = DFA.unpackEncodedString(DFA255_acceptS);
    static final short[] DFA255_special = DFA.unpackEncodedString(DFA255_specialS);
    static final short[][] DFA255_transition;

    static {
        int numStates = DFA255_transitionS.length;
        DFA255_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA255_transition[i] = DFA.unpackEncodedString(DFA255_transitionS[i]);
        }
    }

    class DFA255 extends DFA {

        public DFA255(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 255;
            this.eot = DFA255_eot;
            this.eof = DFA255_eof;
            this.min = DFA255_min;
            this.max = DFA255_max;
            this.accept = DFA255_accept;
            this.special = DFA255_special;
            this.transition = DFA255_transition;
        }
        public String getDescription() {
            return "1088:20: ({...}? seq_of_statements | expression_wrapper )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA255_3 = input.LA(1);

                         
                        int index255_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred332_OracleParser()&&(((case_statement_scope)case_statement_stack.peek()).isStatement))) ) {s = 1;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index255_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA255_8 = input.LA(1);

                         
                        int index255_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred332_OracleParser()&&(((case_statement_scope)case_statement_stack.peek()).isStatement))&&(input.LT(1).getText().equalsIgnoreCase("explain")))||((synpred332_OracleParser()&&(((case_statement_scope)case_statement_stack.peek()).isStatement))&&(input.LT(1).getText().equalsIgnoreCase("merge"))))) ) {s = 1;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index255_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 255, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA258_eotS =
        "\33\uffff";
    static final String DFA258_eofS =
        "\3\uffff\1\13\13\uffff\3\13\7\uffff\2\13";
    static final String DFA258_minS =
        "\1\4\1\64\1\51\1\6\3\uffff\2\51\3\uffff\1\64\1\4\1\64\3\6\1\4\2"+
        "\51\1\4\1\64\1\uffff\1\4\2\6";
    static final String DFA258_maxS =
        "\2\u00ba\1\67\1\u00ba\3\uffff\2\u00ba\3\uffff\13\u00ba\1\uffff"+
        "\3\u00ba";
    static final String DFA258_acceptS =
        "\4\uffff\1\2\1\3\1\5\2\uffff\2\1\1\4\13\uffff\1\1\3\uffff";
    static final String DFA258_specialS =
        "\2\uffff\1\0\17\uffff\1\1\5\uffff\1\2\2\uffff}>";
    static final String[] DFA258_transitionS = {
            "\2\5\37\uffff\1\5\4\uffff\2\5\5\uffff\1\5\2\uffff\1\3\2\uffff"+
            "\1\6\10\uffff\1\4\2\uffff\1\4\16\uffff\1\1\27\uffff\1\5\1\uffff"+
            "\1\5\11\uffff\1\5\27\uffff\1\5\24\uffff\1\5\26\uffff\1\2",
            "\1\10\u0085\uffff\1\7",
            "\1\11\15\uffff\1\12",
            "\1\13\36\uffff\1\13\3\uffff\1\14\1\uffff\1\13\5\uffff\1\13"+
            "\2\uffff\1\13\2\uffff\1\15\1\13\1\uffff\4\13\7\uffff\5\13\1"+
            "\uffff\10\13\5\uffff\1\13\1\uffff\2\13\1\uffff\1\13\6\uffff"+
            "\1\13\7\uffff\3\13\2\uffff\2\13\5\uffff\2\13\2\uffff\2\13\2"+
            "\uffff\1\13\3\uffff\4\13\1\uffff\1\13\2\uffff\1\13\3\uffff\1"+
            "\13\1\uffff\2\13\6\uffff\1\13\2\uffff\1\13\3\uffff\2\13\1\uffff"+
            "\1\13\5\uffff\5\13\3\uffff\4\13\1\uffff\4\13",
            "",
            "",
            "",
            "\1\16\12\uffff\1\3\u0085\uffff\1\17",
            "\1\16\12\uffff\1\3\u0085\uffff\1\17",
            "",
            "",
            "",
            "\1\21\35\uffff\1\13\147\uffff\1\20",
            "\3\13\36\uffff\1\13\4\uffff\2\13\5\uffff\1\13\2\uffff\1\13"+
            "\2\uffff\2\13\2\uffff\1\22\1\13\3\uffff\1\13\2\uffff\1\13\16"+
            "\uffff\1\13\3\uffff\1\13\2\uffff\1\13\5\uffff\1\13\5\uffff\1"+
            "\13\3\uffff\2\13\1\uffff\1\13\2\uffff\1\13\5\uffff\2\13\25\uffff"+
            "\1\13\1\uffff\1\13\6\uffff\1\13\4\uffff\1\13\10\uffff\1\13\26"+
            "\uffff\1\13",
            "\1\24\u0085\uffff\1\23",
            "\1\13\36\uffff\1\13\3\uffff\1\14\1\uffff\1\13\5\uffff\1\13"+
            "\2\uffff\1\13\2\uffff\1\15\1\13\1\uffff\4\13\7\uffff\5\13\1"+
            "\uffff\10\13\5\uffff\1\13\1\uffff\2\13\1\uffff\1\13\6\uffff"+
            "\1\13\7\uffff\3\13\2\uffff\2\13\5\uffff\2\13\2\uffff\2\13\2"+
            "\uffff\1\13\3\uffff\4\13\1\uffff\1\13\2\uffff\1\13\3\uffff\1"+
            "\13\1\uffff\2\13\6\uffff\1\13\2\uffff\1\13\3\uffff\2\13\1\uffff"+
            "\1\13\5\uffff\5\13\3\uffff\4\13\1\uffff\4\13",
            "\1\13\36\uffff\1\13\3\uffff\1\26\1\uffff\1\13\5\uffff\1\13"+
            "\2\uffff\1\13\2\uffff\1\25\1\13\1\uffff\4\13\7\uffff\5\13\1"+
            "\uffff\10\13\5\uffff\1\13\1\uffff\2\13\1\uffff\1\13\6\uffff"+
            "\1\13\7\uffff\3\13\2\uffff\2\13\5\uffff\2\13\2\uffff\2\13\2"+
            "\uffff\1\13\3\uffff\4\13\1\uffff\1\13\2\uffff\1\13\3\uffff\1"+
            "\13\1\uffff\2\13\6\uffff\1\13\2\uffff\1\13\3\uffff\2\13\1\uffff"+
            "\1\13\5\uffff\5\13\3\uffff\4\13\1\uffff\4\13",
            "\1\13\36\uffff\1\13\3\uffff\1\26\1\uffff\1\13\5\uffff\1\13"+
            "\2\uffff\1\13\2\uffff\1\25\1\13\1\uffff\4\13\7\uffff\5\13\1"+
            "\uffff\10\13\5\uffff\1\13\1\uffff\2\13\1\uffff\1\13\6\uffff"+
            "\1\13\7\uffff\3\13\2\uffff\2\13\5\uffff\2\13\2\uffff\2\13\2"+
            "\uffff\1\13\3\uffff\4\13\1\uffff\1\13\2\uffff\1\13\3\uffff\1"+
            "\13\1\uffff\2\13\6\uffff\1\13\2\uffff\1\13\3\uffff\2\13\1\uffff"+
            "\1\13\5\uffff\5\13\3\uffff\4\13\1\uffff\4\13",
            "\3\13\36\uffff\1\13\4\uffff\2\13\5\uffff\1\13\2\uffff\1\13"+
            "\2\uffff\1\13\1\27\2\uffff\1\13\4\uffff\1\13\2\uffff\1\13\16"+
            "\uffff\1\13\3\uffff\1\13\2\uffff\1\13\5\uffff\1\13\5\uffff\1"+
            "\13\4\uffff\1\13\1\uffff\1\13\2\uffff\1\13\5\uffff\2\13\27\uffff"+
            "\1\13\6\uffff\1\13\15\uffff\1\13\26\uffff\1\13",
            "\1\16\12\uffff\1\3\u0085\uffff\1\17",
            "\1\16\12\uffff\1\3\u0085\uffff\1\17",
            "\3\13\36\uffff\1\13\4\uffff\2\13\5\uffff\1\13\2\uffff\1\13"+
            "\2\uffff\2\13\2\uffff\1\30\1\13\3\uffff\1\13\2\uffff\1\13\16"+
            "\uffff\1\13\3\uffff\1\13\2\uffff\1\13\5\uffff\1\13\5\uffff\1"+
            "\13\3\uffff\2\13\1\uffff\1\13\2\uffff\1\13\5\uffff\2\13\25\uffff"+
            "\1\13\1\uffff\1\13\6\uffff\1\13\4\uffff\1\13\10\uffff\1\13\26"+
            "\uffff\1\13",
            "\1\32\35\uffff\1\13\147\uffff\1\31",
            "",
            "\3\13\36\uffff\1\13\4\uffff\2\13\5\uffff\1\13\2\uffff\1\13"+
            "\2\uffff\1\13\1\27\2\uffff\1\13\4\uffff\1\13\2\uffff\1\13\16"+
            "\uffff\1\13\3\uffff\1\13\2\uffff\1\13\5\uffff\1\13\5\uffff\1"+
            "\13\4\uffff\1\13\1\uffff\1\13\2\uffff\1\13\5\uffff\2\13\27\uffff"+
            "\1\13\6\uffff\1\13\15\uffff\1\13\26\uffff\1\13",
            "\1\13\36\uffff\1\13\3\uffff\1\26\1\uffff\1\13\5\uffff\1\13"+
            "\2\uffff\1\13\2\uffff\1\25\1\13\1\uffff\4\13\7\uffff\5\13\1"+
            "\uffff\10\13\5\uffff\1\13\1\uffff\2\13\1\uffff\1\13\6\uffff"+
            "\1\13\7\uffff\3\13\2\uffff\2\13\5\uffff\2\13\2\uffff\2\13\2"+
            "\uffff\1\13\3\uffff\4\13\1\uffff\1\13\2\uffff\1\13\3\uffff\1"+
            "\13\1\uffff\2\13\6\uffff\1\13\2\uffff\1\13\3\uffff\2\13\1\uffff"+
            "\1\13\5\uffff\5\13\3\uffff\4\13\1\uffff\4\13",
            "\1\13\36\uffff\1\13\3\uffff\1\26\1\uffff\1\13\5\uffff\1\13"+
            "\2\uffff\1\13\2\uffff\1\25\1\13\1\uffff\4\13\7\uffff\5\13\1"+
            "\uffff\10\13\5\uffff\1\13\1\uffff\2\13\1\uffff\1\13\6\uffff"+
            "\1\13\7\uffff\3\13\2\uffff\2\13\5\uffff\2\13\2\uffff\2\13\2"+
            "\uffff\1\13\3\uffff\4\13\1\uffff\1\13\2\uffff\1\13\3\uffff\1"+
            "\13\1\uffff\2\13\6\uffff\1\13\2\uffff\1\13\3\uffff\2\13\1\uffff"+
            "\1\13\5\uffff\5\13\3\uffff\4\13\1\uffff\4\13"
    };

    static final short[] DFA258_eot = DFA.unpackEncodedString(DFA258_eotS);
    static final short[] DFA258_eof = DFA.unpackEncodedString(DFA258_eofS);
    static final char[] DFA258_min = DFA.unpackEncodedStringToUnsignedChars(DFA258_minS);
    static final char[] DFA258_max = DFA.unpackEncodedStringToUnsignedChars(DFA258_maxS);
    static final short[] DFA258_accept = DFA.unpackEncodedString(DFA258_acceptS);
    static final short[] DFA258_special = DFA.unpackEncodedString(DFA258_specialS);
    static final short[][] DFA258_transition;

    static {
        int numStates = DFA258_transitionS.length;
        DFA258_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA258_transition[i] = DFA.unpackEncodedString(DFA258_transitionS[i]);
        }
    }

    class DFA258 extends DFA {

        public DFA258(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 258;
            this.eot = DFA258_eot;
            this.eof = DFA258_eof;
            this.min = DFA258_min;
            this.max = DFA258_max;
            this.accept = DFA258_accept;
            this.special = DFA258_special;
            this.transition = DFA258_transition;
        }
        public String getDescription() {
            return "1092:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA258_2 = input.LA(1);

                         
                        int index258_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_2==PERIOD) && (synpred333_OracleParser())) {s = 9;}

                        else if ( (LA258_2==LEFT_PAREN) && (synpred333_OracleParser())) {s = 10;}

                        else if ( (((synpred335_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("timestamp")))||(synpred335_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("dbtimezone")))||(synpred335_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("maxvalue")))||(synpred335_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("minvalue")))||(synpred335_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("interval")))||(synpred335_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("sessiontimezone"))))) ) {s = 5;}

                        else if ( (synpred336_OracleParser()) ) {s = 11;}

                         
                        input.seek(index258_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA258_18 = input.LA(1);

                         
                        int index258_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_18==RIGHT_PAREN) && (synpred333_OracleParser())) {s = 23;}

                        else if ( ((LA258_18>=UNSIGNED_INTEGER && LA258_18<=MINUS_SIGN)||LA258_18==NATIONAL_CHAR_STRING_LIT||(LA258_18>=EXACT_NUM_LIT && LA258_18<=CHAR_STRING)||LA258_18==CHAR_STRING_PERL||LA258_18==DELIMITED_ID||LA258_18==LEFT_PAREN||LA258_18==PLUS_SIGN||LA258_18==COLON||LA258_18==BINDVAR||LA258_18==INTRODUCER||LA258_18==SQL92_RESERVED_ALL||LA258_18==SQL92_RESERVED_ANY||LA258_18==SQL92_RESERVED_CASE||LA258_18==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA258_18==SQL92_RESERVED_DATE||LA258_18==SQL92_RESERVED_DEFAULT||LA258_18==SQL92_RESERVED_DISTINCT||(LA258_18>=SQL92_RESERVED_EXISTS && LA258_18<=SQL92_RESERVED_FALSE)||LA258_18==SQL92_RESERVED_NULL||LA258_18==SQL92_RESERVED_PRIOR||LA258_18==SQL92_RESERVED_TRUE||LA258_18==REGULAR_ID) ) {s = 11;}

                         
                        input.seek(index258_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA258_24 = input.LA(1);

                         
                        int index258_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_24==RIGHT_PAREN) && (synpred333_OracleParser())) {s = 23;}

                        else if ( ((LA258_24>=UNSIGNED_INTEGER && LA258_24<=MINUS_SIGN)||LA258_24==NATIONAL_CHAR_STRING_LIT||(LA258_24>=EXACT_NUM_LIT && LA258_24<=CHAR_STRING)||LA258_24==CHAR_STRING_PERL||LA258_24==DELIMITED_ID||LA258_24==LEFT_PAREN||LA258_24==PLUS_SIGN||LA258_24==COLON||LA258_24==BINDVAR||LA258_24==INTRODUCER||LA258_24==SQL92_RESERVED_ALL||LA258_24==SQL92_RESERVED_ANY||LA258_24==SQL92_RESERVED_CASE||LA258_24==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA258_24==SQL92_RESERVED_DATE||LA258_24==SQL92_RESERVED_DEFAULT||LA258_24==SQL92_RESERVED_DISTINCT||(LA258_24>=SQL92_RESERVED_EXISTS && LA258_24<=SQL92_RESERVED_FALSE)||LA258_24==SQL92_RESERVED_NULL||LA258_24==SQL92_RESERVED_PRIOR||LA258_24==SQL92_RESERVED_TRUE||LA258_24==REGULAR_ID) ) {s = 11;}

                         
                        input.seek(index258_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 258, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA257_eotS =
        "\32\uffff";
    static final String DFA257_eofS =
        "\32\uffff";
    static final String DFA257_minS =
        "\1\4\1\uffff\1\0\27\uffff";
    static final String DFA257_maxS =
        "\1\u00ba\1\uffff\1\0\27\uffff";
    static final String DFA257_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\26\uffff";
    static final String DFA257_specialS =
        "\1\0\1\uffff\1\1\27\uffff}>";
    static final String[] DFA257_transitionS = {
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\2\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\3\uffff\2\3\1\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\2\3\25\uffff\1\3\1\uffff\1\3\6\uffff"+
            "\1\3\4\uffff\1\1\10\uffff\1\3\26\uffff\1\3",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA257_eot = DFA.unpackEncodedString(DFA257_eotS);
    static final short[] DFA257_eof = DFA.unpackEncodedString(DFA257_eofS);
    static final char[] DFA257_min = DFA.unpackEncodedStringToUnsignedChars(DFA257_minS);
    static final char[] DFA257_max = DFA.unpackEncodedStringToUnsignedChars(DFA257_maxS);
    static final short[] DFA257_accept = DFA.unpackEncodedString(DFA257_acceptS);
    static final short[] DFA257_special = DFA.unpackEncodedString(DFA257_specialS);
    static final short[][] DFA257_transition;

    static {
        int numStates = DFA257_transitionS.length;
        DFA257_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA257_transition[i] = DFA.unpackEncodedString(DFA257_transitionS[i]);
        }
    }

    class DFA257 extends DFA {

        public DFA257(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 257;
            this.eot = DFA257_eot;
            this.eof = DFA257_eof;
            this.min = DFA257_min;
            this.max = DFA257_max;
            this.accept = DFA257_accept;
            this.special = DFA257_special;
            this.transition = DFA257_transition;
        }
        public String getDescription() {
            return "1102:10: ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA257_0 = input.LA(1);

                         
                        int index257_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_0==SQL92_RESERVED_SELECT) && (synpred338_OracleParser())) {s = 1;}

                        else if ( (LA257_0==LEFT_PAREN) ) {s = 2;}

                        else if ( ((LA257_0>=UNSIGNED_INTEGER && LA257_0<=MINUS_SIGN)||LA257_0==NATIONAL_CHAR_STRING_LIT||(LA257_0>=EXACT_NUM_LIT && LA257_0<=CHAR_STRING)||LA257_0==CHAR_STRING_PERL||LA257_0==DELIMITED_ID||LA257_0==PLUS_SIGN||LA257_0==COLON||LA257_0==BINDVAR||LA257_0==INTRODUCER||LA257_0==SQL92_RESERVED_ALL||LA257_0==SQL92_RESERVED_ANY||LA257_0==SQL92_RESERVED_CASE||LA257_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA257_0>=SQL92_RESERVED_CURSOR && LA257_0<=SQL92_RESERVED_DATE)||LA257_0==SQL92_RESERVED_DEFAULT||LA257_0==SQL92_RESERVED_DISTINCT||(LA257_0>=SQL92_RESERVED_EXISTS && LA257_0<=SQL92_RESERVED_FALSE)||LA257_0==SQL92_RESERVED_NOT||LA257_0==SQL92_RESERVED_NULL||LA257_0==SQL92_RESERVED_PRIOR||LA257_0==SQL92_RESERVED_TRUE||LA257_0==REGULAR_ID) ) {s = 3;}

                         
                        input.seek(index257_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA257_2 = input.LA(1);

                         
                        int index257_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_OracleParser()) ) {s = 1;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index257_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 257, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA323_eotS =
        "\33\uffff";
    static final String DFA323_eofS =
        "\33\uffff";
    static final String DFA323_minS =
        "\1\u00ba\1\0\31\uffff";
    static final String DFA323_maxS =
        "\1\u00ba\1\0\31\uffff";
    static final String DFA323_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31";
    static final String DFA323_specialS =
        "\1\uffff\1\0\31\uffff}>";
    static final String[] DFA323_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA323_eot = DFA.unpackEncodedString(DFA323_eotS);
    static final short[] DFA323_eof = DFA.unpackEncodedString(DFA323_eofS);
    static final char[] DFA323_min = DFA.unpackEncodedStringToUnsignedChars(DFA323_minS);
    static final char[] DFA323_max = DFA.unpackEncodedStringToUnsignedChars(DFA323_maxS);
    static final short[] DFA323_accept = DFA.unpackEncodedString(DFA323_acceptS);
    static final short[] DFA323_special = DFA.unpackEncodedString(DFA323_specialS);
    static final short[][] DFA323_transition;

    static {
        int numStates = DFA323_transitionS.length;
        DFA323_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA323_transition[i] = DFA.unpackEncodedString(DFA323_transitionS[i]);
        }
    }

    class DFA323 extends DFA {

        public DFA323(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 323;
            this.eot = DFA323_eot;
            this.eof = DFA323_eof;
            this.min = DFA323_min;
            this.max = DFA323_max;
            this.accept = DFA323_accept;
            this.special = DFA323_special;
            this.transition = DFA323_transition;
        }
        public String getDescription() {
            return "1127:1: standard_function : ( stantard_function_enabling_over function_argument ( over_clause )? | stantard_function_enabling_using function_argument ( using_clause )? | count_key LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )? | ( cast_key | xmlcast_key ) LEFT_PAREN ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN ) | concatenation_wrapper ) as_key type_spec RIGHT_PAREN | chr_key LEFT_PAREN concatenation_wrapper using_key nchar_cs_key RIGHT_PAREN | collect_key LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN | stantard_function_enabling_within_or_over function_argument ( within_or_over_part )+ | decompose_key LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN | extract_key LEFT_PAREN REGULAR_ID from_key concatenation_wrapper RIGHT_PAREN | ( first_value_key | last_value_key ) LEFT_PAREN concatenation_wrapper ( ignore_key nulls_key )? RIGHT_PAREN over_clause | ( first_value_key | last_value_key ) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN | translate_key LEFT_PAREN expression_wrapper ( using_key ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN | treat_key LEFT_PAREN expression_wrapper as_key ( ref_key )? type_spec RIGHT_PAREN | trim_key LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN | xmlagg_key LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )? | ( xmlcolattval_key | xmlforest_key ) LEFT_PAREN xml_multiuse_expression_element ( COMMA xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlelement_key LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA xml_attributes_clause )? ( COMMA expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlexists_key LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN | xmlparse_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlpi_key LEFT_PAREN ( name_key id | evalname_key concatenation_wrapper ) ( COMMA concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlquery_key LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key content_key ( null_key on_key empty_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlroot_key LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlserialize_key LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmltable_key LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key xml_table_column ( COMMA xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA323_1 = input.LA(1);

                         
                        int index323_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred348_OracleParser()&&(enablesOverClause(input.LT(1).getText())))) ) {s = 2;}

                        else if ( ((synpred350_OracleParser()&&(enablesUsingClause(input.LT(1).getText())))) ) {s = 3;}

                        else if ( ((synpred356_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("count")))) ) {s = 4;}

                        else if ( (((synpred360_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlcast")))||(synpred360_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("cast"))))) ) {s = 5;}

                        else if ( ((synpred361_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("chr")))) ) {s = 6;}

                        else if ( ((synpred365_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("collect")))) ) {s = 7;}

                        else if ( ((synpred367_OracleParser()&&(enablesWithinOrOverClause(input.LT(1).getText())))) ) {s = 8;}

                        else if ( ((synpred370_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("decompose")))) ) {s = 9;}

                        else if ( ((synpred371_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("extract")))) ) {s = 10;}

                        else if ( (((synpred374_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("last_value")))||(synpred374_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first_value"))))) ) {s = 11;}

                        else if ( (((synpred377_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("first_value")))||(synpred377_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("last_value"))))) ) {s = 12;}

                        else if ( ((synpred381_OracleParser()&&(isStandardPredictionFunction(input.LT(1).getText())))) ) {s = 13;}

                        else if ( ((synpred385_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("translate")))) ) {s = 14;}

                        else if ( ((synpred387_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("treat")))) ) {s = 15;}

                        else if ( ((synpred393_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("trim")))) ) {s = 16;}

                        else if ( ((synpred396_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlagg")))) ) {s = 17;}

                        else if ( (((synpred400_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlforest")))||(synpred400_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlcolattval"))))) ) {s = 18;}

                        else if ( ((synpred409_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlelement")))) ) {s = 19;}

                        else if ( ((synpred411_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlexists")))) ) {s = 20;}

                        else if ( ((synpred415_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlparse")))) ) {s = 21;}

                        else if ( ((synpred419_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlpi")))) ) {s = 22;}

                        else if ( ((synpred423_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlquery")))) ) {s = 23;}

                        else if ( ((synpred426_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlroot")))) ) {s = 24;}

                        else if ( ((synpred435_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlserialize")))) ) {s = 25;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("xmltable"))) ) {s = 26;}

                         
                        input.seek(index323_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 323, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA263_eotS =
        "\16\uffff";
    static final String DFA263_eofS =
        "\2\2\14\uffff";
    static final String DFA263_minS =
        "\1\6\1\4\1\uffff\1\4\5\uffff\1\4\4\uffff";
    static final String DFA263_maxS =
        "\2\u00ba\1\uffff\1\u00ba\5\uffff\1\u00ba\4\uffff";
    static final String DFA263_acceptS =
        "\2\uffff\1\2\1\uffff\5\2\1\uffff\2\1\1\2\1\1";
    static final String DFA263_specialS =
        "\1\uffff\1\2\1\uffff\1\0\5\uffff\1\1\4\uffff}>";
    static final String[] DFA263_transitionS = {
            "\1\2\36\uffff\1\2\5\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\4\2\7\uffff\5\2\1\uffff\10\2\5\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\2\6\uffff\1\2\7\uffff\3\2\2\uffff\2\2\5\uffff"+
            "\2\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\2\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\2\2\1\uffff\1\2\5\uffff\5\2\3\uffff\4\2\1\uffff\3\2\1\1",
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\3\1\2\1\uffff\1\10\2\2\1\10\2\uffff\1\2\2\uffff\1\2\1\uffff"+
            "\5\10\1\uffff\7\10\1\2\3\uffff\1\2\1\uffff\1\10\1\2\2\10\1\uffff"+
            "\1\2\1\4\1\2\4\uffff\1\10\1\2\2\uffff\1\6\2\2\1\uffff\1\2\2"+
            "\10\1\2\1\uffff\2\10\2\uffff\2\2\1\uffff\1\10\1\2\2\uffff\2"+
            "\10\2\uffff\1\10\3\uffff\1\10\1\2\2\10\1\uffff\1\10\2\uffff"+
            "\1\2\1\uffff\1\2\1\5\1\10\1\uffff\2\10\1\uffff\1\2\4\uffff\1"+
            "\10\1\uffff\1\7\1\10\3\uffff\2\10\1\2\1\10\5\uffff\4\10\1\2"+
            "\3\uffff\4\10\1\uffff\3\10\1\2",
            "",
            "\3\10\36\uffff\1\10\4\uffff\2\10\5\uffff\1\10\2\uffff\1\10"+
            "\2\uffff\1\10\1\13\2\uffff\1\10\4\uffff\1\10\2\uffff\1\10\16"+
            "\uffff\1\10\3\uffff\1\10\2\uffff\1\10\5\uffff\1\10\5\uffff\1"+
            "\10\3\uffff\2\10\1\uffff\1\10\2\uffff\1\10\5\uffff\2\10\25\uffff"+
            "\1\10\1\uffff\1\10\4\uffff\1\12\1\uffff\1\10\4\uffff\1\10\10"+
            "\uffff\1\10\26\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "\3\10\36\uffff\1\10\3\uffff\3\10\5\uffff\1\10\2\uffff\1\10"+
            "\2\uffff\2\10\1\uffff\4\10\2\uffff\1\10\2\uffff\1\10\1\uffff"+
            "\5\10\1\uffff\6\10\1\uffff\1\10\3\uffff\1\10\1\uffff\2\10\3"+
            "\uffff\1\10\1\15\1\10\5\uffff\1\10\4\uffff\1\10\1\uffff\1\10"+
            "\2\uffff\1\10\5\uffff\2\10\1\uffff\1\14\7\uffff\1\10\5\uffff"+
            "\2\10\4\uffff\1\10\1\uffff\1\10\3\uffff\1\10\2\uffff\1\10\15"+
            "\uffff\1\10\26\uffff\1\10",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA263_eot = DFA.unpackEncodedString(DFA263_eotS);
    static final short[] DFA263_eof = DFA.unpackEncodedString(DFA263_eofS);
    static final char[] DFA263_min = DFA.unpackEncodedStringToUnsignedChars(DFA263_minS);
    static final char[] DFA263_max = DFA.unpackEncodedStringToUnsignedChars(DFA263_maxS);
    static final short[] DFA263_accept = DFA.unpackEncodedString(DFA263_acceptS);
    static final short[] DFA263_special = DFA.unpackEncodedString(DFA263_specialS);
    static final short[][] DFA263_transition;

    static {
        int numStates = DFA263_transitionS.length;
        DFA263_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA263_transition[i] = DFA.unpackEncodedString(DFA263_transitionS[i]);
        }
    }

    class DFA263 extends DFA {

        public DFA263(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 263;
            this.eot = DFA263_eot;
            this.eof = DFA263_eof;
            this.min = DFA263_min;
            this.max = DFA263_max;
            this.accept = DFA263_accept;
            this.special = DFA263_special;
            this.transition = DFA263_transition;
        }
        public String getDescription() {
            return "1128:61: ( over_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA263_3 = input.LA(1);

                         
                        int index263_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA263_3>=UNSIGNED_INTEGER && LA263_3<=MINUS_SIGN)||LA263_3==NATIONAL_CHAR_STRING_LIT||(LA263_3>=EXACT_NUM_LIT && LA263_3<=CHAR_STRING)||LA263_3==CHAR_STRING_PERL||LA263_3==DELIMITED_ID||LA263_3==LEFT_PAREN||LA263_3==PLUS_SIGN||LA263_3==COLON||LA263_3==BINDVAR||LA263_3==INTRODUCER||LA263_3==SQL92_RESERVED_ALL||LA263_3==SQL92_RESERVED_ANY||LA263_3==SQL92_RESERVED_CASE||LA263_3==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA263_3>=SQL92_RESERVED_CURSOR && LA263_3<=SQL92_RESERVED_DATE)||LA263_3==SQL92_RESERVED_DEFAULT||LA263_3==SQL92_RESERVED_DISTINCT||(LA263_3>=SQL92_RESERVED_EXISTS && LA263_3<=SQL92_RESERVED_FALSE)||LA263_3==SQL92_RESERVED_NOT||LA263_3==SQL92_RESERVED_NULL||LA263_3==SQL92_RESERVED_PRIOR||LA263_3==SQL92_RESERVED_SELECT||LA263_3==SQL92_RESERVED_TRUE) ) {s = 8;}

                        else if ( (LA263_3==REGULAR_ID) ) {s = 9;}

                        else if ( (LA263_3==SQL92_RESERVED_ORDER) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {s = 10;}

                        else if ( (LA263_3==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {s = 11;}

                         
                        input.seek(index263_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA263_9 = input.LA(1);

                         
                        int index263_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA263_9>=UNSIGNED_INTEGER && LA263_9<=MINUS_SIGN)||LA263_9==NATIONAL_CHAR_STRING_LIT||(LA263_9>=PERIOD && LA263_9<=CHAR_STRING)||LA263_9==CHAR_STRING_PERL||LA263_9==DELIMITED_ID||(LA263_9>=LEFT_PAREN && LA263_9<=RIGHT_PAREN)||(LA263_9>=ASTERISK && LA263_9<=SOLIDUS)||LA263_9==COLON||LA263_9==BINDVAR||(LA263_9>=LESS_THAN_OR_EQUALS_OP && LA263_9<=CARRET_OPERATOR_PART)||(LA263_9>=EXCLAMATION_OPERATOR_PART && LA263_9<=LEFT_BRACKET)||LA263_9==INTRODUCER||LA263_9==SQL92_RESERVED_ALL||(LA263_9>=SQL92_RESERVED_AND && LA263_9<=SQL92_RESERVED_ANY)||LA263_9==SQL92_RESERVED_BETWEEN||LA263_9==SQL92_RESERVED_CASE||LA263_9==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA263_9==SQL92_RESERVED_DATE||LA263_9==SQL92_RESERVED_DEFAULT||LA263_9==SQL92_RESERVED_DISTINCT||(LA263_9>=SQL92_RESERVED_EXISTS && LA263_9<=SQL92_RESERVED_FALSE)||LA263_9==SQL92_RESERVED_IN||(LA263_9>=SQL92_RESERVED_IS && LA263_9<=SQL92_RESERVED_LIKE)||LA263_9==SQL92_RESERVED_NOT||LA263_9==SQL92_RESERVED_NULL||LA263_9==SQL92_RESERVED_OR||LA263_9==SQL92_RESERVED_PRIOR||LA263_9==SQL92_RESERVED_TRUE||LA263_9==REGULAR_ID) ) {s = 8;}

                        else if ( (LA263_9==SQL92_RESERVED_FOR) && (((input.LT(1).getText().equalsIgnoreCase("unpivot"))))) {s = 12;}

                        else if ( (LA263_9==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {s = 13;}

                         
                        input.seek(index263_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA263_1 = input.LA(1);

                         
                        int index263_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1==EOF||(LA263_1>=UNSIGNED_INTEGER && LA263_1<=MINUS_SIGN)||LA263_1==NATIONAL_CHAR_STRING_LIT||(LA263_1>=EXACT_NUM_LIT && LA263_1<=CHAR_STRING)||LA263_1==CHAR_STRING_PERL||LA263_1==DELIMITED_ID||LA263_1==RIGHT_PAREN||(LA263_1>=PLUS_SIGN && LA263_1<=COMMA)||LA263_1==COLON||LA263_1==BINDVAR||LA263_1==INTRODUCER||LA263_1==SQL92_RESERVED_ALL||LA263_1==SQL92_RESERVED_ANY||LA263_1==SQL92_RESERVED_BETWEEN||LA263_1==SQL92_RESERVED_CASE||LA263_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA263_1>=SQL92_RESERVED_CURSOR && LA263_1<=SQL92_RESERVED_DATE)||LA263_1==SQL92_RESERVED_DEFAULT||LA263_1==SQL92_RESERVED_DISTINCT||(LA263_1>=SQL92_RESERVED_EXISTS && LA263_1<=SQL92_RESERVED_FALSE)||LA263_1==SQL92_RESERVED_FROM||LA263_1==SQL92_RESERVED_INTO||LA263_1==SQL92_RESERVED_NOT||LA263_1==SQL92_RESERVED_NULL||LA263_1==SQL92_RESERVED_PRIOR||LA263_1==SQL92_RESERVED_TRUE||LA263_1==PLSQL_NON_RESERVED_MODEL||LA263_1==REGULAR_ID) ) {s = 2;}

                        else if ( (LA263_1==LEFT_PAREN) ) {s = 3;}

                        else if ( (LA263_1==SQL92_RESERVED_BY) && (((input.LT(1).getText().equalsIgnoreCase("passing"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {s = 4;}

                        else if ( (LA263_1==SQL92_RESERVED_OF) && (((input.LT(1).getText().equalsIgnoreCase("submultiset"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {s = 5;}

                        else if ( (LA263_1==SQL92_RESERVED_CURRENT) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 6;}

                        else if ( (LA263_1==SQL92_RESERVED_SIZE) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {s = 7;}

                        else if ( (LA263_1==ASTERISK||LA263_1==SOLIDUS||(LA263_1>=LESS_THAN_OR_EQUALS_OP && LA263_1<=CARRET_OPERATOR_PART)||(LA263_1>=EXCLAMATION_OPERATOR_PART && LA263_1<=RIGHT_BRACKET)||LA263_1==SQL92_RESERVED_AND||(LA263_1>=SQL92_RESERVED_AS && LA263_1<=SQL92_RESERVED_ASC)||LA263_1==SQL92_RESERVED_CONNECT||(LA263_1>=SQL92_RESERVED_DELETE && LA263_1<=SQL92_RESERVED_DESC)||(LA263_1>=SQL92_RESERVED_ELSE && LA263_1<=SQL92_RESERVED_END)||LA263_1==SQL92_RESERVED_FOR||(LA263_1>=SQL92_RESERVED_GROUP && LA263_1<=SQL92_RESERVED_HAVING)||LA263_1==SQL92_RESERVED_IN||LA263_1==SQL92_RESERVED_INTERSECT||(LA263_1>=SQL92_RESERVED_IS && LA263_1<=SQL92_RESERVED_LIKE)||LA263_1==PLSQL_RESERVED_MINUS||LA263_1==SQL92_RESERVED_ON||(LA263_1>=SQL92_RESERVED_OR && LA263_1<=SQL92_RESERVED_ORDER)||LA263_1==SQL92_RESERVED_SELECT||LA263_1==PLSQL_RESERVED_START||(LA263_1>=SQL92_RESERVED_THEN && LA263_1<=SQL92_RESERVED_TO)||LA263_1==SQL92_RESERVED_UNION||(LA263_1>=SQL92_RESERVED_WHEN && LA263_1<=PLSQL_NON_RESERVED_USING)||(LA263_1>=JOIN && LA263_1<=FULL)||(LA263_1>=CROSS && LA263_1<=INNER)) ) {s = 8;}

                         
                        input.seek(index263_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 263, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA264_eotS =
        "\100\uffff";
    static final String DFA264_eofS =
        "\1\2\77\uffff";
    static final String DFA264_minS =
        "\1\6\1\0\76\uffff";
    static final String DFA264_maxS =
        "\1\u00ba\1\0\76\uffff";
    static final String DFA264_acceptS =
        "\2\uffff\1\2\74\uffff\1\1";
    static final String DFA264_specialS =
        "\1\uffff\1\0\76\uffff}>";
    static final String[] DFA264_transitionS = {
            "\1\2\36\uffff\1\2\5\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\4\2\7\uffff\5\2\1\uffff\10\2\5\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\2\6\uffff\1\2\7\uffff\3\2\2\uffff\2\2\5\uffff"+
            "\2\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\2\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\2\2\1\uffff\1\2\5\uffff\3\2\1\1\1\2\3\uffff\4\2\1\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA264_eot = DFA.unpackEncodedString(DFA264_eotS);
    static final short[] DFA264_eof = DFA.unpackEncodedString(DFA264_eofS);
    static final char[] DFA264_min = DFA.unpackEncodedStringToUnsignedChars(DFA264_minS);
    static final char[] DFA264_max = DFA.unpackEncodedStringToUnsignedChars(DFA264_maxS);
    static final short[] DFA264_accept = DFA.unpackEncodedString(DFA264_acceptS);
    static final short[] DFA264_special = DFA.unpackEncodedString(DFA264_specialS);
    static final short[][] DFA264_transition;

    static {
        int numStates = DFA264_transitionS.length;
        DFA264_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA264_transition[i] = DFA.unpackEncodedString(DFA264_transitionS[i]);
        }
    }

    class DFA264 extends DFA {

        public DFA264(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = DFA264_eot;
            this.eof = DFA264_eof;
            this.min = DFA264_min;
            this.max = DFA264_max;
            this.accept = DFA264_accept;
            this.special = DFA264_special;
            this.transition = DFA264_transition;
        }
        public String getDescription() {
            return "1129:62: ( using_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA264_1 = input.LA(1);

                         
                        int index264_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_OracleParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index264_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 264, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA265_eotS =
        "\32\uffff";
    static final String DFA265_eofS =
        "\32\uffff";
    static final String DFA265_minS =
        "\1\4\1\0\1\uffff\1\0\26\uffff";
    static final String DFA265_maxS =
        "\1\u00ba\1\0\1\uffff\1\0\26\uffff";
    static final String DFA265_acceptS =
        "\2\uffff\1\2\1\uffff\1\4\23\uffff\1\1\1\3";
    static final String DFA265_specialS =
        "\1\uffff\1\0\1\uffff\1\1\26\uffff}>";
    static final String[] DFA265_transitionS = {
            "\3\4\36\uffff\1\4\4\uffff\2\4\5\uffff\1\4\2\uffff\1\4\2\uffff"+
            "\1\4\3\uffff\1\4\4\uffff\1\4\2\uffff\1\4\16\uffff\1\4\3\uffff"+
            "\1\3\2\uffff\1\4\5\uffff\1\4\5\uffff\1\4\4\uffff\1\4\1\uffff"+
            "\1\4\2\uffff\1\1\5\uffff\2\4\27\uffff\1\4\6\uffff\1\4\15\uffff"+
            "\1\4\1\uffff\1\2\24\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA265_eot = DFA.unpackEncodedString(DFA265_eotS);
    static final short[] DFA265_eof = DFA.unpackEncodedString(DFA265_eofS);
    static final char[] DFA265_min = DFA.unpackEncodedStringToUnsignedChars(DFA265_minS);
    static final char[] DFA265_max = DFA.unpackEncodedStringToUnsignedChars(DFA265_maxS);
    static final short[] DFA265_accept = DFA.unpackEncodedString(DFA265_acceptS);
    static final short[] DFA265_special = DFA.unpackEncodedString(DFA265_specialS);
    static final short[][] DFA265_transition;

    static {
        int numStates = DFA265_transitionS.length;
        DFA265_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA265_transition[i] = DFA.unpackEncodedString(DFA265_transitionS[i]);
        }
    }

    class DFA265 extends DFA {

        public DFA265(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 265;
            this.eot = DFA265_eot;
            this.eof = DFA265_eof;
            this.min = DFA265_min;
            this.max = DFA265_max;
            this.accept = DFA265_accept;
            this.special = DFA265_special;
            this.transition = DFA265_transition;
        }
        public String getDescription() {
            return "1132:30: ( distinct_key | unique_key | all_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA265_1 = input.LA(1);

                         
                        int index265_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred352_OracleParser()) ) {s = 24;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index265_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA265_3 = input.LA(1);

                         
                        int index265_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_OracleParser()) ) {s = 25;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index265_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 265, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA267_eotS =
        "\16\uffff";
    static final String DFA267_eofS =
        "\2\2\14\uffff";
    static final String DFA267_minS =
        "\1\6\1\4\1\uffff\1\4\5\uffff\1\4\4\uffff";
    static final String DFA267_maxS =
        "\2\u00ba\1\uffff\1\u00ba\5\uffff\1\u00ba\4\uffff";
    static final String DFA267_acceptS =
        "\2\uffff\1\2\1\uffff\5\2\1\uffff\2\1\1\2\1\1";
    static final String DFA267_specialS =
        "\1\uffff\1\2\1\uffff\1\0\5\uffff\1\1\4\uffff}>";
    static final String[] DFA267_transitionS = {
            "\1\2\36\uffff\1\2\5\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\4\2\7\uffff\5\2\1\uffff\10\2\5\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\2\6\uffff\1\2\7\uffff\3\2\2\uffff\2\2\5\uffff"+
            "\2\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\2\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\2\2\1\uffff\1\2\5\uffff\5\2\3\uffff\4\2\1\uffff\3\2\1\1",
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\3\1\2\1\uffff\1\10\2\2\1\10\2\uffff\1\2\2\uffff\1\2\1\uffff"+
            "\5\10\1\uffff\7\10\1\2\3\uffff\1\2\1\uffff\1\10\1\2\2\10\1\uffff"+
            "\1\2\1\4\1\2\4\uffff\1\10\1\2\2\uffff\1\6\2\2\1\uffff\1\2\2"+
            "\10\1\2\1\uffff\2\10\2\uffff\2\2\1\uffff\1\10\1\2\2\uffff\2"+
            "\10\2\uffff\1\10\3\uffff\1\10\1\2\2\10\1\uffff\1\10\2\uffff"+
            "\1\2\1\uffff\1\2\1\5\1\10\1\uffff\2\10\1\uffff\1\2\4\uffff\1"+
            "\10\1\uffff\1\7\1\10\3\uffff\2\10\1\2\1\10\5\uffff\4\10\1\2"+
            "\3\uffff\4\10\1\uffff\3\10\1\2",
            "",
            "\3\10\36\uffff\1\10\4\uffff\2\10\5\uffff\1\10\2\uffff\1\10"+
            "\2\uffff\1\10\1\13\2\uffff\1\10\4\uffff\1\10\2\uffff\1\10\16"+
            "\uffff\1\10\3\uffff\1\10\2\uffff\1\10\5\uffff\1\10\5\uffff\1"+
            "\10\3\uffff\2\10\1\uffff\1\10\2\uffff\1\10\5\uffff\2\10\25\uffff"+
            "\1\10\1\uffff\1\10\4\uffff\1\12\1\uffff\1\10\4\uffff\1\10\10"+
            "\uffff\1\10\26\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "\3\10\36\uffff\1\10\3\uffff\3\10\5\uffff\1\10\2\uffff\1\10"+
            "\2\uffff\2\10\1\uffff\4\10\2\uffff\1\10\2\uffff\1\10\1\uffff"+
            "\5\10\1\uffff\6\10\1\uffff\1\10\3\uffff\1\10\1\uffff\2\10\3"+
            "\uffff\1\10\1\15\1\10\5\uffff\1\10\4\uffff\1\10\1\uffff\1\10"+
            "\2\uffff\1\10\5\uffff\2\10\1\uffff\1\14\7\uffff\1\10\5\uffff"+
            "\2\10\4\uffff\1\10\1\uffff\1\10\3\uffff\1\10\2\uffff\1\10\15"+
            "\uffff\1\10\26\uffff\1\10",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA267_eot = DFA.unpackEncodedString(DFA267_eotS);
    static final short[] DFA267_eof = DFA.unpackEncodedString(DFA267_eofS);
    static final char[] DFA267_min = DFA.unpackEncodedStringToUnsignedChars(DFA267_minS);
    static final char[] DFA267_max = DFA.unpackEncodedStringToUnsignedChars(DFA267_maxS);
    static final short[] DFA267_accept = DFA.unpackEncodedString(DFA267_acceptS);
    static final short[] DFA267_special = DFA.unpackEncodedString(DFA267_specialS);
    static final short[][] DFA267_transition;

    static {
        int numStates = DFA267_transitionS.length;
        DFA267_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA267_transition[i] = DFA.unpackEncodedString(DFA267_transitionS[i]);
        }
    }

    class DFA267 extends DFA {

        public DFA267(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 267;
            this.eot = DFA267_eot;
            this.eof = DFA267_eof;
            this.min = DFA267_min;
            this.max = DFA267_max;
            this.accept = DFA267_accept;
            this.special = DFA267_special;
            this.transition = DFA267_transition;
        }
        public String getDescription() {
            return "1133:26: ( over_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA267_3 = input.LA(1);

                         
                        int index267_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA267_3>=UNSIGNED_INTEGER && LA267_3<=MINUS_SIGN)||LA267_3==NATIONAL_CHAR_STRING_LIT||(LA267_3>=EXACT_NUM_LIT && LA267_3<=CHAR_STRING)||LA267_3==CHAR_STRING_PERL||LA267_3==DELIMITED_ID||LA267_3==LEFT_PAREN||LA267_3==PLUS_SIGN||LA267_3==COLON||LA267_3==BINDVAR||LA267_3==INTRODUCER||LA267_3==SQL92_RESERVED_ALL||LA267_3==SQL92_RESERVED_ANY||LA267_3==SQL92_RESERVED_CASE||LA267_3==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA267_3>=SQL92_RESERVED_CURSOR && LA267_3<=SQL92_RESERVED_DATE)||LA267_3==SQL92_RESERVED_DEFAULT||LA267_3==SQL92_RESERVED_DISTINCT||(LA267_3>=SQL92_RESERVED_EXISTS && LA267_3<=SQL92_RESERVED_FALSE)||LA267_3==SQL92_RESERVED_NOT||LA267_3==SQL92_RESERVED_NULL||LA267_3==SQL92_RESERVED_PRIOR||LA267_3==SQL92_RESERVED_SELECT||LA267_3==SQL92_RESERVED_TRUE) ) {s = 8;}

                        else if ( (LA267_3==REGULAR_ID) ) {s = 9;}

                        else if ( (LA267_3==SQL92_RESERVED_ORDER) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {s = 10;}

                        else if ( (LA267_3==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {s = 11;}

                         
                        input.seek(index267_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA267_9 = input.LA(1);

                         
                        int index267_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA267_9>=UNSIGNED_INTEGER && LA267_9<=MINUS_SIGN)||LA267_9==NATIONAL_CHAR_STRING_LIT||(LA267_9>=PERIOD && LA267_9<=CHAR_STRING)||LA267_9==CHAR_STRING_PERL||LA267_9==DELIMITED_ID||(LA267_9>=LEFT_PAREN && LA267_9<=RIGHT_PAREN)||(LA267_9>=ASTERISK && LA267_9<=SOLIDUS)||LA267_9==COLON||LA267_9==BINDVAR||(LA267_9>=LESS_THAN_OR_EQUALS_OP && LA267_9<=CARRET_OPERATOR_PART)||(LA267_9>=EXCLAMATION_OPERATOR_PART && LA267_9<=LEFT_BRACKET)||LA267_9==INTRODUCER||LA267_9==SQL92_RESERVED_ALL||(LA267_9>=SQL92_RESERVED_AND && LA267_9<=SQL92_RESERVED_ANY)||LA267_9==SQL92_RESERVED_BETWEEN||LA267_9==SQL92_RESERVED_CASE||LA267_9==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA267_9==SQL92_RESERVED_DATE||LA267_9==SQL92_RESERVED_DEFAULT||LA267_9==SQL92_RESERVED_DISTINCT||(LA267_9>=SQL92_RESERVED_EXISTS && LA267_9<=SQL92_RESERVED_FALSE)||LA267_9==SQL92_RESERVED_IN||(LA267_9>=SQL92_RESERVED_IS && LA267_9<=SQL92_RESERVED_LIKE)||LA267_9==SQL92_RESERVED_NOT||LA267_9==SQL92_RESERVED_NULL||LA267_9==SQL92_RESERVED_OR||LA267_9==SQL92_RESERVED_PRIOR||LA267_9==SQL92_RESERVED_TRUE||LA267_9==REGULAR_ID) ) {s = 8;}

                        else if ( (LA267_9==SQL92_RESERVED_FOR) && (((input.LT(1).getText().equalsIgnoreCase("unpivot"))))) {s = 12;}

                        else if ( (LA267_9==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {s = 13;}

                         
                        input.seek(index267_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA267_1 = input.LA(1);

                         
                        int index267_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA267_1==EOF||(LA267_1>=UNSIGNED_INTEGER && LA267_1<=MINUS_SIGN)||LA267_1==NATIONAL_CHAR_STRING_LIT||(LA267_1>=EXACT_NUM_LIT && LA267_1<=CHAR_STRING)||LA267_1==CHAR_STRING_PERL||LA267_1==DELIMITED_ID||LA267_1==RIGHT_PAREN||(LA267_1>=PLUS_SIGN && LA267_1<=COMMA)||LA267_1==COLON||LA267_1==BINDVAR||LA267_1==INTRODUCER||LA267_1==SQL92_RESERVED_ALL||LA267_1==SQL92_RESERVED_ANY||LA267_1==SQL92_RESERVED_BETWEEN||LA267_1==SQL92_RESERVED_CASE||LA267_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA267_1>=SQL92_RESERVED_CURSOR && LA267_1<=SQL92_RESERVED_DATE)||LA267_1==SQL92_RESERVED_DEFAULT||LA267_1==SQL92_RESERVED_DISTINCT||(LA267_1>=SQL92_RESERVED_EXISTS && LA267_1<=SQL92_RESERVED_FALSE)||LA267_1==SQL92_RESERVED_FROM||LA267_1==SQL92_RESERVED_INTO||LA267_1==SQL92_RESERVED_NOT||LA267_1==SQL92_RESERVED_NULL||LA267_1==SQL92_RESERVED_PRIOR||LA267_1==SQL92_RESERVED_TRUE||LA267_1==PLSQL_NON_RESERVED_MODEL||LA267_1==REGULAR_ID) ) {s = 2;}

                        else if ( (LA267_1==LEFT_PAREN) ) {s = 3;}

                        else if ( (LA267_1==SQL92_RESERVED_BY) && (((input.LT(1).getText().equalsIgnoreCase("passing"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {s = 4;}

                        else if ( (LA267_1==SQL92_RESERVED_OF) && (((input.LT(1).getText().equalsIgnoreCase("submultiset"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {s = 5;}

                        else if ( (LA267_1==SQL92_RESERVED_CURRENT) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 6;}

                        else if ( (LA267_1==SQL92_RESERVED_SIZE) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {s = 7;}

                        else if ( (LA267_1==ASTERISK||LA267_1==SOLIDUS||(LA267_1>=LESS_THAN_OR_EQUALS_OP && LA267_1<=CARRET_OPERATOR_PART)||(LA267_1>=EXCLAMATION_OPERATOR_PART && LA267_1<=RIGHT_BRACKET)||LA267_1==SQL92_RESERVED_AND||(LA267_1>=SQL92_RESERVED_AS && LA267_1<=SQL92_RESERVED_ASC)||LA267_1==SQL92_RESERVED_CONNECT||(LA267_1>=SQL92_RESERVED_DELETE && LA267_1<=SQL92_RESERVED_DESC)||(LA267_1>=SQL92_RESERVED_ELSE && LA267_1<=SQL92_RESERVED_END)||LA267_1==SQL92_RESERVED_FOR||(LA267_1>=SQL92_RESERVED_GROUP && LA267_1<=SQL92_RESERVED_HAVING)||LA267_1==SQL92_RESERVED_IN||LA267_1==SQL92_RESERVED_INTERSECT||(LA267_1>=SQL92_RESERVED_IS && LA267_1<=SQL92_RESERVED_LIKE)||LA267_1==PLSQL_RESERVED_MINUS||LA267_1==SQL92_RESERVED_ON||(LA267_1>=SQL92_RESERVED_OR && LA267_1<=SQL92_RESERVED_ORDER)||LA267_1==SQL92_RESERVED_SELECT||LA267_1==PLSQL_RESERVED_START||(LA267_1>=SQL92_RESERVED_THEN && LA267_1<=SQL92_RESERVED_TO)||LA267_1==SQL92_RESERVED_UNION||(LA267_1>=SQL92_RESERVED_WHEN && LA267_1<=PLSQL_NON_RESERVED_USING)||(LA267_1>=JOIN && LA267_1<=FULL)||(LA267_1>=CROSS && LA267_1<=INNER)) ) {s = 8;}

                         
                        input.seek(index267_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 267, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA269_eotS =
        "\30\uffff";
    static final String DFA269_eofS =
        "\30\uffff";
    static final String DFA269_minS =
        "\1\4\1\0\26\uffff";
    static final String DFA269_maxS =
        "\1\u00ba\1\0\26\uffff";
    static final String DFA269_acceptS =
        "\2\uffff\1\2\24\uffff\1\1";
    static final String DFA269_specialS =
        "\1\uffff\1\0\26\uffff}>";
    static final String[] DFA269_transitionS = {
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\1\2\16\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\2\2\27\uffff\1\2\6\uffff\1\2\15\uffff"+
            "\1\2\26\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA269_eot = DFA.unpackEncodedString(DFA269_eotS);
    static final short[] DFA269_eof = DFA.unpackEncodedString(DFA269_eofS);
    static final char[] DFA269_min = DFA.unpackEncodedStringToUnsignedChars(DFA269_minS);
    static final char[] DFA269_max = DFA.unpackEncodedStringToUnsignedChars(DFA269_maxS);
    static final short[] DFA269_accept = DFA.unpackEncodedString(DFA269_acceptS);
    static final short[] DFA269_special = DFA.unpackEncodedString(DFA269_specialS);
    static final short[][] DFA269_transition;

    static {
        int numStates = DFA269_transitionS.length;
        DFA269_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA269_transition[i] = DFA.unpackEncodedString(DFA269_transitionS[i]);
        }
    }

    class DFA269 extends DFA {

        public DFA269(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 269;
            this.eot = DFA269_eot;
            this.eof = DFA269_eof;
            this.min = DFA269_min;
            this.max = DFA269_max;
            this.accept = DFA269_accept;
            this.special = DFA269_special;
            this.transition = DFA269_transition;
        }
        public String getDescription() {
            return "1136:17: ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN ) | concatenation_wrapper )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA269_1 = input.LA(1);

                         
                        int index269_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred359_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("multiset")))) ) {s = 23;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index269_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 269, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA270_eotS =
        "\31\uffff";
    static final String DFA270_eofS =
        "\31\uffff";
    static final String DFA270_minS =
        "\1\4\1\0\27\uffff";
    static final String DFA270_maxS =
        "\1\u00ba\1\0\27\uffff";
    static final String DFA270_acceptS =
        "\2\uffff\1\2\1\3\24\uffff\1\1";
    static final String DFA270_specialS =
        "\1\uffff\1\0\27\uffff}>";
    static final String[] DFA270_transitionS = {
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\4\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\1\5\uffff\2\3\27\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\1\3\1\uffff\1\2\24\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA270_eot = DFA.unpackEncodedString(DFA270_eotS);
    static final short[] DFA270_eof = DFA.unpackEncodedString(DFA270_eofS);
    static final char[] DFA270_min = DFA.unpackEncodedStringToUnsignedChars(DFA270_minS);
    static final char[] DFA270_max = DFA.unpackEncodedStringToUnsignedChars(DFA270_maxS);
    static final short[] DFA270_accept = DFA.unpackEncodedString(DFA270_acceptS);
    static final short[] DFA270_special = DFA.unpackEncodedString(DFA270_specialS);
    static final short[][] DFA270_transition;

    static {
        int numStates = DFA270_transitionS.length;
        DFA270_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA270_transition[i] = DFA.unpackEncodedString(DFA270_transitionS[i]);
        }
    }

    class DFA270 extends DFA {

        public DFA270(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 270;
            this.eot = DFA270_eot;
            this.eof = DFA270_eof;
            this.min = DFA270_min;
            this.max = DFA270_max;
            this.accept = DFA270_accept;
            this.special = DFA270_special;
            this.transition = DFA270_transition;
        }
        public String getDescription() {
            return "1147:17: ( distinct_key | unique_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA270_1 = input.LA(1);

                         
                        int index270_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_OracleParser()) ) {s = 24;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index270_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 270, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA272_eotS =
        "\20\uffff";
    static final String DFA272_eofS =
        "\1\1\1\uffff\1\1\15\uffff";
    static final String DFA272_minS =
        "\1\6\1\uffff\2\4\1\67\5\uffff\1\4\5\uffff";
    static final String DFA272_maxS =
        "\1\u00ba\1\uffff\2\u00ba\1\136\5\uffff\1\u00ba\5\uffff";
    static final String DFA272_acceptS =
        "\1\uffff\1\2\3\uffff\5\2\1\uffff\4\1\1\2";
    static final String DFA272_specialS =
        "\2\uffff\1\2\1\1\1\0\5\uffff\1\3\5\uffff}>";
    static final String[] DFA272_transitionS = {
            "\1\1\36\uffff\1\1\5\uffff\1\1\5\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\2\1\1\uffff\4\1\7\uffff\5\1\1\uffff\10\1\5\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\6\uffff\1\1\7\uffff\3\1\2\uffff\2\1\5\uffff"+
            "\2\1\2\uffff\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\1\1\2\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\6\uffff\1\1\2\uffff\1\1\3\uffff"+
            "\2\1\1\uffff\1\1\5\uffff\5\1\3\uffff\4\1\1\uffff\3\1\1\2",
            "",
            "\3\1\36\uffff\1\1\4\uffff\2\1\5\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\1\3\1\1\1\uffff\1\11\2\1\1\11\2\uffff\1\1\2\uffff\1\1\1\uffff"+
            "\5\11\1\uffff\7\11\1\1\3\uffff\1\1\1\uffff\1\11\1\1\2\11\1\uffff"+
            "\1\1\1\5\1\1\4\uffff\1\11\1\1\2\uffff\1\7\2\1\1\uffff\1\1\2"+
            "\11\1\1\1\uffff\2\11\2\uffff\2\1\1\uffff\1\11\1\1\2\uffff\1"+
            "\4\1\11\2\uffff\1\11\3\uffff\1\11\1\1\2\11\1\uffff\1\11\2\uffff"+
            "\1\1\1\uffff\1\1\1\6\1\11\1\uffff\2\11\1\uffff\1\1\4\uffff\1"+
            "\11\1\uffff\1\10\1\11\3\uffff\2\11\1\1\1\11\5\uffff\4\11\1\1"+
            "\3\uffff\4\11\1\uffff\3\11\1\1",
            "\3\11\36\uffff\1\11\4\uffff\2\11\5\uffff\1\11\2\uffff\1\11"+
            "\2\uffff\1\11\1\14\2\uffff\1\11\4\uffff\1\11\2\uffff\1\11\16"+
            "\uffff\1\11\3\uffff\1\11\2\uffff\1\11\5\uffff\1\11\5\uffff\1"+
            "\11\3\uffff\2\11\1\uffff\1\11\2\uffff\1\11\5\uffff\2\11\25\uffff"+
            "\1\11\1\uffff\1\11\4\uffff\1\13\1\uffff\1\11\4\uffff\1\11\10"+
            "\uffff\1\11\26\uffff\1\12",
            "\1\15\46\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "\3\11\36\uffff\1\11\3\uffff\3\11\5\uffff\1\11\2\uffff\1\11"+
            "\2\uffff\2\11\1\uffff\4\11\2\uffff\1\11\2\uffff\1\11\1\uffff"+
            "\5\11\1\uffff\6\11\1\uffff\1\11\3\uffff\1\11\1\uffff\2\11\3"+
            "\uffff\1\11\1\16\1\11\5\uffff\1\11\4\uffff\1\11\1\uffff\1\11"+
            "\2\uffff\1\11\5\uffff\2\11\1\uffff\1\17\7\uffff\1\11\5\uffff"+
            "\2\11\4\uffff\1\11\1\uffff\1\11\3\uffff\1\11\2\uffff\1\11\15"+
            "\uffff\1\11\26\uffff\1\11",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA272_eot = DFA.unpackEncodedString(DFA272_eotS);
    static final short[] DFA272_eof = DFA.unpackEncodedString(DFA272_eofS);
    static final char[] DFA272_min = DFA.unpackEncodedStringToUnsignedChars(DFA272_minS);
    static final char[] DFA272_max = DFA.unpackEncodedStringToUnsignedChars(DFA272_maxS);
    static final short[] DFA272_accept = DFA.unpackEncodedString(DFA272_acceptS);
    static final short[] DFA272_special = DFA.unpackEncodedString(DFA272_specialS);
    static final short[][] DFA272_transition;

    static {
        int numStates = DFA272_transitionS.length;
        DFA272_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA272_transition[i] = DFA.unpackEncodedString(DFA272_transitionS[i]);
        }
    }

    class DFA272 extends DFA {

        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = DFA272_eot;
            this.eof = DFA272_eof;
            this.min = DFA272_min;
            this.max = DFA272_max;
            this.accept = DFA272_accept;
            this.special = DFA272_special;
            this.transition = DFA272_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1150:31: ( within_or_over_part )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA272_4 = input.LA(1);

                         
                        int index272_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA272_4==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("within")))) {s = 13;}

                        else if ( (LA272_4==SQL92_RESERVED_BY) ) {s = 9;}

                         
                        input.seek(index272_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA272_3 = input.LA(1);

                         
                        int index272_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA272_3>=UNSIGNED_INTEGER && LA272_3<=MINUS_SIGN)||LA272_3==NATIONAL_CHAR_STRING_LIT||(LA272_3>=EXACT_NUM_LIT && LA272_3<=CHAR_STRING)||LA272_3==CHAR_STRING_PERL||LA272_3==DELIMITED_ID||LA272_3==LEFT_PAREN||LA272_3==PLUS_SIGN||LA272_3==COLON||LA272_3==BINDVAR||LA272_3==INTRODUCER||LA272_3==SQL92_RESERVED_ALL||LA272_3==SQL92_RESERVED_ANY||LA272_3==SQL92_RESERVED_CASE||LA272_3==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA272_3>=SQL92_RESERVED_CURSOR && LA272_3<=SQL92_RESERVED_DATE)||LA272_3==SQL92_RESERVED_DEFAULT||LA272_3==SQL92_RESERVED_DISTINCT||(LA272_3>=SQL92_RESERVED_EXISTS && LA272_3<=SQL92_RESERVED_FALSE)||LA272_3==SQL92_RESERVED_NOT||LA272_3==SQL92_RESERVED_NULL||LA272_3==SQL92_RESERVED_PRIOR||LA272_3==SQL92_RESERVED_SELECT||LA272_3==SQL92_RESERVED_TRUE) ) {s = 9;}

                        else if ( (LA272_3==REGULAR_ID) ) {s = 10;}

                        else if ( (LA272_3==SQL92_RESERVED_ORDER) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {s = 11;}

                        else if ( (LA272_3==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {s = 12;}

                         
                        input.seek(index272_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA272_2 = input.LA(1);

                         
                        int index272_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA272_2==EOF||(LA272_2>=UNSIGNED_INTEGER && LA272_2<=MINUS_SIGN)||LA272_2==NATIONAL_CHAR_STRING_LIT||(LA272_2>=EXACT_NUM_LIT && LA272_2<=CHAR_STRING)||LA272_2==CHAR_STRING_PERL||LA272_2==DELIMITED_ID||LA272_2==RIGHT_PAREN||(LA272_2>=PLUS_SIGN && LA272_2<=COMMA)||LA272_2==COLON||LA272_2==BINDVAR||LA272_2==INTRODUCER||LA272_2==SQL92_RESERVED_ALL||LA272_2==SQL92_RESERVED_ANY||LA272_2==SQL92_RESERVED_BETWEEN||LA272_2==SQL92_RESERVED_CASE||LA272_2==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||(LA272_2>=SQL92_RESERVED_CURSOR && LA272_2<=SQL92_RESERVED_DATE)||LA272_2==SQL92_RESERVED_DEFAULT||LA272_2==SQL92_RESERVED_DISTINCT||(LA272_2>=SQL92_RESERVED_EXISTS && LA272_2<=SQL92_RESERVED_FALSE)||LA272_2==SQL92_RESERVED_FROM||LA272_2==SQL92_RESERVED_INTO||LA272_2==SQL92_RESERVED_NOT||LA272_2==SQL92_RESERVED_NULL||LA272_2==SQL92_RESERVED_PRIOR||LA272_2==SQL92_RESERVED_TRUE||LA272_2==PLSQL_NON_RESERVED_MODEL||LA272_2==REGULAR_ID) ) {s = 1;}

                        else if ( (LA272_2==LEFT_PAREN) ) {s = 3;}

                        else if ( (LA272_2==SQL92_RESERVED_GROUP) ) {s = 4;}

                        else if ( (LA272_2==SQL92_RESERVED_BY) && (((input.LT(1).getText().equalsIgnoreCase("passing"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {s = 5;}

                        else if ( (LA272_2==SQL92_RESERVED_OF) && (((input.LT(1).getText().equalsIgnoreCase("submultiset"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {s = 6;}

                        else if ( (LA272_2==SQL92_RESERVED_CURRENT) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {s = 7;}

                        else if ( (LA272_2==SQL92_RESERVED_SIZE) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {s = 8;}

                        else if ( (LA272_2==ASTERISK||LA272_2==SOLIDUS||(LA272_2>=LESS_THAN_OR_EQUALS_OP && LA272_2<=CARRET_OPERATOR_PART)||(LA272_2>=EXCLAMATION_OPERATOR_PART && LA272_2<=RIGHT_BRACKET)||LA272_2==SQL92_RESERVED_AND||(LA272_2>=SQL92_RESERVED_AS && LA272_2<=SQL92_RESERVED_ASC)||LA272_2==SQL92_RESERVED_CONNECT||(LA272_2>=SQL92_RESERVED_DELETE && LA272_2<=SQL92_RESERVED_DESC)||(LA272_2>=SQL92_RESERVED_ELSE && LA272_2<=SQL92_RESERVED_END)||LA272_2==SQL92_RESERVED_FOR||LA272_2==SQL92_RESERVED_HAVING||LA272_2==SQL92_RESERVED_IN||LA272_2==SQL92_RESERVED_INTERSECT||(LA272_2>=SQL92_RESERVED_IS && LA272_2<=SQL92_RESERVED_LIKE)||LA272_2==PLSQL_RESERVED_MINUS||LA272_2==SQL92_RESERVED_ON||(LA272_2>=SQL92_RESERVED_OR && LA272_2<=SQL92_RESERVED_ORDER)||LA272_2==SQL92_RESERVED_SELECT||LA272_2==PLSQL_RESERVED_START||(LA272_2>=SQL92_RESERVED_THEN && LA272_2<=SQL92_RESERVED_TO)||LA272_2==SQL92_RESERVED_UNION||(LA272_2>=SQL92_RESERVED_WHEN && LA272_2<=PLSQL_NON_RESERVED_USING)||(LA272_2>=JOIN && LA272_2<=FULL)||(LA272_2>=CROSS && LA272_2<=INNER)) ) {s = 9;}

                         
                        input.seek(index272_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA272_10 = input.LA(1);

                         
                        int index272_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA272_10>=UNSIGNED_INTEGER && LA272_10<=MINUS_SIGN)||LA272_10==NATIONAL_CHAR_STRING_LIT||(LA272_10>=PERIOD && LA272_10<=CHAR_STRING)||LA272_10==CHAR_STRING_PERL||LA272_10==DELIMITED_ID||(LA272_10>=LEFT_PAREN && LA272_10<=RIGHT_PAREN)||(LA272_10>=ASTERISK && LA272_10<=SOLIDUS)||LA272_10==COLON||LA272_10==BINDVAR||(LA272_10>=LESS_THAN_OR_EQUALS_OP && LA272_10<=CARRET_OPERATOR_PART)||(LA272_10>=EXCLAMATION_OPERATOR_PART && LA272_10<=LEFT_BRACKET)||LA272_10==INTRODUCER||LA272_10==SQL92_RESERVED_ALL||(LA272_10>=SQL92_RESERVED_AND && LA272_10<=SQL92_RESERVED_ANY)||LA272_10==SQL92_RESERVED_BETWEEN||LA272_10==SQL92_RESERVED_CASE||LA272_10==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA272_10==SQL92_RESERVED_DATE||LA272_10==SQL92_RESERVED_DEFAULT||LA272_10==SQL92_RESERVED_DISTINCT||(LA272_10>=SQL92_RESERVED_EXISTS && LA272_10<=SQL92_RESERVED_FALSE)||LA272_10==SQL92_RESERVED_IN||(LA272_10>=SQL92_RESERVED_IS && LA272_10<=SQL92_RESERVED_LIKE)||LA272_10==SQL92_RESERVED_NOT||LA272_10==SQL92_RESERVED_NULL||LA272_10==SQL92_RESERVED_OR||LA272_10==SQL92_RESERVED_PRIOR||LA272_10==SQL92_RESERVED_TRUE||LA272_10==REGULAR_ID) ) {s = 9;}

                        else if ( (LA272_10==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {s = 14;}

                        else if ( (LA272_10==SQL92_RESERVED_FOR) && (((input.LT(1).getText().equalsIgnoreCase("unpivot"))))) {s = 15;}

                         
                        input.seek(index272_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 272, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA287_eotS =
        "\25\uffff";
    static final String DFA287_eofS =
        "\25\uffff";
    static final String DFA287_minS =
        "\2\4\1\6\2\uffff\1\6\17\uffff";
    static final String DFA287_maxS =
        "\3\u00ba\2\uffff\1\u00ba\17\uffff";
    static final String DFA287_acceptS =
        "\3\uffff\1\1\1\2\1\uffff\17\2";
    static final String DFA287_specialS =
        "\1\uffff\1\0\23\uffff}>";
    static final String[] DFA287_transitionS = {
            "\3\4\36\uffff\1\2\4\uffff\1\4\1\2\5\uffff\1\2\2\uffff\1\4\2"+
            "\uffff\1\4\3\uffff\1\4\4\uffff\1\4\2\uffff\1\4\16\uffff\1\4"+
            "\3\uffff\1\4\2\uffff\1\4\5\uffff\1\4\5\uffff\1\4\4\uffff\1\4"+
            "\1\uffff\1\4\2\uffff\1\4\5\uffff\2\4\2\uffff\1\3\24\uffff\1"+
            "\4\6\uffff\1\4\15\uffff\1\4\26\uffff\1\1",
            "\2\16\1\4\36\uffff\1\5\3\uffff\1\4\1\16\1\5\5\uffff\1\5\2"+
            "\uffff\1\7\2\uffff\2\4\1\uffff\2\4\1\uffff\1\4\2\uffff\1\4\2"+
            "\uffff\1\4\11\uffff\2\4\1\uffff\1\4\1\uffff\1\6\3\uffff\1\13"+
            "\2\uffff\1\15\5\uffff\1\4\5\uffff\1\11\4\uffff\1\17\1\uffff"+
            "\1\23\2\uffff\1\12\5\uffff\1\14\1\22\2\uffff\1\3\24\uffff\1"+
            "\20\6\uffff\1\10\15\uffff\1\21\26\uffff\1\4",
            "\1\24\61\uffff\1\24\1\uffff\2\24\1\uffff\1\24\17\uffff\2\24"+
            "\1\uffff\1\24\50\uffff\1\3\100\uffff\1\24",
            "",
            "",
            "\1\24\61\uffff\1\24\1\uffff\2\24\1\uffff\1\24\17\uffff\2\24"+
            "\1\uffff\1\24\50\uffff\1\3\100\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA287_eot = DFA.unpackEncodedString(DFA287_eotS);
    static final short[] DFA287_eof = DFA.unpackEncodedString(DFA287_eofS);
    static final char[] DFA287_min = DFA.unpackEncodedStringToUnsignedChars(DFA287_minS);
    static final char[] DFA287_max = DFA.unpackEncodedStringToUnsignedChars(DFA287_maxS);
    static final short[] DFA287_accept = DFA.unpackEncodedString(DFA287_acceptS);
    static final short[] DFA287_special = DFA.unpackEncodedString(DFA287_specialS);
    static final short[][] DFA287_transition;

    static {
        int numStates = DFA287_transitionS.length;
        DFA287_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA287_transition[i] = DFA.unpackEncodedString(DFA287_transitionS[i]);
        }
    }

    class DFA287 extends DFA {

        public DFA287(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 287;
            this.eot = DFA287_eot;
            this.eof = DFA287_eof;
            this.min = DFA287_min;
            this.max = DFA287_max;
            this.accept = DFA287_accept;
            this.special = DFA287_special;
            this.transition = DFA287_transition;
        }
        public String getDescription() {
            return "1181:17: ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA287_1 = input.LA(1);

                         
                        int index287_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA287_1==MINUS_SIGN||LA287_1==PERIOD||(LA287_1>=LEFT_PAREN && LA287_1<=RIGHT_PAREN)||(LA287_1>=ASTERISK && LA287_1<=PLUS_SIGN)||LA287_1==SOLIDUS||LA287_1==COLON||LA287_1==BINDVAR||(LA287_1>=CONCATENATION_OP && LA287_1<=VERTICAL_BAR)||LA287_1==LEFT_BRACKET||LA287_1==SQL92_RESERVED_CASE||LA287_1==REGULAR_ID) ) {s = 4;}

                        else if ( (LA287_1==NATIONAL_CHAR_STRING_LIT||LA287_1==CHAR_STRING||LA287_1==CHAR_STRING_PERL) ) {s = 5;}

                        else if ( (LA287_1==SQL92_RESERVED_FROM) ) {s = 3;}

                        else if ( (LA287_1==INTRODUCER) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {s = 6;}

                        else if ( (LA287_1==DELIMITED_ID) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {s = 7;}

                        else if ( (LA287_1==SQL92_RESERVED_PRIOR) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 8;}

                        else if ( (LA287_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 9;}

                        else if ( (LA287_1==SQL92_RESERVED_DISTINCT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 10;}

                        else if ( (LA287_1==SQL92_RESERVED_ALL) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))))) {s = 11;}

                        else if ( (LA287_1==SQL92_RESERVED_EXISTS) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 12;}

                        else if ( (LA287_1==SQL92_RESERVED_ANY) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 13;}

                        else if ( ((LA287_1>=UNSIGNED_INTEGER && LA287_1<=APPROXIMATE_NUM_LIT)||LA287_1==EXACT_NUM_LIT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 14;}

                        else if ( (LA287_1==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 15;}

                        else if ( (LA287_1==SQL92_RESERVED_NULL) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 16;}

                        else if ( (LA287_1==SQL92_RESERVED_TRUE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 17;}

                        else if ( (LA287_1==SQL92_RESERVED_FALSE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 18;}

                        else if ( (LA287_1==SQL92_RESERVED_DEFAULT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 19;}

                         
                        input.seek(index287_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 287, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA303_eotS =
        "\16\uffff";
    static final String DFA303_eofS =
        "\16\uffff";
    static final String DFA303_minS =
        "\1\u00ba\1\4\1\64\2\0\1\uffff\2\51\1\uffff\1\64\2\0\2\51";
    static final String DFA303_maxS =
        "\3\u00ba\2\0\1\uffff\2\u00ba\1\uffff\1\u00ba\2\0\2\u00ba";
    static final String DFA303_acceptS =
        "\5\uffff\1\2\2\uffff\1\1\5\uffff";
    static final String DFA303_specialS =
        "\1\7\1\3\1\4\1\5\1\0\1\uffff\1\10\1\11\1\uffff\1\1\1\13\1\6\1\12"+
        "\1\2}>";
    static final String[] DFA303_transitionS = {
            "\1\1",
            "\3\5\36\uffff\1\5\4\uffff\2\5\5\uffff\1\5\2\uffff\1\4\2\uffff"+
            "\1\5\3\uffff\1\5\4\uffff\1\5\2\uffff\1\5\16\uffff\1\2\3\uffff"+
            "\1\5\2\uffff\1\5\5\uffff\1\5\5\uffff\1\5\4\uffff\1\5\1\uffff"+
            "\1\5\2\uffff\1\5\5\uffff\2\5\27\uffff\1\5\6\uffff\1\5\15\uffff"+
            "\1\5\26\uffff\1\3",
            "\1\7\u0085\uffff\1\6",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\11\12\uffff\1\13\u0085\uffff\1\12",
            "\1\11\12\uffff\1\13\u0085\uffff\1\12",
            "",
            "\1\15\u0085\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\11\12\uffff\1\13\u0085\uffff\1\12",
            "\1\11\12\uffff\1\13\u0085\uffff\1\12"
    };

    static final short[] DFA303_eot = DFA.unpackEncodedString(DFA303_eotS);
    static final short[] DFA303_eof = DFA.unpackEncodedString(DFA303_eofS);
    static final char[] DFA303_min = DFA.unpackEncodedStringToUnsignedChars(DFA303_minS);
    static final char[] DFA303_max = DFA.unpackEncodedStringToUnsignedChars(DFA303_maxS);
    static final short[] DFA303_accept = DFA.unpackEncodedString(DFA303_acceptS);
    static final short[] DFA303_special = DFA.unpackEncodedString(DFA303_specialS);
    static final short[][] DFA303_transition;

    static {
        int numStates = DFA303_transitionS.length;
        DFA303_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA303_transition[i] = DFA.unpackEncodedString(DFA303_transitionS[i]);
        }
    }

    class DFA303 extends DFA {

        public DFA303(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 303;
            this.eot = DFA303_eot;
            this.eof = DFA303_eof;
            this.min = DFA303_min;
            this.max = DFA303_max;
            this.accept = DFA303_accept;
            this.special = DFA303_special;
            this.transition = DFA303_transition;
        }
        public String getDescription() {
            return "1214:17: ( name_key id | evalname_key concatenation_wrapper )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA303_4 = input.LA(1);

                         
                        int index303_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred416_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("name")))) ) {s = 8;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 5;}

                         
                        input.seek(index303_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA303_9 = input.LA(1);

                         
                        int index303_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA303_9==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 12;}

                        else if ( (LA303_9==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 13;}

                         
                        input.seek(index303_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA303_13 = input.LA(1);

                         
                        int index303_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA303_13==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 10;}

                        else if ( (LA303_13==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 11;}

                        else if ( (LA303_13==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 9;}

                         
                        input.seek(index303_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA303_1 = input.LA(1);

                         
                        int index303_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA303_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 2;}

                        else if ( (LA303_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 3;}

                        else if ( (LA303_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 4;}

                        else if ( ((LA303_1>=UNSIGNED_INTEGER && LA303_1<=MINUS_SIGN)||LA303_1==NATIONAL_CHAR_STRING_LIT||(LA303_1>=EXACT_NUM_LIT && LA303_1<=CHAR_STRING)||LA303_1==CHAR_STRING_PERL||LA303_1==LEFT_PAREN||LA303_1==PLUS_SIGN||LA303_1==COLON||LA303_1==BINDVAR||LA303_1==SQL92_RESERVED_ALL||LA303_1==SQL92_RESERVED_ANY||LA303_1==SQL92_RESERVED_CASE||LA303_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA303_1==SQL92_RESERVED_DATE||LA303_1==SQL92_RESERVED_DEFAULT||LA303_1==SQL92_RESERVED_DISTINCT||(LA303_1>=SQL92_RESERVED_EXISTS && LA303_1<=SQL92_RESERVED_FALSE)||LA303_1==SQL92_RESERVED_NULL||LA303_1==SQL92_RESERVED_PRIOR||LA303_1==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 5;}

                         
                        input.seek(index303_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA303_2 = input.LA(1);

                         
                        int index303_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA303_2==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 6;}

                        else if ( (LA303_2==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 7;}

                         
                        input.seek(index303_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA303_3 = input.LA(1);

                         
                        int index303_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred416_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("name")))) ) {s = 8;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 5;}

                         
                        input.seek(index303_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA303_11 = input.LA(1);

                         
                        int index303_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred416_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("name")))) ) {s = 8;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 5;}

                         
                        input.seek(index303_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA303_0 = input.LA(1);

                         
                        int index303_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA303_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 1;}

                         
                        input.seek(index303_0);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA303_6 = input.LA(1);

                         
                        int index303_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA303_6==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 9;}

                        else if ( (LA303_6==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 10;}

                        else if ( (LA303_6==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 11;}

                         
                        input.seek(index303_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA303_7 = input.LA(1);

                         
                        int index303_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA303_7==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 9;}

                        else if ( (LA303_7==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 10;}

                        else if ( (LA303_7==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 11;}

                         
                        input.seek(index303_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA303_12 = input.LA(1);

                         
                        int index303_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA303_12==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 10;}

                        else if ( (LA303_12==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 11;}

                        else if ( (LA303_12==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 9;}

                         
                        input.seek(index303_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA303_10 = input.LA(1);

                         
                        int index303_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred416_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("name")))) ) {s = 8;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 5;}

                         
                        input.seek(index303_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 303, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA306_eotS =
        "\117\uffff";
    static final String DFA306_eofS =
        "\117\uffff";
    static final String DFA306_minS =
        "\1\u00ba\2\4\70\uffff\1\6\23\uffff";
    static final String DFA306_maxS =
        "\3\u00ba\70\uffff\1\u00ba\23\uffff";
    static final String DFA306_acceptS =
        "\3\uffff\70\1\1\uffff\1\2\22\1";
    static final String DFA306_specialS =
        "\1\3\1\2\1\1\70\uffff\1\0\23\uffff}>";
    static final String[] DFA306_transitionS = {
            "\1\1",
            "\2\23\1\6\36\uffff\1\25\4\uffff\1\23\1\25\5\uffff\1\25\2\uffff"+
            "\1\14\2\uffff\1\32\3\uffff\1\7\4\uffff\1\22\2\uffff\1\21\16"+
            "\uffff\1\20\3\uffff\1\13\2\uffff\1\17\4\uffff\1\3\1\15\5\uffff"+
            "\1\11\3\uffff\1\4\1\24\1\uffff\1\31\2\uffff\1\12\5\uffff\1\16"+
            "\1\30\25\uffff\1\5\1\uffff\1\26\6\uffff\1\10\15\uffff\1\27\26"+
            "\uffff\1\2",
            "\2\104\1\33\36\uffff\1\34\3\uffff\1\72\1\104\1\34\5\uffff"+
            "\1\34\2\uffff\1\70\2\uffff\1\37\1\74\1\uffff\1\42\1\44\1\71"+
            "\1\43\2\uffff\1\36\2\uffff\1\35\1\uffff\1\61\1\55\1\62\1\54"+
            "\1\57\1\uffff\1\56\1\60\1\45\1\46\1\53\1\40\1\uffff\1\67\3\uffff"+
            "\1\100\1\uffff\1\64\1\103\1\66\2\uffff\1\51\1\uffff\1\101\5"+
            "\uffff\1\76\4\uffff\1\105\1\uffff\1\110\2\uffff\1\77\5\uffff"+
            "\1\102\1\107\11\uffff\1\50\5\uffff\1\63\1\52\4\uffff\1\47\1"+
            "\uffff\1\73\3\uffff\1\65\2\uffff\1\75\15\uffff\1\106\26\uffff"+
            "\1\41",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\113\36\uffff\1\116\5\uffff\1\116\5\uffff\1\116\2\uffff"+
            "\1\115\5\uffff\1\42\1\112\1\71\1\43\7\uffff\1\61\1\55\1\62\1"+
            "\54\1\57\1\uffff\1\56\1\60\1\45\1\46\1\53\1\40\1\uffff\1\114"+
            "\5\uffff\1\64\1\uffff\1\66\2\uffff\1\51\42\uffff\1\50\5\uffff"+
            "\1\63\1\52\4\uffff\1\47\3\uffff\1\74\1\uffff\1\65\47\uffff\1"+
            "\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA306_eot = DFA.unpackEncodedString(DFA306_eotS);
    static final short[] DFA306_eof = DFA.unpackEncodedString(DFA306_eofS);
    static final char[] DFA306_min = DFA.unpackEncodedStringToUnsignedChars(DFA306_minS);
    static final char[] DFA306_max = DFA.unpackEncodedStringToUnsignedChars(DFA306_maxS);
    static final short[] DFA306_accept = DFA.unpackEncodedString(DFA306_acceptS);
    static final short[] DFA306_special = DFA.unpackEncodedString(DFA306_specialS);
    static final short[][] DFA306_transition;

    static {
        int numStates = DFA306_transitionS.length;
        DFA306_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA306_transition[i] = DFA.unpackEncodedString(DFA306_transitionS[i]);
        }
    }

    class DFA306 extends DFA {

        public DFA306(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 306;
            this.eot = DFA306_eot;
            this.eof = DFA306_eof;
            this.min = DFA306_min;
            this.max = DFA306_max;
            this.accept = DFA306_accept;
            this.special = DFA306_special;
            this.transition = DFA306_transition;
        }
        public String getDescription() {
            return "1222:39: ( xml_passing_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA306_59 = input.LA(1);

                         
                        int index306_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA306_59==SQL92_RESERVED_ON) && ((input.LT(1).getText().equalsIgnoreCase("returning")))) {s = 60;}

                        else if ( (LA306_59==LEFT_BRACKET) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 32;}

                        else if ( (LA306_59==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 73;}

                        else if ( (LA306_59==ASTERISK) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 34;}

                        else if ( (LA306_59==SOLIDUS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 35;}

                        else if ( (LA306_59==PLUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 74;}

                        else if ( (LA306_59==MINUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 75;}

                        else if ( (LA306_59==CONCATENATION_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 37;}

                        else if ( (LA306_59==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 38;}

                        else if ( (LA306_59==SQL92_RESERVED_NOT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 39;}

                        else if ( (LA306_59==SQL92_RESERVED_IN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 40;}

                        else if ( (LA306_59==SQL92_RESERVED_BETWEEN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 41;}

                        else if ( (LA306_59==SQL92_RESERVED_LIKE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 42;}

                        else if ( (LA306_59==EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 43;}

                        else if ( (LA306_59==NOT_EQUAL_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 44;}

                        else if ( (LA306_59==LESS_THAN_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 45;}

                        else if ( (LA306_59==EXCLAMATION_OPERATOR_PART) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 46;}

                        else if ( (LA306_59==CARRET_OPERATOR_PART) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 47;}

                        else if ( (LA306_59==GREATER_THAN_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 48;}

                        else if ( (LA306_59==LESS_THAN_OR_EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 49;}

                        else if ( (LA306_59==GREATER_THAN_OR_EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 50;}

                        else if ( (LA306_59==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 51;}

                        else if ( (LA306_59==SQL92_RESERVED_AND) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 52;}

                        else if ( (LA306_59==SQL92_RESERVED_OR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 53;}

                        else if ( (LA306_59==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 54;}

                        else if ( (LA306_59==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 76;}

                        else if ( (LA306_59==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 77;}

                        else if ( (LA306_59==NATIONAL_CHAR_STRING_LIT||LA306_59==CHAR_STRING||LA306_59==CHAR_STRING_PERL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 78;}

                        else if ( (LA306_59==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 57;}

                         
                        input.seek(index306_59);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA306_2 = input.LA(1);

                         
                        int index306_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA306_2==MINUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 27;}

                        else if ( (LA306_2==NATIONAL_CHAR_STRING_LIT||LA306_2==CHAR_STRING||LA306_2==CHAR_STRING_PERL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 28;}

                        else if ( (LA306_2==BINDVAR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 29;}

                        else if ( (LA306_2==COLON) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 30;}

                        else if ( (LA306_2==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 31;}

                        else if ( (LA306_2==LEFT_BRACKET) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 32;}

                        else if ( (LA306_2==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 33;}

                        else if ( (LA306_2==ASTERISK) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 34;}

                        else if ( (LA306_2==SOLIDUS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 35;}

                        else if ( (LA306_2==PLUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 36;}

                        else if ( (LA306_2==CONCATENATION_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 37;}

                        else if ( (LA306_2==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 38;}

                        else if ( (LA306_2==SQL92_RESERVED_NOT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 39;}

                        else if ( (LA306_2==SQL92_RESERVED_IN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 40;}

                        else if ( (LA306_2==SQL92_RESERVED_BETWEEN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 41;}

                        else if ( (LA306_2==SQL92_RESERVED_LIKE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 42;}

                        else if ( (LA306_2==EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 43;}

                        else if ( (LA306_2==NOT_EQUAL_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 44;}

                        else if ( (LA306_2==LESS_THAN_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 45;}

                        else if ( (LA306_2==EXCLAMATION_OPERATOR_PART) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 46;}

                        else if ( (LA306_2==CARRET_OPERATOR_PART) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 47;}

                        else if ( (LA306_2==GREATER_THAN_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 48;}

                        else if ( (LA306_2==LESS_THAN_OR_EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 49;}

                        else if ( (LA306_2==GREATER_THAN_OR_EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 50;}

                        else if ( (LA306_2==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 51;}

                        else if ( (LA306_2==SQL92_RESERVED_AND) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 52;}

                        else if ( (LA306_2==SQL92_RESERVED_OR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 53;}

                        else if ( (LA306_2==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 54;}

                        else if ( (LA306_2==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 55;}

                        else if ( (LA306_2==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 56;}

                        else if ( (LA306_2==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 57;}

                        else if ( (LA306_2==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 58;}

                        else if ( (LA306_2==SQL92_RESERVED_NULL) && ((input.LT(1).getText().equalsIgnoreCase("returning")))) {s = 59;}

                        else if ( (LA306_2==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("returning")))) {s = 60;}

                        else if ( (LA306_2==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 61;}

                        else if ( (LA306_2==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 62;}

                        else if ( (LA306_2==SQL92_RESERVED_DISTINCT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 63;}

                        else if ( (LA306_2==SQL92_RESERVED_ALL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 64;}

                        else if ( (LA306_2==SQL92_RESERVED_CASE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 65;}

                        else if ( (LA306_2==SQL92_RESERVED_EXISTS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 66;}

                        else if ( (LA306_2==SQL92_RESERVED_ANY) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 67;}

                        else if ( ((LA306_2>=UNSIGNED_INTEGER && LA306_2<=APPROXIMATE_NUM_LIT)||LA306_2==EXACT_NUM_LIT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 68;}

                        else if ( (LA306_2==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 69;}

                        else if ( (LA306_2==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 70;}

                        else if ( (LA306_2==SQL92_RESERVED_FALSE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 71;}

                        else if ( (LA306_2==SQL92_RESERVED_DEFAULT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 72;}

                         
                        input.seek(index306_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA306_1 = input.LA(1);

                         
                        int index306_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA306_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("returning")))) {s = 2;}

                        else if ( (LA306_1==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 3;}

                        else if ( (LA306_1==SQL92_RESERVED_CURSOR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 4;}

                        else if ( (LA306_1==SQL92_RESERVED_NOT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 5;}

                        else if ( (LA306_1==MINUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 6;}

                        else if ( (LA306_1==PLUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 7;}

                        else if ( (LA306_1==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 8;}

                        else if ( (LA306_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 9;}

                        else if ( (LA306_1==SQL92_RESERVED_DISTINCT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 10;}

                        else if ( (LA306_1==SQL92_RESERVED_ALL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 11;}

                        else if ( (LA306_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 12;}

                        else if ( (LA306_1==SQL92_RESERVED_CASE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 13;}

                        else if ( (LA306_1==SQL92_RESERVED_EXISTS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 14;}

                        else if ( (LA306_1==SQL92_RESERVED_ANY) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 15;}

                        else if ( (LA306_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 16;}

                        else if ( (LA306_1==BINDVAR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 17;}

                        else if ( (LA306_1==COLON) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 18;}

                        else if ( ((LA306_1>=UNSIGNED_INTEGER && LA306_1<=APPROXIMATE_NUM_LIT)||LA306_1==EXACT_NUM_LIT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 19;}

                        else if ( (LA306_1==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 20;}

                        else if ( (LA306_1==NATIONAL_CHAR_STRING_LIT||LA306_1==CHAR_STRING||LA306_1==CHAR_STRING_PERL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 21;}

                        else if ( (LA306_1==SQL92_RESERVED_NULL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 22;}

                        else if ( (LA306_1==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 23;}

                        else if ( (LA306_1==SQL92_RESERVED_FALSE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 24;}

                        else if ( (LA306_1==SQL92_RESERVED_DEFAULT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 25;}

                        else if ( (LA306_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 26;}

                         
                        input.seek(index306_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA306_0 = input.LA(1);

                         
                        int index306_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA306_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("returning")))) {s = 1;}

                         
                        input.seek(index306_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 306, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA314_eotS =
        "\32\uffff";
    static final String DFA314_eofS =
        "\32\uffff";
    static final String DFA314_minS =
        "\1\70\1\4\1\uffff\1\0\26\uffff";
    static final String DFA314_maxS =
        "\2\u00ba\1\uffff\1\0\26\uffff";
    static final String DFA314_acceptS =
        "\2\uffff\1\2\1\uffff\1\2\25\1";
    static final String DFA314_specialS =
        "\1\2\1\1\1\uffff\1\0\26\uffff}>";
    static final String[] DFA314_transitionS = {
            "\1\2\u0081\uffff\1\1",
            "\2\22\1\5\36\uffff\1\24\4\uffff\1\22\1\24\5\uffff\1\24\2\uffff"+
            "\1\13\2\uffff\1\31\1\4\2\uffff\1\6\4\uffff\1\21\2\uffff\1\20"+
            "\16\uffff\1\17\3\uffff\1\12\2\uffff\1\16\5\uffff\1\14\5\uffff"+
            "\1\10\4\uffff\1\23\1\uffff\1\30\2\uffff\1\11\5\uffff\1\15\1"+
            "\27\27\uffff\1\25\6\uffff\1\7\6\uffff\1\4\6\uffff\1\26\26\uffff"+
            "\1\3",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA314_eot = DFA.unpackEncodedString(DFA314_eotS);
    static final short[] DFA314_eof = DFA.unpackEncodedString(DFA314_eofS);
    static final char[] DFA314_min = DFA.unpackEncodedStringToUnsignedChars(DFA314_minS);
    static final char[] DFA314_max = DFA.unpackEncodedStringToUnsignedChars(DFA314_maxS);
    static final short[] DFA314_accept = DFA.unpackEncodedString(DFA314_acceptS);
    static final short[] DFA314_special = DFA.unpackEncodedString(DFA314_specialS);
    static final short[][] DFA314_transition;

    static {
        int numStates = DFA314_transitionS.length;
        DFA314_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA314_transition[i] = DFA.unpackEncodedString(DFA314_transitionS[i]);
        }
    }

    class DFA314 extends DFA {

        public DFA314(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 314;
            this.eot = DFA314_eot;
            this.eof = DFA314_eof;
            this.min = DFA314_min;
            this.max = DFA314_max;
            this.accept = DFA314_accept;
            this.special = DFA314_special;
            this.transition = DFA314_transition;
        }
        public String getDescription() {
            return "1238:17: ( xmlserialize_param_version_part )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA314_3 = input.LA(1);

                         
                        int index314_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred430_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("version")))) ) {s = 25;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show")))) ) {s = 4;}

                         
                        input.seek(index314_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA314_1 = input.LA(1);

                         
                        int index314_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {s = 3;}

                        else if ( (LA314_1==RIGHT_PAREN||LA314_1==SQL92_RESERVED_SIZE) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {s = 4;}

                        else if ( (LA314_1==MINUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 5;}

                        else if ( (LA314_1==PLUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 6;}

                        else if ( (LA314_1==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 7;}

                        else if ( (LA314_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 8;}

                        else if ( (LA314_1==SQL92_RESERVED_DISTINCT) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 9;}

                        else if ( (LA314_1==SQL92_RESERVED_ALL) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 10;}

                        else if ( (LA314_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 11;}

                        else if ( (LA314_1==SQL92_RESERVED_CASE) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 12;}

                        else if ( (LA314_1==SQL92_RESERVED_EXISTS) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 13;}

                        else if ( (LA314_1==SQL92_RESERVED_ANY) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 14;}

                        else if ( (LA314_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 15;}

                        else if ( (LA314_1==BINDVAR) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 16;}

                        else if ( (LA314_1==COLON) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 17;}

                        else if ( ((LA314_1>=UNSIGNED_INTEGER && LA314_1<=APPROXIMATE_NUM_LIT)||LA314_1==EXACT_NUM_LIT) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 18;}

                        else if ( (LA314_1==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 19;}

                        else if ( (LA314_1==NATIONAL_CHAR_STRING_LIT||LA314_1==CHAR_STRING||LA314_1==CHAR_STRING_PERL) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 20;}

                        else if ( (LA314_1==SQL92_RESERVED_NULL) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 21;}

                        else if ( (LA314_1==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 22;}

                        else if ( (LA314_1==SQL92_RESERVED_FALSE) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 23;}

                        else if ( (LA314_1==SQL92_RESERVED_DEFAULT) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 24;}

                        else if ( (LA314_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 25;}

                         
                        input.seek(index314_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA314_0 = input.LA(1);

                         
                        int index314_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {s = 1;}

                        else if ( (LA314_0==RIGHT_PAREN) ) {s = 2;}

                         
                        input.seek(index314_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 314, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA319_eotS =
        "\30\uffff";
    static final String DFA319_eofS =
        "\30\uffff";
    static final String DFA319_minS =
        "\1\4\1\0\26\uffff";
    static final String DFA319_maxS =
        "\1\u00ba\1\0\26\uffff";
    static final String DFA319_acceptS =
        "\2\uffff\1\2\24\uffff\1\1";
    static final String DFA319_specialS =
        "\1\uffff\1\0\26\uffff}>";
    static final String[] DFA319_transitionS = {
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\1\2\16\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\2\2\27\uffff\1\2\6\uffff\1\2\15\uffff"+
            "\1\2\26\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA319_eot = DFA.unpackEncodedString(DFA319_eotS);
    static final short[] DFA319_eof = DFA.unpackEncodedString(DFA319_eofS);
    static final char[] DFA319_min = DFA.unpackEncodedStringToUnsignedChars(DFA319_minS);
    static final char[] DFA319_max = DFA.unpackEncodedStringToUnsignedChars(DFA319_maxS);
    static final short[] DFA319_accept = DFA.unpackEncodedString(DFA319_acceptS);
    static final short[] DFA319_special = DFA.unpackEncodedString(DFA319_specialS);
    static final short[][] DFA319_transition;

    static {
        int numStates = DFA319_transitionS.length;
        DFA319_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA319_transition[i] = DFA.unpackEncodedString(DFA319_transitionS[i]);
        }
    }

    class DFA319 extends DFA {

        public DFA319(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 319;
            this.eot = DFA319_eot;
            this.eof = DFA319_eof;
            this.min = DFA319_min;
            this.max = DFA319_max;
            this.accept = DFA319_accept;
            this.special = DFA319_special;
            this.transition = DFA319_transition;
        }
        public String getDescription() {
            return "1245:17: ( xml_namespaces_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA319_1 = input.LA(1);

                         
                        int index319_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred436_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("xmlnamespaces")))) ) {s = 23;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index319_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 319, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA330_eotS =
        "\25\uffff";
    static final String DFA330_eofS =
        "\25\uffff";
    static final String DFA330_minS =
        "\2\4\3\uffff\1\0\17\uffff";
    static final String DFA330_maxS =
        "\2\u00ba\3\uffff\1\0\17\uffff";
    static final String DFA330_acceptS =
        "\2\uffff\1\2\2\3\1\uffff\16\3\1\1";
    static final String DFA330_specialS =
        "\1\uffff\1\1\3\uffff\1\0\17\uffff}>";
    static final String[] DFA330_transitionS = {
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\2\uffff\1\2\1\uffff"+
            "\1\3\1\uffff\1\3\2\uffff\1\3\5\uffff\2\3\27\uffff\1\3\6\uffff"+
            "\1\3\15\uffff\1\3\26\uffff\1\1",
            "\2\16\1\3\36\uffff\1\3\3\uffff\1\7\1\16\1\3\5\uffff\1\3\2"+
            "\uffff\1\6\2\uffff\1\3\2\uffff\2\7\1\uffff\1\7\2\uffff\1\3\2"+
            "\uffff\1\3\11\uffff\2\7\1\uffff\1\7\1\uffff\1\4\3\uffff\1\13"+
            "\2\uffff\1\15\5\uffff\1\7\5\uffff\1\11\4\uffff\1\17\1\uffff"+
            "\1\23\2\uffff\1\12\5\uffff\1\14\1\22\27\uffff\1\20\6\uffff\1"+
            "\10\15\uffff\1\21\26\uffff\1\5",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA330_eot = DFA.unpackEncodedString(DFA330_eotS);
    static final short[] DFA330_eof = DFA.unpackEncodedString(DFA330_eofS);
    static final char[] DFA330_min = DFA.unpackEncodedStringToUnsignedChars(DFA330_minS);
    static final char[] DFA330_max = DFA.unpackEncodedStringToUnsignedChars(DFA330_maxS);
    static final short[] DFA330_accept = DFA.unpackEncodedString(DFA330_acceptS);
    static final short[] DFA330_special = DFA.unpackEncodedString(DFA330_specialS);
    static final short[][] DFA330_transition;

    static {
        int numStates = DFA330_transitionS.length;
        DFA330_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA330_transition[i] = DFA.unpackEncodedString(DFA330_transitionS[i]);
        }
    }

    class DFA330 extends DFA {

        public DFA330(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 330;
            this.eot = DFA330_eot;
            this.eof = DFA330_eof;
            this.min = DFA330_min;
            this.max = DFA330_max;
            this.accept = DFA330_accept;
            this.special = DFA330_special;
            this.transition = DFA330_transition;
        }
        public String getDescription() {
            return "1291:1: windowing_elements : ( unbounded_key preceding_key | current_key row_key | concatenation_wrapper ( preceding_key | following_key ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA330_5 = input.LA(1);

                         
                        int index330_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred445_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("unbounded")))) ) {s = 20;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index330_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA330_1 = input.LA(1);

                         
                        int index330_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA330_1==MINUS_SIGN||LA330_1==NATIONAL_CHAR_STRING_LIT||LA330_1==CHAR_STRING||LA330_1==CHAR_STRING_PERL||LA330_1==LEFT_PAREN||LA330_1==COLON||LA330_1==BINDVAR) ) {s = 3;}

                        else if ( (LA330_1==INTRODUCER) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {s = 4;}

                        else if ( (LA330_1==REGULAR_ID) ) {s = 5;}

                        else if ( (LA330_1==DELIMITED_ID) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {s = 6;}

                        else if ( (LA330_1==PERIOD||(LA330_1>=ASTERISK && LA330_1<=PLUS_SIGN)||LA330_1==SOLIDUS||(LA330_1>=CONCATENATION_OP && LA330_1<=VERTICAL_BAR)||LA330_1==LEFT_BRACKET||LA330_1==SQL92_RESERVED_CASE) ) {s = 7;}

                        else if ( (LA330_1==SQL92_RESERVED_PRIOR) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 8;}

                        else if ( (LA330_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 9;}

                        else if ( (LA330_1==SQL92_RESERVED_DISTINCT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 10;}

                        else if ( (LA330_1==SQL92_RESERVED_ALL) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))))) {s = 11;}

                        else if ( (LA330_1==SQL92_RESERVED_EXISTS) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 12;}

                        else if ( (LA330_1==SQL92_RESERVED_ANY) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 13;}

                        else if ( ((LA330_1>=UNSIGNED_INTEGER && LA330_1<=APPROXIMATE_NUM_LIT)||LA330_1==EXACT_NUM_LIT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 14;}

                        else if ( (LA330_1==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 15;}

                        else if ( (LA330_1==SQL92_RESERVED_NULL) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 16;}

                        else if ( (LA330_1==SQL92_RESERVED_TRUE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 17;}

                        else if ( (LA330_1==SQL92_RESERVED_FALSE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 18;}

                        else if ( (LA330_1==SQL92_RESERVED_DEFAULT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 19;}

                         
                        input.seek(index330_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 330, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA346_eotS =
        "\31\uffff";
    static final String DFA346_eofS =
        "\31\uffff";
    static final String DFA346_minS =
        "\1\4\24\uffff\1\0\3\uffff";
    static final String DFA346_maxS =
        "\1\u00ba\24\uffff\1\0\3\uffff";
    static final String DFA346_acceptS =
        "\1\uffff\1\1\25\uffff\1\2\1\uffff";
    static final String DFA346_specialS =
        "\25\uffff\1\0\3\uffff}>";
    static final String[] DFA346_transitionS = {
            "\3\1\36\uffff\1\1\4\uffff\2\1\5\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\1\1\1\27\2\uffff\1\1\1\27\3\uffff\1\1\2\uffff\1\1\16\uffff"+
            "\1\1\3\uffff\1\1\2\uffff\1\1\5\uffff\1\1\5\uffff\1\1\4\uffff"+
            "\1\1\1\uffff\1\25\2\uffff\1\1\5\uffff\2\1\27\uffff\1\1\6\uffff"+
            "\1\1\15\uffff\1\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA346_eot = DFA.unpackEncodedString(DFA346_eotS);
    static final short[] DFA346_eof = DFA.unpackEncodedString(DFA346_eofS);
    static final char[] DFA346_min = DFA.unpackEncodedStringToUnsignedChars(DFA346_minS);
    static final char[] DFA346_max = DFA.unpackEncodedStringToUnsignedChars(DFA346_maxS);
    static final short[] DFA346_accept = DFA.unpackEncodedString(DFA346_acceptS);
    static final short[] DFA346_special = DFA.unpackEncodedString(DFA346_specialS);
    static final short[][] DFA346_transition;

    static {
        int numStates = DFA346_transitionS.length;
        DFA346_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA346_transition[i] = DFA.unpackEncodedString(DFA346_transitionS[i]);
        }
    }

    class DFA346 extends DFA {

        public DFA346(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 346;
            this.eot = DFA346_eot;
            this.eof = DFA346_eof;
            this.min = DFA346_min;
            this.max = DFA346_max;
            this.accept = DFA346_accept;
            this.special = DFA346_special;
            this.transition = DFA346_transition;
        }
        public String getDescription() {
            return "1343:13: ( concatenation_wrapper column_alias )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA346_21 = input.LA(1);

                         
                        int index346_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred466_OracleParser()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index346_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 346, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA354_eotS =
        "\25\uffff";
    static final String DFA354_eofS =
        "\25\uffff";
    static final String DFA354_minS =
        "\2\4\1\uffff\1\0\21\uffff";
    static final String DFA354_maxS =
        "\2\u00ba\1\uffff\1\0\21\uffff";
    static final String DFA354_acceptS =
        "\2\uffff\1\2\1\uffff\20\2\1\1";
    static final String DFA354_specialS =
        "\1\uffff\1\0\1\uffff\1\1\21\uffff}>";
    static final String[] DFA354_transitionS = {
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\1\2\16\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\5\uffff\1\2\3\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\2\2\25\uffff\1\2\1\uffff\1\2\6\uffff"+
            "\1\2\15\uffff\1\2\26\uffff\1\1",
            "\2\15\1\2\36\uffff\1\17\3\uffff\1\2\1\15\1\17\5\uffff\1\17"+
            "\2\uffff\1\10\2\uffff\2\2\1\uffff\4\2\2\uffff\1\14\2\uffff\1"+
            "\14\1\uffff\5\2\1\uffff\6\2\1\uffff\1\13\3\uffff\1\7\1\uffff"+
            "\1\2\1\12\3\uffff\1\2\1\uffff\1\2\5\uffff\1\5\4\uffff\1\16\1"+
            "\uffff\1\23\2\uffff\1\6\5\uffff\1\11\1\22\11\uffff\1\2\5\uffff"+
            "\2\2\4\uffff\1\2\1\uffff\1\20\3\uffff\1\2\2\uffff\1\4\15\uffff"+
            "\1\21\26\uffff\1\3",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA354_eot = DFA.unpackEncodedString(DFA354_eotS);
    static final short[] DFA354_eof = DFA.unpackEncodedString(DFA354_eofS);
    static final char[] DFA354_min = DFA.unpackEncodedStringToUnsignedChars(DFA354_minS);
    static final char[] DFA354_max = DFA.unpackEncodedStringToUnsignedChars(DFA354_maxS);
    static final short[] DFA354_accept = DFA.unpackEncodedString(DFA354_acceptS);
    static final short[] DFA354_special = DFA.unpackEncodedString(DFA354_specialS);
    static final short[][] DFA354_transition;

    static {
        int numStates = DFA354_transitionS.length;
        DFA354_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA354_transition[i] = DFA.unpackEncodedString(DFA354_transitionS[i]);
        }
    }

    class DFA354 extends DFA {

        public DFA354(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 354;
            this.eot = DFA354_eot;
            this.eof = DFA354_eof;
            this.min = DFA354_min;
            this.max = DFA354_max;
            this.accept = DFA354_accept;
            this.special = DFA354_special;
            this.transition = DFA354_transition;
        }
        public String getDescription() {
            return "1370:23: ( no_key value_key | expression_wrapper )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA354_1 = input.LA(1);

                         
                        int index354_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA354_1==MINUS_SIGN||LA354_1==PERIOD||(LA354_1>=LEFT_PAREN && LA354_1<=RIGHT_PAREN)||(LA354_1>=ASTERISK && LA354_1<=SOLIDUS)||(LA354_1>=LESS_THAN_OR_EQUALS_OP && LA354_1<=CARRET_OPERATOR_PART)||(LA354_1>=EXCLAMATION_OPERATOR_PART && LA354_1<=LEFT_BRACKET)||LA354_1==SQL92_RESERVED_AND||LA354_1==SQL92_RESERVED_BETWEEN||LA354_1==SQL92_RESERVED_CASE||LA354_1==SQL92_RESERVED_IN||(LA354_1>=SQL92_RESERVED_IS && LA354_1<=SQL92_RESERVED_LIKE)||LA354_1==SQL92_RESERVED_NOT||LA354_1==SQL92_RESERVED_OR) ) {s = 2;}

                        else if ( (LA354_1==REGULAR_ID) ) {s = 3;}

                        else if ( (LA354_1==SQL92_RESERVED_PRIOR) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 4;}

                        else if ( (LA354_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 5;}

                        else if ( (LA354_1==SQL92_RESERVED_DISTINCT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 6;}

                        else if ( (LA354_1==SQL92_RESERVED_ALL) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))))) {s = 7;}

                        else if ( (LA354_1==DELIMITED_ID) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))))) {s = 8;}

                        else if ( (LA354_1==SQL92_RESERVED_EXISTS) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 9;}

                        else if ( (LA354_1==SQL92_RESERVED_ANY) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 10;}

                        else if ( (LA354_1==INTRODUCER) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {s = 11;}

                        else if ( (LA354_1==COLON||LA354_1==BINDVAR) ) {s = 12;}

                        else if ( ((LA354_1>=UNSIGNED_INTEGER && LA354_1<=APPROXIMATE_NUM_LIT)||LA354_1==EXACT_NUM_LIT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 13;}

                        else if ( (LA354_1==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 14;}

                        else if ( (LA354_1==NATIONAL_CHAR_STRING_LIT||LA354_1==CHAR_STRING||LA354_1==CHAR_STRING_PERL) ) {s = 15;}

                        else if ( (LA354_1==SQL92_RESERVED_NULL) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 16;}

                        else if ( (LA354_1==SQL92_RESERVED_TRUE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 17;}

                        else if ( (LA354_1==SQL92_RESERVED_FALSE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 18;}

                        else if ( (LA354_1==SQL92_RESERVED_DEFAULT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 19;}

                         
                        input.seek(index354_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA354_3 = input.LA(1);

                         
                        int index354_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred474_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("no")))) ) {s = 20;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index354_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 354, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA418_eotS =
        "\32\uffff";
    static final String DFA418_eofS =
        "\32\uffff";
    static final String DFA418_minS =
        "\1\4\1\0\1\uffff\1\0\26\uffff";
    static final String DFA418_maxS =
        "\1\u00ba\1\0\1\uffff\1\0\26\uffff";
    static final String DFA418_acceptS =
        "\2\uffff\1\2\1\uffff\1\4\23\uffff\1\1\1\3";
    static final String DFA418_specialS =
        "\1\uffff\1\0\1\uffff\1\1\26\uffff}>";
    static final String[] DFA418_transitionS = {
            "\3\4\36\uffff\1\4\4\uffff\2\4\5\uffff\1\4\2\uffff\1\4\2\uffff"+
            "\1\4\3\uffff\1\4\4\uffff\1\4\2\uffff\1\4\16\uffff\1\4\3\uffff"+
            "\1\3\2\uffff\1\4\5\uffff\1\4\5\uffff\1\4\4\uffff\1\4\1\uffff"+
            "\1\4\2\uffff\1\1\5\uffff\2\4\27\uffff\1\4\6\uffff\1\4\15\uffff"+
            "\1\4\1\uffff\1\2\24\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA418_eot = DFA.unpackEncodedString(DFA418_eotS);
    static final short[] DFA418_eof = DFA.unpackEncodedString(DFA418_eofS);
    static final char[] DFA418_min = DFA.unpackEncodedStringToUnsignedChars(DFA418_minS);
    static final char[] DFA418_max = DFA.unpackEncodedStringToUnsignedChars(DFA418_maxS);
    static final short[] DFA418_accept = DFA.unpackEncodedString(DFA418_acceptS);
    static final short[] DFA418_special = DFA.unpackEncodedString(DFA418_specialS);
    static final short[][] DFA418_transition;

    static {
        int numStates = DFA418_transitionS.length;
        DFA418_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA418_transition[i] = DFA.unpackEncodedString(DFA418_transitionS[i]);
        }
    }

    class DFA418 extends DFA {

        public DFA418(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 418;
            this.eot = DFA418_eot;
            this.eof = DFA418_eof;
            this.min = DFA418_min;
            this.max = DFA418_max;
            this.accept = DFA418_accept;
            this.special = DFA418_special;
            this.transition = DFA418_transition;
        }
        public String getDescription() {
            return "1132:30: ( distinct_key | unique_key | all_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA418_1 = input.LA(1);

                         
                        int index418_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred352_OracleParser()) ) {s = 24;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index418_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA418_3 = input.LA(1);

                         
                        int index418_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_OracleParser()) ) {s = 25;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index418_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 418, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA423_eotS =
        "\30\uffff";
    static final String DFA423_eofS =
        "\30\uffff";
    static final String DFA423_minS =
        "\1\4\1\0\26\uffff";
    static final String DFA423_maxS =
        "\1\u00ba\1\0\26\uffff";
    static final String DFA423_acceptS =
        "\2\uffff\1\2\24\uffff\1\1";
    static final String DFA423_specialS =
        "\1\uffff\1\0\26\uffff}>";
    static final String[] DFA423_transitionS = {
            "\3\2\36\uffff\1\2\4\uffff\2\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\1\2\16\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\2\2\27\uffff\1\2\6\uffff\1\2\15\uffff"+
            "\1\2\26\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA423_eot = DFA.unpackEncodedString(DFA423_eotS);
    static final short[] DFA423_eof = DFA.unpackEncodedString(DFA423_eofS);
    static final char[] DFA423_min = DFA.unpackEncodedStringToUnsignedChars(DFA423_minS);
    static final char[] DFA423_max = DFA.unpackEncodedStringToUnsignedChars(DFA423_maxS);
    static final short[] DFA423_accept = DFA.unpackEncodedString(DFA423_acceptS);
    static final short[] DFA423_special = DFA.unpackEncodedString(DFA423_specialS);
    static final short[][] DFA423_transition;

    static {
        int numStates = DFA423_transitionS.length;
        DFA423_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA423_transition[i] = DFA.unpackEncodedString(DFA423_transitionS[i]);
        }
    }

    class DFA423 extends DFA {

        public DFA423(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 423;
            this.eot = DFA423_eot;
            this.eof = DFA423_eof;
            this.min = DFA423_min;
            this.max = DFA423_max;
            this.accept = DFA423_accept;
            this.special = DFA423_special;
            this.transition = DFA423_transition;
        }
        public String getDescription() {
            return "1136:17: ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key LEFT_PAREN subquery RIGHT_PAREN ) | concatenation_wrapper )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA423_1 = input.LA(1);

                         
                        int index423_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred359_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("multiset")))) ) {s = 23;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index423_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 423, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA424_eotS =
        "\31\uffff";
    static final String DFA424_eofS =
        "\31\uffff";
    static final String DFA424_minS =
        "\1\4\1\0\27\uffff";
    static final String DFA424_maxS =
        "\1\u00ba\1\0\27\uffff";
    static final String DFA424_acceptS =
        "\2\uffff\1\2\1\3\24\uffff\1\1";
    static final String DFA424_specialS =
        "\1\uffff\1\0\27\uffff}>";
    static final String[] DFA424_transitionS = {
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\4\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\1\5\uffff\2\3\27\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\1\3\1\uffff\1\2\24\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA424_eot = DFA.unpackEncodedString(DFA424_eotS);
    static final short[] DFA424_eof = DFA.unpackEncodedString(DFA424_eofS);
    static final char[] DFA424_min = DFA.unpackEncodedStringToUnsignedChars(DFA424_minS);
    static final char[] DFA424_max = DFA.unpackEncodedStringToUnsignedChars(DFA424_maxS);
    static final short[] DFA424_accept = DFA.unpackEncodedString(DFA424_acceptS);
    static final short[] DFA424_special = DFA.unpackEncodedString(DFA424_specialS);
    static final short[][] DFA424_transition;

    static {
        int numStates = DFA424_transitionS.length;
        DFA424_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA424_transition[i] = DFA.unpackEncodedString(DFA424_transitionS[i]);
        }
    }

    class DFA424 extends DFA {

        public DFA424(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 424;
            this.eot = DFA424_eot;
            this.eof = DFA424_eof;
            this.min = DFA424_min;
            this.max = DFA424_max;
            this.accept = DFA424_accept;
            this.special = DFA424_special;
            this.transition = DFA424_transition;
        }
        public String getDescription() {
            return "1147:17: ( distinct_key | unique_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA424_1 = input.LA(1);

                         
                        int index424_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_OracleParser()) ) {s = 24;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index424_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 424, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA444_eotS =
        "\26\uffff";
    static final String DFA444_eofS =
        "\26\uffff";
    static final String DFA444_minS =
        "\2\4\1\6\2\uffff\1\6\20\uffff";
    static final String DFA444_maxS =
        "\3\u00ba\2\uffff\1\u00ba\20\uffff";
    static final String DFA444_acceptS =
        "\3\uffff\1\1\1\2\1\uffff\20\2";
    static final String DFA444_specialS =
        "\1\uffff\1\0\24\uffff}>";
    static final String[] DFA444_transitionS = {
            "\3\4\36\uffff\1\2\4\uffff\1\4\1\2\5\uffff\1\2\2\uffff\1\4\2"+
            "\uffff\1\4\3\uffff\1\4\4\uffff\1\4\2\uffff\1\4\16\uffff\1\4"+
            "\3\uffff\1\4\2\uffff\1\4\5\uffff\1\4\5\uffff\1\4\4\uffff\1\4"+
            "\1\uffff\1\4\2\uffff\1\4\5\uffff\2\4\2\uffff\1\3\24\uffff\1"+
            "\4\6\uffff\1\4\15\uffff\1\4\26\uffff\1\1",
            "\2\17\1\4\36\uffff\1\5\3\uffff\1\10\1\17\1\5\5\uffff\1\5\2"+
            "\uffff\1\7\2\uffff\2\4\1\uffff\2\4\1\uffff\1\4\2\uffff\1\4\2"+
            "\uffff\1\4\11\uffff\2\4\1\uffff\1\4\1\uffff\1\6\3\uffff\1\14"+
            "\2\uffff\1\16\5\uffff\1\4\5\uffff\1\12\4\uffff\1\20\1\uffff"+
            "\1\24\2\uffff\1\13\5\uffff\1\15\1\23\2\uffff\1\3\24\uffff\1"+
            "\21\6\uffff\1\11\15\uffff\1\22\26\uffff\1\4",
            "\1\25\61\uffff\1\25\1\uffff\2\25\1\uffff\1\25\17\uffff\2\25"+
            "\1\uffff\1\25\50\uffff\1\3\100\uffff\1\25",
            "",
            "",
            "\1\25\61\uffff\1\25\1\uffff\2\25\1\uffff\1\25\17\uffff\2\25"+
            "\1\uffff\1\25\50\uffff\1\3\100\uffff\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA444_eot = DFA.unpackEncodedString(DFA444_eotS);
    static final short[] DFA444_eof = DFA.unpackEncodedString(DFA444_eofS);
    static final char[] DFA444_min = DFA.unpackEncodedStringToUnsignedChars(DFA444_minS);
    static final char[] DFA444_max = DFA.unpackEncodedStringToUnsignedChars(DFA444_maxS);
    static final short[] DFA444_accept = DFA.unpackEncodedString(DFA444_acceptS);
    static final short[] DFA444_special = DFA.unpackEncodedString(DFA444_specialS);
    static final short[][] DFA444_transition;

    static {
        int numStates = DFA444_transitionS.length;
        DFA444_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA444_transition[i] = DFA.unpackEncodedString(DFA444_transitionS[i]);
        }
    }

    class DFA444 extends DFA {

        public DFA444(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 444;
            this.eot = DFA444_eot;
            this.eof = DFA444_eof;
            this.min = DFA444_min;
            this.max = DFA444_max;
            this.accept = DFA444_accept;
            this.special = DFA444_special;
            this.transition = DFA444_transition;
        }
        public String getDescription() {
            return "1181:17: ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA444_1 = input.LA(1);

                         
                        int index444_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA444_1==MINUS_SIGN||(LA444_1>=LEFT_PAREN && LA444_1<=RIGHT_PAREN)||(LA444_1>=ASTERISK && LA444_1<=PLUS_SIGN)||LA444_1==SOLIDUS||LA444_1==COLON||LA444_1==BINDVAR||(LA444_1>=CONCATENATION_OP && LA444_1<=VERTICAL_BAR)||LA444_1==LEFT_BRACKET||LA444_1==SQL92_RESERVED_CASE||LA444_1==REGULAR_ID) ) {s = 4;}

                        else if ( (LA444_1==NATIONAL_CHAR_STRING_LIT||LA444_1==CHAR_STRING||LA444_1==CHAR_STRING_PERL) ) {s = 5;}

                        else if ( (LA444_1==INTRODUCER) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {s = 6;}

                        else if ( (LA444_1==DELIMITED_ID) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {s = 7;}

                        else if ( (LA444_1==PERIOD) ) {s = 8;}

                        else if ( (LA444_1==SQL92_RESERVED_FROM) ) {s = 3;}

                        else if ( (LA444_1==SQL92_RESERVED_PRIOR) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 9;}

                        else if ( (LA444_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 10;}

                        else if ( (LA444_1==SQL92_RESERVED_DISTINCT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 11;}

                        else if ( (LA444_1==SQL92_RESERVED_ALL) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))||((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new")))))) {s = 12;}

                        else if ( (LA444_1==SQL92_RESERVED_EXISTS) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 13;}

                        else if ( (LA444_1==SQL92_RESERVED_ANY) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 14;}

                        else if ( ((LA444_1>=UNSIGNED_INTEGER && LA444_1<=APPROXIMATE_NUM_LIT)||LA444_1==EXACT_NUM_LIT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 15;}

                        else if ( (LA444_1==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 16;}

                        else if ( (LA444_1==SQL92_RESERVED_NULL) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 17;}

                        else if ( (LA444_1==SQL92_RESERVED_TRUE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 18;}

                        else if ( (LA444_1==SQL92_RESERVED_FALSE) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 19;}

                        else if ( (LA444_1==SQL92_RESERVED_DEFAULT) && (((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 20;}

                         
                        input.seek(index444_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 444, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA461_eotS =
        "\16\uffff";
    static final String DFA461_eofS =
        "\16\uffff";
    static final String DFA461_minS =
        "\1\u00ba\1\4\1\0\1\uffff\1\0\1\64\1\uffff\2\51\1\64\2\0\2\51";
    static final String DFA461_maxS =
        "\2\u00ba\1\0\1\uffff\1\0\1\u00ba\1\uffff\3\u00ba\2\0\2\u00ba";
    static final String DFA461_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\7\uffff";
    static final String DFA461_specialS =
        "\1\1\1\2\1\3\1\uffff\1\6\1\5\1\uffff\1\7\1\11\1\0\1\13\1\10\1\12"+
        "\1\4}>";
    static final String[] DFA461_transitionS = {
            "\1\1",
            "\3\3\36\uffff\1\3\4\uffff\2\3\5\uffff\1\3\2\uffff\1\4\2\uffff"+
            "\1\3\3\uffff\1\3\4\uffff\1\3\2\uffff\1\3\16\uffff\1\5\3\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff\1\3\4\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\5\uffff\2\3\27\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\1\3\26\uffff\1\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\10\u0085\uffff\1\7",
            "",
            "\1\11\12\uffff\1\13\u0085\uffff\1\12",
            "\1\11\12\uffff\1\13\u0085\uffff\1\12",
            "\1\15\u0085\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\11\12\uffff\1\13\u0085\uffff\1\12",
            "\1\11\12\uffff\1\13\u0085\uffff\1\12"
    };

    static final short[] DFA461_eot = DFA.unpackEncodedString(DFA461_eotS);
    static final short[] DFA461_eof = DFA.unpackEncodedString(DFA461_eofS);
    static final char[] DFA461_min = DFA.unpackEncodedStringToUnsignedChars(DFA461_minS);
    static final char[] DFA461_max = DFA.unpackEncodedStringToUnsignedChars(DFA461_maxS);
    static final short[] DFA461_accept = DFA.unpackEncodedString(DFA461_acceptS);
    static final short[] DFA461_special = DFA.unpackEncodedString(DFA461_specialS);
    static final short[][] DFA461_transition;

    static {
        int numStates = DFA461_transitionS.length;
        DFA461_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA461_transition[i] = DFA.unpackEncodedString(DFA461_transitionS[i]);
        }
    }

    class DFA461 extends DFA {

        public DFA461(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 461;
            this.eot = DFA461_eot;
            this.eof = DFA461_eof;
            this.min = DFA461_min;
            this.max = DFA461_max;
            this.accept = DFA461_accept;
            this.special = DFA461_special;
            this.transition = DFA461_transition;
        }
        public String getDescription() {
            return "1214:17: ( name_key id | evalname_key concatenation_wrapper )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA461_9 = input.LA(1);

                         
                        int index461_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA461_9==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 12;}

                        else if ( (LA461_9==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 13;}

                         
                        input.seek(index461_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA461_0 = input.LA(1);

                         
                        int index461_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA461_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 1;}

                         
                        input.seek(index461_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA461_1 = input.LA(1);

                         
                        int index461_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA461_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 2;}

                        else if ( ((LA461_1>=UNSIGNED_INTEGER && LA461_1<=MINUS_SIGN)||LA461_1==NATIONAL_CHAR_STRING_LIT||(LA461_1>=EXACT_NUM_LIT && LA461_1<=CHAR_STRING)||LA461_1==CHAR_STRING_PERL||LA461_1==LEFT_PAREN||LA461_1==PLUS_SIGN||LA461_1==COLON||LA461_1==BINDVAR||LA461_1==SQL92_RESERVED_ALL||LA461_1==SQL92_RESERVED_ANY||LA461_1==SQL92_RESERVED_CASE||LA461_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA461_1==SQL92_RESERVED_DATE||LA461_1==SQL92_RESERVED_DEFAULT||LA461_1==SQL92_RESERVED_DISTINCT||(LA461_1>=SQL92_RESERVED_EXISTS && LA461_1<=SQL92_RESERVED_FALSE)||LA461_1==SQL92_RESERVED_NULL||LA461_1==SQL92_RESERVED_PRIOR||LA461_1==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 3;}

                        else if ( (LA461_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 4;}

                        else if ( (LA461_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 5;}

                         
                        input.seek(index461_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA461_2 = input.LA(1);

                         
                        int index461_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred416_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("name")))) ) {s = 6;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 3;}

                         
                        input.seek(index461_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA461_13 = input.LA(1);

                         
                        int index461_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA461_13==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 10;}

                        else if ( (LA461_13==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 11;}

                        else if ( (LA461_13==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 9;}

                         
                        input.seek(index461_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA461_5 = input.LA(1);

                         
                        int index461_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA461_5==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 7;}

                        else if ( (LA461_5==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 8;}

                         
                        input.seek(index461_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA461_4 = input.LA(1);

                         
                        int index461_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred416_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("name")))) ) {s = 6;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 3;}

                         
                        input.seek(index461_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA461_7 = input.LA(1);

                         
                        int index461_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA461_7==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 9;}

                        else if ( (LA461_7==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 10;}

                        else if ( (LA461_7==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 11;}

                         
                        input.seek(index461_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA461_11 = input.LA(1);

                         
                        int index461_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred416_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("name")))) ) {s = 6;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 3;}

                         
                        input.seek(index461_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA461_8 = input.LA(1);

                         
                        int index461_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA461_8==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 9;}

                        else if ( (LA461_8==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 10;}

                        else if ( (LA461_8==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 11;}

                         
                        input.seek(index461_8);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA461_12 = input.LA(1);

                         
                        int index461_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA461_12==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 10;}

                        else if ( (LA461_12==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 11;}

                        else if ( (LA461_12==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 9;}

                         
                        input.seek(index461_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA461_10 = input.LA(1);

                         
                        int index461_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred416_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("name")))) ) {s = 6;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 3;}

                         
                        input.seek(index461_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 461, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA464_eotS =
        "\117\uffff";
    static final String DFA464_eofS =
        "\117\uffff";
    static final String DFA464_minS =
        "\1\u00ba\2\4\70\uffff\1\6\23\uffff";
    static final String DFA464_maxS =
        "\3\u00ba\70\uffff\1\u00ba\23\uffff";
    static final String DFA464_acceptS =
        "\3\uffff\70\1\1\uffff\1\2\22\1";
    static final String DFA464_specialS =
        "\1\1\1\0\1\3\70\uffff\1\2\23\uffff}>";
    static final String[] DFA464_transitionS = {
            "\1\1",
            "\2\23\1\6\36\uffff\1\25\4\uffff\1\23\1\25\5\uffff\1\25\2\uffff"+
            "\1\14\2\uffff\1\32\3\uffff\1\7\4\uffff\1\22\2\uffff\1\21\16"+
            "\uffff\1\20\3\uffff\1\13\2\uffff\1\17\4\uffff\1\3\1\15\5\uffff"+
            "\1\11\3\uffff\1\4\1\24\1\uffff\1\31\2\uffff\1\12\5\uffff\1\16"+
            "\1\30\25\uffff\1\5\1\uffff\1\26\6\uffff\1\10\15\uffff\1\27\26"+
            "\uffff\1\2",
            "\2\104\1\33\36\uffff\1\36\3\uffff\1\34\1\104\1\36\5\uffff"+
            "\1\36\2\uffff\1\71\2\uffff\1\35\1\74\1\uffff\1\43\1\45\1\72"+
            "\1\44\2\uffff\1\40\2\uffff\1\37\1\uffff\1\62\1\56\1\63\1\55"+
            "\1\60\1\uffff\1\57\1\61\1\46\1\47\1\54\1\41\1\uffff\1\70\3\uffff"+
            "\1\101\1\uffff\1\65\1\103\1\67\2\uffff\1\52\1\uffff\1\75\5\uffff"+
            "\1\77\4\uffff\1\105\1\uffff\1\110\2\uffff\1\100\5\uffff\1\102"+
            "\1\107\11\uffff\1\51\5\uffff\1\64\1\53\4\uffff\1\50\1\uffff"+
            "\1\73\3\uffff\1\66\2\uffff\1\76\15\uffff\1\106\26\uffff\1\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\113\36\uffff\1\116\5\uffff\1\116\5\uffff\1\116\2\uffff"+
            "\1\115\5\uffff\1\43\1\112\1\72\1\44\7\uffff\1\62\1\56\1\63\1"+
            "\55\1\60\1\uffff\1\57\1\61\1\46\1\47\1\54\1\41\1\uffff\1\114"+
            "\5\uffff\1\65\1\uffff\1\67\2\uffff\1\52\42\uffff\1\51\5\uffff"+
            "\1\64\1\53\4\uffff\1\50\3\uffff\1\74\1\uffff\1\66\47\uffff\1"+
            "\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA464_eot = DFA.unpackEncodedString(DFA464_eotS);
    static final short[] DFA464_eof = DFA.unpackEncodedString(DFA464_eofS);
    static final char[] DFA464_min = DFA.unpackEncodedStringToUnsignedChars(DFA464_minS);
    static final char[] DFA464_max = DFA.unpackEncodedStringToUnsignedChars(DFA464_maxS);
    static final short[] DFA464_accept = DFA.unpackEncodedString(DFA464_acceptS);
    static final short[] DFA464_special = DFA.unpackEncodedString(DFA464_specialS);
    static final short[][] DFA464_transition;

    static {
        int numStates = DFA464_transitionS.length;
        DFA464_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA464_transition[i] = DFA.unpackEncodedString(DFA464_transitionS[i]);
        }
    }

    class DFA464 extends DFA {

        public DFA464(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 464;
            this.eot = DFA464_eot;
            this.eof = DFA464_eof;
            this.min = DFA464_min;
            this.max = DFA464_max;
            this.accept = DFA464_accept;
            this.special = DFA464_special;
            this.transition = DFA464_transition;
        }
        public String getDescription() {
            return "1222:39: ( xml_passing_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA464_1 = input.LA(1);

                         
                        int index464_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA464_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("returning")))) {s = 2;}

                        else if ( (LA464_1==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 3;}

                        else if ( (LA464_1==SQL92_RESERVED_CURSOR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 4;}

                        else if ( (LA464_1==SQL92_RESERVED_NOT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 5;}

                        else if ( (LA464_1==MINUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 6;}

                        else if ( (LA464_1==PLUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 7;}

                        else if ( (LA464_1==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 8;}

                        else if ( (LA464_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 9;}

                        else if ( (LA464_1==SQL92_RESERVED_DISTINCT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 10;}

                        else if ( (LA464_1==SQL92_RESERVED_ALL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 11;}

                        else if ( (LA464_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 12;}

                        else if ( (LA464_1==SQL92_RESERVED_CASE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 13;}

                        else if ( (LA464_1==SQL92_RESERVED_EXISTS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 14;}

                        else if ( (LA464_1==SQL92_RESERVED_ANY) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 15;}

                        else if ( (LA464_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 16;}

                        else if ( (LA464_1==BINDVAR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 17;}

                        else if ( (LA464_1==COLON) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 18;}

                        else if ( ((LA464_1>=UNSIGNED_INTEGER && LA464_1<=APPROXIMATE_NUM_LIT)||LA464_1==EXACT_NUM_LIT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 19;}

                        else if ( (LA464_1==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 20;}

                        else if ( (LA464_1==NATIONAL_CHAR_STRING_LIT||LA464_1==CHAR_STRING||LA464_1==CHAR_STRING_PERL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 21;}

                        else if ( (LA464_1==SQL92_RESERVED_NULL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 22;}

                        else if ( (LA464_1==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 23;}

                        else if ( (LA464_1==SQL92_RESERVED_FALSE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 24;}

                        else if ( (LA464_1==SQL92_RESERVED_DEFAULT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 25;}

                        else if ( (LA464_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 26;}

                         
                        input.seek(index464_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA464_0 = input.LA(1);

                         
                        int index464_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA464_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("returning")))) {s = 1;}

                         
                        input.seek(index464_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA464_59 = input.LA(1);

                         
                        int index464_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA464_59==SQL92_RESERVED_ON) && ((input.LT(1).getText().equalsIgnoreCase("returning")))) {s = 60;}

                        else if ( (LA464_59==LEFT_BRACKET) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 33;}

                        else if ( (LA464_59==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 73;}

                        else if ( (LA464_59==ASTERISK) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 35;}

                        else if ( (LA464_59==SOLIDUS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 36;}

                        else if ( (LA464_59==PLUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 74;}

                        else if ( (LA464_59==MINUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 75;}

                        else if ( (LA464_59==CONCATENATION_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 38;}

                        else if ( (LA464_59==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 39;}

                        else if ( (LA464_59==SQL92_RESERVED_NOT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 40;}

                        else if ( (LA464_59==SQL92_RESERVED_IN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 41;}

                        else if ( (LA464_59==SQL92_RESERVED_BETWEEN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 42;}

                        else if ( (LA464_59==SQL92_RESERVED_LIKE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 43;}

                        else if ( (LA464_59==EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 44;}

                        else if ( (LA464_59==NOT_EQUAL_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 45;}

                        else if ( (LA464_59==LESS_THAN_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 46;}

                        else if ( (LA464_59==EXCLAMATION_OPERATOR_PART) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 47;}

                        else if ( (LA464_59==CARRET_OPERATOR_PART) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 48;}

                        else if ( (LA464_59==GREATER_THAN_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 49;}

                        else if ( (LA464_59==LESS_THAN_OR_EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 50;}

                        else if ( (LA464_59==GREATER_THAN_OR_EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 51;}

                        else if ( (LA464_59==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 52;}

                        else if ( (LA464_59==SQL92_RESERVED_AND) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 53;}

                        else if ( (LA464_59==SQL92_RESERVED_OR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 54;}

                        else if ( (LA464_59==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 55;}

                        else if ( (LA464_59==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 76;}

                        else if ( (LA464_59==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 77;}

                        else if ( (LA464_59==NATIONAL_CHAR_STRING_LIT||LA464_59==CHAR_STRING||LA464_59==CHAR_STRING_PERL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 78;}

                        else if ( (LA464_59==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 58;}

                         
                        input.seek(index464_59);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA464_2 = input.LA(1);

                         
                        int index464_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA464_2==MINUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 27;}

                        else if ( (LA464_2==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 28;}

                        else if ( (LA464_2==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 29;}

                        else if ( (LA464_2==NATIONAL_CHAR_STRING_LIT||LA464_2==CHAR_STRING||LA464_2==CHAR_STRING_PERL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 30;}

                        else if ( (LA464_2==BINDVAR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 31;}

                        else if ( (LA464_2==COLON) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 32;}

                        else if ( (LA464_2==LEFT_BRACKET) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 33;}

                        else if ( (LA464_2==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 34;}

                        else if ( (LA464_2==ASTERISK) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 35;}

                        else if ( (LA464_2==SOLIDUS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 36;}

                        else if ( (LA464_2==PLUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 37;}

                        else if ( (LA464_2==CONCATENATION_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 38;}

                        else if ( (LA464_2==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 39;}

                        else if ( (LA464_2==SQL92_RESERVED_NOT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 40;}

                        else if ( (LA464_2==SQL92_RESERVED_IN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 41;}

                        else if ( (LA464_2==SQL92_RESERVED_BETWEEN) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 42;}

                        else if ( (LA464_2==SQL92_RESERVED_LIKE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 43;}

                        else if ( (LA464_2==EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 44;}

                        else if ( (LA464_2==NOT_EQUAL_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 45;}

                        else if ( (LA464_2==LESS_THAN_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 46;}

                        else if ( (LA464_2==EXCLAMATION_OPERATOR_PART) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 47;}

                        else if ( (LA464_2==CARRET_OPERATOR_PART) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 48;}

                        else if ( (LA464_2==GREATER_THAN_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 49;}

                        else if ( (LA464_2==LESS_THAN_OR_EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 50;}

                        else if ( (LA464_2==GREATER_THAN_OR_EQUALS_OP) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 51;}

                        else if ( (LA464_2==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 52;}

                        else if ( (LA464_2==SQL92_RESERVED_AND) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 53;}

                        else if ( (LA464_2==SQL92_RESERVED_OR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 54;}

                        else if ( (LA464_2==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 55;}

                        else if ( (LA464_2==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 56;}

                        else if ( (LA464_2==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 57;}

                        else if ( (LA464_2==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 58;}

                        else if ( (LA464_2==SQL92_RESERVED_NULL) && ((input.LT(1).getText().equalsIgnoreCase("returning")))) {s = 59;}

                        else if ( (LA464_2==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("returning")))) {s = 60;}

                        else if ( (LA464_2==SQL92_RESERVED_CASE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 61;}

                        else if ( (LA464_2==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 62;}

                        else if ( (LA464_2==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 63;}

                        else if ( (LA464_2==SQL92_RESERVED_DISTINCT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 64;}

                        else if ( (LA464_2==SQL92_RESERVED_ALL) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 65;}

                        else if ( (LA464_2==SQL92_RESERVED_EXISTS) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 66;}

                        else if ( (LA464_2==SQL92_RESERVED_ANY) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 67;}

                        else if ( ((LA464_2>=UNSIGNED_INTEGER && LA464_2<=APPROXIMATE_NUM_LIT)||LA464_2==EXACT_NUM_LIT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 68;}

                        else if ( (LA464_2==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 69;}

                        else if ( (LA464_2==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 70;}

                        else if ( (LA464_2==SQL92_RESERVED_FALSE) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 71;}

                        else if ( (LA464_2==SQL92_RESERVED_DEFAULT) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {s = 72;}

                         
                        input.seek(index464_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 464, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA473_eotS =
        "\32\uffff";
    static final String DFA473_eofS =
        "\32\uffff";
    static final String DFA473_minS =
        "\1\70\1\4\2\uffff\1\0\25\uffff";
    static final String DFA473_maxS =
        "\2\u00ba\2\uffff\1\0\25\uffff";
    static final String DFA473_acceptS =
        "\2\uffff\2\2\1\uffff\25\1";
    static final String DFA473_specialS =
        "\1\1\1\0\2\uffff\1\2\25\uffff}>";
    static final String[] DFA473_transitionS = {
            "\1\2\u0081\uffff\1\1",
            "\2\22\1\5\36\uffff\1\24\4\uffff\1\22\1\24\5\uffff\1\24\2\uffff"+
            "\1\13\2\uffff\1\31\1\3\2\uffff\1\6\4\uffff\1\21\2\uffff\1\20"+
            "\16\uffff\1\17\3\uffff\1\12\2\uffff\1\16\5\uffff\1\14\5\uffff"+
            "\1\10\4\uffff\1\23\1\uffff\1\30\2\uffff\1\11\5\uffff\1\15\1"+
            "\27\27\uffff\1\25\6\uffff\1\7\6\uffff\1\3\6\uffff\1\26\26\uffff"+
            "\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA473_eot = DFA.unpackEncodedString(DFA473_eotS);
    static final short[] DFA473_eof = DFA.unpackEncodedString(DFA473_eofS);
    static final char[] DFA473_min = DFA.unpackEncodedStringToUnsignedChars(DFA473_minS);
    static final char[] DFA473_max = DFA.unpackEncodedStringToUnsignedChars(DFA473_maxS);
    static final short[] DFA473_accept = DFA.unpackEncodedString(DFA473_acceptS);
    static final short[] DFA473_special = DFA.unpackEncodedString(DFA473_specialS);
    static final short[][] DFA473_transition;

    static {
        int numStates = DFA473_transitionS.length;
        DFA473_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA473_transition[i] = DFA.unpackEncodedString(DFA473_transitionS[i]);
        }
    }

    class DFA473 extends DFA {

        public DFA473(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 473;
            this.eot = DFA473_eot;
            this.eof = DFA473_eof;
            this.min = DFA473_min;
            this.max = DFA473_max;
            this.accept = DFA473_accept;
            this.special = DFA473_special;
            this.transition = DFA473_transition;
        }
        public String getDescription() {
            return "1238:17: ( xmlserialize_param_version_part )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA473_1 = input.LA(1);

                         
                        int index473_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA473_1==RIGHT_PAREN||LA473_1==SQL92_RESERVED_SIZE) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {s = 3;}

                        else if ( (LA473_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {s = 4;}

                        else if ( (LA473_1==MINUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 5;}

                        else if ( (LA473_1==PLUS_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 6;}

                        else if ( (LA473_1==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 7;}

                        else if ( (LA473_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 8;}

                        else if ( (LA473_1==SQL92_RESERVED_DISTINCT) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 9;}

                        else if ( (LA473_1==SQL92_RESERVED_ALL) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 10;}

                        else if ( (LA473_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 11;}

                        else if ( (LA473_1==SQL92_RESERVED_CASE) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 12;}

                        else if ( (LA473_1==SQL92_RESERVED_EXISTS) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 13;}

                        else if ( (LA473_1==SQL92_RESERVED_ANY) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 14;}

                        else if ( (LA473_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 15;}

                        else if ( (LA473_1==BINDVAR) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 16;}

                        else if ( (LA473_1==COLON) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 17;}

                        else if ( ((LA473_1>=UNSIGNED_INTEGER && LA473_1<=APPROXIMATE_NUM_LIT)||LA473_1==EXACT_NUM_LIT) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 18;}

                        else if ( (LA473_1==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 19;}

                        else if ( (LA473_1==NATIONAL_CHAR_STRING_LIT||LA473_1==CHAR_STRING||LA473_1==CHAR_STRING_PERL) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 20;}

                        else if ( (LA473_1==SQL92_RESERVED_NULL) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 21;}

                        else if ( (LA473_1==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 22;}

                        else if ( (LA473_1==SQL92_RESERVED_FALSE) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 23;}

                        else if ( (LA473_1==SQL92_RESERVED_DEFAULT) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 24;}

                        else if ( (LA473_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {s = 25;}

                         
                        input.seek(index473_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA473_0 = input.LA(1);

                         
                        int index473_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA473_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {s = 1;}

                        else if ( (LA473_0==RIGHT_PAREN) ) {s = 2;}

                         
                        input.seek(index473_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA473_4 = input.LA(1);

                         
                        int index473_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred430_OracleParser()&&(input.LT(1).getText().equalsIgnoreCase("version")))) ) {s = 25;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show")))) ) {s = 3;}

                         
                        input.seek(index473_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 473, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_select_statement_in_seq_of_statements683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_statement_in_seq_of_statements694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_statement_in_seq_of_statements705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_statement_in_seq_of_statements716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_seq_of_statements727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_statement_in_seq_of_statements738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explain_statement_in_seq_of_statements749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explain_key_in_explain_statement769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_plan_key_in_explain_statement771 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_set_key_in_explain_statement783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_statement_id_key_in_explain_statement785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_explain_statement787 = new BitSet(new long[]{0x0002082000000000L});
    public static final BitSet FOLLOW_quoted_string_in_explain_statement789 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_into_key_in_explain_statement803 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_tableview_name_in_explain_statement805 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_for_key_in_explain_statement818 = new BitSet(new long[]{0x0080000000000000L,0x0000200000000000L,0x0400104004000008L});
    public static final BitSet FOLLOW_select_statement_in_explain_statement831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_statement_in_explain_statement844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_statement_in_explain_statement857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_statement_in_explain_statement870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_statement_in_explain_statement883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_factoring_clause_in_select_statement944 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_select_statement955 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_for_update_clause_in_select_statement966 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_order_by_clause_in_select_statement978 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_with_key_in_subquery_factoring_clause1028 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause1031 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_subquery_factoring_clause1034 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause1037 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_query_name_in_factoring_element1059 = new BitSet(new long[]{0x0080000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_factoring_element1062 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_factoring_element1064 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_factoring_element1067 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_factoring_element1069 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_factoring_element1073 = new BitSet(new long[]{0x0080000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_as_key_in_factoring_element1077 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_factoring_element1079 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_factoring_element1081 = new BitSet(new long[]{0x0100000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_order_by_clause_in_factoring_element1083 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_factoring_element1086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_search_clause_in_factoring_element1097 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_cycle_clause_in_factoring_element1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_search_key_in_search_clause1154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_depth_key_in_search_clause1158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_breadth_key_in_search_clause1162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_first_key_in_search_clause1166 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_search_clause1168 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_search_clause1183 = new BitSet(new long[]{0x1000000000000000L,0x0000400008000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_asc_key_in_search_clause1185 = new BitSet(new long[]{0x1000000000000000L,0x0000400000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_desc_key_in_search_clause1189 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nulls_key_in_search_clause1194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_first_key_in_search_clause1196 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nulls_key_in_search_clause1201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_last_key_in_search_clause1203 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_search_clause1221 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_search_clause1223 = new BitSet(new long[]{0x1000000000000000L,0x0000400008000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_asc_key_in_search_clause1225 = new BitSet(new long[]{0x1000000000000000L,0x0000400000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_desc_key_in_search_clause1229 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nulls_key_in_search_clause1234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_first_key_in_search_clause1236 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nulls_key_in_search_clause1241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_last_key_in_search_clause1243 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_set_key_in_search_clause1263 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_search_clause1265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycle_key_in_cycle_clause1285 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_cycle_clause1287 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_cycle_clause1291 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_cycle_clause1293 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_set_key_in_cycle_clause1297 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_cycle_clause1299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_to_key_in_cycle_clause1301 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_cycle_clause1303 = new BitSet(new long[]{0x00020C2000000030L,0x0040140000000000L,0x0400000800004000L});
    public static final BitSet FOLLOW_default_key_in_cycle_clause1305 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_cycle_clause1307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_basic_elements_in_subquery1327 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000210L});
    public static final BitSet FOLLOW_subquery_operation_part_in_subquery1329 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000210L});
    public static final BitSet FOLLOW_union_key_in_subquery_operation_part1370 = new BitSet(new long[]{0x0080000000000000L,0x0000000000400000L,0x0000100004000000L});
    public static final BitSet FOLLOW_all_key_in_subquery_operation_part1373 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_intersect_key_in_subquery_operation_part1376 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_minus_key_in_subquery_operation_part1379 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_basic_elements_in_subquery_operation_part1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_block_in_subquery_basic_elements1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_subquery_basic_elements1414 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_subquery_basic_elements1417 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_key_in_query_block1448 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_distinct_key_in_query_block1469 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_unique_key_in_query_block1471 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_all_key_in_query_block1473 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_ASTERISK_in_query_block1487 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_selected_element_in_query_block1492 = new BitSet(new long[]{0x1000000000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_COMMA_in_query_block1495 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_selected_element_in_query_block1497 = new BitSet(new long[]{0x1000000000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_into_clause_in_query_block1510 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_from_clause_in_query_block1521 = new BitSet(new long[]{0x0000000000000002L,0x3000001000000000L,0x0000480020000000L});
    public static final BitSet FOLLOW_where_clause_in_query_block1532 = new BitSet(new long[]{0x0000000000000002L,0x3000001000000000L,0x0000400020000000L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_query_block1544 = new BitSet(new long[]{0x0000000000000002L,0x3000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_group_by_clause_in_query_block1556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_model_clause_in_query_block1567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_list_elements_in_selected_element1723 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_selected_element1725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_key_in_from_clause1765 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000180000000L});
    public static final BitSet FOLLOW_table_ref_list_in_from_clause1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableview_name_in_select_list_elements1804 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_PERIOD_in_select_list_elements1806 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_select_list_elements1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_select_list_elements1834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_ref_in_table_ref_list1862 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_table_ref_list1865 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000180000000L});
    public static final BitSet FOLLOW_table_ref_in_table_ref_list1868 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_table_ref_aux_in_table_ref1894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x07BC000000000000L});
    public static final BitSet FOLLOW_join_clause_in_table_ref1896 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x07BC000000000000L});
    public static final BitSet FOLLOW_pivot_clause_in_table_ref1900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unpivot_clause_in_table_ref1902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux1967 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux1970 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux1972 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_table_ref_aux1991 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000180000000L});
    public static final BitSet FOLLOW_table_ref_in_table_ref_aux1993 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000001000000210L});
    public static final BitSet FOLLOW_subquery_operation_part_in_table_ref_aux1995 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000001000000210L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_table_ref_aux1998 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux2001 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux2003 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_only_key_in_table_ref_aux2024 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_table_ref_aux2026 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000180000000L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux2028 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_table_ref_aux2030 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux2041 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux2044 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux2046 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_flashback_query_clause_in_table_ref_aux2064 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_table_alias_in_table_ref_aux2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_join_clause2138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x03BC000000000000L});
    public static final BitSet FOLLOW_join_qualifier1_in_join_clause2149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x023C000000000000L});
    public static final BitSet FOLLOW_join_qualifier2_in_join_clause2152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_JOIN_in_join_clause2155 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000180000000L});
    public static final BitSet FOLLOW_table_ref_aux_in_join_clause2165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400200000010000L});
    public static final BitSet FOLLOW_query_partition_clause_in_join_clause2175 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_join_on_part_in_join_clause2187 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_join_using_part_in_join_clause2198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_set_in_join_qualifier10 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_join_qualifier22275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_type_in_join_qualifier22279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_on_key_in_join_on_part2299 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_condition_in_join_on_part2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_key_in_join_using_part2342 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_join_using_part2345 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_join_using_part2348 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_join_using_part2351 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_join_using_part2354 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_join_using_part2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_outer_join_type2384 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_OUTER_in_outer_join_type2427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partition_key_in_query_partition_clause2448 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_query_partition_clause2450 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_query_partition_clause2473 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_query_partition_clause2475 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_query_partition_clause2477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_query_partition_clause2493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_query_partition_clause2504 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_query_partition_clause2507 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_query_partition_clause2509 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_versions_key_in_flashback_query_clause2561 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_between_key_in_flashback_query_clause2563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_scn_key_in_flashback_query_clause2566 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_timestamp_key_in_flashback_query_clause2568 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_flashback_query_clause2571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_key_in_flashback_query_clause2601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_of_key_in_flashback_query_clause2603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_scn_key_in_flashback_query_clause2606 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_timestamp_key_in_flashback_query_clause2608 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_snapshot_key_in_flashback_query_clause2610 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_flashback_query_clause2613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pivot_key_in_pivot_clause2654 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_key_in_pivot_clause2656 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pivot_clause2667 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_pivot_element_in_pivot_clause2681 = new BitSet(new long[]{0x1000000000000000L,0x0100000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_COMMA_in_pivot_clause2684 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_pivot_element_in_pivot_clause2686 = new BitSet(new long[]{0x1000000000000000L,0x0100000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_pivot_for_clause_in_pivot_clause2702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_pivot_in_clause_in_pivot_clause2716 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pivot_clause2728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_function_name_in_pivot_element2772 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pivot_element2774 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_pivot_element2776 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pivot_element2778 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_pivot_element2780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_pivot_for_clause2842 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_pivot_for_clause2854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pivot_for_clause2865 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_pivot_for_clause2867 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pivot_for_clause2870 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_pivot_for_clause2872 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pivot_for_clause2876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_key_in_pivot_in_clause2927 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pivot_in_clause2937 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400100804205000L});
    public static final BitSet FOLLOW_subquery_in_pivot_in_clause2961 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_any_key_in_pivot_in_clause2987 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pivot_in_clause2990 = new BitSet(new long[]{0x0000000000000000L,0x0020000002400000L,0x0400000000000000L});
    public static final BitSet FOLLOW_any_key_in_pivot_in_clause2992 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause3015 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pivot_in_clause3018 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400100804205000L});
    public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause3020 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pivot_in_clause3046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3126 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_pivot_in_clause_element3128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_pivot_in_clause_elements3168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_pivot_in_clause_elements3192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unpivot_key_in_unpivot_clause3212 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_include_key_in_unpivot_clause3225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_exclude_key_in_unpivot_clause3227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nulls_key_in_unpivot_clause3230 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unpivot_clause3242 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_unpivot_clause3261 = new BitSet(new long[]{0x1000000000000000L,0x0100000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unpivot_clause3280 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_unpivot_clause3282 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unpivot_clause3285 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_unpivot_clause3287 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unpivot_clause3291 = new BitSet(new long[]{0x1000000000000000L,0x0100000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_pivot_for_clause_in_unpivot_clause3319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_unpivot_in_clause_in_unpivot_clause3333 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unpivot_clause3343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_key_in_unpivot_in_clause3393 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unpivot_in_clause3403 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_unpivot_in_elements_in_unpivot_in_clause3417 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unpivot_in_clause3420 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_unpivot_in_elements_in_unpivot_in_clause3422 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_unpivot_in_elements3479 = new BitSet(new long[]{0x00820C2000000032L,0x0040140004000000L,0x0400000800004000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unpivot_in_elements3494 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_unpivot_in_elements3496 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unpivot_in_elements3499 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_unpivot_in_elements3501 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3505 = new BitSet(new long[]{0x00820C2000000032L,0x0040140004000000L,0x0400000800004000L});
    public static final BitSet FOLLOW_as_key_in_unpivot_in_elements3530 = new BitSet(new long[]{0x00820C2000000030L,0x0040140000000000L,0x0400000800004000L});
    public static final BitSet FOLLOW_constant_in_unpivot_in_elements3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unpivot_in_elements3566 = new BitSet(new long[]{0x00020C2000000030L,0x0040140000000000L,0x0400000800004000L});
    public static final BitSet FOLLOW_constant_in_unpivot_in_elements3568 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unpivot_in_elements3571 = new BitSet(new long[]{0x00020C2000000030L,0x0040140000000000L,0x0400000800004000L});
    public static final BitSet FOLLOW_constant_in_unpivot_in_elements3573 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_connect_key_in_hierarchical_query_clause3638 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_hierarchical_query_clause3640 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_nocycle_key_in_hierarchical_query_clause3642 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_condition_in_hierarchical_query_clause3645 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause3647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause3689 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_connect_key_in_hierarchical_query_clause3691 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_hierarchical_query_clause3693 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_nocycle_key_in_hierarchical_query_clause3695 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_condition_in_hierarchical_query_clause3698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_key_in_start_part3747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_with_key_in_start_part3749 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_condition_in_start_part3751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_key_in_group_by_clause3797 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_group_by_clause3799 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_group_by_elements_in_group_by_clause3801 = new BitSet(new long[]{0x1000000000000002L,0x3000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_group_by_clause3811 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_group_by_elements_in_group_by_clause3813 = new BitSet(new long[]{0x1000000000000002L,0x3000000000000000L});
    public static final BitSet FOLLOW_having_clause_in_group_by_clause3817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_having_clause_in_group_by_clause3860 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_group_key_in_group_by_clause3863 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_group_by_clause3865 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_group_by_elements_in_group_by_clause3867 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_group_by_clause3877 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_group_by_elements_in_group_by_clause3879 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_clause_in_group_by_elements3927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_group_by_elements3938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_group_by_elements3950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_key_in_rollup_cube_clause3979 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_cube_key_in_rollup_cube_clause3982 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_rollup_cube_clause3986 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_grouping_sets_elements_in_rollup_cube_clause3989 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rollup_cube_clause3992 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_grouping_sets_elements_in_rollup_cube_clause3995 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_rollup_cube_clause3999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_key_in_grouping_sets_clause4021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_sets_key_in_grouping_sets_clause4023 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_grouping_sets_clause4034 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_grouping_sets_elements_in_grouping_sets_clause4036 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_grouping_sets_clause4039 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_grouping_sets_elements_in_grouping_sets_clause4041 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_grouping_sets_elements4093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_grouping_sets_elements4109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_grouping_sets_elements4120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_having_key_in_having_clause4148 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_condition_in_having_clause4150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_key_in_model_clause4190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_model_clause4192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_return_rows_clause_in_model_clause4195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_reference_model_in_model_clause4198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_main_model_in_model_clause4201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignore_key_in_cell_reference_options4247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_keep_key_in_cell_reference_options4250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nav_key_in_cell_reference_options4254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unique_key_in_cell_reference_options4265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_dimension_key_in_cell_reference_options4269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_key_in_cell_reference_options4271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_reference_key_in_cell_reference_options4273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_key_in_return_rows_clause4296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0400000000000000L});
    public static final BitSet FOLLOW_updated_key_in_return_rows_clause4300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_all_key_in_return_rows_clause4302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_rows_key_in_return_rows_clause4305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_key_in_reference_model4326 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_reference_model_name_in_reference_model4329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_on_key_in_reference_model4331 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_reference_model4347 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_reference_model4350 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_reference_model4352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_model_column_clauses_in_reference_model4355 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_reference_model4370 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_main_key_in_main_model4392 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_main_model_name_in_main_model4394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_model_column_clauses_in_main_model4398 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_main_model4400 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_model_rules_clause_in_main_model4403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_column_partition_part_in_model_column_clauses4447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_dimension_key_in_model_column_clauses4458 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_model_column_clauses4460 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_model_column_list_in_model_column_clauses4462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_measures_key_in_model_column_clauses4464 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_model_column_list_in_model_column_clauses4466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partition_key_in_model_column_partition_part4515 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_model_column_partition_part4518 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_model_column_list_in_model_column_partition_part4521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_model_column_list4541 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_model_column_in_model_column_list4543 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_model_column_list4546 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_model_column_in_model_column_list4548 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_model_column_list4553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_model_column4590 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_table_alias_in_model_column4592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_rules_part_in_model_rules_clause4636 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_model_rules_clause4639 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400004800205000L});
    public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause4641 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_model_rules_clause4644 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400004800205000L});
    public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause4646 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_model_rules_clause4650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rules_key_in_model_rules_part4690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400004000000000L});
    public static final BitSet FOLLOW_update_key_in_model_rules_part4693 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_upsert_key_in_model_rules_part4695 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L,0x0400000000000000L});
    public static final BitSet FOLLOW_all_key_in_model_rules_part4697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_automatic_key_in_model_rules_part4704 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_sequential_key_in_model_rules_part4706 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_order_key_in_model_rules_part4709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_model_iterate_clause_in_model_rules_part4713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_key_in_model_rules_element4767 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400004800205000L});
    public static final BitSet FOLLOW_upsert_key_in_model_rules_element4769 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400004800205000L});
    public static final BitSet FOLLOW_all_key_in_model_rules_element4777 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400004800205000L});
    public static final BitSet FOLLOW_cell_assignment_in_model_rules_element4791 = new BitSet(new long[]{0x0000000000000000L,0x0100000000008000L,0x0400000000080020L});
    public static final BitSet FOLLOW_order_by_clause_in_model_rules_element4809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_model_rules_element4824 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_model_rules_element4826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_expression_in_cell_assignment4885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterate_key_in_model_iterate_clause4905 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_model_iterate_clause4907 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_model_iterate_clause4909 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_model_iterate_clause4911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_until_part_in_model_iterate_clause4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_until_key_in_until_part4956 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_until_part4958 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_condition_in_until_part4960 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_until_part4962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_key_in_order_by_clause5002 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_siblings_key_in_order_by_clause5004 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_order_by_clause5007 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_order_by_elements_in_order_by_clause5009 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_order_by_clause5012 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_order_by_elements_in_order_by_clause5014 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_expression_in_order_by_elements5060 = new BitSet(new long[]{0x0000000000000002L,0x0000400008000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_asc_key_in_order_by_elements5063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_desc_key_in_order_by_elements5065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nulls_key_in_order_by_elements5070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_first_key_in_order_by_elements5073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_last_key_in_order_by_elements5075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_for_update_clause5133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_update_key_in_for_update_clause5135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x040000000000A000L});
    public static final BitSet FOLLOW_for_update_of_part_in_for_update_clause5137 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000002000L});
    public static final BitSet FOLLOW_for_update_options_in_for_update_clause5140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_of_key_in_for_update_of_part5181 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_for_update_of_part5184 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_for_update_of_part5187 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_for_update_of_part5190 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_skip_key_in_for_update_options5212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_locked_key_in_for_update_options5214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nowait_key_in_for_update_options5226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wait_key_in_for_update_options5237 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_for_update_options5239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_key_in_update_statement5273 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000180000000L});
    public static final BitSet FOLLOW_general_table_ref_in_update_statement5275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_update_set_clause_in_update_statement5285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400080000000000L});
    public static final BitSet FOLLOW_where_clause_in_update_statement5295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_static_returning_clause_in_update_statement5298 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_error_logging_clause_in_update_statement5301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_key_in_update_set_clause5352 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_based_update_set_clause_in_update_set_clause5363 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_update_set_clause5366 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_based_update_set_clause_in_update_set_clause5368 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_value_key_in_update_set_clause5383 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_update_set_clause5385 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_id_in_update_set_clause5387 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_update_set_clause5389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_update_set_clause5391 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_update_set_clause5393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_column_based_update_set_clause5463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_column_based_update_set_clause5465 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_column_based_update_set_clause5467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5493 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_column_based_update_set_clause5495 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_column_based_update_set_clause5498 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_column_based_update_set_clause5500 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_column_based_update_set_clause5506 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_column_based_update_set_clause5508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_key_in_delete_statement5542 = new BitSet(new long[]{0x0090000000000000L,0x0200000000040000L,0x0400000180000020L});
    public static final BitSet FOLLOW_from_key_in_delete_statement5544 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000180000000L});
    public static final BitSet FOLLOW_general_table_ref_in_delete_statement5555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400080000000000L});
    public static final BitSet FOLLOW_where_clause_in_delete_statement5565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_static_returning_clause_in_delete_statement5568 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_error_logging_clause_in_delete_statement5571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_key_in_insert_statement5611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_single_table_insert_in_insert_statement5622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_table_insert_in_insert_statement5641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_into_clause_in_single_table_insert5677 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000108004000000L});
    public static final BitSet FOLLOW_values_clause_in_single_table_insert5688 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_static_returning_clause_in_single_table_insert5690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_select_statement_in_single_table_insert5702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_error_logging_clause_in_single_table_insert5718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_multi_table_insert5777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_multi_table_element_in_multi_table_insert5779 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000020L});
    public static final BitSet FOLLOW_conditional_insert_clause_in_multi_table_insert5791 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_select_statement_in_multi_table_insert5807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_into_clause_in_multi_table_element5849 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400008000000000L});
    public static final BitSet FOLLOW_values_clause_in_multi_table_element5851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_error_logging_clause_in_multi_table_element5854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_conditional_insert_clause5898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_first_key_in_conditional_insert_clause5900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_conditional_insert_when_part_in_conditional_insert_clause5912 = new BitSet(new long[]{0x0000000000000002L,0x0002000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_conditional_insert_else_part_in_conditional_insert_clause5915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_conditional_insert_when_part5963 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_condition_in_conditional_insert_when_part5965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_then_key_in_conditional_insert_when_part5967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_when_part5969 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_else_key_in_conditional_insert_else_part6013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_else_part6016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_into_key_in_insert_into_clause6037 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000180000000L});
    public static final BitSet FOLLOW_general_table_ref_in_insert_into_clause6039 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_insert_into_clause6051 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_insert_into_clause6053 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_insert_into_clause6056 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_insert_into_clause6058 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_insert_into_clause6062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_values_key_in_values_clause6107 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_expression_list_in_values_clause6110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_key_in_merge_statement6131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_into_key_in_merge_statement6133 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_tableview_name_in_merge_statement6135 = new BitSet(new long[]{0x0092082000000000L,0x0000000004040000L,0x0400200000010000L});
    public static final BitSet FOLLOW_table_alias_in_merge_statement6137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_using_key_in_merge_statement6148 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_selected_tableview_in_merge_statement6150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_on_key_in_merge_statement6152 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_merge_statement6154 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_condition_in_merge_statement6156 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_merge_statement6158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_merge_update_clause_in_merge_statement6190 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement6192 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement6227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_merge_update_clause_in_merge_statement6229 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_error_logging_clause_in_merge_statement6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_merge_update_clause6331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_matched_key_in_merge_update_clause6333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_then_key_in_merge_update_clause6335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_update_key_in_merge_update_clause6337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_set_key_in_merge_update_clause6339 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_merge_element_in_merge_update_clause6350 = new BitSet(new long[]{0x1000000000000002L,0x0000200000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_merge_update_clause6353 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_merge_element_in_merge_update_clause6355 = new BitSet(new long[]{0x1000000000000002L,0x0000200000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_where_clause_in_merge_update_clause6367 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_merge_update_delete_part_in_merge_update_clause6370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_merge_element6413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_merge_element6415 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_merge_element6417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_key_in_merge_update_delete_part6460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_where_clause_in_merge_update_delete_part6463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_merge_insert_clause6483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_not_key_in_merge_insert_clause6485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_matched_key_in_merge_insert_clause6487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_then_key_in_merge_insert_clause6489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_insert_key_in_merge_insert_clause6491 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_merge_insert_clause6503 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_merge_insert_clause6505 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_merge_insert_clause6508 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_merge_insert_clause6510 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_merge_insert_clause6514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_values_key_in_merge_insert_clause6526 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_expression_list_in_merge_insert_clause6528 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_where_clause_in_merge_insert_clause6530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableview_name_in_selected_tableview6580 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_selected_tableview6584 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_select_statement_in_selected_tableview6586 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_selected_tableview6588 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_table_alias_in_selected_tableview6591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_key_in_lock_table_statement6637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_table_key_in_lock_table_statement6639 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement6650 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_lock_table_statement6653 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement6655 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_in_key_in_lock_table_statement6668 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L,0x0400000008000000L});
    public static final BitSet FOLLOW_lock_mode_in_lock_table_statement6670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_mode_key_in_lock_table_statement6672 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000002000L});
    public static final BitSet FOLLOW_wait_nowait_part_in_lock_table_statement6674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wait_key_in_wait_nowait_part6717 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_wait_nowait_part6719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nowait_key_in_wait_nowait_part6742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableview_name_in_lock_table_element6764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_partition_extension_clause_in_lock_table_element6766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_row_key_in_lock_mode6806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_share_key_in_lock_mode6808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_row_key_in_lock_mode6819 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L,0x0400000008000000L});
    public static final BitSet FOLLOW_exclusive_key_in_lock_mode6821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_share_key_in_lock_mode6832 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_update_key_in_lock_mode6834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_share_key_in_lock_mode6846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_row_key_in_lock_mode6848 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L,0x0400000008000000L});
    public static final BitSet FOLLOW_exclusive_key_in_lock_mode6850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exclusive_key_in_lock_mode6861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref6889 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_only_key_in_general_table_ref6904 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_general_table_ref6906 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000180000000L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref6908 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_general_table_ref6910 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_table_alias_in_general_table_ref6925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returning_key_in_static_returning_clause6969 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_return_key_in_static_returning_clause6971 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_static_returning_clause6974 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_COMMA_in_static_returning_clause6977 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_static_returning_clause6979 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_into_clause_in_static_returning_clause6992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_log_key_in_error_logging_clause7035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_errors_key_in_error_logging_clause7037 = new BitSet(new long[]{0x08920C2000000072L,0x0060962082440009L,0x0400000800205020L});
    public static final BitSet FOLLOW_error_logging_into_part_in_error_logging_clause7048 = new BitSet(new long[]{0x08920C2000000072L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_error_logging_clause7065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_error_logging_reject_part_in_error_logging_clause7077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_key_in_error_logging_into_part7121 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_tableview_name_in_error_logging_into_part7124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reject_key_in_error_logging_reject_part7144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_limit_key_in_error_logging_reject_part7147 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unlimited_key_in_error_logging_reject_part7155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_wrapper_in_error_logging_reject_part7157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_collection_expression_in_dml_table_expression_clause7178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7201 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_select_statement_in_dml_table_expression_clause7203 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7205 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableview_name_in_dml_table_expression_clause7234 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_sample_clause_in_dml_table_expression_clause7236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_key_in_table_collection_expression7274 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_the_key_in_table_collection_expression7278 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_table_collection_expression7306 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_table_collection_expression7308 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_table_collection_expression7310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_table_collection_expression7323 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_table_collection_expression7325 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_table_collection_expression7327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_subquery_restriction_clause7380 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_read_key_in_subquery_restriction_clause7391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_only_key_in_subquery_restriction_clause7393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_check_key_in_subquery_restriction_clause7404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_option_key_in_subquery_restriction_clause7406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_constraint_key_in_subquery_restriction_clause7409 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_constraint_name_in_subquery_restriction_clause7411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_key_in_sample_clause7462 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_block_key_in_sample_clause7464 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_sample_clause7476 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_sample_clause7480 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_sample_clause7483 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_sample_clause7487 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_sample_clause7491 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_seed_part_in_sample_clause7501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_seed_key_in_seed_part7557 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_seed_part7559 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_seed_part7561 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_seed_part7563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_key_in_cursor_expression7606 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cursor_expression7608 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_cursor_expression7610 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cursor_expression7612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_expression_list7632 = new BitSet(new long[]{0x19920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_expression_list7634 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expression_list7638 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_expression_list7640 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_expression_list7644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_condition7686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_condition_wrapper7706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_expression_in_expression7756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_and_expression_in_expression7767 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_or_key_in_expression7771 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_logical_and_expression_in_expression7774 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_expression_in_expression_wrapper7797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_negated_expression_in_logical_and_expression7833 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_and_key_in_logical_and_expression7837 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_negated_expression_in_logical_and_expression7840 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_not_key_in_negated_expression7863 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_negated_expression_in_negated_expression7866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equality_expression_in_negated_expression7877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiset_expression_in_equality_expression7906 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_is_key_in_equality_expression7922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x040000000000D000L});
    public static final BitSet FOLLOW_not_key_in_equality_expression7925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x040000000000C000L});
    public static final BitSet FOLLOW_null_key_in_equality_expression7944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_nan_key_in_equality_expression8011 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_present_key_in_equality_expression8078 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_infinite_key_in_equality_expression8145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_a_key_in_equality_expression8212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_set_key_in_equality_expression8214 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_empty_key_in_equality_expression8281 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_of_key_in_equality_expression8348 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_key_in_equality_expression8350 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_equality_expression8353 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_only_key_in_equality_expression8355 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_equality_expression8358 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_equality_expression8361 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_equality_expression8363 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_equality_expression8367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_relational_expression_in_multiset_expression8464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_multiset_type_in_multiset_expression8480 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x040000080020D000L});
    public static final BitSet FOLLOW_of_key_in_multiset_expression8482 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_in_multiset_expression8485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_key_in_multiset_type8530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_submultiset_key_in_multiset_type8541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_expression_in_relational_expression8561 = new BitSet(new long[]{0x0000000000000002L,0x0000000000009BE0L});
    public static final BitSet FOLLOW_EQUALS_OP_in_relational_expression8571 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_not_equal_op_in_relational_expression8576 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_LESS_THAN_OP_in_relational_expression8581 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_GREATER_THAN_OP_in_relational_expression8586 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_less_than_or_equals_op_in_relational_expression8591 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_greater_than_or_equals_op_in_relational_expression8596 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_compound_expression_in_relational_expression8601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000009BE0L});
    public static final BitSet FOLLOW_concatenation_in_compound_expression8632 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L,0x0400000000001081L});
    public static final BitSet FOLLOW_not_key_in_compound_expression8649 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0400000000001081L});
    public static final BitSet FOLLOW_in_key_in_compound_expression8669 = new BitSet(new long[]{0x00920C2000000030L,0x0040140000040009L,0x0400000800004000L});
    public static final BitSet FOLLOW_in_elements_in_compound_expression8671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_between_key_in_compound_expression8742 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_between_elements_in_compound_expression8744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like_type_in_compound_expression8815 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_in_compound_expression8817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_like_escape_part_in_compound_expression8819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like_key_in_like_type8928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_likec_key_in_like_type8939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like2_key_in_like_type8950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like4_key_in_like_type8961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escape_key_in_like_escape_part8981 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_in_like_escape_part8983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_in_elements9041 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_in_elements9043 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_in_elements9045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_in_elements9069 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_in_elements9071 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_in_elements9074 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_in_elements9076 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_in_elements9080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_in_elements9109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind_variable_in_in_elements9137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_element_in_in_elements9165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenation_in_between_elements9204 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_and_key_in_between_elements9206 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_in_between_elements9210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additive_expression_in_concatenation9255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_concatenation_op_in_concatenation9258 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_additive_expression_in_concatenation9261 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_concatenation_in_concatenation_wrapper9283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_special_function_in_additive_expression9318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiply_expression_in_additive_expression9332 = new BitSet(new long[]{0x0800000000000042L});
    public static final BitSet FOLLOW_PLUS_SIGN_in_additive_expression9338 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_additive_expression9343 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_multiply_expression_in_additive_expression9348 = new BitSet(new long[]{0x0800000000000042L});
    public static final BitSet FOLLOW_sysdate_interval_key_in_special_function9365 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_CHAR_STRING_in_special_function9367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_REGULAR_ID_in_special_function9369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datetime_expression_in_multiply_expression9387 = new BitSet(new long[]{0x2400000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_multiply_expression9393 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_SOLIDUS_in_multiply_expression9398 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_datetime_expression_in_multiply_expression9403 = new BitSet(new long[]{0x2400000000000002L});
    public static final BitSet FOLLOW_model_expression_in_datetime_expression9426 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_at_key_in_datetime_expression9442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_local_key_in_datetime_expression9445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_time_key_in_datetime_expression9447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_zone_key_in_datetime_expression9449 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_datetime_expression9451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_expression_in_datetime_expression9501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_day_key_in_interval_expression9551 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_interval_expression9557 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_interval_expression9561 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_interval_expression9563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_to_key_in_interval_expression9567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_second_key_in_interval_expression9569 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_interval_expression9572 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_interval_expression9576 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_interval_expression9578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_year_key_in_interval_expression9615 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_interval_expression9618 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_interval_expression9620 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_interval_expression9622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_to_key_in_interval_expression9626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_month_key_in_interval_expression9628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_model_expression9667 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_model_expression9683 = new BitSet(new long[]{0x08920C2000000070L,0x0160962082440009L,0x0400000800205020L});
    public static final BitSet FOLLOW_model_expression_element_in_model_expression9685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_model_expression9687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_any_key_in_model_expression_element9739 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_condition_wrapper_in_model_expression_element9741 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_model_expression_element9745 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_any_key_in_model_expression_element9754 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_condition_wrapper_in_model_expression_element9756 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_single_column_for_loop_in_model_expression_element9770 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_model_expression_element9773 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_single_column_for_loop_in_model_expression_element9776 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_multi_column_for_loop_in_model_expression_element9789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_single_column_for_loop9817 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_single_column_for_loop9819 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x04000000000000A1L});
    public static final BitSet FOLLOW_in_key_in_single_column_for_loop9831 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_expression_list_in_single_column_for_loop9833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_like_part_in_single_column_for_loop9846 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_from_key_in_single_column_for_loop9849 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_single_column_for_loop9853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_to_key_in_single_column_for_loop9867 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_single_column_for_loop9871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_for_increment_decrement_type_in_single_column_for_loop9873 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_single_column_for_loop9877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like_key_in_for_like_part9986 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_for_like_part9988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_key_in_for_increment_decrement_type10028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decrement_key_in_for_increment_decrement_type10039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_multi_column_for_loop10059 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_multi_column_for_loop10061 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_multi_column_for_loop10063 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_multi_column_for_loop10066 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_name_in_multi_column_for_loop10068 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_in_key_in_multi_column_for_loop10074 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_multi_column_for_loop10084 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_multi_column_for_loop10108 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_multi_column_for_loop10132 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_expression_list_in_multi_column_for_loop10134 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_multi_column_for_loop10137 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_expression_list_in_multi_column_for_loop10139 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10143 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_unary_expression10224 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_SIGN_in_unary_expression10246 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prior_key_in_unary_expression10268 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_connect_by_root_key_in_unary_expression10282 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_unary_expression10299 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_key_in_unary_expression10313 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_unary_expression10327 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_unary_expression10343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantified_expression_in_unary_expression10355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standard_function_in_unary_expression10366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_unary_expression10385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_searched_case_statement_in_case_statement10432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_in_case_statement10443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_simple_case_statement10465 = new BitSet(new long[]{0x0010000000000000L,0x0000000080040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_case_key_in_simple_case_statement10470 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_atom_in_simple_case_statement10472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_simple_case_when_part_in_simple_case_statement10482 = new BitSet(new long[]{0x0000000000000000L,0x0006000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_case_else_part_in_simple_case_statement10494 = new BitSet(new long[]{0x0000000000000000L,0x0006000000000000L});
    public static final BitSet FOLLOW_end_key_in_simple_case_statement10505 = new BitSet(new long[]{0x0010000000000002L,0x0000000080040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_case_key_in_simple_case_statement10507 = new BitSet(new long[]{0x0010000000000002L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_label_name_in_simple_case_statement10510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_simple_case_when_part10563 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_simple_case_when_part10568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_then_key_in_simple_case_when_part10570 = new BitSet(new long[]{0x08920C2000000070L,0x0060B62082440009L,0x0400104804205108L});
    public static final BitSet FOLLOW_seq_of_statements_in_simple_case_when_part10576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_wrapper_in_simple_case_when_part10582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_searched_case_statement10603 = new BitSet(new long[]{0x0010000000000000L,0x0000000080040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_case_key_in_searched_case_statement10608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_searched_case_when_part_in_searched_case_statement10618 = new BitSet(new long[]{0x0000000000000000L,0x0006000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_case_else_part_in_searched_case_statement10629 = new BitSet(new long[]{0x0000000000000000L,0x0006000000000000L});
    public static final BitSet FOLLOW_end_key_in_searched_case_statement10640 = new BitSet(new long[]{0x0010000000000002L,0x0000000080040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_case_key_in_searched_case_statement10642 = new BitSet(new long[]{0x0010000000000002L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_label_name_in_searched_case_statement10645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_searched_case_when_part10691 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_condition_wrapper_in_searched_case_when_part10694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_then_key_in_searched_case_when_part10696 = new BitSet(new long[]{0x08920C2000000070L,0x0060B62082440009L,0x0400104804205108L});
    public static final BitSet FOLLOW_seq_of_statements_in_searched_case_when_part10702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_wrapper_in_searched_case_when_part10706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_key_in_case_else_part10727 = new BitSet(new long[]{0x08920C2000000070L,0x0060B62082440009L,0x0400104804205108L});
    public static final BitSet FOLLOW_seq_of_statements_in_case_else_part10733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_wrapper_in_case_else_part10737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_element_in_atom10776 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_outer_join_sign_in_atom10778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind_variable_in_atom10789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_atom10800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_element_in_atom10811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_atom10822 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400100804205000L});
    public static final BitSet FOLLOW_subquery_in_atom10860 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_atom10862 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000210L});
    public static final BitSet FOLLOW_subquery_operation_part_in_atom10865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000210L});
    public static final BitSet FOLLOW_expression_or_vector_in_atom10884 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_atom10886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_or_vector10926 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_vector_expr_in_expression_or_vector10929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_vector_expr10989 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_vector_expr10991 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_vector_expr10994 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_vector_expr10996 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_some_key_in_quantified_expression11037 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_exists_key_in_quantified_expression11042 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_all_key_in_quantified_expression11047 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_any_key_in_quantified_expression11052 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_quantified_expression11080 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_quantified_expression11083 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_quantified_expression11085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_quantified_expression11101 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_quantified_expression11104 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_quantified_expression11106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_enabling_over_in_standard_function11138 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_function_argument_in_standard_function11141 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_enabling_using_in_standard_function11155 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_function_argument_in_standard_function11158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_using_clause_in_standard_function11160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_count_key_in_standard_function11172 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11187 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_ASTERISK_in_standard_function11208 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_distinct_key_in_standard_function11213 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unique_key_in_standard_function11215 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_all_key_in_standard_function11217 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11221 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_key_in_standard_function11253 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_xmlcast_key_in_standard_function11256 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11273 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_multiset_key_in_standard_function11309 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11312 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_standard_function11315 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11317 = new BitSet(new long[]{0x0080000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11339 = new BitSet(new long[]{0x0080000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_as_key_in_standard_function11375 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_standard_function11378 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_chr_key_in_standard_function11404 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11419 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_using_key_in_standard_function11441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nchar_cs_key_in_standard_function11444 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collect_key_in_standard_function11471 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11486 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_distinct_key_in_standard_function11507 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unique_key_in_standard_function11509 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11513 = new BitSet(new long[]{0x0100000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_collect_order_by_part_in_standard_function11515 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_enabling_within_or_over_in_standard_function11542 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_function_argument_in_standard_function11558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_within_or_over_part_in_standard_function11560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_decompose_key_in_standard_function11572 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11587 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11607 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_canonical_key_in_standard_function11610 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_compatibility_key_in_standard_function11612 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extract_key_in_standard_function11641 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_REGULAR_ID_in_standard_function11675 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_from_key_in_standard_function11677 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11680 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_first_value_key_in_standard_function11708 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_last_value_key_in_standard_function11711 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11728 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11747 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_ignore_key_in_standard_function11750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nulls_key_in_standard_function11753 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_first_value_key_in_standard_function11785 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_last_value_key_in_standard_function11788 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_function_argument_analytic_in_standard_function11805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_respect_or_ignore_nulls_in_standard_function11820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_pedictions_in_standard_function11834 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11849 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function11868 = new BitSet(new long[]{0x1100000000000000L,0x0000000000000000L,0x0400200000010000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function11871 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function11873 = new BitSet(new long[]{0x1100000000000000L,0x0000000000000000L,0x0400200000010000L});
    public static final BitSet FOLLOW_cost_matrix_clause_in_standard_function11877 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_using_clause_in_standard_function11880 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_translate_key_in_standard_function11908 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11923 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function11943 = new BitSet(new long[]{0x1100000000000000L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_using_key_in_standard_function11946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_char_cs_key_in_standard_function11950 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_nchar_cs_key_in_standard_function11952 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function11979 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function11981 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_treat_key_in_standard_function12010 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12025 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function12044 = new BitSet(new long[]{0x0080000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_as_key_in_standard_function12046 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_ref_key_in_standard_function12049 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_standard_function12052 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trim_key_in_standard_function12079 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12094 = new BitSet(new long[]{0x08920C2000000070L,0x0260962082440009L,0x0400000800205020L});
    public static final BitSet FOLLOW_leading_key_in_standard_function12115 = new BitSet(new long[]{0x0002082000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_trailing_key_in_standard_function12117 = new BitSet(new long[]{0x0002082000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_both_key_in_standard_function12119 = new BitSet(new long[]{0x0002082000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_quoted_string_in_standard_function12123 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_from_key_in_standard_function12126 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12146 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlagg_key_in_standard_function12172 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12187 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function12207 = new BitSet(new long[]{0x0100000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_order_by_clause_in_standard_function12209 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12225 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12241 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlcolattval_key_in_standard_function12257 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_xmlforest_key_in_standard_function12260 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12277 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function12296 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function12299 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function12302 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12318 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12334 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlelement_key_in_standard_function12349 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12364 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_entityescaping_key_in_standard_function12384 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_noentityescaping_key_in_standard_function12386 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_name_key_in_standard_function12407 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_evalname_key_in_standard_function12409 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function12413 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function12434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_attributes_clause_in_standard_function12437 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function12458 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function12461 = new BitSet(new long[]{0x1192082000000000L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_standard_function12463 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12480 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12496 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlexists_key_in_standard_function12511 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12526 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function12545 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12563 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlparse_key_in_standard_function12590 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_document_key_in_standard_function12626 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_content_key_in_standard_function12628 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12631 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_wellformed_key_in_standard_function12633 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12648 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12664 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlpi_key_in_standard_function12679 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_name_key_in_standard_function12719 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_id_in_standard_function12721 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_evalname_key_in_standard_function12744 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12746 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function12783 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12786 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12802 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12818 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlquery_key_in_standard_function12833 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12848 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_returning_key_in_standard_function12889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_content_key_in_standard_function12892 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_null_key_in_standard_function12896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_on_key_in_standard_function12898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_empty_key_in_standard_function12901 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12918 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12934 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlroot_key_in_standard_function12949 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12964 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlroot_param_version_part_in_standard_function13005 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function13028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_standard_function13031 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function13047 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function13063 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function13065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlserialize_key_in_standard_function13078 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function13093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_document_key_in_standard_function13113 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_content_key_in_standard_function13115 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function13134 = new BitSet(new long[]{0x0180000000000000L,0x0000000004000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_as_key_in_standard_function13137 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_standard_function13140 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_standard_function13160 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlserialize_param_version_part_in_standard_function13179 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_standard_function13198 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_hide_key_in_standard_function13219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_show_key_in_standard_function13221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_defaults_key_in_standard_function13224 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function13240 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function13256 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function13258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmltable_key_in_standard_function13271 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function13286 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_xml_namespaces_clause_in_standard_function13305 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function13324 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_passing_clause_in_standard_function13342 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_columns_key_in_standard_function13362 = new BitSet(new long[]{0x0012082000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_table_column_in_standard_function13365 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function13368 = new BitSet(new long[]{0x0012082000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_table_column_in_standard_function13371 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function13388 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function13404 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function13406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_stantard_function_enabling_over13431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_stantard_function_enabling_using13459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over13487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_stantard_function_pedictions13515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_over_key_in_over_clause13540 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_over_clause13551 = new BitSet(new long[]{0x0100000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_query_partition_clause_in_over_clause13566 = new BitSet(new long[]{0x0100000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_order_by_clause_in_over_clause13582 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_windowing_clause_in_over_clause13584 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_over_clause13597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowing_type_in_windowing_clause13626 = new BitSet(new long[]{0x08920C2000000070L,0x00609720A2440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_between_key_in_windowing_clause13637 = new BitSet(new long[]{0x08920C2000000070L,0x00609720A2440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_windowing_elements_in_windowing_clause13639 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_and_key_in_windowing_clause13641 = new BitSet(new long[]{0x08920C2000000070L,0x00609720A2440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_windowing_elements_in_windowing_clause13643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowing_elements_in_windowing_clause13656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rows_key_in_windowing_type13715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_key_in_windowing_type13726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unbounded_key_in_windowing_elements13746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_preceding_key_in_windowing_elements13749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_current_key_in_windowing_elements13760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_row_key_in_windowing_elements13763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_windowing_elements13774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_preceding_key_in_windowing_elements13777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_following_key_in_windowing_elements13780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_key_in_using_clause13802 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205001L});
    public static final BitSet FOLLOW_ASTERISK_in_using_clause13814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_element_in_using_clause13825 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_using_clause13828 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205001L});
    public static final BitSet FOLLOW_using_element_in_using_clause13831 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_in_key_in_using_element13860 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_out_key_in_using_element13862 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_out_key_in_using_element13865 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_select_list_elements_in_using_element13869 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_using_element13871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_key_in_collect_order_by_part13917 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_collect_order_by_part13920 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_collect_order_by_part13923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_within_key_in_within_or_over_part13943 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_group_key_in_within_or_over_part13946 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_within_or_over_part13949 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_order_by_clause_in_within_or_over_part13952 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_within_or_over_part13954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_over_clause_in_within_or_over_part13966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cost_key_in_cost_matrix_clause13986 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_model_key_in_cost_matrix_clause13998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_auto_key_in_cost_matrix_clause14000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cost_matrix_clause14012 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause14015 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_cost_matrix_clause14018 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause14021 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_values_key_in_cost_matrix_clause14028 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_expression_list_in_cost_matrix_clause14044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_passing_key_in_xml_passing_clause14070 = new BitSet(new long[]{0x08920C2000000070L,0x00609620C2440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_by_key_in_xml_passing_clause14074 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_value_key_in_xml_passing_clause14077 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_xml_passing_clause14093 = new BitSet(new long[]{0x1092082000000000L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_xml_passing_clause14095 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_xml_passing_clause14099 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_xml_passing_clause14102 = new BitSet(new long[]{0x0092082000000002L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_xml_passing_clause14104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlattributes_key_in_xml_attributes_clause14126 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_xml_attributes_clause14137 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_entityescaping_key_in_xml_attributes_clause14153 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_noentityescaping_key_in_xml_attributes_clause14155 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_schemacheck_key_in_xml_attributes_clause14172 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_noschemacheck_key_in_xml_attributes_clause14174 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14190 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_xml_attributes_clause14193 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14196 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14229 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14240 = new BitSet(new long[]{0x19920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14256 = new BitSet(new long[]{0x0092082000000000L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_xml_namespaces_clause14258 = new BitSet(new long[]{0x11020C2000000030L,0x0040140000000000L,0x0400000800004000L});
    public static final BitSet FOLLOW_COMMA_in_xml_namespaces_clause14279 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14282 = new BitSet(new long[]{0x0092082000000000L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_xml_namespaces_clause14284 = new BitSet(new long[]{0x11020C2000000030L,0x0040140000000000L,0x0400000800004000L});
    public static final BitSet FOLLOW_xml_general_default_part_in_xml_namespaces_clause14306 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xml_column_name_in_xml_table_column14339 = new BitSet(new long[]{0x0010000000000000L,0x0100040000040000L,0x0400000000000020L});
    public static final BitSet FOLLOW_for_key_in_xml_table_column14350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_ordinality_key_in_xml_table_column14352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_in_xml_table_column14363 = new BitSet(new long[]{0x00020C2000000032L,0x0040140000000000L,0x0400000800004000L});
    public static final BitSet FOLLOW_path_key_in_xml_table_column14366 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xml_table_column14368 = new BitSet(new long[]{0x00020C2000000032L,0x0040140000000000L,0x0400000800004000L});
    public static final BitSet FOLLOW_xml_general_default_part_in_xml_table_column14378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_xml_general_default_part14434 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xml_general_default_part14437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_xml_multiuse_expression_element14465 = new BitSet(new long[]{0x0080000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_as_key_in_xml_multiuse_expression_element14468 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_id_expression_in_xml_multiuse_expression_element14471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalname_key_in_xml_multiuse_expression_element14475 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_in_xml_multiuse_expression_element14477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_version_key_in_xmlroot_param_version_part14588 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_no_key_in_xmlroot_param_version_part14592 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_value_key_in_xmlroot_param_version_part14594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_wrapper_in_xmlroot_param_version_part14596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standalone_key_in_xmlroot_param_standalone_part14617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_yes_key_in_xmlroot_param_standalone_part14621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_key_in_xmlroot_param_standalone_part14623 = new BitSet(new long[]{0x0090000000000002L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_value_key_in_xmlroot_param_standalone_part14625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_encoding_key_in_xmlserialize_param_enconding_part14647 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part14650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_version_key_in_xmlserialize_param_version_part14670 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part14673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_key_in_xmlserialize_param_ident_part14693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_indent_key_in_xmlserialize_param_ident_part14695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indent_key_in_xmlserialize_param_ident_part14706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_size_key_in_xmlserialize_param_ident_part14710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part14713 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part14716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_statement_in_synpred6_OracleParser738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_key_in_synpred7_OracleParser783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_statement_id_key_in_synpred7_OracleParser785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_synpred7_OracleParser787 = new BitSet(new long[]{0x0002082000000000L});
    public static final BitSet FOLLOW_quoted_string_in_synpred7_OracleParser789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_siblings_key_in_synpred15_OracleParser971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_key_in_synpred16_OracleParser969 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_siblings_key_in_synpred16_OracleParser971 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_synpred16_OracleParser974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_depth_key_in_synpred23_OracleParser1158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nulls_key_in_synpred26_OracleParser1194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_first_key_in_synpred26_OracleParser1196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nulls_key_in_synpred27_OracleParser1201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_last_key_in_synpred27_OracleParser1203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nulls_key_in_synpred30_OracleParser1234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_first_key_in_synpred30_OracleParser1236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nulls_key_in_synpred31_OracleParser1241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_last_key_in_synpred31_OracleParser1243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_key_in_synpred41_OracleParser1460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unique_key_in_synpred41_OracleParser1462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_synpred41_OracleParser1464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_synpred47_OracleParser1532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_synpred48_OracleParser1544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_by_clause_in_synpred49_OracleParser1556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_clause_in_synpred50_OracleParser1567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableview_name_in_synpred52_OracleParser1796 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_PERIOD_in_synpred52_OracleParser1798 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_synpred52_OracleParser1800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred53_OracleParser1865 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000180000000L});
    public static final BitSet FOLLOW_table_ref_in_synpred53_OracleParser1868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_synpred54_OracleParser1896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pivot_clause_in_synpred55_OracleParser1900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unpivot_clause_in_synpred56_OracleParser1902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred58_OracleParser1956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_select_key_in_synpred58_OracleParser1959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred58_OracleParser1961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pivot_clause_in_synpred59_OracleParser1970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unpivot_clause_in_synpred60_OracleParser1972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred61_OracleParser1986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pivot_clause_in_synpred63_OracleParser2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unpivot_clause_in_synpred64_OracleParser2003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_only_key_in_synpred65_OracleParser2017 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred65_OracleParser2019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pivot_clause_in_synpred66_OracleParser2044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unpivot_clause_in_synpred67_OracleParser2046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flashback_query_clause_in_synpred68_OracleParser2064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_alias_in_synpred69_OracleParser2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_synpred70_OracleParser2138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_synpred73_OracleParser2175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_on_part_in_synpred74_OracleParser2187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_using_part_in_synpred75_OracleParser2198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred83_OracleParser2462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_select_key_in_synpred83_OracleParser2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred83_OracleParser2467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred84_OracleParser2489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred85_OracleParser2507 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_synpred85_OracleParser2509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scn_key_in_synpred86_OracleParser2566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_versions_key_in_synpred87_OracleParser2561 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_between_key_in_synpred87_OracleParser2563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_scn_key_in_synpred87_OracleParser2566 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_timestamp_key_in_synpred87_OracleParser2568 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_synpred87_OracleParser2571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scn_key_in_synpred88_OracleParser2606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestamp_key_in_synpred89_OracleParser2608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xml_key_in_synpred90_OracleParser2656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_key_in_synpred95_OracleParser2957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_any_key_in_synpred96_OracleParser2983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred100_OracleParser3168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred101_OracleParser3188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_include_key_in_synpred102_OracleParser3225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_include_key_in_synpred103_OracleParser3225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_exclude_key_in_synpred103_OracleParser3227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nulls_key_in_synpred103_OracleParser3230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_synpred110_OracleParser3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred111_OracleParser3562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nocycle_key_in_synpred114_OracleParser3642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_part_in_synpred115_OracleParser3647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nocycle_key_in_synpred117_OracleParser3695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_key_in_synpred118_OracleParser3792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred119_OracleParser3805 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_group_by_elements_in_synpred119_OracleParser3807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_having_clause_in_synpred120_OracleParser3817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_having_key_in_synpred121_OracleParser3855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred122_OracleParser3871 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_group_by_elements_in_synpred122_OracleParser3873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_key_in_synpred123_OracleParser3863 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_by_key_in_synpred123_OracleParser3865 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_group_by_elements_in_synpred123_OracleParser3867 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred123_OracleParser3877 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_group_by_elements_in_synpred123_OracleParser3879 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_clause_in_synpred124_OracleParser3927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_synpred125_OracleParser3938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_key_in_synpred126_OracleParser3979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_key_in_synpred129_OracleParser4087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_key_in_synpred130_OracleParser4087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cube_key_in_synpred130_OracleParser4089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred131_OracleParser4105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_reference_options_in_synpred132_OracleParser4192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_model_in_synpred134_OracleParser4198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignore_key_in_synpred135_OracleParser4247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignore_key_in_synpred136_OracleParser4247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_keep_key_in_synpred136_OracleParser4250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nav_key_in_synpred136_OracleParser4254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dimension_key_in_synpred137_OracleParser4269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_updated_key_in_synpred138_OracleParser4300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_reference_options_in_synpred139_OracleParser4370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_main_key_in_synpred140_OracleParser4392 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_main_model_name_in_synpred140_OracleParser4394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_reference_options_in_synpred141_OracleParser4400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_column_partition_part_in_synpred142_OracleParser4447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_rules_part_in_synpred145_OracleParser4636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_upsert_key_in_synpred149_OracleParser4695 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_all_key_in_synpred149_OracleParser4697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_automatic_key_in_synpred150_OracleParser4704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_automatic_key_in_synpred151_OracleParser4704 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_sequential_key_in_synpred151_OracleParser4706 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_order_key_in_synpred151_OracleParser4709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_iterate_clause_in_synpred152_OracleParser4713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_synpred154_OracleParser4773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_upsert_key_in_synpred155_OracleParser4769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_all_key_in_synpred155_OracleParser4777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_until_part_in_synpred157_OracleParser4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_siblings_key_in_synpred158_OracleParser5004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_first_key_in_synpred162_OracleParser5073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nulls_key_in_synpred163_OracleParser5070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_first_key_in_synpred163_OracleParser5073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_last_key_in_synpred163_OracleParser5075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_update_options_in_synpred165_OracleParser5140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skip_key_in_synpred167_OracleParser5212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_locked_key_in_synpred167_OracleParser5214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_returning_clause_in_synpred170_OracleParser5298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_error_logging_clause_in_synpred171_OracleParser5301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_returning_clause_in_synpred178_OracleParser5568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_error_logging_clause_in_synpred179_OracleParser5571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_returning_clause_in_synpred181_OracleParser5690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_error_logging_clause_in_synpred183_OracleParser5718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_error_logging_clause_in_synpred187_OracleParser5854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_first_key_in_synpred189_OracleParser5900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_synpred197_OracleParser6183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_matched_key_in_synpred197_OracleParser6185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_synpred199_OracleParser6218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_not_key_in_synpred199_OracleParser6220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_matched_key_in_synpred199_OracleParser6222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_error_logging_clause_in_synpred201_OracleParser6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wait_key_in_synpred212_OracleParser6717 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_in_synpred212_OracleParser6719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partition_extension_clause_in_synpred213_OracleParser6766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_synpred219_OracleParser6889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_alias_in_synpred220_OracleParser6925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returning_key_in_synpred221_OracleParser6969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_error_logging_into_part_in_synpred223_OracleParser7048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred224_OracleParser7061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_error_logging_reject_part_in_synpred225_OracleParser7077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unlimited_key_in_synpred226_OracleParser7152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_synpred230_OracleParser7236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred233_OracleParser7293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_select_key_in_synpred233_OracleParser7296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred233_OracleParser7300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_read_key_in_synpred234_OracleParser7391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_only_key_in_synpred234_OracleParser7393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_key_in_synpred235_OracleParser7409 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_constraint_name_in_synpred235_OracleParser7411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_key_in_synpred236_OracleParser7464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_seed_part_in_synpred238_OracleParser7501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_key_in_synpred242_OracleParser7743 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred242_OracleParser7745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_select_key_in_synpred242_OracleParser7748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred242_OracleParser7750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_key_in_synpred243_OracleParser7771 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_logical_and_expression_in_synpred243_OracleParser7774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred244_OracleParser7837 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_negated_expression_in_synpred244_OracleParser7840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nan_key_in_synpred248_OracleParser8011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_present_key_in_synpred249_OracleParser8078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infinite_key_in_synpred250_OracleParser8145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_key_in_synpred251_OracleParser8212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_set_key_in_synpred251_OracleParser8214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_empty_key_in_synpred252_OracleParser8281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_key_in_synpred253_OracleParser8350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_only_key_in_synpred254_OracleParser8355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_is_key_in_synpred256_OracleParser7922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x040000000000D000L});
    public static final BitSet FOLLOW_not_key_in_synpred256_OracleParser7925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x040000000000C000L});
    public static final BitSet FOLLOW_null_key_in_synpred256_OracleParser7944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nan_key_in_synpred256_OracleParser8011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_present_key_in_synpred256_OracleParser8078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infinite_key_in_synpred256_OracleParser8145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_key_in_synpred256_OracleParser8212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_set_key_in_synpred256_OracleParser8214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_empty_key_in_synpred256_OracleParser8281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_of_key_in_synpred256_OracleParser8348 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_key_in_synpred256_OracleParser8350 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred256_OracleParser8353 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_only_key_in_synpred256_OracleParser8355 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_synpred256_OracleParser8358 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred256_OracleParser8361 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_synpred256_OracleParser8363 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred256_OracleParser8367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiset_type_in_synpred258_OracleParser8480 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x040000080020D000L});
    public static final BitSet FOLLOW_of_key_in_synpred258_OracleParser8482 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_in_synpred258_OracleParser8485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_key_in_synpred259_OracleParser8530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_OP_in_synpred265_OracleParser8571 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_not_equal_op_in_synpred265_OracleParser8576 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_LESS_THAN_OP_in_synpred265_OracleParser8581 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_GREATER_THAN_OP_in_synpred265_OracleParser8586 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_less_than_or_equals_op_in_synpred265_OracleParser8591 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_greater_than_or_equals_op_in_synpred265_OracleParser8596 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_compound_expression_in_synpred265_OracleParser8601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like_escape_part_in_synpred269_OracleParser8819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_synpred270_OracleParser8649 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0400000000001081L});
    public static final BitSet FOLLOW_in_key_in_synpred270_OracleParser8669 = new BitSet(new long[]{0x00920C2000000030L,0x0040140000040009L,0x0400000800004000L});
    public static final BitSet FOLLOW_in_elements_in_synpred270_OracleParser8671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_between_key_in_synpred270_OracleParser8742 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_between_elements_in_synpred270_OracleParser8744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like_type_in_synpred270_OracleParser8815 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_in_synpred270_OracleParser8817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_like_escape_part_in_synpred270_OracleParser8819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_likec_key_in_synpred272_OracleParser8939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like2_key_in_synpred273_OracleParser8950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred276_OracleParser9028 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_select_key_in_synpred276_OracleParser9032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred276_OracleParser9034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred278_OracleParser9069 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred278_OracleParser9071 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred278_OracleParser9074 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred278_OracleParser9076 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred278_OracleParser9080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_synpred279_OracleParser9109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenation_op_in_synpred281_OracleParser9258 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_additive_expression_in_synpred281_OracleParser9261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_special_function_in_synpred282_OracleParser9318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred284_OracleParser9336 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_multiply_expression_in_synpred284_OracleParser9348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred286_OracleParser9391 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_datetime_expression_in_synpred286_OracleParser9403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_key_in_synpred287_OracleParser9445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_key_in_synpred288_OracleParser9442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_local_key_in_synpred288_OracleParser9445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_time_key_in_synpred288_OracleParser9447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_zone_key_in_synpred288_OracleParser9449 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred288_OracleParser9451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_expression_in_synpred289_OracleParser9497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred291_OracleParser9572 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred291_OracleParser9576 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred291_OracleParser9578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_day_key_in_synpred292_OracleParser9551 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred292_OracleParser9557 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred292_OracleParser9561 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred292_OracleParser9563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_to_key_in_synpred292_OracleParser9567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_second_key_in_synpred292_OracleParser9569 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred292_OracleParser9572 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred292_OracleParser9576 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred292_OracleParser9578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_synpred294_OracleParser9683 = new BitSet(new long[]{0x08920C2000000070L,0x0160962082440009L,0x0400000800205020L});
    public static final BitSet FOLLOW_model_expression_element_in_synpred294_OracleParser9685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_synpred294_OracleParser9687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_any_key_in_synpred295_OracleParser9735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_any_key_in_synpred296_OracleParser9750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_key_in_synpred303_OracleParser10028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_key_in_synpred305_OracleParser10104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred306_OracleParser10128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_synpred312_OracleParser10299 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unary_expression_in_synpred312_OracleParser10302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_synpred314_OracleParser10327 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unary_expression_in_synpred314_OracleParser10330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_synpred315_OracleParser10343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantified_expression_in_synpred316_OracleParser10355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standard_function_in_synpred317_OracleParser10366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_synpred319_OracleParser10423 = new BitSet(new long[]{0x0010000000000000L,0x0000000080040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_case_key_in_synpred319_OracleParser10426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0400040000000020L});
    public static final BitSet FOLLOW_when_key_in_synpred319_OracleParser10428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_synpred324_OracleParser10510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_seq_of_statements_in_synpred325_OracleParser10576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_synpred330_OracleParser10645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_seq_of_statements_in_synpred331_OracleParser10702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_seq_of_statements_in_synpred332_OracleParser10733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_element_in_synpred333_OracleParser10769 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred333_OracleParser10771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_synpred335_OracleParser10800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_element_in_synpred336_OracleParser10811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_key_in_synpred338_OracleParser10852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred338_OracleParser10856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_operation_part_in_synpred339_OracleParser10865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred346_OracleParser11069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_select_key_in_synpred346_OracleParser11072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred346_OracleParser11074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_over_clause_in_synpred347_OracleParser11143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_enabling_over_in_synpred348_OracleParser11138 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_function_argument_in_synpred348_OracleParser11141 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_over_clause_in_synpred348_OracleParser11143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_clause_in_synpred349_OracleParser11160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_enabling_using_in_synpred350_OracleParser11155 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_function_argument_in_synpred350_OracleParser11158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_using_clause_in_synpred350_OracleParser11160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_key_in_synpred352_OracleParser11213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_synpred354_OracleParser11217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_over_clause_in_synpred355_OracleParser11240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_count_key_in_synpred356_OracleParser11172 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred356_OracleParser11187 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_ASTERISK_in_synpred356_OracleParser11208 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_distinct_key_in_synpred356_OracleParser11213 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unique_key_in_synpred356_OracleParser11215 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_all_key_in_synpred356_OracleParser11217 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred356_OracleParser11221 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred356_OracleParser11237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_over_clause_in_synpred356_OracleParser11240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_key_in_synpred357_OracleParser11253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiset_key_in_synpred359_OracleParser11295 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred359_OracleParser11297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_select_key_in_synpred359_OracleParser11300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred359_OracleParser11302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_key_in_synpred360_OracleParser11253 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_xmlcast_key_in_synpred360_OracleParser11256 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred360_OracleParser11273 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_multiset_key_in_synpred360_OracleParser11309 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred360_OracleParser11312 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000100004000000L});
    public static final BitSet FOLLOW_subquery_in_synpred360_OracleParser11315 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred360_OracleParser11317 = new BitSet(new long[]{0x0080000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred360_OracleParser11339 = new BitSet(new long[]{0x0080000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_as_key_in_synpred360_OracleParser11375 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_synpred360_OracleParser11378 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred360_OracleParser11392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_chr_key_in_synpred361_OracleParser11404 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred361_OracleParser11419 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred361_OracleParser11439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_using_key_in_synpred361_OracleParser11441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nchar_cs_key_in_synpred361_OracleParser11444 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred361_OracleParser11459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_key_in_synpred362_OracleParser11507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collect_key_in_synpred365_OracleParser11471 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred365_OracleParser11486 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400002800205000L});
    public static final BitSet FOLLOW_distinct_key_in_synpred365_OracleParser11507 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_unique_key_in_synpred365_OracleParser11509 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred365_OracleParser11513 = new BitSet(new long[]{0x0100000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_collect_order_by_part_in_synpred365_OracleParser11515 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred365_OracleParser11530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_within_or_over_part_in_synpred366_OracleParser11560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_enabling_within_or_over_in_synpred367_OracleParser11542 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_function_argument_in_synpred367_OracleParser11558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_within_or_over_part_in_synpred367_OracleParser11560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_canonical_key_in_synpred368_OracleParser11610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compatibility_key_in_synpred369_OracleParser11612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decompose_key_in_synpred370_OracleParser11572 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred370_OracleParser11587 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred370_OracleParser11607 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_canonical_key_in_synpred370_OracleParser11610 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_compatibility_key_in_synpred370_OracleParser11612 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred370_OracleParser11629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extract_key_in_synpred371_OracleParser11641 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred371_OracleParser11656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_REGULAR_ID_in_synpred371_OracleParser11675 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_from_key_in_synpred371_OracleParser11677 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred371_OracleParser11680 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred371_OracleParser11695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_first_value_key_in_synpred372_OracleParser11708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignore_key_in_synpred373_OracleParser11750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nulls_key_in_synpred373_OracleParser11753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_first_value_key_in_synpred374_OracleParser11708 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_last_value_key_in_synpred374_OracleParser11711 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred374_OracleParser11728 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred374_OracleParser11747 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_ignore_key_in_synpred374_OracleParser11750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nulls_key_in_synpred374_OracleParser11753 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred374_OracleParser11770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_over_clause_in_synpred374_OracleParser11773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_first_value_key_in_synpred375_OracleParser11785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_respect_or_ignore_nulls_in_synpred376_OracleParser11820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_first_value_key_in_synpred377_OracleParser11785 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_last_value_key_in_synpred377_OracleParser11788 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_function_argument_analytic_in_synpred377_OracleParser11805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_respect_or_ignore_nulls_in_synpred377_OracleParser11820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_over_clause_in_synpred377_OracleParser11823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cost_matrix_clause_in_synpred379_OracleParser11877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_pedictions_in_synpred381_OracleParser11834 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred381_OracleParser11849 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_synpred381_OracleParser11868 = new BitSet(new long[]{0x1100000000000000L,0x0000000000000000L,0x0400200000010000L});
    public static final BitSet FOLLOW_COMMA_in_synpred381_OracleParser11871 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_synpred381_OracleParser11873 = new BitSet(new long[]{0x1100000000000000L,0x0000000000000000L,0x0400200000010000L});
    public static final BitSet FOLLOW_cost_matrix_clause_in_synpred381_OracleParser11877 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_using_clause_in_synpred381_OracleParser11880 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred381_OracleParser11896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_cs_key_in_synpred382_OracleParser11950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_translate_key_in_synpred385_OracleParser11908 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred385_OracleParser11923 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_synpred385_OracleParser11943 = new BitSet(new long[]{0x1100000000000000L,0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_using_key_in_synpred385_OracleParser11946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_char_cs_key_in_synpred385_OracleParser11950 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_nchar_cs_key_in_synpred385_OracleParser11952 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred385_OracleParser11979 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_synpred385_OracleParser11981 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred385_OracleParser11998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ref_key_in_synpred386_OracleParser12049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_treat_key_in_synpred387_OracleParser12010 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred387_OracleParser12025 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_synpred387_OracleParser12044 = new BitSet(new long[]{0x0080000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_as_key_in_synpred387_OracleParser12046 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_ref_key_in_synpred387_OracleParser12049 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_synpred387_OracleParser12052 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred387_OracleParser12067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_leading_key_in_synpred388_OracleParser12115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trailing_key_in_synpred389_OracleParser12117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_both_key_in_synpred390_OracleParser12119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trim_key_in_synpred393_OracleParser12079 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred393_OracleParser12094 = new BitSet(new long[]{0x08920C2000000070L,0x0260962082440009L,0x0400000800205020L});
    public static final BitSet FOLLOW_leading_key_in_synpred393_OracleParser12115 = new BitSet(new long[]{0x0002082000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_trailing_key_in_synpred393_OracleParser12117 = new BitSet(new long[]{0x0002082000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_both_key_in_synpred393_OracleParser12119 = new BitSet(new long[]{0x0002082000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_quoted_string_in_synpred393_OracleParser12123 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0400000000000020L});
    public static final BitSet FOLLOW_from_key_in_synpred393_OracleParser12126 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred393_OracleParser12146 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred393_OracleParser12160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlagg_key_in_synpred396_OracleParser12172 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred396_OracleParser12187 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_synpred396_OracleParser12207 = new BitSet(new long[]{0x0100000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_order_by_clause_in_synpred396_OracleParser12209 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred396_OracleParser12225 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_synpred396_OracleParser12241 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_synpred396_OracleParser12243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlcolattval_key_in_synpred397_OracleParser12257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlcolattval_key_in_synpred400_OracleParser12257 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_xmlforest_key_in_synpred400_OracleParser12260 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred400_OracleParser12277 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_synpred400_OracleParser12296 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred400_OracleParser12299 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_synpred400_OracleParser12302 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred400_OracleParser12318 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_synpred400_OracleParser12334 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_synpred400_OracleParser12336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entityescaping_key_in_synpred401_OracleParser12384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noentityescaping_key_in_synpred402_OracleParser12386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_key_in_synpred403_OracleParser12407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalname_key_in_synpred404_OracleParser12409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred405_OracleParser12434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_attributes_clause_in_synpred405_OracleParser12437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlelement_key_in_synpred409_OracleParser12349 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred409_OracleParser12364 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_entityescaping_key_in_synpred409_OracleParser12384 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_noentityescaping_key_in_synpred409_OracleParser12386 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_name_key_in_synpred409_OracleParser12407 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_evalname_key_in_synpred409_OracleParser12409 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_synpred409_OracleParser12413 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred409_OracleParser12434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_attributes_clause_in_synpred409_OracleParser12437 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred409_OracleParser12458 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_synpred409_OracleParser12461 = new BitSet(new long[]{0x1192082000000000L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_synpred409_OracleParser12463 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred409_OracleParser12480 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_synpred409_OracleParser12496 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_synpred409_OracleParser12498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xml_passing_clause_in_synpred410_OracleParser12563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlexists_key_in_synpred411_OracleParser12511 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred411_OracleParser12526 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_expression_wrapper_in_synpred411_OracleParser12545 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_passing_clause_in_synpred411_OracleParser12563 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred411_OracleParser12578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_document_key_in_synpred412_OracleParser12626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wellformed_key_in_synpred413_OracleParser12633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlparse_key_in_synpred415_OracleParser12590 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred415_OracleParser12605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_document_key_in_synpred415_OracleParser12626 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_content_key_in_synpred415_OracleParser12628 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred415_OracleParser12631 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_wellformed_key_in_synpred415_OracleParser12633 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred415_OracleParser12648 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_synpred415_OracleParser12664 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_synpred415_OracleParser12666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_key_in_synpred416_OracleParser12719 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_id_in_synpred416_OracleParser12721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlpi_key_in_synpred419_OracleParser12679 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred419_OracleParser12694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_name_key_in_synpred419_OracleParser12719 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_id_in_synpred419_OracleParser12721 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_evalname_key_in_synpred419_OracleParser12744 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred419_OracleParser12746 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred419_OracleParser12783 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred419_OracleParser12786 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred419_OracleParser12802 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_synpred419_OracleParser12818 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_synpred419_OracleParser12820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xml_passing_clause_in_synpred420_OracleParser12870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlquery_key_in_synpred423_OracleParser12833 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred423_OracleParser12848 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred423_OracleParser12868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_passing_clause_in_synpred423_OracleParser12870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_returning_key_in_synpred423_OracleParser12889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_content_key_in_synpred423_OracleParser12892 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_null_key_in_synpred423_OracleParser12896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_on_key_in_synpred423_OracleParser12898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_empty_key_in_synpred423_OracleParser12901 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred423_OracleParser12918 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_synpred423_OracleParser12934 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_synpred423_OracleParser12936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlroot_key_in_synpred426_OracleParser12949 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred426_OracleParser12964 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred426_OracleParser12983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlroot_param_version_part_in_synpred426_OracleParser13005 = new BitSet(new long[]{0x1100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred426_OracleParser13028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_synpred426_OracleParser13031 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred426_OracleParser13047 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_synpred426_OracleParser13063 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_synpred426_OracleParser13065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_document_key_in_synpred427_OracleParser13113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_synpred429_OracleParser13160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlserialize_param_version_part_in_synpred430_OracleParser13179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_synpred431_OracleParser13198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hide_key_in_synpred432_OracleParser13219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hide_key_in_synpred433_OracleParser13219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_show_key_in_synpred433_OracleParser13221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_defaults_key_in_synpred433_OracleParser13224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlserialize_key_in_synpred435_OracleParser13078 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred435_OracleParser13093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_document_key_in_synpred435_OracleParser13113 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_content_key_in_synpred435_OracleParser13115 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred435_OracleParser13134 = new BitSet(new long[]{0x0180000000000000L,0x0000000004000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_as_key_in_synpred435_OracleParser13137 = new BitSet(new long[]{0x0010000000000000L,0x0000040000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_synpred435_OracleParser13140 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_synpred435_OracleParser13160 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlserialize_param_version_part_in_synpred435_OracleParser13179 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_synpred435_OracleParser13198 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_hide_key_in_synpred435_OracleParser13219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_show_key_in_synpred435_OracleParser13221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_defaults_key_in_synpred435_OracleParser13224 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred435_OracleParser13240 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_PERIOD_in_synpred435_OracleParser13256 = new BitSet(new long[]{0x0010000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_general_element_part_in_synpred435_OracleParser13258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xml_namespaces_clause_in_synpred436_OracleParser13305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xml_passing_clause_in_synpred437_OracleParser13342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columns_key_in_synpred438_OracleParser13362 = new BitSet(new long[]{0x0012082000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_table_column_in_synpred438_OracleParser13365 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred438_OracleParser13368 = new BitSet(new long[]{0x0012082000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_table_column_in_synpred438_OracleParser13371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_synpred440_OracleParser13566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowing_clause_in_synpred441_OracleParser13584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rows_key_in_synpred444_OracleParser13715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unbounded_key_in_synpred445_OracleParser13746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_preceding_key_in_synpred445_OracleParser13749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preceding_key_in_synpred447_OracleParser13777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred449_OracleParser13828 = new BitSet(new long[]{0x0C920C2000000070L,0x0060962082440009L,0x0400002800205001L});
    public static final BitSet FOLLOW_using_element_in_synpred449_OracleParser13831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_out_key_in_synpred450_OracleParser13862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_out_key_in_synpred452_OracleParser13865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_alias_in_synpred453_OracleParser13871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_within_key_in_synpred454_OracleParser13943 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_group_key_in_synpred454_OracleParser13946 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred454_OracleParser13949 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0400000000080020L});
    public static final BitSet FOLLOW_order_by_clause_in_synpred454_OracleParser13952 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred454_OracleParser13954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_key_in_synpred455_OracleParser14000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_alias_in_synpred460_OracleParser14104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entityescaping_key_in_synpred461_OracleParser14153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noentityescaping_key_in_synpred462_OracleParser14155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemacheck_key_in_synpred463_OracleParser14172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noschemacheck_key_in_synpred464_OracleParser14174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred466_OracleParser14256 = new BitSet(new long[]{0x0092082000000000L,0x0000000004040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_column_alias_in_synpred466_OracleParser14258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_synpred468_OracleParser14302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_key_in_synpred470_OracleParser14366 = new BitSet(new long[]{0x08920C2000000070L,0x0060962082440009L,0x0400000800205000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_synpred470_OracleParser14368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_synpred471_OracleParser14374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_key_in_synpred474_OracleParser14592 = new BitSet(new long[]{0x0090000000000000L,0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_value_key_in_synpred474_OracleParser14594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yes_key_in_synpred475_OracleParser14621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_key_in_synpred477_OracleParser14693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_indent_key_in_synpred477_OracleParser14695 = new BitSet(new long[]{0x0000000000000002L});

}